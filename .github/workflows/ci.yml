name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run ESLint
      run: pnpm run lint

    - name: Run TypeScript compiler check
      run: pnpm exec tsc --project src/config/typescript/tsconfig.ci.json --noEmit

    - name: Check for duplicate components
      run: pnpm run check-duplicates

  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run unit tests with coverage
      run: pnpm run test:coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
      if: always()

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        lcov-file: ./coverage/lcov.info
        github-token: ${{ secrets.GITHUB_TOKEN }}
        title: Unit Test Coverage Report

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run integration tests
      run: pnpm run test:integration
      env:
        CI: true  # Skip real API tests in CI

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: test-results/
      if: always()

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build Next.js app
      run: pnpm run build
      env:
        NEXT_PUBLIC_STOCKFISH_PATH: /stockfish/

    - name: Check build output
      run: |
        echo "Build completed successfully"
        if [ -d ".next" ]; then
          echo "Found .next directory"
          ls -la .next/
        else
          echo "Warning: .next directory not found"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: .next/
        retention-days: 1
      if: success() && hashFiles('.next/**') != ''

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test, integration-test, build]
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Install Playwright Browsers
      run: pnpm exec playwright install --with-deps chromium firefox webkit

    - name: Run Playwright tests
      run: pnpm run test:e2e
      env:
        PLAYWRIGHT_JUNIT_OUTPUT_NAME: results.xml

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7

    - name: Upload test videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-videos
        path: test-results/
        retention-days: 3

  quality-gates:
    name: Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, integration-test, build, e2e]
    if: always()
    
    steps:
    - name: Check job statuses
      run: |
        echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.lint-and-typecheck.result }}" == "success" ]; then
          echo "✅ Lint & Type Check: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Lint & Type Check: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration-test.result }}" == "success" ]; then
          echo "✅ Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ Build: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Build: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.e2e.result }}" == "success" ]; then
          echo "✅ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Set final status
      if: |
        needs.lint-and-typecheck.result == 'failure' ||
        needs.test.result == 'failure' ||
        needs.integration-test.result == 'failure' ||
        needs.build.result == 'failure' ||
        needs.e2e.result == 'failure'
      run: |
        echo "❌ Quality gates failed. Please fix the issues before merging."
        exit 1