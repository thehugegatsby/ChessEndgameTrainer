name: CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual deployment

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run unit tests
      run: pnpm test -- --testPathIgnorePatterns="firebase"
    
    - name: Run integration tests
      run: pnpm run test:integration
      env:
        CI: true  # Skip real API tests in CI

    - name: Build application
      run: pnpm run build
      env:
        # Add any production environment variables here
        NEXT_PUBLIC_STOCKFISH_PATH: /stockfish/

    # Vercel deployment removed - configure VERCEL_TOKEN, VERCEL_ORG_ID, and VERCEL_PROJECT_ID secrets to enable

  post-build-checks:
    name: Post-Build Checks
    runs-on: ubuntu-latest
    needs: [build-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run smoke tests
      run: |
        # Add smoke test commands here
        echo "Running smoke tests against production..."
        # Example: pnpm run test:smoke -- --url=${{ secrets.PRODUCTION_URL }}

    # Health check removed - configure PRODUCTION_URL secret to enable

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-test]
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for changelog

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --oneline --no-merges -10)
        else
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-merges)
        fi
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        echo "$COMMITS" | sed 's/^/- /' >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/commits/main
        draft: false
        prerelease: false
        generate_release_notes: true