/** @type {import('eslint').Linter.FlatConfig[]} */

const { FlatCompat } = require("@eslint/eslintrc");
const jsdocPlugin = require("eslint-plugin-jsdoc").default;

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

module.exports = [
  // Global ignores - Single source of truth for ignored files
  {
    ignores: [
      "poc/**/*", // Ignore the entire poc directory
      ".next/**/*", // Standard Next.js ignore
      "dist/**/*", // Build output
      "build/**/*", // Build output
      "node_modules/**/*", // Always a good practice
      ".eslintcache", // Cache files
    ],
  },

  // Extend Next.js config
  ...compat.extends("next/core-web-vitals"),

  // FIRST: Allow require() in the ESLint config file itself
  {
    files: ["src/config/eslint.config.js"],
    rules: {
      "@typescript-eslint/no-require-imports": "off",
      "no-console": "off"
    }
  },

  // Global rules with JSDoc plugin
  {
    plugins: {
      jsdoc: jsdocPlugin,
    },
    rules: {
      // JSDoc rules (warnings for gradual improvement)
      "jsdoc/require-jsdoc": [
        "warn",
        {
          require: {
            FunctionDeclaration: true,
            MethodDefinition: true,
            ClassDeclaration: false,
            ArrowFunctionExpression: true,
            FunctionExpression: true,
          },
          contexts: [
            "TSEnumDeclaration",
            "TSInterfaceDeclaration",
            "TSTypeAliasDeclaration",
            // Only enforce for exported functions
            "ExportNamedDeclaration > FunctionDeclaration",
            "ExportNamedDeclaration > VariableDeclaration",
            "ExportDefaultDeclaration > FunctionDeclaration",
          ],
          checkConstructors: false,
        },
      ],
      "jsdoc/require-param": "warn",
      "jsdoc/require-param-description": "warn",
      "jsdoc/require-returns": ["warn", { checkGetters: false }],
      "jsdoc/require-returns-description": "warn",
      "jsdoc/no-types": "error", // No types in JSDoc for TypeScript
      "jsdoc/check-param-names": "warn",
      "jsdoc/check-alignment": "warn",
      "jsdoc/check-tag-names": "warn",
      // Prevent console.log in production code - use Logger service instead
      "no-console": "error",
    },
  },

  // Scripts and utilities - Allow console and disable JSDoc requirements
  {
    // REMOVED poc/**/*.js and poc/**/*.ts - they are globally ignored above
    files: [
      "scripts/**/*.js",
      "scripts/**/*.ts",
      "config/**/*.js",
      "config/**/*.ts", 
      "src/config/**/*.js",  // ← Config files in src/config/
      "src/config/**/*.ts",
      "src/config/jest/**/*.js",  // ← Jest config files
      "src/config/jest/**/*.ts",
      "src/config/playwright/**/*.js", // ← Playwright config files
      "src/config/playwright/**/*.ts",
      "src/shared/services/logging/Logger.ts", // Logger service needs console access
      "src/shared/services/container/ServiceContainer.ts", // ServiceContainer needs require
      "src/shared/store/slices/progressSlice.ts", // Progress slice needs require for supermemo
    ],
    rules: {
      "no-console": "off", // Scripts need console output
      "@typescript-eslint/no-require-imports": "off", // Config files need CommonJS
      "jsdoc/require-jsdoc": "off",
      "jsdoc/require-param": "off",
      "jsdoc/require-param-description": "off",
      "jsdoc/require-returns": "off",
      "jsdoc/require-returns-description": "off",
    },
  },

  // Test files - Allow console calls and relaxed JSDoc
  {
    files: [
      "tests/**/*.ts",
      "tests/**/*.tsx", 
      "tests/**/*.js",
      "tests/**/*.jsx",
      "src/tests/**/*.ts",
      "src/tests/**/*.tsx",
      "src/tests/**/*.js", 
      "src/tests/**/*.jsx",
    ],
    rules: {
      "no-console": "off", // Allow console in all test files for debugging
      "jsdoc/require-param-description": "off", // Test utilities don't need full descriptions
      "jsdoc/require-returns-description": "off",
    },
  },

  // Next.js pages and app router files - disable redundant JSDoc rules
  {
    files: ["pages/**/*.tsx", "pages/**/*.ts", "app/**/*.tsx", "app/**/*.ts"],
    rules: {
      // These components are framework-defined entry points.
      // JSDoc on props and return values is often redundant.
      "jsdoc/require-jsdoc": "off",
      "jsdoc/require-param-description": "off",
      "jsdoc/require-returns": "off",
      "jsdoc/require-returns-description": "off",
    },
  },
];