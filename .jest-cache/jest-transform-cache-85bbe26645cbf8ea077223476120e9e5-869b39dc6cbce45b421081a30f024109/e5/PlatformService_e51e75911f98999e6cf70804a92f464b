3681e70ae3590192c77da20b01b57b87
/**
 * @file Platform Service Factory
 * @module services/platform/PlatformService
 *
 * @description
 * Provides the correct platform implementation based on the environment.
 * Supports web, mobile (React Native), and desktop platforms with
 * automatic detection and appropriate service instantiation.
 *
 * @remarks
 * The platform service abstracts platform-specific functionality like:
 * - Storage (localStorage, AsyncStorage, etc.)
 * - Navigation (browser history, React Navigation, etc.)
 * - Device capabilities (touch, screen size, etc.)
 * - Platform-specific APIs
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get getPlatformDetection () {
        return getPlatformDetection;
    },
    get getPlatformService () {
        return getPlatformService;
    },
    get resetPlatformService () {
        return resetPlatformService;
    }
});
const _WebPlatformService = require("./web/WebPlatformService");
const _logging = require("../logging");
_export_star(require("./types"), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
/**
 * Platform detection implementation
 *
 * @class PlatformDetection
 * @implements {IPlatformDetection}
 *
 * @description
 * Provides methods to detect the current platform and device type.
 * Uses user agent analysis and platform-specific APIs for detection.
 */ class PlatformDetection {
    /**
   * Detects if running in a web browser environment
   *
   * @returns {boolean} True if running in a browser
   *
   * @example
   * ```typescript
   * if (platformDetection.isWeb()) {
   *   // Use browser-specific features
   * }
   * ```
   */ isWeb() {
        return typeof window !== "undefined" && typeof document !== "undefined";
    }
    /**
   * Detects if running on a mobile device
   *
   * @returns {boolean} True if mobile device or React Native
   *
   * @remarks
   * Checks for React Native environment first, then falls back
   * to user agent detection for mobile browsers.
   *
   * @example
   * ```typescript
   * if (platformDetection.isMobile()) {
   *   // Enable touch controls
   * }
   * ```
   */ isMobile() {
        if (typeof window === "undefined") return false;
        // Check for React Native
        if (window.ReactNativeWebView) return true;
        // Check for mobile user agents
        const userAgent = navigator.userAgent.toLowerCase();
        return /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent);
    }
    isAndroid() {
        if (typeof window === "undefined") return false;
        const userAgent = navigator.userAgent.toLowerCase();
        return userAgent.includes("android") || window.isAndroid === true;
    }
    isIOS() {
        if (typeof window === "undefined") return false;
        const userAgent = navigator.userAgent.toLowerCase();
        return /iphone|ipad|ipod/.test(userAgent) || window.isIOS === true;
    }
    isDesktop() {
        return this.isWeb() && !this.isMobile();
    }
    isTouchDevice() {
        if (typeof window === "undefined") return false;
        return "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
    }
    isStandalone() {
        if (typeof window === "undefined") return false;
        // Check if running as PWA
        return window.matchMedia("(display-mode: standalone)").matches || window.navigator.standalone === true || document.referrer.includes("android-app://");
    }
}
// Singleton instance
let platformServiceInstance = null;
let platformDetectionInstance = null;
function getPlatformService() {
    if (!platformServiceInstance) {
        const detection = getPlatformDetection();
        if (detection.isWeb() && !detection.isMobile()) {
            // Web browser implementation
            platformServiceInstance = new _WebPlatformService.WebPlatformService();
        } else if (detection.isAndroid() || detection.isIOS()) {
            // Mobile implementation (to be implemented)
            // For now, fallback to web implementation
            platformServiceInstance = new _WebPlatformService.WebPlatformService();
            const logger = (0, _logging.getLogger)();
            logger.warn("Using Web implementation for mobile platform");
        } else {
            // Default to web implementation
            platformServiceInstance = new _WebPlatformService.WebPlatformService();
        }
    }
    return platformServiceInstance;
}
function getPlatformDetection() {
    if (!platformDetectionInstance) {
        platformDetectionInstance = new PlatformDetection();
    }
    return platformDetectionInstance;
}
function resetPlatformService() {
    platformServiceInstance = null;
}

//# sourceMappingURL=data:application/json;base64,