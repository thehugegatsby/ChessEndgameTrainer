{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/platform/PlatformService.ts"],"sourcesContent":["/**\n * @file Platform Service Factory\n * @module services/platform/PlatformService\n *\n * @description\n * Provides the correct platform implementation based on the environment.\n * Supports web, mobile (React Native), and desktop platforms with\n * automatic detection and appropriate service instantiation.\n *\n * @remarks\n * The platform service abstracts platform-specific functionality like:\n * - Storage (localStorage, AsyncStorage, etc.)\n * - Navigation (browser history, React Navigation, etc.)\n * - Device capabilities (touch, screen size, etc.)\n * - Platform-specific APIs\n */\n\nimport { IPlatformService, IPlatformDetection } from \"./types\";\nimport { WebPlatformService } from \"./web/WebPlatformService\";\nimport { getLogger } from \"@shared/services/logging\";\n\n/**\n * Platform detection implementation\n *\n * @class PlatformDetection\n * @implements {IPlatformDetection}\n *\n * @description\n * Provides methods to detect the current platform and device type.\n * Uses user agent analysis and platform-specific APIs for detection.\n */\nclass PlatformDetection implements IPlatformDetection {\n  /**\n   * Detects if running in a web browser environment\n   *\n   * @returns {boolean} True if running in a browser\n   *\n   * @example\n   * ```typescript\n   * if (platformDetection.isWeb()) {\n   *   // Use browser-specific features\n   * }\n   * ```\n   */\n  isWeb(): boolean {\n    return typeof window !== \"undefined\" && typeof document !== \"undefined\";\n  }\n\n  /**\n   * Detects if running on a mobile device\n   *\n   * @returns {boolean} True if mobile device or React Native\n   *\n   * @remarks\n   * Checks for React Native environment first, then falls back\n   * to user agent detection for mobile browsers.\n   *\n   * @example\n   * ```typescript\n   * if (platformDetection.isMobile()) {\n   *   // Enable touch controls\n   * }\n   * ```\n   */\n  isMobile(): boolean {\n    if (typeof window === \"undefined\") return false;\n\n    // Check for React Native\n    if ((window as any).ReactNativeWebView) return true;\n\n    // Check for mobile user agents\n    const userAgent = navigator.userAgent.toLowerCase();\n    return /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(\n      userAgent,\n    );\n  }\n\n  isAndroid(): boolean {\n    if (typeof window === \"undefined\") return false;\n\n    const userAgent = navigator.userAgent.toLowerCase();\n    return userAgent.includes(\"android\") || (window as any).isAndroid === true;\n  }\n\n  isIOS(): boolean {\n    if (typeof window === \"undefined\") return false;\n\n    const userAgent = navigator.userAgent.toLowerCase();\n    return /iphone|ipad|ipod/.test(userAgent) || (window as any).isIOS === true;\n  }\n\n  isDesktop(): boolean {\n    return this.isWeb() && !this.isMobile();\n  }\n\n  isTouchDevice(): boolean {\n    if (typeof window === \"undefined\") return false;\n\n    return (\n      \"ontouchstart\" in window ||\n      navigator.maxTouchPoints > 0 ||\n      (navigator as any).msMaxTouchPoints > 0\n    );\n  }\n\n  isStandalone(): boolean {\n    if (typeof window === \"undefined\") return false;\n\n    // Check if running as PWA\n    return (\n      window.matchMedia(\"(display-mode: standalone)\").matches ||\n      (window.navigator as any).standalone === true ||\n      document.referrer.includes(\"android-app://\")\n    );\n  }\n}\n\n// Singleton instance\nlet platformServiceInstance: IPlatformService | null = null;\nlet platformDetectionInstance: IPlatformDetection | null = null;\n\n/**\n * Get the platform service instance\n * This will return the appropriate implementation based on the platform\n */\nexport function getPlatformService(): IPlatformService {\n  if (!platformServiceInstance) {\n    const detection = getPlatformDetection();\n\n    if (detection.isWeb() && !detection.isMobile()) {\n      // Web browser implementation\n      platformServiceInstance = new WebPlatformService();\n    } else if (detection.isAndroid() || detection.isIOS()) {\n      // Mobile implementation (to be implemented)\n      // For now, fallback to web implementation\n      platformServiceInstance = new WebPlatformService();\n      const logger = getLogger();\n      logger.warn(\"Using Web implementation for mobile platform\");\n    } else {\n      // Default to web implementation\n      platformServiceInstance = new WebPlatformService();\n    }\n  }\n\n  return platformServiceInstance;\n}\n\n/**\n * Get the platform detection instance\n */\nexport function getPlatformDetection(): IPlatformDetection {\n  if (!platformDetectionInstance) {\n    platformDetectionInstance = new PlatformDetection();\n  }\n  return platformDetectionInstance;\n}\n\n/**\n * Reset platform service (useful for testing)\n */\nexport function resetPlatformService(): void {\n  platformServiceInstance = null;\n}\n\n// Export types for convenience\nexport * from \"./types\";\n"],"names":["getPlatformDetection","getPlatformService","resetPlatformService","PlatformDetection","isWeb","window","document","isMobile","ReactNativeWebView","userAgent","navigator","toLowerCase","test","isAndroid","includes","isIOS","isDesktop","isTouchDevice","maxTouchPoints","msMaxTouchPoints","isStandalone","matchMedia","matches","standalone","referrer","platformServiceInstance","platformDetectionInstance","detection","WebPlatformService","logger","getLogger","warn"],"mappings":"AAAA;;;;;;;;;;;;;;;CAeC;;;;;;;;;;;QAuIeA;eAAAA;;QAzBAC;eAAAA;;QAmCAC;eAAAA;;;oCA9ImB;yBACT;qBAkJZ;;;;;;;;;;;;;;AAhJd;;;;;;;;;CASC,GACD,MAAMC;IACJ;;;;;;;;;;;GAWC,GACDC,QAAiB;QACf,OAAO,OAAOC,WAAW,eAAe,OAAOC,aAAa;IAC9D;IAEA;;;;;;;;;;;;;;;GAeC,GACDC,WAAoB;QAClB,IAAI,OAAOF,WAAW,aAAa,OAAO;QAE1C,yBAAyB;QACzB,IAAI,AAACA,OAAeG,kBAAkB,EAAE,OAAO;QAE/C,+BAA+B;QAC/B,MAAMC,YAAYC,UAAUD,SAAS,CAACE,WAAW;QACjD,OAAO,iEAAiEC,IAAI,CAC1EH;IAEJ;IAEAI,YAAqB;QACnB,IAAI,OAAOR,WAAW,aAAa,OAAO;QAE1C,MAAMI,YAAYC,UAAUD,SAAS,CAACE,WAAW;QACjD,OAAOF,UAAUK,QAAQ,CAAC,cAAc,AAACT,OAAeQ,SAAS,KAAK;IACxE;IAEAE,QAAiB;QACf,IAAI,OAAOV,WAAW,aAAa,OAAO;QAE1C,MAAMI,YAAYC,UAAUD,SAAS,CAACE,WAAW;QACjD,OAAO,mBAAmBC,IAAI,CAACH,cAAc,AAACJ,OAAeU,KAAK,KAAK;IACzE;IAEAC,YAAqB;QACnB,OAAO,IAAI,CAACZ,KAAK,MAAM,CAAC,IAAI,CAACG,QAAQ;IACvC;IAEAU,gBAAyB;QACvB,IAAI,OAAOZ,WAAW,aAAa,OAAO;QAE1C,OACE,kBAAkBA,UAClBK,UAAUQ,cAAc,GAAG,KAC3B,AAACR,UAAkBS,gBAAgB,GAAG;IAE1C;IAEAC,eAAwB;QACtB,IAAI,OAAOf,WAAW,aAAa,OAAO;QAE1C,0BAA0B;QAC1B,OACEA,OAAOgB,UAAU,CAAC,8BAA8BC,OAAO,IACvD,AAACjB,OAAOK,SAAS,CAASa,UAAU,KAAK,QACzCjB,SAASkB,QAAQ,CAACV,QAAQ,CAAC;IAE/B;AACF;AAEA,qBAAqB;AACrB,IAAIW,0BAAmD;AACvD,IAAIC,4BAAuD;AAMpD,SAASzB;IACd,IAAI,CAACwB,yBAAyB;QAC5B,MAAME,YAAY3B;QAElB,IAAI2B,UAAUvB,KAAK,MAAM,CAACuB,UAAUpB,QAAQ,IAAI;YAC9C,6BAA6B;YAC7BkB,0BAA0B,IAAIG,sCAAkB;QAClD,OAAO,IAAID,UAAUd,SAAS,MAAMc,UAAUZ,KAAK,IAAI;YACrD,4CAA4C;YAC5C,0CAA0C;YAC1CU,0BAA0B,IAAIG,sCAAkB;YAChD,MAAMC,SAASC,IAAAA,kBAAS;YACxBD,OAAOE,IAAI,CAAC;QACd,OAAO;YACL,gCAAgC;YAChCN,0BAA0B,IAAIG,sCAAkB;QAClD;IACF;IAEA,OAAOH;AACT;AAKO,SAASzB;IACd,IAAI,CAAC0B,2BAA2B;QAC9BA,4BAA4B,IAAIvB;IAClC;IACA,OAAOuB;AACT;AAKO,SAASxB;IACduB,0BAA0B;AAC5B"}