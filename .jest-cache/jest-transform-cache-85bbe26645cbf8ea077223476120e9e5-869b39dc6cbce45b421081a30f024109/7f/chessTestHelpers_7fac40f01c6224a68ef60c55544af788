81848a4a6c7a942e723cabd13ccf47ac
/**
 * Test helpers for ChessService testing
 * Provides utilities for creating mock listeners, service instances, and validation
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createMockListener () {
        return createMockListener;
    },
    get createMockListeners () {
        return createMockListeners;
    },
    get createTestMove () {
        return createTestMove;
    },
    get expectFenToEqual () {
        return expectFenToEqual;
    },
    get getAllEmittedEvents () {
        return getAllEmittedEvents;
    },
    get getLastEmittedEvent () {
        return getLastEmittedEvent;
    },
    get isValidErrorEvent () {
        return isValidErrorEvent;
    },
    get isValidStateUpdateEvent () {
        return isValidStateUpdateEvent;
    },
    get normalizeFen () {
        return normalizeFen;
    },
    get waitForEvent () {
        return waitForEvent;
    }
});
/**
 *
 */ const createMockListener = ()=>{
    return jest.fn();
};
/**
 *
 */ const createMockListeners = (count)=>{
    return Array.from({
        length: count
    }, ()=>createMockListener());
};
/**
 *
 */ const getLastEmittedEvent = (mockListener)=>{
    const calls = mockListener.mock.calls;
    if (calls.length === 0) return undefined;
    return calls[calls.length - 1][0];
};
/**
 *
 */ const getAllEmittedEvents = (mockListener)=>{
    return mockListener.mock.calls.map((call)=>call[0]);
};
/**
 *
 */ const waitForEvent = (mockListener, eventType, timeout = 1000)=>{
    return new Promise((resolve, reject)=>{
        const timeoutId = setTimeout(()=>{
            reject(new Error(`Event '${eventType}' not emitted within ${timeout}ms`));
        }, timeout);
        /**
     *
     */ const checkForEvent = ()=>{
            const lastEvent = getLastEmittedEvent(mockListener);
            if (lastEvent && lastEvent.type === eventType) {
                clearTimeout(timeoutId);
                resolve(lastEvent);
            } else {
                // Check again on next tick
                setTimeout(checkForEvent, 10);
            }
        };
        checkForEvent();
    });
};
/**
 *
 */ const isValidStateUpdateEvent = (event)=>{
    if (event.type !== "stateUpdate") return false;
    const payload = event.payload;
    return typeof payload.fen === "string" && typeof payload.pgn === "string" && Array.isArray(payload.moveHistory) && typeof payload.currentMoveIndex === "number" && typeof payload.isGameOver === "boolean" && (payload.gameResult === null || typeof payload.gameResult === "string");
};
/**
 *
 */ const isValidErrorEvent = (event)=>{
    if (event.type !== "error") return false;
    const payload = event.payload;
    return payload.error instanceof Error && typeof payload.message === "string";
};
/**
 *
 */ const createTestMove = (from, to, promotion)=>{
    const move = {
        from,
        to
    };
    if (promotion) {
        move.promotion = promotion;
    }
    return move;
};
/**
 *
 */ const normalizeFen = (fen)=>{
    const parts = fen.split(" ");
    if (parts.length >= 4) {
        return parts.slice(0, 4).join(" ");
    }
    return fen;
};
/**
 *
 */ const expectFenToEqual = (actual, expected, ignoreCounters = true)=>{
    if (ignoreCounters) {
        expect(normalizeFen(actual)).toBe(normalizeFen(expected));
    } else {
        expect(actual).toBe(expected);
    }
};

//# sourceMappingURL=data:application/json;base64,