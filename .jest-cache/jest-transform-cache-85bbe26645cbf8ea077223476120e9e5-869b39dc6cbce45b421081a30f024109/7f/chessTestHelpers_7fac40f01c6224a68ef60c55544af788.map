{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/helpers/chessTestHelpers.ts"],"sourcesContent":["/**\n * Test helpers for ChessService testing\n * Provides utilities for creating mock listeners, service instances, and validation\n */\n\nimport {\n  ChessServiceListener,\n  ChessServiceEvent,\n} from \"@shared/services/ChessService\";\n\n/**\n * Creates a mock event listener for ChessService events\n * @returns A Jest mock function that can track calls and arguments\n *\n * @example\n * ```typescript\n * const mockListener = createMockListener();\n * chessService.subscribe(mockListener);\n * chessService.move({ from: 'e2', to: 'e4' });\n * expect(mockListener).toHaveBeenCalledWith(expect.objectContaining({\n *   type: 'stateUpdate',\n *   source: 'move'\n * }));\n * ```\n */\nexport /**\n *\n */\nconst createMockListener = (): jest.MockedFunction<ChessServiceListener> => {\n  return jest.fn();\n};\n\n/**\n * Creates multiple mock listeners for testing event distribution\n * @param count Number of listeners to create\n * @returns Array of mock listener functions\n */\nexport /**\n *\n */\nconst createMockListeners = (\n  count: number,\n): jest.MockedFunction<ChessServiceListener>[] => {\n  return Array.from({ length: count }, () => createMockListener());\n};\n\n/**\n * Utility to extract the last event emitted to a mock listener\n * @param mockListener The mock listener function\n * @returns The last event that was emitted, or undefined if none\n */\nexport /**\n *\n */\nconst getLastEmittedEvent = (\n  mockListener: jest.MockedFunction<ChessServiceListener>,\n): ChessServiceEvent | undefined => {\n  const calls = mockListener.mock.calls;\n  if (calls.length === 0) return undefined;\n  return calls[calls.length - 1][0];\n};\n\n/**\n * Utility to get all events emitted to a mock listener\n * @param mockListener The mock listener function\n * @returns Array of all emitted events\n */\nexport /**\n *\n */\nconst getAllEmittedEvents = (\n  mockListener: jest.MockedFunction<ChessServiceListener>,\n): ChessServiceEvent[] => {\n  return mockListener.mock.calls.map((call) => call[0]);\n};\n\n/**\n * Helper to wait for an event to be emitted (useful for async tests)\n * @param mockListener The mock listener to monitor\n * @param eventType The type of event to wait for\n * @param timeout Maximum time to wait in milliseconds (default: 1000)\n * @returns Promise that resolves with the event when it's emitted\n */\nexport /**\n *\n */\nconst waitForEvent = (\n  mockListener: jest.MockedFunction<ChessServiceListener>,\n  eventType: ChessServiceEvent[\"type\"],\n  timeout = 1000,\n): Promise<ChessServiceEvent> => {\n  return new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      reject(new Error(`Event '${eventType}' not emitted within ${timeout}ms`));\n    }, timeout);\n\n    /**\n     *\n     */\n    const checkForEvent = () => {\n      const lastEvent = getLastEmittedEvent(mockListener);\n      if (lastEvent && lastEvent.type === eventType) {\n        clearTimeout(timeoutId);\n        resolve(lastEvent);\n      } else {\n        // Check again on next tick\n        setTimeout(checkForEvent, 10);\n      }\n    };\n\n    checkForEvent();\n  });\n};\n\n/**\n * Validates that a state update event has the expected structure\n * @param event The event to validate\n * @returns True if the event is a valid state update\n */\nexport /**\n *\n */\nconst isValidStateUpdateEvent = (event: ChessServiceEvent): boolean => {\n  if (event.type !== \"stateUpdate\") return false;\n\n  const payload = event.payload;\n  return (\n    typeof payload.fen === \"string\" &&\n    typeof payload.pgn === \"string\" &&\n    Array.isArray(payload.moveHistory) &&\n    typeof payload.currentMoveIndex === \"number\" &&\n    typeof payload.isGameOver === \"boolean\" &&\n    (payload.gameResult === null || typeof payload.gameResult === \"string\")\n  );\n};\n\n/**\n * Validates that an error event has the expected structure\n * @param event The event to validate\n * @returns True if the event is a valid error event\n */\nexport /**\n *\n */\nconst isValidErrorEvent = (event: ChessServiceEvent): boolean => {\n  if (event.type !== \"error\") return false;\n\n  const payload = event.payload;\n  return payload.error instanceof Error && typeof payload.message === \"string\";\n};\n\n/**\n * Helper to create a simple move object for testing\n * @param from Source square (e.g., 'e2')\n * @param to Target square (e.g., 'e4')\n * @param promotion Optional promotion piece ('q', 'r', 'b', 'n')\n * @returns Move object compatible with ChessService\n */\nexport /**\n *\n */\nconst createTestMove = (from: string, to: string, promotion?: string) => {\n  const move: any = { from, to };\n  if (promotion) {\n    move.promotion = promotion;\n  }\n  return move;\n};\n\n/**\n * Normalizes FEN string by removing move counters for comparison\n * Useful when comparing positions where only move counters differ\n * @param fen The FEN string to normalize\n * @returns FEN string without halfmove and fullmove counters\n */\nexport /**\n *\n */\nconst normalizeFen = (fen: string): string => {\n  const parts = fen.split(\" \");\n  if (parts.length >= 4) {\n    return parts.slice(0, 4).join(\" \");\n  }\n  return fen;\n};\n\n/**\n * Assertion helper for Jest tests - checks if two FENs represent the same position\n * @param actual The actual FEN from the test\n * @param expected The expected FEN\n * @param ignoreCounters Whether to ignore halfmove and fullmove counters\n */\nexport /**\n *\n */\nconst expectFenToEqual = (\n  actual: string,\n  expected: string,\n  ignoreCounters = true,\n): void => {\n  if (ignoreCounters) {\n    expect(normalizeFen(actual)).toBe(normalizeFen(expected));\n  } else {\n    expect(actual).toBe(expected);\n  }\n};\n"],"names":["createMockListener","createMockListeners","createTestMove","expectFenToEqual","getAllEmittedEvents","getLastEmittedEvent","isValidErrorEvent","isValidStateUpdateEvent","normalizeFen","waitForEvent","jest","fn","count","Array","from","length","mockListener","calls","mock","undefined","map","call","eventType","timeout","Promise","resolve","reject","timeoutId","setTimeout","Error","checkForEvent","lastEvent","type","clearTimeout","event","payload","fen","pgn","isArray","moveHistory","currentMoveIndex","isGameOver","gameResult","error","message","to","promotion","move","parts","split","slice","join","actual","expected","ignoreCounters","expect","toBe"],"mappings":"AAAA;;;CAGC;;;;;;;;;;;QAyBKA;eAAAA;;QAYAC;eAAAA;;QAyHAC;eAAAA;;QAkCAC;eAAAA;;QA7HAC;eAAAA;;QAhBAC;eAAAA;;QA0FAC;eAAAA;;QAtBAC;eAAAA;;QAwDAC;eAAAA;;QA5FAC;eAAAA;;;AA7DC;;CAEN,GACD,MAAMT,qBAAqB;IACzB,OAAOU,KAAKC,EAAE;AAChB;AAOO;;CAEN,GACD,MAAMV,sBAAsB,CAC1BW;IAEA,OAAOC,MAAMC,IAAI,CAAC;QAAEC,QAAQH;IAAM,GAAG,IAAMZ;AAC7C;AAOO;;CAEN,GACD,MAAMK,sBAAsB,CAC1BW;IAEA,MAAMC,QAAQD,aAAaE,IAAI,CAACD,KAAK;IACrC,IAAIA,MAAMF,MAAM,KAAK,GAAG,OAAOI;IAC/B,OAAOF,KAAK,CAACA,MAAMF,MAAM,GAAG,EAAE,CAAC,EAAE;AACnC;AAOO;;CAEN,GACD,MAAMX,sBAAsB,CAC1BY;IAEA,OAAOA,aAAaE,IAAI,CAACD,KAAK,CAACG,GAAG,CAAC,CAACC,OAASA,IAAI,CAAC,EAAE;AACtD;AASO;;CAEN,GACD,MAAMZ,eAAe,CACnBO,cACAM,WACAC,UAAU,IAAI;IAEd,OAAO,IAAIC,QAAQ,CAACC,SAASC;QAC3B,MAAMC,YAAYC,WAAW;YAC3BF,OAAO,IAAIG,MAAM,CAAC,OAAO,EAAEP,UAAU,qBAAqB,EAAEC,QAAQ,EAAE,CAAC;QACzE,GAAGA;QAEH;;KAEC,GACD,MAAMO,gBAAgB;YACpB,MAAMC,YAAY1B,oBAAoBW;YACtC,IAAIe,aAAaA,UAAUC,IAAI,KAAKV,WAAW;gBAC7CW,aAAaN;gBACbF,QAAQM;YACV,OAAO;gBACL,2BAA2B;gBAC3BH,WAAWE,eAAe;YAC5B;QACF;QAEAA;IACF;AACF;AAOO;;CAEN,GACD,MAAMvB,0BAA0B,CAAC2B;IAC/B,IAAIA,MAAMF,IAAI,KAAK,eAAe,OAAO;IAEzC,MAAMG,UAAUD,MAAMC,OAAO;IAC7B,OACE,OAAOA,QAAQC,GAAG,KAAK,YACvB,OAAOD,QAAQE,GAAG,KAAK,YACvBxB,MAAMyB,OAAO,CAACH,QAAQI,WAAW,KACjC,OAAOJ,QAAQK,gBAAgB,KAAK,YACpC,OAAOL,QAAQM,UAAU,KAAK,aAC7BN,CAAAA,QAAQO,UAAU,KAAK,QAAQ,OAAOP,QAAQO,UAAU,KAAK,QAAO;AAEzE;AAOO;;CAEN,GACD,MAAMpC,oBAAoB,CAAC4B;IACzB,IAAIA,MAAMF,IAAI,KAAK,SAAS,OAAO;IAEnC,MAAMG,UAAUD,MAAMC,OAAO;IAC7B,OAAOA,QAAQQ,KAAK,YAAYd,SAAS,OAAOM,QAAQS,OAAO,KAAK;AACtE;AASO;;CAEN,GACD,MAAM1C,iBAAiB,CAACY,MAAc+B,IAAYC;IAChD,MAAMC,OAAY;QAAEjC;QAAM+B;IAAG;IAC7B,IAAIC,WAAW;QACbC,KAAKD,SAAS,GAAGA;IACnB;IACA,OAAOC;AACT;AAQO;;CAEN,GACD,MAAMvC,eAAe,CAAC4B;IACpB,MAAMY,QAAQZ,IAAIa,KAAK,CAAC;IACxB,IAAID,MAAMjC,MAAM,IAAI,GAAG;QACrB,OAAOiC,MAAME,KAAK,CAAC,GAAG,GAAGC,IAAI,CAAC;IAChC;IACA,OAAOf;AACT;AAQO;;CAEN,GACD,MAAMjC,mBAAmB,CACvBiD,QACAC,UACAC,iBAAiB,IAAI;IAErB,IAAIA,gBAAgB;QAClBC,OAAO/C,aAAa4C,SAASI,IAAI,CAAChD,aAAa6C;IACjD,OAAO;QACLE,OAAOH,QAAQI,IAAI,CAACH;IACtB;AACF"}