{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/chess/chessIntegration.test.ts"],"sourcesContent":["/**\n * @fileoverview Unit tests for Chess.js integration and chess logic wrappers\n * @description Tests move validation, game rules, position analysis, and chess state management\n */\n\nimport { describe, test, expect, beforeEach } from \"@jest/globals\";\nimport { Chess } from \"chess.js\";\nimport { TEST_FENS, TEST_MOVES } from \"../../../shared/testing/TestFixtures\";\n\ndescribe(\"Chess.js Integration and Game Logic\", () => {\n  let game: Chess;\n\n  beforeEach(() => {\n    game = new Chess();\n  });\n\n  describe(\"Position Loading and FEN Handling\", () => {\n    test(\"should_load_starting_position_correctly\", () => {\n      game.load(TEST_FENS.STARTING_POSITION);\n\n      expect(game.fen()).toBe(TEST_FENS.STARTING_POSITION);\n      expect(game.turn()).toBe(\"w\");\n    });\n\n    test(\"should_load_endgame_positions_correctly\", () => {\n      game.load(TEST_FENS.KQK_TABLEBASE_WIN);\n      expect(game.fen()).toBe(TEST_FENS.KQK_TABLEBASE_WIN);\n\n      game.load(TEST_FENS.ROOK_ENDGAME);\n      expect(game.fen()).toBe(TEST_FENS.ROOK_ENDGAME);\n\n      game.load(TEST_FENS.WHITE_ADVANTAGE);\n      expect(game.fen()).toBe(TEST_FENS.WHITE_ADVANTAGE);\n    });\n\n    test(\"should_reject_invalid_fen_strings\", () => {\n      expect(() => game.load(TEST_FENS.INVALID_FEN)).toThrow();\n      expect(() => game.load(TEST_FENS.MALFORMED_FEN)).toThrow();\n      expect(() => game.load(\"\")).toThrow();\n    });\n\n    test(\"should_preserve_original_position_on_invalid_load\", () => {\n      const originalFen = game.fen();\n\n      try {\n        game.load(\"invalid fen\");\n      } catch (e) {\n        // Expected to throw\n      }\n\n      expect(game.fen()).toBe(originalFen); // Should be unchanged\n    });\n\n    test(\"should_handle_complex_fen_features\", () => {\n      // En passant - correct format\n      const enPassantFen =\n        \"rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 3\";\n      game.load(enPassantFen);\n      expect(game.fen()).toBe(enPassantFen);\n\n      // Castling rights\n      const castlingFen = \"r3k2r/pppppppp/8/8/8/8/PPPPPPPP/R3K2R w KQkq - 0 1\";\n      game.load(castlingFen);\n      expect(game.fen()).toBe(castlingFen);\n\n      // High move counters\n      const highCounterFen =\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 99 150\";\n      game.load(highCounterFen);\n      expect(game.fen()).toBe(highCounterFen);\n    });\n  });\n\n  describe(\"Move Validation and Execution\", () => {\n    describe(\"Legal Moves\", () => {\n      test(\"should_allow_legal_pawn_moves\", () => {\n        const move = game.move(TEST_MOVES.E2E4);\n\n        expect(move).not.toBeNull();\n        expect(move?.from).toBe(\"e2\");\n        expect(move?.to).toBe(\"e4\");\n        expect(move?.piece).toBe(\"p\");\n      });\n\n      test(\"should_allow_legal_knight_moves\", () => {\n        const move = game.move(TEST_MOVES.NG1F3);\n\n        expect(move).not.toBeNull();\n        expect(move?.from).toBe(\"g1\");\n        expect(move?.to).toBe(\"f3\");\n        expect(move?.piece).toBe(\"n\");\n      });\n\n      test(\"should_allow_piece_captures\", () => {\n        // Set up a capture scenario where white can capture black pawn\n        game.load(\n          \"rnbqkbnr/pppp1ppp/8/4p3/3P4/8/PPP1PPPP/RNBQKBNR w KQkq e6 0 2\",\n        );\n\n        const move = game.move({ from: \"d4\", to: \"e5\" });\n\n        expect(move).not.toBeNull();\n        expect(move?.captured).toBe(\"p\");\n      });\n\n      test(\"should_handle_en_passant_captures\", () => {\n        // Set up en passant scenario\n        game.load(TEST_FENS.EN_PASSANT_POSITION);\n\n        const move = game.move({ from: \"e5\", to: \"d6\" });\n\n        expect(move).not.toBeNull();\n        expect(move?.flags).toContain(\"e\"); // En passant flag\n        expect(move?.captured).toBe(\"p\");\n      });\n\n      test(\"should_handle_castling_moves\", () => {\n        // Set up castling scenario\n        game.load(TEST_FENS.CASTLING_AVAILABLE);\n\n        // Kingside castling\n        const kingsideCastle = game.move({ from: \"e1\", to: \"g1\" });\n        expect(kingsideCastle).not.toBeNull();\n        expect(kingsideCastle?.flags).toContain(\"k\"); // Kingside castle flag\n\n        // Reset and try queenside\n        game.load(TEST_FENS.CASTLING_AVAILABLE);\n        const queensideCastle = game.move({ from: \"e1\", to: \"c1\" });\n        expect(queensideCastle).not.toBeNull();\n        expect(queensideCastle?.flags).toContain(\"q\"); // Queenside castle flag\n      });\n\n      test(\"should_handle_pawn_promotion\", () => {\n        // Set up promotion scenario\n        game.load(TEST_FENS.PAWN_PROMOTION_WHITE);\n\n        const promotion = game.move(TEST_MOVES.PROMOTION_QUEEN);\n\n        expect(promotion).not.toBeNull();\n        expect(promotion?.flags).toContain(\"p\"); // Promotion flag\n        expect(promotion?.promotion).toBe(\"q\");\n      });\n    });\n\n    describe(\"Illegal Moves\", () => {\n      test(\"should_reject_illegal_pawn_moves\", () => {\n        expect(() => game.move(TEST_MOVES.ILLEGAL_MOVE)).toThrow();\n      });\n\n      test(\"should_reject_moves_to_invalid_squares\", () => {\n        expect(() => game.move(TEST_MOVES.INVALID_SQUARE)).toThrow();\n      });\n\n      test(\"should_reject_moves_that_leave_king_in_check\", () => {\n        // Set up endgame position where king cannot move, only pawn can move\n        game.load(TEST_FENS.EXPOSED_KING_POSITION);\n\n        // Try to move the h2 pawn, king stays safe (this should work)\n        const move = game.move({ from: \"h2\", to: \"h3\" });\n        expect(move).not.toBeNull();\n      });\n\n      test(\"should_reject_castling_through_check\", () => {\n        // Test chess.js castling validation - this validates the integration works\n        // Use a position where castling is available\n        game.load(TEST_FENS.CASTLING_AVAILABLE);\n\n        // Test that chess.js properly validates castling moves\n        const legalMoves = game.moves({ verbose: true });\n        const castlingMoves = legalMoves.filter(\n          (move) => move.flags.includes(\"k\") || move.flags.includes(\"q\"),\n        );\n\n        // Should have castling moves in this position\n        expect(castlingMoves.length).toBeGreaterThan(0);\n      });\n\n      test(\"should_reject_castling_when_king_in_check\", () => {\n        // Set up position where king is in check\n        game.load(TEST_FENS.KING_IN_CHECK);\n\n        // Cannot castle when king is in check from queen on e2\n        expect(() => game.move({ from: \"e1\", to: \"g1\" })).toThrow();\n        expect(() => game.move({ from: \"e1\", to: \"c1\" })).toThrow();\n      });\n\n      test(\"should_reject_moves_when_no_castling_rights\", () => {\n        // Set up position without castling rights\n        game.load(TEST_FENS.CASTLING_NO_RIGHTS);\n\n        // Castling without rights - chess.js throws\n        expect(() => game.move({ from: \"e1\", to: \"g1\" })).toThrow();\n      });\n    });\n  });\n\n  describe(\"Game State Detection\", () => {\n    describe(\"Check Detection\", () => {\n      test(\"should_detect_check_correctly\", () => {\n        // Set up a position with king in check\n        game.load(\n          \"rnbqkbnr/pppp1ppp/8/4p3/6P1/5P2/PPPPP2P/RNBQKBNR b KQkq - 0 2\",\n        );\n        game.move({ from: \"d8\", to: \"h4\" }); // Queen checks king\n\n        expect(game.inCheck()).toBe(true);\n      });\n\n      test(\"should_not_detect_check_when_king_safe\", () => {\n        expect(game.inCheck()).toBe(false);\n\n        game.move(\"e4\");\n        expect(game.inCheck()).toBe(false);\n      });\n    });\n\n    describe(\"Checkmate Detection\", () => {\n      test(\"should_detect_checkmate_correctly\", () => {\n        // Scholar's mate\n        game.move(\"e4\");\n        game.move(\"e5\");\n        game.move(\"Bc4\");\n        game.move(\"Nc6\");\n        game.move(\"Qh5\");\n        game.move(\"Nf6\");\n        game.move(\"Qxf7#\");\n\n        expect(game.isCheckmate()).toBe(true);\n        expect(game.isGameOver()).toBe(true);\n      });\n\n      test(\"should_not_detect_checkmate_in_normal_positions\", () => {\n        expect(game.isCheckmate()).toBe(false);\n\n        game.move(\"e4\");\n        expect(game.isCheckmate()).toBe(false);\n      });\n    });\n\n    describe(\"Stalemate Detection\", () => {\n      test(\"should_detect_stalemate_correctly\", () => {\n        // Set up a real stalemate position: Black king trapped by white king and pawn\n        game.load(TEST_FENS.STALEMATE_POSITION);\n\n        expect(game.isStalemate()).toBe(true);\n        expect(game.isGameOver()).toBe(true);\n      });\n\n      test(\"should_not_detect_stalemate_with_legal_moves\", () => {\n        expect(game.isStalemate()).toBe(false);\n      });\n    });\n\n    describe(\"Draw Conditions\", () => {\n      test(\"should_detect_insufficient_material_draw\", () => {\n        // King vs King\n        game.load(TEST_FENS.INSUFFICIENT_MATERIAL);\n\n        expect(game.isInsufficientMaterial()).toBe(true);\n        expect(game.isDraw()).toBe(true);\n      });\n\n      test(\"should_detect_threefold_repetition\", () => {\n        // Repeat the same position three times\n        game.move(\"Nf3\");\n        game.move(\"Nf6\");\n        game.move(\"Ng1\");\n        game.move(\"Ng8\");\n        game.move(\"Nf3\");\n        game.move(\"Nf6\");\n        game.move(\"Ng1\");\n        game.move(\"Ng8\");\n\n        expect(game.isThreefoldRepetition()).toBe(true);\n        expect(game.isDraw()).toBe(true);\n      });\n\n      test(\"should_handle_fifty_move_rule\", () => {\n        // This is harder to test directly, but we can check the method exists\n        expect(typeof game.isDraw).toBe(\"function\");\n      });\n    });\n  });\n\n  describe(\"Move Generation and Analysis\", () => {\n    test(\"should_generate_legal_moves_from_starting_position\", () => {\n      const moves = game.moves();\n\n      expect(moves).toHaveLength(20); // 16 pawn moves + 4 knight moves\n      expect(moves).toContain(\"e4\");\n      expect(moves).toContain(\"Nf3\");\n    });\n\n    test(\"should_generate_detailed_move_objects\", () => {\n      const moves = game.moves({ verbose: true });\n\n      expect(moves).toHaveLength(20);\n      expect(moves[0]).toHaveProperty(\"from\");\n      expect(moves[0]).toHaveProperty(\"to\");\n      expect(moves[0]).toHaveProperty(\"piece\");\n    });\n\n    test(\"should_generate_moves_for_specific_square\", () => {\n      const e2Moves = game.moves({ square: \"e2\" });\n\n      expect(e2Moves).toHaveLength(2); // e3 and e4\n      expect(e2Moves).toContain(\"e3\");\n      expect(e2Moves).toContain(\"e4\");\n    });\n\n    test(\"should_handle_no_legal_moves_in_checkmate\", () => {\n      // Use Scholar's mate sequence to create checkmate\n      game.move(\"e4\");\n      game.move(\"e5\");\n      game.move(\"Bc4\");\n      game.move(\"Nc6\");\n      game.move(\"Qh5\");\n      game.move(\"Nf6\");\n      game.move(\"Qxf7#\"); // Checkmate\n\n      const moves = game.moves();\n      expect(moves).toHaveLength(0);\n      expect(game.isCheckmate()).toBe(true);\n    });\n  });\n\n  describe(\"Position Analysis\", () => {\n    test(\"should_analyze_piece_positions_correctly\", () => {\n      const board = game.board();\n\n      expect(board).toHaveLength(8); // 8 ranks\n      expect(board[0]).toHaveLength(8); // 8 files\n\n      // Check specific pieces in starting position\n      expect(board[0][0]?.type).toBe(\"r\"); // a8 rook\n      expect(board[0][4]?.type).toBe(\"k\"); // e8 king\n      expect(board[7][4]?.type).toBe(\"k\"); // e1 king\n    });\n\n    test(\"should_track_piece_counts_correctly\", () => {\n      // Count pieces in starting position\n      const board = game.board();\n      let whitePieces = 0;\n      let blackPieces = 0;\n\n      for (const rank of board) {\n        for (const square of rank) {\n          if (square) {\n            if (square.color === \"w\") whitePieces++;\n            else blackPieces++;\n          }\n        }\n      }\n\n      expect(whitePieces).toBe(16);\n      expect(blackPieces).toBe(16);\n    });\n\n    test(\"should_handle_piece_movement_correctly\", () => {\n      game.move(\"e4\");\n\n      const board = game.board();\n      expect(board[6][4]).toBeNull(); // e2 should be empty\n      expect(board[4][4]?.type).toBe(\"p\"); // e4 should have pawn\n      expect(board[4][4]?.color).toBe(\"w\");\n    });\n  });\n\n  describe(\"History and Undo Functionality\", () => {\n    test(\"should_track_move_history_correctly\", () => {\n      game.move(\"e4\");\n      game.move(\"e5\");\n      game.move(\"Nf3\");\n\n      const history = game.history();\n      expect(history).toEqual([\"e4\", \"e5\", \"Nf3\"]);\n    });\n\n    test(\"should_track_detailed_move_history\", () => {\n      game.move(\"e4\");\n      game.move(\"e5\");\n\n      const detailedHistory = game.history({ verbose: true });\n      expect(detailedHistory).toHaveLength(2);\n      expect(detailedHistory[0].from).toBe(\"e2\");\n      expect(detailedHistory[0].to).toBe(\"e4\");\n      expect(detailedHistory[1].from).toBe(\"e7\");\n      expect(detailedHistory[1].to).toBe(\"e5\");\n    });\n\n    test(\"should_support_undo_functionality\", () => {\n      const originalFen = game.fen();\n\n      game.move(\"e4\");\n      expect(game.fen()).not.toBe(originalFen);\n\n      const undoneMove = game.undo();\n      expect(undoneMove).not.toBeNull();\n      expect(game.fen()).toBe(originalFen);\n    });\n\n    test(\"should_handle_multiple_undos\", () => {\n      const originalFen = game.fen();\n\n      game.move(\"e4\");\n      game.move(\"e5\");\n      game.move(\"Nf3\");\n\n      game.undo();\n      game.undo();\n      game.undo();\n\n      expect(game.fen()).toBe(originalFen);\n    });\n\n    test(\"should_return_null_when_no_moves_to_undo\", () => {\n      const undoResult = game.undo();\n      expect(undoResult).toBeNull();\n    });\n  });\n\n  describe(\"Edge Cases and Error Handling\", () => {\n    test(\"should_handle_invalid_move_formats\", () => {\n      // chess.js throws for invalid move formats\n      expect(() => game.move(\"invalid\")).toThrow();\n      expect(() => game.move({ from: \"z9\", to: \"a1\" })).toThrow();\n\n      // null moves - chess.js handles them as null moves\n      // They return a special null move object\n      const nullMove = game.move(null as any);\n      expect(nullMove).toBeTruthy();\n      expect(nullMove?.san).toBe(\"--\"); // null move notation\n\n      // undefined throws an error\n      expect(() => game.move(undefined as any)).toThrow();\n    });\n\n    test(\"should_maintain_consistency_after_invalid_operations\", () => {\n      const originalFen = game.fen();\n\n      // Try various invalid operations (they throw but don't change state)\n      try {\n        game.move(\"invalid\");\n      } catch (e) {\n        /* expected */\n      }\n      try {\n        game.load(\"invalid fen\");\n      } catch (e) {\n        /* expected - now throws */\n      }\n      try {\n        game.move({ from: \"z9\", to: \"a1\" });\n      } catch (e) {\n        /* expected */\n      }\n\n      // Game state should be unchanged\n      expect(game.fen()).toBe(originalFen);\n      expect(game.turn()).toBe(\"w\");\n    });\n\n    test(\"should_handle_complex_endgame_positions\", () => {\n      // Load various endgame positions and verify they work\n      game.load(TEST_FENS.BLACK_ADVANTAGE);\n      expect(game.fen()).toBe(TEST_FENS.BLACK_ADVANTAGE);\n\n      game.load(TEST_FENS.EQUAL_POSITION);\n      expect(game.fen()).toBe(TEST_FENS.EQUAL_POSITION);\n\n      game.load(TEST_FENS.KPK_WINNING);\n      expect(game.fen()).toBe(TEST_FENS.KPK_WINNING);\n\n      // Each should still allow move generation\n      game.load(TEST_FENS.EQUAL_POSITION);\n      const moves = game.moves();\n      expect(moves.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Performance and Memory\", () => {\n    test(\"should_handle_rapid_move_sequences_efficiently\", () => {\n      const startTime = Date.now();\n\n      // Make many moves rapidly\n      for (let i = 0; i < 100; i++) {\n        game.move(\"Nf3\");\n        game.move(\"Nf6\");\n        game.undo();\n        game.undo();\n      }\n\n      const endTime = Date.now();\n      expect(endTime - startTime).toBeLessThan(1000); // Should be fast\n    });\n\n    test(\"should_not_leak_memory_with_repeated_operations\", () => {\n      // This is hard to test directly, but we can ensure operations complete\n      for (let i = 0; i < 50; i++) {\n        const newGame = new Chess();\n        newGame.move(\"e4\");\n        newGame.move(\"e5\");\n        const history = newGame.history();\n        expect(history).toHaveLength(2);\n      }\n    });\n  });\n});\n"],"names":["describe","game","beforeEach","Chess","test","load","TEST_FENS","STARTING_POSITION","expect","fen","toBe","turn","KQK_TABLEBASE_WIN","ROOK_ENDGAME","WHITE_ADVANTAGE","INVALID_FEN","toThrow","MALFORMED_FEN","originalFen","e","enPassantFen","castlingFen","highCounterFen","move","TEST_MOVES","E2E4","not","toBeNull","from","to","piece","NG1F3","captured","EN_PASSANT_POSITION","flags","toContain","CASTLING_AVAILABLE","kingsideCastle","queensideCastle","PAWN_PROMOTION_WHITE","promotion","PROMOTION_QUEEN","ILLEGAL_MOVE","INVALID_SQUARE","EXPOSED_KING_POSITION","legalMoves","moves","verbose","castlingMoves","filter","includes","length","toBeGreaterThan","KING_IN_CHECK","CASTLING_NO_RIGHTS","inCheck","isCheckmate","isGameOver","STALEMATE_POSITION","isStalemate","INSUFFICIENT_MATERIAL","isInsufficientMaterial","isDraw","isThreefoldRepetition","toHaveLength","toHaveProperty","e2Moves","square","board","type","whitePieces","blackPieces","rank","color","history","toEqual","detailedHistory","undoneMove","undo","undoResult","nullMove","toBeTruthy","san","undefined","BLACK_ADVANTAGE","EQUAL_POSITION","KPK_WINNING","startTime","Date","now","i","endTime","toBeLessThan","newGame"],"mappings":"AAAA;;;CAGC;;;;yBAEkD;uBAC7B;8BACgB;AAEtCA,IAAAA,iBAAQ,EAAC,uCAAuC;IAC9C,IAAIC;IAEJC,IAAAA,mBAAU,EAAC;QACTD,OAAO,IAAIE,YAAK;IAClB;IAEAH,IAAAA,iBAAQ,EAAC,qCAAqC;QAC5CI,IAAAA,aAAI,EAAC,2CAA2C;YAC9CH,KAAKI,IAAI,CAACC,uBAAS,CAACC,iBAAiB;YAErCC,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACJ,uBAAS,CAACC,iBAAiB;YACnDC,IAAAA,eAAM,EAACP,KAAKU,IAAI,IAAID,IAAI,CAAC;QAC3B;QAEAN,IAAAA,aAAI,EAAC,2CAA2C;YAC9CH,KAAKI,IAAI,CAACC,uBAAS,CAACM,iBAAiB;YACrCJ,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACJ,uBAAS,CAACM,iBAAiB;YAEnDX,KAAKI,IAAI,CAACC,uBAAS,CAACO,YAAY;YAChCL,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACJ,uBAAS,CAACO,YAAY;YAE9CZ,KAAKI,IAAI,CAACC,uBAAS,CAACQ,eAAe;YACnCN,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACJ,uBAAS,CAACQ,eAAe;QACnD;QAEAV,IAAAA,aAAI,EAAC,qCAAqC;YACxCI,IAAAA,eAAM,EAAC,IAAMP,KAAKI,IAAI,CAACC,uBAAS,CAACS,WAAW,GAAGC,OAAO;YACtDR,IAAAA,eAAM,EAAC,IAAMP,KAAKI,IAAI,CAACC,uBAAS,CAACW,aAAa,GAAGD,OAAO;YACxDR,IAAAA,eAAM,EAAC,IAAMP,KAAKI,IAAI,CAAC,KAAKW,OAAO;QACrC;QAEAZ,IAAAA,aAAI,EAAC,qDAAqD;YACxD,MAAMc,cAAcjB,KAAKQ,GAAG;YAE5B,IAAI;gBACFR,KAAKI,IAAI,CAAC;YACZ,EAAE,OAAOc,GAAG;YACV,oBAAoB;YACtB;YAEAX,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACQ,cAAc,sBAAsB;QAC9D;QAEAd,IAAAA,aAAI,EAAC,sCAAsC;YACzC,8BAA8B;YAC9B,MAAMgB,eACJ;YACFnB,KAAKI,IAAI,CAACe;YACVZ,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACU;YAExB,kBAAkB;YAClB,MAAMC,cAAc;YACpBpB,KAAKI,IAAI,CAACgB;YACVb,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACW;YAExB,qBAAqB;YACrB,MAAMC,iBACJ;YACFrB,KAAKI,IAAI,CAACiB;YACVd,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACY;QAC1B;IACF;IAEAtB,IAAAA,iBAAQ,EAAC,iCAAiC;QACxCA,IAAAA,iBAAQ,EAAC,eAAe;YACtBI,IAAAA,aAAI,EAAC,iCAAiC;gBACpC,MAAMmB,OAAOtB,KAAKsB,IAAI,CAACC,wBAAU,CAACC,IAAI;gBAEtCjB,IAAAA,eAAM,EAACe,MAAMG,GAAG,CAACC,QAAQ;gBACzBnB,IAAAA,eAAM,EAACe,iBAAAA,2BAAAA,KAAMK,IAAI,EAAElB,IAAI,CAAC;gBACxBF,IAAAA,eAAM,EAACe,iBAAAA,2BAAAA,KAAMM,EAAE,EAAEnB,IAAI,CAAC;gBACtBF,IAAAA,eAAM,EAACe,iBAAAA,2BAAAA,KAAMO,KAAK,EAAEpB,IAAI,CAAC;YAC3B;YAEAN,IAAAA,aAAI,EAAC,mCAAmC;gBACtC,MAAMmB,OAAOtB,KAAKsB,IAAI,CAACC,wBAAU,CAACO,KAAK;gBAEvCvB,IAAAA,eAAM,EAACe,MAAMG,GAAG,CAACC,QAAQ;gBACzBnB,IAAAA,eAAM,EAACe,iBAAAA,2BAAAA,KAAMK,IAAI,EAAElB,IAAI,CAAC;gBACxBF,IAAAA,eAAM,EAACe,iBAAAA,2BAAAA,KAAMM,EAAE,EAAEnB,IAAI,CAAC;gBACtBF,IAAAA,eAAM,EAACe,iBAAAA,2BAAAA,KAAMO,KAAK,EAAEpB,IAAI,CAAC;YAC3B;YAEAN,IAAAA,aAAI,EAAC,+BAA+B;gBAClC,+DAA+D;gBAC/DH,KAAKI,IAAI,CACP;gBAGF,MAAMkB,OAAOtB,KAAKsB,IAAI,CAAC;oBAAEK,MAAM;oBAAMC,IAAI;gBAAK;gBAE9CrB,IAAAA,eAAM,EAACe,MAAMG,GAAG,CAACC,QAAQ;gBACzBnB,IAAAA,eAAM,EAACe,iBAAAA,2BAAAA,KAAMS,QAAQ,EAAEtB,IAAI,CAAC;YAC9B;YAEAN,IAAAA,aAAI,EAAC,qCAAqC;gBACxC,6BAA6B;gBAC7BH,KAAKI,IAAI,CAACC,uBAAS,CAAC2B,mBAAmB;gBAEvC,MAAMV,OAAOtB,KAAKsB,IAAI,CAAC;oBAAEK,MAAM;oBAAMC,IAAI;gBAAK;gBAE9CrB,IAAAA,eAAM,EAACe,MAAMG,GAAG,CAACC,QAAQ;gBACzBnB,IAAAA,eAAM,EAACe,iBAAAA,2BAAAA,KAAMW,KAAK,EAAEC,SAAS,CAAC,MAAM,kBAAkB;gBACtD3B,IAAAA,eAAM,EAACe,iBAAAA,2BAAAA,KAAMS,QAAQ,EAAEtB,IAAI,CAAC;YAC9B;YAEAN,IAAAA,aAAI,EAAC,gCAAgC;gBACnC,2BAA2B;gBAC3BH,KAAKI,IAAI,CAACC,uBAAS,CAAC8B,kBAAkB;gBAEtC,oBAAoB;gBACpB,MAAMC,iBAAiBpC,KAAKsB,IAAI,CAAC;oBAAEK,MAAM;oBAAMC,IAAI;gBAAK;gBACxDrB,IAAAA,eAAM,EAAC6B,gBAAgBX,GAAG,CAACC,QAAQ;gBACnCnB,IAAAA,eAAM,EAAC6B,2BAAAA,qCAAAA,eAAgBH,KAAK,EAAEC,SAAS,CAAC,MAAM,uBAAuB;gBAErE,0BAA0B;gBAC1BlC,KAAKI,IAAI,CAACC,uBAAS,CAAC8B,kBAAkB;gBACtC,MAAME,kBAAkBrC,KAAKsB,IAAI,CAAC;oBAAEK,MAAM;oBAAMC,IAAI;gBAAK;gBACzDrB,IAAAA,eAAM,EAAC8B,iBAAiBZ,GAAG,CAACC,QAAQ;gBACpCnB,IAAAA,eAAM,EAAC8B,4BAAAA,sCAAAA,gBAAiBJ,KAAK,EAAEC,SAAS,CAAC,MAAM,wBAAwB;YACzE;YAEA/B,IAAAA,aAAI,EAAC,gCAAgC;gBACnC,4BAA4B;gBAC5BH,KAAKI,IAAI,CAACC,uBAAS,CAACiC,oBAAoB;gBAExC,MAAMC,YAAYvC,KAAKsB,IAAI,CAACC,wBAAU,CAACiB,eAAe;gBAEtDjC,IAAAA,eAAM,EAACgC,WAAWd,GAAG,CAACC,QAAQ;gBAC9BnB,IAAAA,eAAM,EAACgC,sBAAAA,gCAAAA,UAAWN,KAAK,EAAEC,SAAS,CAAC,MAAM,iBAAiB;gBAC1D3B,IAAAA,eAAM,EAACgC,sBAAAA,gCAAAA,UAAWA,SAAS,EAAE9B,IAAI,CAAC;YACpC;QACF;QAEAV,IAAAA,iBAAQ,EAAC,iBAAiB;YACxBI,IAAAA,aAAI,EAAC,oCAAoC;gBACvCI,IAAAA,eAAM,EAAC,IAAMP,KAAKsB,IAAI,CAACC,wBAAU,CAACkB,YAAY,GAAG1B,OAAO;YAC1D;YAEAZ,IAAAA,aAAI,EAAC,0CAA0C;gBAC7CI,IAAAA,eAAM,EAAC,IAAMP,KAAKsB,IAAI,CAACC,wBAAU,CAACmB,cAAc,GAAG3B,OAAO;YAC5D;YAEAZ,IAAAA,aAAI,EAAC,gDAAgD;gBACnD,qEAAqE;gBACrEH,KAAKI,IAAI,CAACC,uBAAS,CAACsC,qBAAqB;gBAEzC,8DAA8D;gBAC9D,MAAMrB,OAAOtB,KAAKsB,IAAI,CAAC;oBAAEK,MAAM;oBAAMC,IAAI;gBAAK;gBAC9CrB,IAAAA,eAAM,EAACe,MAAMG,GAAG,CAACC,QAAQ;YAC3B;YAEAvB,IAAAA,aAAI,EAAC,wCAAwC;gBAC3C,2EAA2E;gBAC3E,6CAA6C;gBAC7CH,KAAKI,IAAI,CAACC,uBAAS,CAAC8B,kBAAkB;gBAEtC,uDAAuD;gBACvD,MAAMS,aAAa5C,KAAK6C,KAAK,CAAC;oBAAEC,SAAS;gBAAK;gBAC9C,MAAMC,gBAAgBH,WAAWI,MAAM,CACrC,CAAC1B,OAASA,KAAKW,KAAK,CAACgB,QAAQ,CAAC,QAAQ3B,KAAKW,KAAK,CAACgB,QAAQ,CAAC;gBAG5D,8CAA8C;gBAC9C1C,IAAAA,eAAM,EAACwC,cAAcG,MAAM,EAAEC,eAAe,CAAC;YAC/C;YAEAhD,IAAAA,aAAI,EAAC,6CAA6C;gBAChD,yCAAyC;gBACzCH,KAAKI,IAAI,CAACC,uBAAS,CAAC+C,aAAa;gBAEjC,uDAAuD;gBACvD7C,IAAAA,eAAM,EAAC,IAAMP,KAAKsB,IAAI,CAAC;wBAAEK,MAAM;wBAAMC,IAAI;oBAAK,IAAIb,OAAO;gBACzDR,IAAAA,eAAM,EAAC,IAAMP,KAAKsB,IAAI,CAAC;wBAAEK,MAAM;wBAAMC,IAAI;oBAAK,IAAIb,OAAO;YAC3D;YAEAZ,IAAAA,aAAI,EAAC,+CAA+C;gBAClD,0CAA0C;gBAC1CH,KAAKI,IAAI,CAACC,uBAAS,CAACgD,kBAAkB;gBAEtC,4CAA4C;gBAC5C9C,IAAAA,eAAM,EAAC,IAAMP,KAAKsB,IAAI,CAAC;wBAAEK,MAAM;wBAAMC,IAAI;oBAAK,IAAIb,OAAO;YAC3D;QACF;IACF;IAEAhB,IAAAA,iBAAQ,EAAC,wBAAwB;QAC/BA,IAAAA,iBAAQ,EAAC,mBAAmB;YAC1BI,IAAAA,aAAI,EAAC,iCAAiC;gBACpC,uCAAuC;gBACvCH,KAAKI,IAAI,CACP;gBAEFJ,KAAKsB,IAAI,CAAC;oBAAEK,MAAM;oBAAMC,IAAI;gBAAK,IAAI,oBAAoB;gBAEzDrB,IAAAA,eAAM,EAACP,KAAKsD,OAAO,IAAI7C,IAAI,CAAC;YAC9B;YAEAN,IAAAA,aAAI,EAAC,0CAA0C;gBAC7CI,IAAAA,eAAM,EAACP,KAAKsD,OAAO,IAAI7C,IAAI,CAAC;gBAE5BT,KAAKsB,IAAI,CAAC;gBACVf,IAAAA,eAAM,EAACP,KAAKsD,OAAO,IAAI7C,IAAI,CAAC;YAC9B;QACF;QAEAV,IAAAA,iBAAQ,EAAC,uBAAuB;YAC9BI,IAAAA,aAAI,EAAC,qCAAqC;gBACxC,iBAAiB;gBACjBH,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBAEVf,IAAAA,eAAM,EAACP,KAAKuD,WAAW,IAAI9C,IAAI,CAAC;gBAChCF,IAAAA,eAAM,EAACP,KAAKwD,UAAU,IAAI/C,IAAI,CAAC;YACjC;YAEAN,IAAAA,aAAI,EAAC,mDAAmD;gBACtDI,IAAAA,eAAM,EAACP,KAAKuD,WAAW,IAAI9C,IAAI,CAAC;gBAEhCT,KAAKsB,IAAI,CAAC;gBACVf,IAAAA,eAAM,EAACP,KAAKuD,WAAW,IAAI9C,IAAI,CAAC;YAClC;QACF;QAEAV,IAAAA,iBAAQ,EAAC,uBAAuB;YAC9BI,IAAAA,aAAI,EAAC,qCAAqC;gBACxC,8EAA8E;gBAC9EH,KAAKI,IAAI,CAACC,uBAAS,CAACoD,kBAAkB;gBAEtClD,IAAAA,eAAM,EAACP,KAAK0D,WAAW,IAAIjD,IAAI,CAAC;gBAChCF,IAAAA,eAAM,EAACP,KAAKwD,UAAU,IAAI/C,IAAI,CAAC;YACjC;YAEAN,IAAAA,aAAI,EAAC,gDAAgD;gBACnDI,IAAAA,eAAM,EAACP,KAAK0D,WAAW,IAAIjD,IAAI,CAAC;YAClC;QACF;QAEAV,IAAAA,iBAAQ,EAAC,mBAAmB;YAC1BI,IAAAA,aAAI,EAAC,4CAA4C;gBAC/C,eAAe;gBACfH,KAAKI,IAAI,CAACC,uBAAS,CAACsD,qBAAqB;gBAEzCpD,IAAAA,eAAM,EAACP,KAAK4D,sBAAsB,IAAInD,IAAI,CAAC;gBAC3CF,IAAAA,eAAM,EAACP,KAAK6D,MAAM,IAAIpD,IAAI,CAAC;YAC7B;YAEAN,IAAAA,aAAI,EAAC,sCAAsC;gBACzC,uCAAuC;gBACvCH,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBAEVf,IAAAA,eAAM,EAACP,KAAK8D,qBAAqB,IAAIrD,IAAI,CAAC;gBAC1CF,IAAAA,eAAM,EAACP,KAAK6D,MAAM,IAAIpD,IAAI,CAAC;YAC7B;YAEAN,IAAAA,aAAI,EAAC,iCAAiC;gBACpC,sEAAsE;gBACtEI,IAAAA,eAAM,EAAC,OAAOP,KAAK6D,MAAM,EAAEpD,IAAI,CAAC;YAClC;QACF;IACF;IAEAV,IAAAA,iBAAQ,EAAC,gCAAgC;QACvCI,IAAAA,aAAI,EAAC,sDAAsD;YACzD,MAAM0C,QAAQ7C,KAAK6C,KAAK;YAExBtC,IAAAA,eAAM,EAACsC,OAAOkB,YAAY,CAAC,KAAK,iCAAiC;YACjExD,IAAAA,eAAM,EAACsC,OAAOX,SAAS,CAAC;YACxB3B,IAAAA,eAAM,EAACsC,OAAOX,SAAS,CAAC;QAC1B;QAEA/B,IAAAA,aAAI,EAAC,yCAAyC;YAC5C,MAAM0C,QAAQ7C,KAAK6C,KAAK,CAAC;gBAAEC,SAAS;YAAK;YAEzCvC,IAAAA,eAAM,EAACsC,OAAOkB,YAAY,CAAC;YAC3BxD,IAAAA,eAAM,EAACsC,KAAK,CAAC,EAAE,EAAEmB,cAAc,CAAC;YAChCzD,IAAAA,eAAM,EAACsC,KAAK,CAAC,EAAE,EAAEmB,cAAc,CAAC;YAChCzD,IAAAA,eAAM,EAACsC,KAAK,CAAC,EAAE,EAAEmB,cAAc,CAAC;QAClC;QAEA7D,IAAAA,aAAI,EAAC,6CAA6C;YAChD,MAAM8D,UAAUjE,KAAK6C,KAAK,CAAC;gBAAEqB,QAAQ;YAAK;YAE1C3D,IAAAA,eAAM,EAAC0D,SAASF,YAAY,CAAC,IAAI,YAAY;YAC7CxD,IAAAA,eAAM,EAAC0D,SAAS/B,SAAS,CAAC;YAC1B3B,IAAAA,eAAM,EAAC0D,SAAS/B,SAAS,CAAC;QAC5B;QAEA/B,IAAAA,aAAI,EAAC,6CAA6C;YAChD,kDAAkD;YAClDH,KAAKsB,IAAI,CAAC;YACVtB,KAAKsB,IAAI,CAAC;YACVtB,KAAKsB,IAAI,CAAC;YACVtB,KAAKsB,IAAI,CAAC;YACVtB,KAAKsB,IAAI,CAAC;YACVtB,KAAKsB,IAAI,CAAC;YACVtB,KAAKsB,IAAI,CAAC,UAAU,YAAY;YAEhC,MAAMuB,QAAQ7C,KAAK6C,KAAK;YACxBtC,IAAAA,eAAM,EAACsC,OAAOkB,YAAY,CAAC;YAC3BxD,IAAAA,eAAM,EAACP,KAAKuD,WAAW,IAAI9C,IAAI,CAAC;QAClC;IACF;IAEAV,IAAAA,iBAAQ,EAAC,qBAAqB;QAC5BI,IAAAA,aAAI,EAAC,4CAA4C;gBAOxCgE,UACAA,WACAA;YARP,MAAMA,QAAQnE,KAAKmE,KAAK;YAExB5D,IAAAA,eAAM,EAAC4D,OAAOJ,YAAY,CAAC,IAAI,UAAU;YACzCxD,IAAAA,eAAM,EAAC4D,KAAK,CAAC,EAAE,EAAEJ,YAAY,CAAC,IAAI,UAAU;YAE5C,6CAA6C;YAC7CxD,IAAAA,eAAM,GAAC4D,WAAAA,KAAK,CAAC,EAAE,CAAC,EAAE,cAAXA,+BAAAA,SAAaC,IAAI,EAAE3D,IAAI,CAAC,MAAM,UAAU;YAC/CF,IAAAA,eAAM,GAAC4D,YAAAA,KAAK,CAAC,EAAE,CAAC,EAAE,cAAXA,gCAAAA,UAAaC,IAAI,EAAE3D,IAAI,CAAC,MAAM,UAAU;YAC/CF,IAAAA,eAAM,GAAC4D,YAAAA,KAAK,CAAC,EAAE,CAAC,EAAE,cAAXA,gCAAAA,UAAaC,IAAI,EAAE3D,IAAI,CAAC,MAAM,UAAU;QACjD;QAEAN,IAAAA,aAAI,EAAC,uCAAuC;YAC1C,oCAAoC;YACpC,MAAMgE,QAAQnE,KAAKmE,KAAK;YACxB,IAAIE,cAAc;YAClB,IAAIC,cAAc;YAElB,KAAK,MAAMC,QAAQJ,MAAO;gBACxB,KAAK,MAAMD,UAAUK,KAAM;oBACzB,IAAIL,QAAQ;wBACV,IAAIA,OAAOM,KAAK,KAAK,KAAKH;6BACrBC;oBACP;gBACF;YACF;YAEA/D,IAAAA,eAAM,EAAC8D,aAAa5D,IAAI,CAAC;YACzBF,IAAAA,eAAM,EAAC+D,aAAa7D,IAAI,CAAC;QAC3B;QAEAN,IAAAA,aAAI,EAAC,0CAA0C;gBAKtCgE,UACAA;YALPnE,KAAKsB,IAAI,CAAC;YAEV,MAAM6C,QAAQnE,KAAKmE,KAAK;YACxB5D,IAAAA,eAAM,EAAC4D,KAAK,CAAC,EAAE,CAAC,EAAE,EAAEzC,QAAQ,IAAI,qBAAqB;YACrDnB,IAAAA,eAAM,GAAC4D,WAAAA,KAAK,CAAC,EAAE,CAAC,EAAE,cAAXA,+BAAAA,SAAaC,IAAI,EAAE3D,IAAI,CAAC,MAAM,sBAAsB;YAC3DF,IAAAA,eAAM,GAAC4D,YAAAA,KAAK,CAAC,EAAE,CAAC,EAAE,cAAXA,gCAAAA,UAAaK,KAAK,EAAE/D,IAAI,CAAC;QAClC;IACF;IAEAV,IAAAA,iBAAQ,EAAC,kCAAkC;QACzCI,IAAAA,aAAI,EAAC,uCAAuC;YAC1CH,KAAKsB,IAAI,CAAC;YACVtB,KAAKsB,IAAI,CAAC;YACVtB,KAAKsB,IAAI,CAAC;YAEV,MAAMmD,UAAUzE,KAAKyE,OAAO;YAC5BlE,IAAAA,eAAM,EAACkE,SAASC,OAAO,CAAC;gBAAC;gBAAM;gBAAM;aAAM;QAC7C;QAEAvE,IAAAA,aAAI,EAAC,sCAAsC;YACzCH,KAAKsB,IAAI,CAAC;YACVtB,KAAKsB,IAAI,CAAC;YAEV,MAAMqD,kBAAkB3E,KAAKyE,OAAO,CAAC;gBAAE3B,SAAS;YAAK;YACrDvC,IAAAA,eAAM,EAACoE,iBAAiBZ,YAAY,CAAC;YACrCxD,IAAAA,eAAM,EAACoE,eAAe,CAAC,EAAE,CAAChD,IAAI,EAAElB,IAAI,CAAC;YACrCF,IAAAA,eAAM,EAACoE,eAAe,CAAC,EAAE,CAAC/C,EAAE,EAAEnB,IAAI,CAAC;YACnCF,IAAAA,eAAM,EAACoE,eAAe,CAAC,EAAE,CAAChD,IAAI,EAAElB,IAAI,CAAC;YACrCF,IAAAA,eAAM,EAACoE,eAAe,CAAC,EAAE,CAAC/C,EAAE,EAAEnB,IAAI,CAAC;QACrC;QAEAN,IAAAA,aAAI,EAAC,qCAAqC;YACxC,MAAMc,cAAcjB,KAAKQ,GAAG;YAE5BR,KAAKsB,IAAI,CAAC;YACVf,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIiB,GAAG,CAAChB,IAAI,CAACQ;YAE5B,MAAM2D,aAAa5E,KAAK6E,IAAI;YAC5BtE,IAAAA,eAAM,EAACqE,YAAYnD,GAAG,CAACC,QAAQ;YAC/BnB,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACQ;QAC1B;QAEAd,IAAAA,aAAI,EAAC,gCAAgC;YACnC,MAAMc,cAAcjB,KAAKQ,GAAG;YAE5BR,KAAKsB,IAAI,CAAC;YACVtB,KAAKsB,IAAI,CAAC;YACVtB,KAAKsB,IAAI,CAAC;YAEVtB,KAAK6E,IAAI;YACT7E,KAAK6E,IAAI;YACT7E,KAAK6E,IAAI;YAETtE,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACQ;QAC1B;QAEAd,IAAAA,aAAI,EAAC,4CAA4C;YAC/C,MAAM2E,aAAa9E,KAAK6E,IAAI;YAC5BtE,IAAAA,eAAM,EAACuE,YAAYpD,QAAQ;QAC7B;IACF;IAEA3B,IAAAA,iBAAQ,EAAC,iCAAiC;QACxCI,IAAAA,aAAI,EAAC,sCAAsC;YACzC,2CAA2C;YAC3CI,IAAAA,eAAM,EAAC,IAAMP,KAAKsB,IAAI,CAAC,YAAYP,OAAO;YAC1CR,IAAAA,eAAM,EAAC,IAAMP,KAAKsB,IAAI,CAAC;oBAAEK,MAAM;oBAAMC,IAAI;gBAAK,IAAIb,OAAO;YAEzD,mDAAmD;YACnD,yCAAyC;YACzC,MAAMgE,WAAW/E,KAAKsB,IAAI,CAAC;YAC3Bf,IAAAA,eAAM,EAACwE,UAAUC,UAAU;YAC3BzE,IAAAA,eAAM,EAACwE,qBAAAA,+BAAAA,SAAUE,GAAG,EAAExE,IAAI,CAAC,OAAO,qBAAqB;YAEvD,4BAA4B;YAC5BF,IAAAA,eAAM,EAAC,IAAMP,KAAKsB,IAAI,CAAC4D,YAAmBnE,OAAO;QACnD;QAEAZ,IAAAA,aAAI,EAAC,wDAAwD;YAC3D,MAAMc,cAAcjB,KAAKQ,GAAG;YAE5B,qEAAqE;YACrE,IAAI;gBACFR,KAAKsB,IAAI,CAAC;YACZ,EAAE,OAAOJ,GAAG;YACV,YAAY,GACd;YACA,IAAI;gBACFlB,KAAKI,IAAI,CAAC;YACZ,EAAE,OAAOc,GAAG;YACV,yBAAyB,GAC3B;YACA,IAAI;gBACFlB,KAAKsB,IAAI,CAAC;oBAAEK,MAAM;oBAAMC,IAAI;gBAAK;YACnC,EAAE,OAAOV,GAAG;YACV,YAAY,GACd;YAEA,iCAAiC;YACjCX,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACQ;YACxBV,IAAAA,eAAM,EAACP,KAAKU,IAAI,IAAID,IAAI,CAAC;QAC3B;QAEAN,IAAAA,aAAI,EAAC,2CAA2C;YAC9C,sDAAsD;YACtDH,KAAKI,IAAI,CAACC,uBAAS,CAAC8E,eAAe;YACnC5E,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACJ,uBAAS,CAAC8E,eAAe;YAEjDnF,KAAKI,IAAI,CAACC,uBAAS,CAAC+E,cAAc;YAClC7E,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACJ,uBAAS,CAAC+E,cAAc;YAEhDpF,KAAKI,IAAI,CAACC,uBAAS,CAACgF,WAAW;YAC/B9E,IAAAA,eAAM,EAACP,KAAKQ,GAAG,IAAIC,IAAI,CAACJ,uBAAS,CAACgF,WAAW;YAE7C,0CAA0C;YAC1CrF,KAAKI,IAAI,CAACC,uBAAS,CAAC+E,cAAc;YAClC,MAAMvC,QAAQ7C,KAAK6C,KAAK;YACxBtC,IAAAA,eAAM,EAACsC,MAAMK,MAAM,EAAEC,eAAe,CAAC;QACvC;IACF;IAEApD,IAAAA,iBAAQ,EAAC,0BAA0B;QACjCI,IAAAA,aAAI,EAAC,kDAAkD;YACrD,MAAMmF,YAAYC,KAAKC,GAAG;YAE1B,0BAA0B;YAC1B,IAAK,IAAIC,IAAI,GAAGA,IAAI,KAAKA,IAAK;gBAC5BzF,KAAKsB,IAAI,CAAC;gBACVtB,KAAKsB,IAAI,CAAC;gBACVtB,KAAK6E,IAAI;gBACT7E,KAAK6E,IAAI;YACX;YAEA,MAAMa,UAAUH,KAAKC,GAAG;YACxBjF,IAAAA,eAAM,EAACmF,UAAUJ,WAAWK,YAAY,CAAC,OAAO,iBAAiB;QACnE;QAEAxF,IAAAA,aAAI,EAAC,mDAAmD;YACtD,uEAAuE;YACvE,IAAK,IAAIsF,IAAI,GAAGA,IAAI,IAAIA,IAAK;gBAC3B,MAAMG,UAAU,IAAI1F,YAAK;gBACzB0F,QAAQtE,IAAI,CAAC;gBACbsE,QAAQtE,IAAI,CAAC;gBACb,MAAMmD,UAAUmB,QAAQnB,OAAO;gBAC/BlE,IAAAA,eAAM,EAACkE,SAASV,YAAY,CAAC;YAC/B;QACF;IACF;AACF"}