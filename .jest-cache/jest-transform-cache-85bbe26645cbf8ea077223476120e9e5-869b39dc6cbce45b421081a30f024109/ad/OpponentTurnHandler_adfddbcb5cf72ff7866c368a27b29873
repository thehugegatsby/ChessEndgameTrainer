652a4521b35094636f46f92e4a01f30c
/**
 * @file Opponent turn handler module
 * @module store/orchestrators/handlePlayerMove/OpponentTurnHandler
 *
 * @description
 * Handles comprehensive opponent turn management in chess training sessions.
 * Provides sophisticated scheduling, execution, and cancellation of opponent moves
 * with race condition prevention and robust error handling.
 *
 * @remarks
 * Key architectural features:
 * - **Race condition prevention**: Multiple cancellation checks prevent stale executions
 * - **Encapsulated state management**: OpponentTurnManager class for clean state isolation
 * - **Tablebase integration**: Fetches optimal opponent moves from tablebase API
 * - **State synchronization**: Coordinates with training state for turn management
 * - **Error resilience**: Graceful handling of tablebase API failures
 * - **Cross-platform support**: Works in browser and Node.js test environments
 *
 * The handler prevents common issues like:
 * - Executing opponent moves after user undo operations
 * - Multiple concurrent opponent turns
 * - Memory leaks from uncleaned timeouts
 * - State desynchronization between UI and game logic
 *
 * @example
 * ```typescript
 * import { getOpponentTurnManager } from './OpponentTurnHandler';
 * 
 * const manager = getOpponentTurnManager();
 * 
 * // Schedule opponent move with default delay
 * manager.schedule(storeApi);
 *
 * // Schedule with custom delay
 * manager.schedule(storeApi, 1000);
 *
 * // Cancel any pending opponent move (e.g., during undo)
 * manager.cancel();
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get cancelScheduledOpponentTurn () {
        return cancelScheduledOpponentTurn;
    },
    get getOpponentTurnManager () {
        return getOpponentTurnManager;
    },
    get scheduleOpponentTurn () {
        return scheduleOpponentTurn;
    }
});
const _ChessService = require("../../../services/ChessService");
const _TablebaseService = require("../../../services/TablebaseService");
const _ErrorService = require("../../../services/ErrorService");
const _movecompletion = require("./move.completion");
const _logging = require("../../../services/logging");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
/** Default delay for opponent moves in milliseconds - provides natural game feel */ const OPPONENT_TURN_DELAY = 500;
/**
 * Manages opponent turn scheduling and execution with encapsulated state
 * 
 * @class OpponentTurnManager
 * 
 * @description
 * Encapsulates timeout management and cancellation state to prevent race conditions
 * and provide clean separation of concerns. This eliminates the need for module-level
 * global state that could cause issues in concurrent scenarios.
 * 
 * @example
 * ```typescript
 * const manager = new OpponentTurnManager();
 * 
 * // Schedule opponent turn
 * manager.schedule(api, 500);
 * 
 * // Cancel if needed (e.g., during undo)
 * manager.cancel();
 * ```
 */ class OpponentTurnManager {
    /**
   * Cancels any scheduled opponent turn to prevent race conditions
   *
   * @description
   * Provides immediate cancellation of pending opponent moves, essential for:
   * - Undo operations that revert game state
   * - User navigation away from training session
   * - Game completion or interruption scenarios
   *
   * @remarks
   * Uses two-phase cancellation strategy:
   * 1. Sets cancellation flag for timeout callbacks
   * 2. Clears active timeout to prevent execution
   *
   * This dual approach ensures no opponent moves execute after cancellation,
   * even if the timeout has already fired but not yet executed.
   */ cancel() {
        this.isCancelled = true;
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = undefined;
            (0, _logging.getLogger)().debug("[OpponentTurnHandler] Successfully cancelled scheduled opponent turn");
        } else {
            (0, _logging.getLogger)().debug("[OpponentTurnHandler] WARNING: No timeout to cancel, but set cancellation flag");
        }
    }
    /**
   * Schedules optimal opponent move execution with sophisticated timing control
   *
   * @param {StoreApi} api - Zustand store API for state management
   * @param {number} [delay=500] - Delay in milliseconds before executing opponent move
   * @param {Object} [options] - Optional configuration
   * @param {Function} [options.onOpponentMoveComplete] - Callback after opponent move completes
   *
   * @description
   * Coordinates the scheduling and execution of optimal opponent moves using tablebase data.
   * Provides natural game pacing while ensuring clean state management and error handling.
   *
   * @remarks
   * **Race Condition Prevention:**
   * - Cancels any existing scheduled opponent turn before scheduling new one
   * - Resets cancellation flags for clean state
   * - Multiple state checks before execution
   */ schedule(api, delay = OPPONENT_TURN_DELAY, options) {
        var _currentState_training_currentPosition;
        const currentState = api.getState();
        (0, _logging.getLogger)().info(`[OpponentTurnHandler] üéØ scheduleOpponentTurn called - delay: ${delay}ms`, {
            isPlayerTurn: currentState.training.isPlayerTurn,
            isOpponentThinking: currentState.training.isOpponentThinking,
            currentFen: _ChessService.chessService.getFen(),
            currentTurn: _ChessService.chessService.turn(),
            colorToTrain: (_currentState_training_currentPosition = currentState.training.currentPosition) === null || _currentState_training_currentPosition === void 0 ? void 0 : _currentState_training_currentPosition.colorToTrain
        });
        // Cancel any previously scheduled opponent turn
        this.cancel();
        // Clear the cancellation flag when scheduling new turn
        this.isCancelled = false;
        if (typeof window !== "undefined") {
            // Schedule new opponent turn with cancellable timeout
            this.timeout = setTimeout(async ()=>{
                (0, _logging.getLogger)().debug("[OpponentTurnHandler] Timeout fired, checking if we should execute opponent turn");
                // Check if this turn was cancelled
                if (this.isCancelled) {
                    (0, _logging.getLogger)().debug("[OpponentTurnHandler] ABORTING - Turn was cancelled by undo");
                    return;
                }
                // Check state again before executing - player might have undone the move
                const currentState = api.getState();
                if (currentState.training.isPlayerTurn) {
                    (0, _logging.getLogger)().debug("[OpponentTurnHandler] ABORTING - It's now player's turn (move was undone)");
                    return;
                }
                (0, _logging.getLogger)().debug("[OpponentTurnHandler] Executing opponent turn");
                await this.executeOpponentTurn(api, options === null || options === void 0 ? void 0 : options.onOpponentMoveComplete);
                // Clear the timeout reference after execution
                this.timeout = undefined;
            }, delay);
        } else {
            // Fallback for non-browser environments (tests)
            (async ()=>{
                await new Promise((resolve)=>setTimeout(resolve, delay));
                if (!this.isCancelled) {
                    await this.executeOpponentTurn(api, options === null || options === void 0 ? void 0 : options.onOpponentMoveComplete);
                }
            })();
        }
    }
    /**
   * Executes optimal opponent move using tablebase recommendations
   *
   * @param {StoreApi} api - Zustand store API for state management
   * @param {Function} [onComplete] - Optional callback after move completion
   * @returns {Promise<void>} Promise that resolves when opponent move execution is complete
   *
   * @private
   * @description
   * Core opponent move execution with comprehensive state validation and error handling.
   * Fetches the best move from tablebase API and executes it with proper state updates.
   */ async executeOpponentTurn(api, onComplete) {
        var _state_training_currentPosition;
        const { getState, setState } = api;
        // Check if we should actually execute opponent turn
        const state = getState();
        (0, _logging.getLogger)().info("[OpponentTurnHandler] üîç executeOpponentTurn called:", {
            isPlayerTurn: state.training.isPlayerTurn,
            isOpponentThinking: state.training.isOpponentThinking,
            currentFen: _ChessService.chessService.getFen(),
            currentTurn: _ChessService.chessService.turn(),
            trainingColor: (_state_training_currentPosition = state.training.currentPosition) === null || _state_training_currentPosition === void 0 ? void 0 : _state_training_currentPosition.colorToTrain,
            wasCancelled: this.isCancelled
        });
        // Check cancellation flag first
        if (this.isCancelled) {
            (0, _logging.getLogger)().warn("[OpponentTurnHandler] ‚ùå ABORTING - Turn was cancelled!");
            return;
        }
        // Don't execute if it's the player's turn
        if (state.training.isPlayerTurn) {
            (0, _logging.getLogger)().warn("[OpponentTurnHandler] ‚ùå ABORTING - It's player's turn! This is the issue!");
            (0, _logging.getLogger)().warn("This prevents opponent from moving after 'Weiterspielen' click");
            return;
        }
        try {
            var _topMoves_moves, _topMoves_moves1, _topMoves_moves2;
            // Get current position
            const currentFen = _ChessService.chessService.getFen();
            // Fetch ALL moves from tablebase to find optimal one based on DTM
            // We need all moves to properly evaluate defense in losing positions
            const topMoves = await _TablebaseService.tablebaseService.getTopMoves(currentFen, 10);
            (0, _logging.getLogger)().info("[OpponentTurnHandler] DEBUG: Fetched moves from tablebase:", {
                fen: currentFen,
                movesCount: ((_topMoves_moves = topMoves.moves) === null || _topMoves_moves === void 0 ? void 0 : _topMoves_moves.length) || 0,
                moves: (_topMoves_moves1 = topMoves.moves) === null || _topMoves_moves1 === void 0 ? void 0 : _topMoves_moves1.map((m)=>({
                        san: m.san,
                        dtm: m.dtm,
                        wdl: m.wdl,
                        category: m.category
                    })),
                firstMove: ((_topMoves_moves2 = topMoves.moves) === null || _topMoves_moves2 === void 0 ? void 0 : _topMoves_moves2[0]) ? {
                    san: topMoves.moves[0].san,
                    dtm: topMoves.moves[0].dtm,
                    note: "This is what TablebaseService returned as first/best"
                } : null
            });
            if (!topMoves.isAvailable || !topMoves.moves || topMoves.moves.length === 0) {
                // No tablebase move available - just return control to player
                setState((draft)=>{
                    draft.training.isPlayerTurn = true;
                    draft.training.isOpponentThinking = false;
                });
                return;
            }
            // Select the optimal move based on game theory:
            // 1. Prefer best outcome (win > draw > loss) by WDL
            // 2. Within same outcome:
            //    - If winning: pick move with LOWEST DTM (fastest win)
            //    - If losing: pick move with HIGHEST DTM (slowest loss - best defense)
            //    - If drawing: pick any (all equivalent)
            const bestMove = selectOptimalMove(topMoves.moves);
            // Execute the opponent move (tablebase moves should always be valid)
            const move = _ChessService.chessService.move(bestMove.san);
            if (!move) {
                throw new Error(`Failed to execute tablebase move: ${bestMove.san}`);
            }
            // Update state - switch back to player's turn
            setState((draft)=>{
                draft.training.isPlayerTurn = true;
                draft.training.isOpponentThinking = false;
            // Note: Removed opponent move toast to reduce UI clutter
            });
            // Check if game ended after opponent move
            if (_ChessService.chessService.isGameOver()) {
                await (0, _movecompletion.handleTrainingCompletion)(api, false); // Player didn't win
            }
            // Call completion callback if provided
            if (onComplete) {
                try {
                    await onComplete();
                    (0, _logging.getLogger)().debug("[OpponentTurnHandler] Completion callback executed successfully");
                } catch (error) {
                    (0, _logging.getLogger)().error("[OpponentTurnHandler] Completion callback failed:", error);
                }
            }
        } catch (error) {
            // Handle opponent move errors
            const userMessage = _ErrorService.ErrorService.handleUIError(error instanceof Error ? error : new Error(String(error)), "OpponentMove", {
                component: "OpponentMove",
                action: "execute"
            });
            setState((draft)=>{
                draft.ui.toasts.push({
                    id: Date.now().toString(),
                    message: userMessage,
                    type: "error"
                });
                // Reset to player's turn and clear thinking flag on error
                draft.training.isPlayerTurn = true;
                draft.training.isOpponentThinking = false;
            });
        }
    }
    constructor(){
        _define_property(this, "timeout", void 0);
        _define_property(this, "isCancelled", false);
    }
}
/**
 * Selects the optimal move from available tablebase moves based on game theory
 *
 * @param moves - Array of available tablebase moves
 * @returns The optimal move to play
 *
 * @description
 * Implements sophisticated move selection based on endgame principles:
 *
 * **Selection Strategy:**
 * 1. **Outcome Priority**: Win > Draw > Loss (by WDL value)
 * 2. **Within Same Outcome**:
 *    - **Winning** (WDL > 0): Choose move with LOWEST DTM (fastest win)
 *    - **Losing** (WDL < 0): Choose move with HIGHEST DTM (best defense, delays mate)
 *    - **Drawing** (WDL = 0): All moves equivalent, pick first
 *
 * **Rationale:**
 * - In winning positions: Convert advantage efficiently
 * - In losing positions: Maximize resistance, make opponent prove technique
 * - In drawn positions: Maintain draw with any legal move
 *
 * @example
 * ```typescript
 * // Losing position - will pick Kd7 (DTM -27) over Kc7 (DTM -15)
 * const moves = [
 *   { san: "Kc7", dtm: -15, wdl: -1000 },
 *   { san: "Kd7", dtm: -27, wdl: -1000 }, // Selected - delays mate longest
 * ];
 * const best = selectOptimalMove(moves);
 * ```
 */ function selectOptimalMove(moves) {
    // VALIDATION: Check DTM sign consistency
    moves.forEach((move)=>{
        if (move.wdl < 0 && move.dtm && move.dtm > 0) {
            (0, _logging.getLogger)().warn("[OpponentTurnHandler] WARNING: Positive DTM in losing position!", {
                san: move.san,
                wdl: move.wdl,
                dtm: move.dtm,
                category: move.category
            });
        }
    });
    // Sort moves by optimal criteria
    const sortedMoves = [
        ...moves
    ].sort((a, b)=>{
        // First priority: Sort by outcome (higher WDL is better)
        if (a.wdl !== b.wdl) {
            return b.wdl - a.wdl; // Prefer wins over draws over losses
        }
        // Same outcome - sort by DTM based on position type
        if (a.dtm === null || a.dtm === undefined || b.dtm === null || b.dtm === undefined) {
            return 0; // Can't compare if DTM is missing
        }
        // Check position type based on WDL
        if (a.wdl > 0) {
            // These are "winning" positions for the opponent after our move
            // For optimal defense: prefer HIGHER DTM (gives opponent longer path to win)
            return Math.abs(b.dtm) - Math.abs(a.dtm); // FIXED: Higher DTM first for defense
        } else if (a.wdl < 0) {
            // LOSING position: prefer HIGHER DTM (slower loss - better defense)
            // DTM is negative for losses
            // Example: -27 is better than -15 (lose in 27 moves vs 15 moves)
            return Math.abs(b.dtm) - Math.abs(a.dtm);
        } else {
            // DRAW: all moves equivalent
            return 0;
        }
    });
    const selected = sortedMoves[0];
    // Log the decision for debugging
    (0, _logging.getLogger)().info("[OpponentTurnHandler] Move selection:", {
        availableMoves: moves.map((m)=>({
                san: m.san,
                wdl: m.wdl,
                dtm: m.dtm,
                category: m.category
            })),
        selectedMove: {
            san: selected.san,
            wdl: selected.wdl,
            dtm: selected.dtm,
            category: selected.category
        },
        reason: selected.wdl < 0 ? `Best defense - delays mate for ${Math.abs(selected.dtm || 0)} moves` : selected.wdl > 0 ? `Fastest win - mate in ${Math.abs(selected.dtm || 0)} moves` : "Draw maintaining move"
    });
    return selected;
}
// Singleton instance for backward compatibility and global access
let managerInstance = null;
function getOpponentTurnManager() {
    if (!managerInstance) {
        managerInstance = new OpponentTurnManager();
    }
    return managerInstance;
}
function scheduleOpponentTurn(api, delay, options) {
    getOpponentTurnManager().schedule(api, delay, options);
}
function cancelScheduledOpponentTurn() {
    getOpponentTurnManager().cancel();
}

//# sourceMappingURL=data:application/json;base64,