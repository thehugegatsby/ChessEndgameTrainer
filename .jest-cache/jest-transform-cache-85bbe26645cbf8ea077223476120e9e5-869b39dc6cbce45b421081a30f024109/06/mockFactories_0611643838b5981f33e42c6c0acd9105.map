{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/utils/mockFactories.ts"],"sourcesContent":["/**\n * Mock Factories for Platform Services\n * Jest 30 compatible mocks for all platform services\n */\n\nimport type {\n  IPlatformStorage,\n  IPlatformNotification,\n  IPlatformDevice,\n  IPlatformPerformance,\n  IPlatformClipboard,\n  IPlatformShare,\n  IPlatformAnalytics,\n  DeviceInfo,\n  MemoryInfo,\n  NetworkStatus,\n  PerformanceMetrics,\n} from \"@shared/services/platform/types\";\n\n// Helper to create mock functions that work with or without Jest\nconst mockFn = (impl?: (...args: any[]) => any) => {\n  if (typeof jest !== \"undefined\" && jest.fn) {\n    return impl ? jest.fn(impl) : jest.fn();\n  }\n  return impl || (() => {});\n};\n\nconst asyncMockFn = (impl?: (...args: any[]) => any) => {\n  if (typeof jest !== \"undefined\" && jest.fn) {\n    return impl ? jest.fn(impl) : jest.fn().mockResolvedValue(undefined);\n  }\n  return impl || (() => Promise.resolve(undefined));\n};\n\n/**\n * Mock Platform Storage Service\n */\nexport function createMockPlatformStorage(): jest.Mocked<IPlatformStorage> {\n  const store: Record<string, any> = {};\n\n  return {\n    save: asyncMockFn(async (key: string, data: any) => {\n      store[key] = data;\n    }),\n    load: asyncMockFn(async (key: string) => {\n      return store[key] || null;\n    }),\n    remove: asyncMockFn(async (key: string) => {\n      delete store[key];\n    }),\n    clear: asyncMockFn(async () => {\n      Object.keys(store).forEach((key) => delete store[key]);\n    }),\n    getAllKeys: asyncMockFn(async () => {\n      return Object.keys(store);\n    }),\n  } as jest.Mocked<IPlatformStorage>;\n}\n\n/**\n * Mock Platform Device Service\n */\nexport function createMockPlatformDevice(): jest.Mocked<IPlatformDevice> {\n  const mockDeviceInfo: DeviceInfo = {\n    model: \"Test Device\",\n    brand: \"Test Brand\",\n    osVersion: \"1.0.0\",\n    screenSize: { width: 1920, height: 1080 },\n    pixelRatio: 1,\n    isTablet: false,\n  };\n\n  const mockMemoryInfo: MemoryInfo = {\n    totalMemory: 8 * 1024 * 1024 * 1024, // 8GB\n    availableMemory: 4 * 1024 * 1024 * 1024, // 4GB\n    usedMemory: 4 * 1024 * 1024 * 1024, // 4GB\n  };\n\n  const mockNetworkStatus: NetworkStatus = {\n    isOnline: true,\n    type: \"wifi\",\n    effectiveType: \"4g\",\n    downlink: 10,\n  };\n\n  return {\n    getPlatform: mockFn(() => \"web\"),\n    getDeviceInfo: mockFn(() => mockDeviceInfo),\n    getMemoryInfo: mockFn(() => mockMemoryInfo),\n    getNetworkStatus: mockFn(() => mockNetworkStatus),\n    isLowEndDevice: mockFn(() => false),\n  } as jest.Mocked<IPlatformDevice>;\n}\n\n/**\n * Mock Platform Notification Service\n */\nexport function createMockPlatformNotification(): jest.Mocked<IPlatformNotification> {\n  return {\n    requestPermission: asyncMockFn(async () => true),\n    show: asyncMockFn(),\n    schedule: asyncMockFn(async () => \"mock-notification-id\"),\n    cancel: asyncMockFn(),\n    cancelAll: asyncMockFn(),\n  } as jest.Mocked<IPlatformNotification>;\n}\n\n/**\n * Mock Platform Performance Service\n */\nexport function createMockPlatformPerformance(): jest.Mocked<IPlatformPerformance> {\n  let mockTime = 0;\n  const measures: Record<string, number[]> = {};\n  const marks: Record<string, number> = {};\n\n  const mockMetrics: PerformanceMetrics = {\n    measures,\n    marks,\n    averages: {},\n  };\n\n  return {\n    startMeasure: mockFn((name: string) => {\n      marks[`${name}_start`] = mockTime;\n    }),\n    endMeasure: mockFn((name: string) => {\n      const startTime = marks[`${name}_start`] || 0;\n      const duration = mockTime - startTime;\n      if (!measures[name]) measures[name] = [];\n      measures[name].push(duration);\n      mockTime += 16.67; // Simulate time passing\n      return duration;\n    }),\n    mark: mockFn((name: string) => {\n      marks[name] = mockTime;\n      mockTime += 1;\n    }),\n    measure: mockFn((name: string, startMark: string, endMark: string) => {\n      const duration = (marks[endMark] || 0) - (marks[startMark] || 0);\n      if (!measures[name]) measures[name] = [];\n      measures[name].push(duration);\n      return duration;\n    }),\n    getMetrics: mockFn(() => mockMetrics),\n    clearMetrics: mockFn(() => {\n      Object.keys(measures).forEach((key) => delete measures[key]);\n      Object.keys(marks).forEach((key) => delete marks[key]);\n    }),\n  } as jest.Mocked<IPlatformPerformance>;\n}\n\n/**\n * Mock Platform Clipboard Service\n */\nexport function createMockPlatformClipboard(): jest.Mocked<IPlatformClipboard> {\n  let clipboardContent = \"\";\n\n  return {\n    copy: asyncMockFn(async (text: string) => {\n      clipboardContent = text;\n    }),\n    paste: asyncMockFn(async () => clipboardContent),\n    hasContent: asyncMockFn(async () => clipboardContent.length > 0),\n  } as jest.Mocked<IPlatformClipboard>;\n}\n\n/**\n * Mock Platform Share Service\n */\nexport function createMockPlatformShare(): jest.Mocked<IPlatformShare> {\n  return {\n    canShare: mockFn(() => true),\n    share: asyncMockFn(),\n  } as jest.Mocked<IPlatformShare>;\n}\n\n/**\n * Mock Platform Analytics Service\n */\nexport function createMockPlatformAnalytics(): jest.Mocked<IPlatformAnalytics> {\n  return {\n    track: mockFn(),\n    identify: mockFn(),\n    page: mockFn(),\n    setUserProperties: mockFn(),\n  } as jest.Mocked<IPlatformAnalytics>;\n}\n\n/**\n * Complete mock platform service\n */\nexport function createMockPlatformService() {\n  return {\n    storage: createMockPlatformStorage(),\n    notifications: createMockPlatformNotification(),\n    device: createMockPlatformDevice(),\n    performance: createMockPlatformPerformance(),\n    clipboard: createMockPlatformClipboard(),\n    share: createMockPlatformShare(),\n    analytics: createMockPlatformAnalytics(),\n  };\n}\n\n/**\n * Pre-configured mock scenarios\n */\nexport const MockScenarios = {\n  /**\n   * Default mocks for most tests\n   */\n  default: createMockPlatformService,\n\n  /**\n   * Offline device scenario\n   */\n  offline: () => {\n    const service = createMockPlatformService();\n    (service.device.getNetworkStatus as any) = mockFn(() => ({\n      isOnline: false,\n      type: \"none\" as const,\n      effectiveType: undefined,\n      downlink: 0,\n    }));\n    return service;\n  },\n\n  /**\n   * Low-end device scenario\n   */\n  lowEndDevice: () => {\n    const service = createMockPlatformService();\n    (service.device.isLowEndDevice as any) = mockFn(() => true);\n    (service.device.getMemoryInfo as any) = mockFn(() => ({\n      totalMemory: 2 * 1024 * 1024 * 1024, // 2GB\n      availableMemory: 512 * 1024 * 1024, // 512MB\n      usedMemory: 1.5 * 1024 * 1024 * 1024, // 1.5GB\n    }));\n    return service;\n  },\n\n  /**\n   * No permissions scenario\n   */\n  noPermissions: () => {\n    const service = createMockPlatformService();\n    (service.notifications.requestPermission as any) = asyncMockFn(\n      async () => false,\n    );\n    (service.clipboard.hasContent as any) = asyncMockFn(async () => false);\n    (service.share.canShare as any) = mockFn(() => false);\n    return service;\n  },\n};\n"],"names":["MockScenarios","createMockPlatformAnalytics","createMockPlatformClipboard","createMockPlatformDevice","createMockPlatformNotification","createMockPlatformPerformance","createMockPlatformService","createMockPlatformShare","createMockPlatformStorage","mockFn","impl","jest","fn","asyncMockFn","mockResolvedValue","undefined","Promise","resolve","store","save","key","data","load","remove","clear","Object","keys","forEach","getAllKeys","mockDeviceInfo","model","brand","osVersion","screenSize","width","height","pixelRatio","isTablet","mockMemoryInfo","totalMemory","availableMemory","usedMemory","mockNetworkStatus","isOnline","type","effectiveType","downlink","getPlatform","getDeviceInfo","getMemoryInfo","getNetworkStatus","isLowEndDevice","requestPermission","show","schedule","cancel","cancelAll","mockTime","measures","marks","mockMetrics","averages","startMeasure","name","endMeasure","startTime","duration","push","mark","measure","startMark","endMark","getMetrics","clearMetrics","clipboardContent","copy","text","paste","hasContent","length","canShare","share","track","identify","page","setUserProperties","storage","notifications","device","performance","clipboard","analytics","default","offline","service","lowEndDevice","noPermissions"],"mappings":"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"}