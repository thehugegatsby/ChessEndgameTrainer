{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/promotion-detection.test.ts"],"sourcesContent":["/**\n * Unit test for promotion detection\n */\n\nimport { Chess } from \"chess.js\";\nimport { createValidatedMove } from \"@shared/types/chess\";\n\ndescribe(\"Promotion Detection\", () => {\n  it(\"should detect promotion in chess.js move\", () => {\n    // Set up position with pawn on e7, black king on d8 (not blocking e8)\n    const chess = new Chess(\"3k4/4P3/4K3/8/8/8/8/8 w - - 0 1\");\n\n    // Make promotion move - use object notation\n    const fenBefore = chess.fen();\n    const move = chess.move({ from: \"e7\", to: \"e8\", promotion: \"q\" });\n    const fenAfter = chess.fen();\n\n    console.log(\"Chess.js move result:\", move);\n\n    expect(move).toBeDefined();\n    expect(move.promotion).toBe(\"q\");\n    expect(move.san).toBe(\"e8=Q+\");\n\n    // Test createValidatedMove\n    const validatedMove = createValidatedMove(move, fenBefore, fenAfter);\n\n    console.log(\"ValidatedMove:\", {\n      promotion: validatedMove.promotion,\n      san: validatedMove.san,\n      isPromotion: validatedMove.isPromotion(),\n    });\n\n    expect(validatedMove.promotion).toBe(\"q\");\n    expect(validatedMove.isPromotion()).toBe(true);\n  });\n\n  it(\"should handle different promotion pieces\", () => {\n    const testCases = [\n      { piece: \"q\", expected: \"q\" },\n      { piece: \"r\", expected: \"r\" },\n      { piece: \"b\", expected: \"b\" },\n      { piece: \"n\", expected: \"n\" },\n    ];\n\n    testCases.forEach(({ piece, expected }) => {\n      const chess = new Chess(\"3k4/4P3/4K3/8/8/8/8/8 w - - 0 1\");\n      const move = chess.move({ from: \"e7\", to: \"e8\", promotion: piece });\n\n      expect(move.promotion).toBe(expected);\n    });\n  });\n\n  it(\"should handle promotion via object notation\", () => {\n    const chess = new Chess(\"3k4/4P3/4K3/8/8/8/8/8 w - - 0 1\");\n\n    const move = chess.move({\n      from: \"e7\",\n      to: \"e8\",\n      promotion: \"q\",\n    });\n\n    console.log(\"Object notation move:\", move);\n\n    expect(move).toBeDefined();\n    expect(move.promotion).toBe(\"q\");\n  });\n});\n"],"names":["describe","it","chess","Chess","fenBefore","fen","move","from","to","promotion","fenAfter","console","log","expect","toBeDefined","toBe","san","validatedMove","createValidatedMove","isPromotion","testCases","piece","expected","forEach"],"mappings":"AAAA;;CAEC;;;;uBAEqB;wBACc;AAEpCA,SAAS,uBAAuB;IAC9BC,GAAG,4CAA4C;QAC7C,sEAAsE;QACtE,MAAMC,QAAQ,IAAIC,YAAK,CAAC;QAExB,4CAA4C;QAC5C,MAAMC,YAAYF,MAAMG,GAAG;QAC3B,MAAMC,OAAOJ,MAAMI,IAAI,CAAC;YAAEC,MAAM;YAAMC,IAAI;YAAMC,WAAW;QAAI;QAC/D,MAAMC,WAAWR,MAAMG,GAAG;QAE1BM,QAAQC,GAAG,CAAC,yBAAyBN;QAErCO,OAAOP,MAAMQ,WAAW;QACxBD,OAAOP,KAAKG,SAAS,EAAEM,IAAI,CAAC;QAC5BF,OAAOP,KAAKU,GAAG,EAAED,IAAI,CAAC;QAEtB,2BAA2B;QAC3B,MAAME,gBAAgBC,IAAAA,2BAAmB,EAACZ,MAAMF,WAAWM;QAE3DC,QAAQC,GAAG,CAAC,kBAAkB;YAC5BH,WAAWQ,cAAcR,SAAS;YAClCO,KAAKC,cAAcD,GAAG;YACtBG,aAAaF,cAAcE,WAAW;QACxC;QAEAN,OAAOI,cAAcR,SAAS,EAAEM,IAAI,CAAC;QACrCF,OAAOI,cAAcE,WAAW,IAAIJ,IAAI,CAAC;IAC3C;IAEAd,GAAG,4CAA4C;QAC7C,MAAMmB,YAAY;YAChB;gBAAEC,OAAO;gBAAKC,UAAU;YAAI;YAC5B;gBAAED,OAAO;gBAAKC,UAAU;YAAI;YAC5B;gBAAED,OAAO;gBAAKC,UAAU;YAAI;YAC5B;gBAAED,OAAO;gBAAKC,UAAU;YAAI;SAC7B;QAEDF,UAAUG,OAAO,CAAC,CAAC,EAAEF,KAAK,EAAEC,QAAQ,EAAE;YACpC,MAAMpB,QAAQ,IAAIC,YAAK,CAAC;YACxB,MAAMG,OAAOJ,MAAMI,IAAI,CAAC;gBAAEC,MAAM;gBAAMC,IAAI;gBAAMC,WAAWY;YAAM;YAEjER,OAAOP,KAAKG,SAAS,EAAEM,IAAI,CAACO;QAC9B;IACF;IAEArB,GAAG,+CAA+C;QAChD,MAAMC,QAAQ,IAAIC,YAAK,CAAC;QAExB,MAAMG,OAAOJ,MAAMI,IAAI,CAAC;YACtBC,MAAM;YACNC,IAAI;YACJC,WAAW;QACb;QAEAE,QAAQC,GAAG,CAAC,yBAAyBN;QAErCO,OAAOP,MAAMQ,WAAW;QACxBD,OAAOP,KAAKG,SAAS,EAAEM,IAAI,CAAC;IAC9B;AACF"}