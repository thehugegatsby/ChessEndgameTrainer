fe1cc075f9b20af3f6c6f8f478646507
/**
 * Unit test for promotion detection
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _chess = require("chess.js");
const _chess1 = require("../../shared/types/chess");
describe("Promotion Detection", ()=>{
    it("should detect promotion in chess.js move", ()=>{
        // Set up position with pawn on e7, black king on d8 (not blocking e8)
        const chess = new _chess.Chess("3k4/4P3/4K3/8/8/8/8/8 w - - 0 1");
        // Make promotion move - use object notation
        const fenBefore = chess.fen();
        const move = chess.move({
            from: "e7",
            to: "e8",
            promotion: "q"
        });
        const fenAfter = chess.fen();
        console.log("Chess.js move result:", move);
        expect(move).toBeDefined();
        expect(move.promotion).toBe("q");
        expect(move.san).toBe("e8=Q+");
        // Test createValidatedMove
        const validatedMove = (0, _chess1.createValidatedMove)(move, fenBefore, fenAfter);
        console.log("ValidatedMove:", {
            promotion: validatedMove.promotion,
            san: validatedMove.san,
            isPromotion: validatedMove.isPromotion()
        });
        expect(validatedMove.promotion).toBe("q");
        expect(validatedMove.isPromotion()).toBe(true);
    });
    it("should handle different promotion pieces", ()=>{
        const testCases = [
            {
                piece: "q",
                expected: "q"
            },
            {
                piece: "r",
                expected: "r"
            },
            {
                piece: "b",
                expected: "b"
            },
            {
                piece: "n",
                expected: "n"
            }
        ];
        testCases.forEach(({ piece, expected })=>{
            const chess = new _chess.Chess("3k4/4P3/4K3/8/8/8/8/8 w - - 0 1");
            const move = chess.move({
                from: "e7",
                to: "e8",
                promotion: piece
            });
            expect(move.promotion).toBe(expected);
        });
    });
    it("should handle promotion via object notation", ()=>{
        const chess = new _chess.Chess("3k4/4P3/4K3/8/8/8/8/8 w - - 0 1");
        const move = chess.move({
            from: "e7",
            to: "e8",
            promotion: "q"
        });
        console.log("Object notation move:", move);
        expect(move).toBeDefined();
        expect(move.promotion).toBe("q");
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvdGVzdHMvdW5pdC9wcm9tb3Rpb24tZGV0ZWN0aW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVbml0IHRlc3QgZm9yIHByb21vdGlvbiBkZXRlY3Rpb25cbiAqL1xuXG5pbXBvcnQgeyBDaGVzcyB9IGZyb20gXCJjaGVzcy5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlVmFsaWRhdGVkTW92ZSB9IGZyb20gXCJAc2hhcmVkL3R5cGVzL2NoZXNzXCI7XG5cbmRlc2NyaWJlKFwiUHJvbW90aW9uIERldGVjdGlvblwiLCAoKSA9PiB7XG4gIGl0KFwic2hvdWxkIGRldGVjdCBwcm9tb3Rpb24gaW4gY2hlc3MuanMgbW92ZVwiLCAoKSA9PiB7XG4gICAgLy8gU2V0IHVwIHBvc2l0aW9uIHdpdGggcGF3biBvbiBlNywgYmxhY2sga2luZyBvbiBkOCAobm90IGJsb2NraW5nIGU4KVxuICAgIGNvbnN0IGNoZXNzID0gbmV3IENoZXNzKFwiM2s0LzRQMy80SzMvOC84LzgvOC84IHcgLSAtIDAgMVwiKTtcblxuICAgIC8vIE1ha2UgcHJvbW90aW9uIG1vdmUgLSB1c2Ugb2JqZWN0IG5vdGF0aW9uXG4gICAgY29uc3QgZmVuQmVmb3JlID0gY2hlc3MuZmVuKCk7XG4gICAgY29uc3QgbW92ZSA9IGNoZXNzLm1vdmUoeyBmcm9tOiBcImU3XCIsIHRvOiBcImU4XCIsIHByb21vdGlvbjogXCJxXCIgfSk7XG4gICAgY29uc3QgZmVuQWZ0ZXIgPSBjaGVzcy5mZW4oKTtcblxuICAgIGNvbnNvbGUubG9nKFwiQ2hlc3MuanMgbW92ZSByZXN1bHQ6XCIsIG1vdmUpO1xuXG4gICAgZXhwZWN0KG1vdmUpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KG1vdmUucHJvbW90aW9uKS50b0JlKFwicVwiKTtcbiAgICBleHBlY3QobW92ZS5zYW4pLnRvQmUoXCJlOD1RK1wiKTtcblxuICAgIC8vIFRlc3QgY3JlYXRlVmFsaWRhdGVkTW92ZVxuICAgIGNvbnN0IHZhbGlkYXRlZE1vdmUgPSBjcmVhdGVWYWxpZGF0ZWRNb3ZlKG1vdmUsIGZlbkJlZm9yZSwgZmVuQWZ0ZXIpO1xuXG4gICAgY29uc29sZS5sb2coXCJWYWxpZGF0ZWRNb3ZlOlwiLCB7XG4gICAgICBwcm9tb3Rpb246IHZhbGlkYXRlZE1vdmUucHJvbW90aW9uLFxuICAgICAgc2FuOiB2YWxpZGF0ZWRNb3ZlLnNhbixcbiAgICAgIGlzUHJvbW90aW9uOiB2YWxpZGF0ZWRNb3ZlLmlzUHJvbW90aW9uKCksXG4gICAgfSk7XG5cbiAgICBleHBlY3QodmFsaWRhdGVkTW92ZS5wcm9tb3Rpb24pLnRvQmUoXCJxXCIpO1xuICAgIGV4cGVjdCh2YWxpZGF0ZWRNb3ZlLmlzUHJvbW90aW9uKCkpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGhhbmRsZSBkaWZmZXJlbnQgcHJvbW90aW9uIHBpZWNlc1wiLCAoKSA9PiB7XG4gICAgY29uc3QgdGVzdENhc2VzID0gW1xuICAgICAgeyBwaWVjZTogXCJxXCIsIGV4cGVjdGVkOiBcInFcIiB9LFxuICAgICAgeyBwaWVjZTogXCJyXCIsIGV4cGVjdGVkOiBcInJcIiB9LFxuICAgICAgeyBwaWVjZTogXCJiXCIsIGV4cGVjdGVkOiBcImJcIiB9LFxuICAgICAgeyBwaWVjZTogXCJuXCIsIGV4cGVjdGVkOiBcIm5cIiB9LFxuICAgIF07XG5cbiAgICB0ZXN0Q2FzZXMuZm9yRWFjaCgoeyBwaWVjZSwgZXhwZWN0ZWQgfSkgPT4ge1xuICAgICAgY29uc3QgY2hlc3MgPSBuZXcgQ2hlc3MoXCIzazQvNFAzLzRLMy84LzgvOC84LzggdyAtIC0gMCAxXCIpO1xuICAgICAgY29uc3QgbW92ZSA9IGNoZXNzLm1vdmUoeyBmcm9tOiBcImU3XCIsIHRvOiBcImU4XCIsIHByb21vdGlvbjogcGllY2UgfSk7XG5cbiAgICAgIGV4cGVjdChtb3ZlLnByb21vdGlvbikudG9CZShleHBlY3RlZCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGhhbmRsZSBwcm9tb3Rpb24gdmlhIG9iamVjdCBub3RhdGlvblwiLCAoKSA9PiB7XG4gICAgY29uc3QgY2hlc3MgPSBuZXcgQ2hlc3MoXCIzazQvNFAzLzRLMy84LzgvOC84LzggdyAtIC0gMCAxXCIpO1xuXG4gICAgY29uc3QgbW92ZSA9IGNoZXNzLm1vdmUoe1xuICAgICAgZnJvbTogXCJlN1wiLFxuICAgICAgdG86IFwiZThcIixcbiAgICAgIHByb21vdGlvbjogXCJxXCIsXG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmxvZyhcIk9iamVjdCBub3RhdGlvbiBtb3ZlOlwiLCBtb3ZlKTtcblxuICAgIGV4cGVjdChtb3ZlKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChtb3ZlLnByb21vdGlvbikudG9CZShcInFcIik7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsImNoZXNzIiwiQ2hlc3MiLCJmZW5CZWZvcmUiLCJmZW4iLCJtb3ZlIiwiZnJvbSIsInRvIiwicHJvbW90aW9uIiwiZmVuQWZ0ZXIiLCJjb25zb2xlIiwibG9nIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJ0b0JlIiwic2FuIiwidmFsaWRhdGVkTW92ZSIsImNyZWF0ZVZhbGlkYXRlZE1vdmUiLCJpc1Byb21vdGlvbiIsInRlc3RDYXNlcyIsInBpZWNlIiwiZXhwZWN0ZWQiLCJmb3JFYWNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQzs7Ozt1QkFFcUI7d0JBQ2M7QUFFcENBLFNBQVMsdUJBQXVCO0lBQzlCQyxHQUFHLDRDQUE0QztRQUM3QyxzRUFBc0U7UUFDdEUsTUFBTUMsUUFBUSxJQUFJQyxZQUFLLENBQUM7UUFFeEIsNENBQTRDO1FBQzVDLE1BQU1DLFlBQVlGLE1BQU1HLEdBQUc7UUFDM0IsTUFBTUMsT0FBT0osTUFBTUksSUFBSSxDQUFDO1lBQUVDLE1BQU07WUFBTUMsSUFBSTtZQUFNQyxXQUFXO1FBQUk7UUFDL0QsTUFBTUMsV0FBV1IsTUFBTUcsR0FBRztRQUUxQk0sUUFBUUMsR0FBRyxDQUFDLHlCQUF5Qk47UUFFckNPLE9BQU9QLE1BQU1RLFdBQVc7UUFDeEJELE9BQU9QLEtBQUtHLFNBQVMsRUFBRU0sSUFBSSxDQUFDO1FBQzVCRixPQUFPUCxLQUFLVSxHQUFHLEVBQUVELElBQUksQ0FBQztRQUV0QiwyQkFBMkI7UUFDM0IsTUFBTUUsZ0JBQWdCQyxJQUFBQSwyQkFBbUIsRUFBQ1osTUFBTUYsV0FBV007UUFFM0RDLFFBQVFDLEdBQUcsQ0FBQyxrQkFBa0I7WUFDNUJILFdBQVdRLGNBQWNSLFNBQVM7WUFDbENPLEtBQUtDLGNBQWNELEdBQUc7WUFDdEJHLGFBQWFGLGNBQWNFLFdBQVc7UUFDeEM7UUFFQU4sT0FBT0ksY0FBY1IsU0FBUyxFQUFFTSxJQUFJLENBQUM7UUFDckNGLE9BQU9JLGNBQWNFLFdBQVcsSUFBSUosSUFBSSxDQUFDO0lBQzNDO0lBRUFkLEdBQUcsNENBQTRDO1FBQzdDLE1BQU1tQixZQUFZO1lBQ2hCO2dCQUFFQyxPQUFPO2dCQUFLQyxVQUFVO1lBQUk7WUFDNUI7Z0JBQUVELE9BQU87Z0JBQUtDLFVBQVU7WUFBSTtZQUM1QjtnQkFBRUQsT0FBTztnQkFBS0MsVUFBVTtZQUFJO1lBQzVCO2dCQUFFRCxPQUFPO2dCQUFLQyxVQUFVO1lBQUk7U0FDN0I7UUFFREYsVUFBVUcsT0FBTyxDQUFDLENBQUMsRUFBRUYsS0FBSyxFQUFFQyxRQUFRLEVBQUU7WUFDcEMsTUFBTXBCLFFBQVEsSUFBSUMsWUFBSyxDQUFDO1lBQ3hCLE1BQU1HLE9BQU9KLE1BQU1JLElBQUksQ0FBQztnQkFBRUMsTUFBTTtnQkFBTUMsSUFBSTtnQkFBTUMsV0FBV1k7WUFBTTtZQUVqRVIsT0FBT1AsS0FBS0csU0FBUyxFQUFFTSxJQUFJLENBQUNPO1FBQzlCO0lBQ0Y7SUFFQXJCLEdBQUcsK0NBQStDO1FBQ2hELE1BQU1DLFFBQVEsSUFBSUMsWUFBSyxDQUFDO1FBRXhCLE1BQU1HLE9BQU9KLE1BQU1JLElBQUksQ0FBQztZQUN0QkMsTUFBTTtZQUNOQyxJQUFJO1lBQ0pDLFdBQVc7UUFDYjtRQUVBRSxRQUFRQyxHQUFHLENBQUMseUJBQXlCTjtRQUVyQ08sT0FBT1AsTUFBTVEsV0FBVztRQUN4QkQsT0FBT1AsS0FBS0csU0FBUyxFQUFFTSxJQUFJLENBQUM7SUFDOUI7QUFDRiJ9