{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/services/ChessService.status.test.ts"],"sourcesContent":["/**\n * @file ChessService Status Methods Tests\n * @description Coverage tests for chess status detection methods (Lines 368-389)\n * Target: isCheck(), isCheckmate(), isStalemate(), isDraw() - +7% coverage boost\n */\n\nimport { ChessService } from \"@shared/services/ChessService\";\nimport { Chess } from \"chess.js\";\n\n// Mock chess.js following existing pattern\njest.mock(\"chess.js\");\n\nconst MockedChess = Chess as jest.MockedClass<typeof Chess>;\n\ndescribe(\"ChessService Status Methods Coverage\", () => {\n  let chessService: ChessService;\n  let mockChessInstance: jest.Mocked<InstanceType<typeof Chess>>;\n\n  // Test fixtures - specific FEN positions for each status\n  const statusTestFens = {\n    check: \"rnbqkb1r/pppp1ppp/5n2/4p3/2B1P3/8/PPPP1PPP/RNBQK1NR w KQkq - 0 4\",\n    checkmate: \"rnb1kbnr/pppp1ppp/8/4p3/6Pq/5P2/PPPPP2P/RNBQKBNR w KQkq - 1 3\",\n    stalemate: \"5bnr/4p1pq/4Qpkr/7p/2P4P/8/PP1PPPP1/RNB1KBNR b KQ - 0 10\",\n    draw50: \"8/8/8/8/8/5k2/8/5K2 w - - 50 100\", // 50-move rule\n    drawRepetition: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", // Theoretical repetition\n    normal: \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\", // Normal position\n  };\n\n  beforeEach(() => {\n    MockedChess.mockClear();\n\n    // Create comprehensive mock Chess instance with status methods\n    mockChessInstance = {\n      move: jest.fn(),\n      fen: jest.fn().mockReturnValue(statusTestFens.normal),\n      pgn: jest.fn().mockReturnValue(\"\"),\n      history: jest.fn().mockReturnValue([]),\n      load: jest.fn(),\n      isGameOver: jest.fn().mockReturnValue(false),\n      turn: jest.fn().mockReturnValue(\"w\"),\n      moves: jest.fn().mockReturnValue([\"e4\", \"e3\", \"Nf3\"]),\n      // Add the status methods we're testing\n      isCheck: jest.fn().mockReturnValue(false),\n      isCheckmate: jest.fn().mockReturnValue(false),\n      isStalemate: jest.fn().mockReturnValue(false),\n      isDraw: jest.fn().mockReturnValue(false),\n    } as any;\n\n    MockedChess.mockImplementation(() => mockChessInstance);\n    chessService = new ChessService();\n    \n    // Initialize service with normal position\n    chessService.initialize(statusTestFens.normal);\n  });\n\n  describe(\"isCheck() - Line 368\", () => {\n    it(\"should return true when king is in check\", () => {\n      // Setup mock for check position\n      mockChessInstance.isCheck.mockReturnValue(true);\n      \n      // Initialize with check position\n      chessService.initialize(statusTestFens.check);\n      \n      // Test the method\n      const result = chessService.isCheck();\n      \n      expect(result).toBe(true);\n      expect(mockChessInstance.isCheck).toHaveBeenCalled();\n    });\n\n    it(\"should return false when king is not in check\", () => {\n      // Setup mock for normal position\n      mockChessInstance.isCheck.mockReturnValue(false);\n      \n      // Initialize with normal position\n      chessService.initialize(statusTestFens.normal);\n      \n      // Test the method\n      const result = chessService.isCheck();\n      \n      expect(result).toBe(false);\n      expect(mockChessInstance.isCheck).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"isCheckmate() - Line 375\", () => {\n    it(\"should return true when position is checkmate\", () => {\n      // Setup mock for checkmate position\n      mockChessInstance.isCheckmate.mockReturnValue(true);\n      mockChessInstance.isGameOver.mockReturnValue(true);\n      \n      // Initialize with checkmate position\n      chessService.initialize(statusTestFens.checkmate);\n      \n      // Test the method\n      const result = chessService.isCheckmate();\n      \n      expect(result).toBe(true);\n      expect(mockChessInstance.isCheckmate).toHaveBeenCalled();\n    });\n\n    it(\"should return false when position is not checkmate\", () => {\n      // Setup mock for normal position\n      mockChessInstance.isCheckmate.mockReturnValue(false);\n      \n      // Initialize with normal position\n      chessService.initialize(statusTestFens.normal);\n      \n      // Test the method\n      const result = chessService.isCheckmate();\n      \n      expect(result).toBe(false);\n      expect(mockChessInstance.isCheckmate).toHaveBeenCalled();\n    });\n\n    it(\"should handle edge case - check but not checkmate\", () => {\n      // Setup mock for check but not checkmate\n      mockChessInstance.isCheck.mockReturnValue(true);\n      mockChessInstance.isCheckmate.mockReturnValue(false);\n      \n      // Initialize with check position\n      chessService.initialize(statusTestFens.check);\n      \n      // Test the method\n      const result = chessService.isCheckmate();\n      \n      expect(result).toBe(false);\n      expect(mockChessInstance.isCheckmate).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"isStalemate() - Line 381\", () => {\n    it(\"should return true when position is stalemate\", () => {\n      // Setup mock for stalemate position\n      mockChessInstance.isStalemate.mockReturnValue(true);\n      mockChessInstance.isGameOver.mockReturnValue(true);\n      \n      // Initialize with stalemate position\n      chessService.initialize(statusTestFens.stalemate);\n      \n      // Test the method\n      const result = chessService.isStalemate();\n      \n      expect(result).toBe(true);\n      expect(mockChessInstance.isStalemate).toHaveBeenCalled();\n    });\n\n    it(\"should return false when position is not stalemate\", () => {\n      // Setup mock for normal position\n      mockChessInstance.isStalemate.mockReturnValue(false);\n      \n      // Initialize with normal position\n      chessService.initialize(statusTestFens.normal);\n      \n      // Test the method\n      const result = chessService.isStalemate();\n      \n      expect(result).toBe(false);\n      expect(mockChessInstance.isStalemate).toHaveBeenCalled();\n    });\n\n    it(\"should handle edge case - game over but not stalemate\", () => {\n      // Setup mock for checkmate (game over but not stalemate)\n      mockChessInstance.isStalemate.mockReturnValue(false);\n      mockChessInstance.isCheckmate.mockReturnValue(true);\n      mockChessInstance.isGameOver.mockReturnValue(true);\n      \n      // Initialize with checkmate position\n      chessService.initialize(statusTestFens.checkmate);\n      \n      // Test the method\n      const result = chessService.isStalemate();\n      \n      expect(result).toBe(false);\n      expect(mockChessInstance.isStalemate).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"isDraw() - Line 388\", () => {\n    it(\"should return true for 50-move rule draw\", () => {\n      // Setup mock for 50-move rule draw\n      mockChessInstance.isDraw.mockReturnValue(true);\n      mockChessInstance.isGameOver.mockReturnValue(true);\n      \n      // Initialize with 50-move rule position\n      chessService.initialize(statusTestFens.draw50);\n      \n      // Test the method\n      const result = chessService.isDraw();\n      \n      expect(result).toBe(true);\n      expect(mockChessInstance.isDraw).toHaveBeenCalled();\n    });\n\n    it(\"should return true for threefold repetition draw\", () => {\n      // Setup mock for repetition draw\n      mockChessInstance.isDraw.mockReturnValue(true);\n      mockChessInstance.isGameOver.mockReturnValue(true);\n      \n      // Initialize with repetition position\n      chessService.initialize(statusTestFens.drawRepetition);\n      \n      // Test the method\n      const result = chessService.isDraw();\n      \n      expect(result).toBe(true);\n      expect(mockChessInstance.isDraw).toHaveBeenCalled();\n    });\n\n    it(\"should return false when position is not a draw\", () => {\n      // Setup mock for normal position\n      mockChessInstance.isDraw.mockReturnValue(false);\n      \n      // Initialize with normal position\n      chessService.initialize(statusTestFens.normal);\n      \n      // Test the method\n      const result = chessService.isDraw();\n      \n      expect(result).toBe(false);\n      expect(mockChessInstance.isDraw).toHaveBeenCalled();\n    });\n\n    it(\"should return false for checkmate (not a draw)\", () => {\n      // Setup mock for checkmate (decisive result, not draw)\n      mockChessInstance.isDraw.mockReturnValue(false);\n      mockChessInstance.isCheckmate.mockReturnValue(true);\n      mockChessInstance.isGameOver.mockReturnValue(true);\n      \n      // Initialize with checkmate position\n      chessService.initialize(statusTestFens.checkmate);\n      \n      // Test the method\n      const result = chessService.isDraw();\n      \n      expect(result).toBe(false);\n      expect(mockChessInstance.isDraw).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Status Methods Integration\", () => {\n    it(\"should handle multiple status queries on same position\", () => {\n      // Setup mock for check position\n      mockChessInstance.isCheck.mockReturnValue(true);\n      mockChessInstance.isCheckmate.mockReturnValue(false);\n      mockChessInstance.isStalemate.mockReturnValue(false);\n      mockChessInstance.isDraw.mockReturnValue(false);\n      \n      // Initialize with check position\n      chessService.initialize(statusTestFens.check);\n      \n      // Test multiple methods\n      expect(chessService.isCheck()).toBe(true);\n      expect(chessService.isCheckmate()).toBe(false);\n      expect(chessService.isStalemate()).toBe(false);\n      expect(chessService.isDraw()).toBe(false);\n      \n      // Verify all methods were called\n      expect(mockChessInstance.isCheck).toHaveBeenCalled();\n      expect(mockChessInstance.isCheckmate).toHaveBeenCalled();\n      expect(mockChessInstance.isStalemate).toHaveBeenCalled();\n      expect(mockChessInstance.isDraw).toHaveBeenCalled();\n    });\n\n    it(\"should handle stalemate position correctly\", () => {\n      // Setup mock for stalemate position\n      mockChessInstance.isCheck.mockReturnValue(false);\n      mockChessInstance.isCheckmate.mockReturnValue(false);\n      mockChessInstance.isStalemate.mockReturnValue(true);\n      mockChessInstance.isDraw.mockReturnValue(true);\n      mockChessInstance.isGameOver.mockReturnValue(true);\n      \n      // Initialize with stalemate position\n      chessService.initialize(statusTestFens.stalemate);\n      \n      // Test stalemate logic\n      expect(chessService.isCheck()).toBe(false); // Stalemate = no check\n      expect(chessService.isCheckmate()).toBe(false); // Not checkmate\n      expect(chessService.isStalemate()).toBe(true); // Is stalemate\n      expect(chessService.isDraw()).toBe(true); // Stalemate = draw\n    });\n  });\n});"],"names":["jest","mock","MockedChess","Chess","describe","chessService","mockChessInstance","statusTestFens","check","checkmate","stalemate","draw50","drawRepetition","normal","beforeEach","mockClear","move","fn","fen","mockReturnValue","pgn","history","load","isGameOver","turn","moves","isCheck","isCheckmate","isStalemate","isDraw","mockImplementation","ChessService","initialize","it","result","expect","toBe","toHaveBeenCalled"],"mappings":"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"}