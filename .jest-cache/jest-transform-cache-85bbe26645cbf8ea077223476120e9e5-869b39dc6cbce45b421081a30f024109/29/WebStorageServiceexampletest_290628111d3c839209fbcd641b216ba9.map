{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/examples/WebStorageService.example.test.ts"],"sourcesContent":["/**\n * WebStorageService Testing Example\n * Shows how to test storage services using ServiceContainer with dependency injection\n *\n * This example demonstrates the recommended approach for testing platform services\n * with proper isolation and no global state pollution.\n */\n\nimport React from \"react\";\nimport { createTestContainer, TestScenarios, TestAssertions } from \"../utils\";\nimport type { IPlatformStorage } from \"@shared/services/platform/types\";\n\ndescribe(\"WebStorageService - Example Tests\", () => {\n  // APPROACH 1: Per-test container (recommended for isolation)\n  describe(\"Per-test container approach\", () => {\n    let container: ReturnType<typeof createTestContainer>;\n    let storageService: IPlatformStorage;\n    let mockStorage: Storage;\n\n    beforeEach(() => {\n      // Create fresh container per test - no global state!\n      container = createTestContainer();\n      storageService = container.resolve(\"platform.storage\");\n      mockStorage = container.resolveCustom<Storage>(\"browser.localStorage\");\n    });\n\n    test(\"should save and load data correctly\", async () => {\n      // Test data\n      const testKey = \"test-key\";\n      const testData = { name: \"John\", age: 30 };\n\n      // Save data\n      await storageService.save(testKey, testData);\n\n      // Verify localStorage was called\n      TestAssertions.expectStorageCall(\n        mockStorage,\n        \"setItem\",\n        \"chess_trainer_test-key\",\n        JSON.stringify(testData),\n      );\n\n      // Load data\n      const loadedData = await storageService.load(testKey);\n\n      // Assertions\n      expect(loadedData).toEqual(testData);\n      TestAssertions.expectStorageCall(\n        mockStorage,\n        \"getItem\",\n        \"chess_trainer_test-key\",\n      );\n    });\n\n    test(\"should handle invalid keys gracefully\", async () => {\n      const invalidKey = \"invalid-key!@#\";\n\n      // Should throw error for invalid key\n      await expect(storageService.save(invalidKey, \"data\")).rejects.toThrow(\n        \"Invalid storage key\",\n      );\n    });\n\n    test(\"should clear all prefixed keys\", async () => {\n      // Setup: Save multiple items\n      await storageService.save(\"key1\", \"value1\");\n      await storageService.save(\"key2\", \"value2\");\n\n      // Clear all\n      await storageService.clear();\n\n      // Verify all keys were removed\n      const keys = await storageService.getAllKeys();\n      expect(keys).toHaveLength(0);\n    });\n\n    test(\"should return null for non-existent keys\", async () => {\n      const result = await storageService.load(\"non-existent-key\");\n      expect(result).toBeNull();\n    });\n  });\n\n  // APPROACH 2: Pre-configured scenarios\n  describe(\"Pre-configured scenarios\", () => {\n    test(\"should work with pre-populated storage\", async () => {\n      // Use scenario with pre-existing data\n      const container = TestScenarios.withStorageData({\n        \"chess_trainer_existing-key\": JSON.stringify({ value: \"existing\" }),\n      });\n\n      const storageService = container.resolve(\"platform.storage\");\n\n      // Should load existing data\n      const result = await storageService.load(\"existing-key\");\n      expect(result).toEqual({ value: \"existing\" });\n    });\n\n    test(\"should handle offline scenario\", async () => {\n      const container = TestScenarios.offline();\n      const deviceService = container.resolve(\"platform.device\");\n\n      // Device should report offline\n      const networkStatus = deviceService.getNetworkStatus();\n      expect(networkStatus.isOnline).toBe(false);\n    });\n  });\n\n  // APPROACH 3: Custom mock overrides\n  describe(\"Custom mock scenarios\", () => {\n    test(\"should handle localStorage quota exceeded\", async () => {\n      // Create container with localStorage that throws quota error\n      const mockStorageWithQuota = {\n        getItem: jest.fn(),\n        setItem: jest.fn().mockImplementation(() => {\n          throw new Error(\"QuotaExceededError\");\n        }),\n        removeItem: jest.fn(),\n        clear: jest.fn(),\n        key: jest.fn(),\n        length: 0,\n      } as Storage;\n\n      const container = createTestContainer({\n        localStorage: mockStorageWithQuota,\n      });\n\n      const storageService = container.resolve(\"platform.storage\");\n\n      // Should handle quota error gracefully\n      await expect(storageService.save(\"key\", \"data\")).rejects.toThrow(\n        \"Failed to save data\",\n      );\n    });\n\n    test(\"should handle corrupted JSON data\", async () => {\n      // Create localStorage with corrupted data\n      const mockStorageWithCorruption = {\n        getItem: jest.fn().mockReturnValue(\"invalid-json{\"),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n        clear: jest.fn(),\n        key: jest.fn(),\n        length: 1,\n      } as Storage;\n\n      const container = createTestContainer({\n        localStorage: mockStorageWithCorruption,\n      });\n\n      const storageService = container.resolve(\"platform.storage\");\n\n      // Should handle corrupted JSON gracefully\n      const result = await storageService.load(\"corrupted-key\");\n      expect(result).toBeNull();\n    });\n  });\n\n  // COMPARISON: Old vs New approach\n  describe(\"Migration comparison\", () => {\n    test(\"OLD APPROACH (Jest 30 incompatible)\", () => {\n      // This is what we used to do - BREAKS in Jest 30!\n      /*\n      beforeAll(() => {\n        Object.defineProperty(global, 'localStorage', {\n          value: mockLocalStorage,\n          writable: true\n        });\n      });\n      \n      afterAll(() => {\n        Object.defineProperty(global, 'localStorage', {\n          value: originalLocalStorage,\n          writable: true\n        });\n      });\n      */\n      // Problems:\n      // - Global state pollution\n      // - Jest 30 incompatible (window.localStorage non-configurable)\n      // - Manual cleanup required\n      // - Test isolation issues\n    });\n\n    test(\"NEW APPROACH (Jest 30 compatible)\", async () => {\n      // ✅ This is our new approach - Jest 30 compatible!\n      const container = createTestContainer();\n      const storageService = container.resolve(\"platform.storage\");\n      const mockStorage = container.resolveCustom<Storage>(\n        \"browser.localStorage\",\n      );\n\n      // Benefits:\n      // ✅ No global state pollution\n      // ✅ Jest 30 compatible\n      // ✅ Automatic cleanup via container\n      // ✅ Perfect test isolation\n      // ✅ Type-safe service resolution\n\n      await storageService.save(\"test\", \"data\");\n      TestAssertions.expectStorageCall(\n        mockStorage,\n        \"setItem\",\n        \"chess_trainer_test\",\n        '\"data\"',\n      );\n    });\n  });\n});\n\n/**\n * Performance comparison between old and new approach\n */\ndescribe(\"Performance comparison\", () => {\n  test(\"container creation should be fast\", () => {\n    const start = performance.now();\n\n    for (let i = 0; i < 100; i++) {\n      const container = createTestContainer();\n      container.resolve(\"platform.storage\");\n    }\n\n    const end = performance.now();\n    const duration = end - start;\n\n    // Should create 100 containers + services in reasonable time\n    expect(duration).toBeLessThan(1000); // 1 second\n  });\n});\n\n/**\n * Integration test showing real-world usage\n */\ndescribe(\"Real-world integration\", () => {\n  test(\"should integrate with React Testing Library\", () => {\n    // Example of how this would work with components\n    const container = createTestContainer();\n\n    /**\n     *\n     * @param root0\n     * @param root0.children\n     */\n    const TestWrapper = ({ children }: { children: React.ReactNode }) => {\n      const { ServiceProvider } = require(\"@shared/services/container/adapter\");\n      return React.createElement(ServiceProvider, { container }, children);\n    };\n\n    // Component tests would use this wrapper\n    // render(<MyComponent />, { wrapper: TestWrapper });\n\n    expect(TestWrapper).toBeDefined();\n  });\n});\n"],"names":["describe","container","storageService","mockStorage","beforeEach","createTestContainer","resolve","resolveCustom","test","testKey","testData","name","age","save","TestAssertions","expectStorageCall","JSON","stringify","loadedData","load","expect","toEqual","invalidKey","rejects","toThrow","clear","keys","getAllKeys","toHaveLength","result","toBeNull","TestScenarios","withStorageData","value","offline","deviceService","networkStatus","getNetworkStatus","isOnline","toBe","mockStorageWithQuota","getItem","jest","fn","setItem","mockImplementation","Error","removeItem","key","length","localStorage","mockStorageWithCorruption","mockReturnValue","start","performance","now","i","end","duration","toBeLessThan","TestWrapper","children","ServiceProvider","require","React","createElement","toBeDefined"],"mappings":"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"}