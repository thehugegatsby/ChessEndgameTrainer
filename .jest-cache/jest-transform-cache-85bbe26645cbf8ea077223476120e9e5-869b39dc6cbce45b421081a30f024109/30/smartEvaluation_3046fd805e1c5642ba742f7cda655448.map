{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/chess/evaluation/smartEvaluation.ts"],"sourcesContent":["/**\n * Smart evaluation that prioritizes tablebase comparison\n * SIMPLIFIED: Removed overengineered tablebase helpers\n */\n\nimport { getMoveQualityDisplay } from \"./displayHelpers\";\n\n/**\n *\n */\nexport interface MoveEvaluation {\n  evaluation: number;\n  mateInMoves?: number;\n  tablebase?: {\n    isTablebasePosition: boolean;\n    wdlBefore?: number;\n    wdlAfter?: number;\n    category?: string;\n  };\n}\n\n/**\n * Smart evaluation function that uses tablebase WDL comparison for accurate move quality assessment\n * @param evaluation - The move evaluation data including tablebase WDL states\n * @param isWhite - Whether the player is white\n * @param moveIndex - The index of the move (for future use)\n * @param _moveIndex\n * @returns The evaluation display data based on WDL transition quality\n */\nexport /**\n *\n */\nconst getSmartMoveEvaluation = (\n  evaluation: MoveEvaluation,\n  isWhite: boolean,\n  _moveIndex: number,\n) => {\n  const { evaluation: rawEvaluation, mateInMoves, tablebase } = evaluation;\n\n  // If tablebase WDL data is available, use it for accurate move quality assessment\n  if (\n    tablebase &&\n    typeof tablebase.wdlBefore === \"number\" &&\n    typeof tablebase.wdlAfter === \"number\"\n  ) {\n    // WDL values are absolute (from White's perspective). Adjust for the current player\n    const wdlBefore = isWhite ? tablebase.wdlBefore : -tablebase.wdlBefore;\n    const wdlAfter = isWhite ? tablebase.wdlAfter : -tablebase.wdlAfter;\n\n    // Map WDL state transitions to a quality score for display\n    // This score represents the quality of the move, not the position state\n    let qualityScore = 0;\n    if (wdlAfter > wdlBefore)\n      qualityScore = 300; // Improved position (e.g., Draw -> Win) -> Brilliant\n    else if (wdlAfter < wdlBefore) qualityScore = -300; // Worsened position (e.g., Win -> Draw) -> Blunder\n    // If wdlAfter === wdlBefore, qualityScore remains 0 (neutral move)\n\n    return getMoveQualityDisplay(qualityScore, mateInMoves, isWhite);\n  }\n\n  // Fallback to numeric evaluation if tablebase WDL data is not available\n  return getMoveQualityDisplay(rawEvaluation, mateInMoves, isWhite);\n};\n"],"names":["getSmartMoveEvaluation","evaluation","isWhite","_moveIndex","rawEvaluation","mateInMoves","tablebase","wdlBefore","wdlAfter","qualityScore","getMoveQualityDisplay"],"mappings":"AAAA;;;CAGC;;;;+BA6BKA;;;eAAAA;;;gCA3BgC;AAwB/B;;CAEN,GACD,MAAMA,yBAAyB,CAC7BC,YACAC,SACAC;IAEA,MAAM,EAAEF,YAAYG,aAAa,EAAEC,WAAW,EAAEC,SAAS,EAAE,GAAGL;IAE9D,kFAAkF;IAClF,IACEK,aACA,OAAOA,UAAUC,SAAS,KAAK,YAC/B,OAAOD,UAAUE,QAAQ,KAAK,UAC9B;QACA,oFAAoF;QACpF,MAAMD,YAAYL,UAAUI,UAAUC,SAAS,GAAG,CAACD,UAAUC,SAAS;QACtE,MAAMC,WAAWN,UAAUI,UAAUE,QAAQ,GAAG,CAACF,UAAUE,QAAQ;QAEnE,2DAA2D;QAC3D,wEAAwE;QACxE,IAAIC,eAAe;QACnB,IAAID,WAAWD,WACbE,eAAe,KAAK,qDAAqD;aACtE,IAAID,WAAWD,WAAWE,eAAe,CAAC,KAAK,mDAAmD;QACvG,mEAAmE;QAEnE,OAAOC,IAAAA,qCAAqB,EAACD,cAAcJ,aAAaH;IAC1D;IAEA,wEAAwE;IACxE,OAAOQ,IAAAA,qCAAqB,EAACN,eAAeC,aAAaH;AAC3D"}