19f1e34b0648e6c29e7115a4f7359f6b
/**
 * @file Game status utilities for chess endgame training
 * @module utils/chess/gameStatus
 *
 * @description
 * Utilities for determining game state information including whose turn it is,
 * training objectives (win/draw/defend), and automatic objective detection
 * based on material balance. Provides localized (German) display strings
 * for UI integration.
 *
 * @remarks
 * Key features:
 * - Turn detection from FEN with German localization
 * - Automatic objective inference from material balance
 * - Support for manual objective override
 * - Visual indicators (emojis) for turn display
 * - Heuristic-based position evaluation
 *
 * The objective detection uses simple but effective heuristics based on
 * material counting and common endgame patterns.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getGameStatus", {
    enumerable: true,
    get: function() {
        return getGameStatus;
    }
});
const _chess = require("chess.js");
function getGameStatus(fen, goalFromData) {
    const chess = new _chess.Chess();
    try {
        chess.load(fen);
    } catch (error) {
        // Fallback for invalid FEN
        return {
            sideToMove: "white",
            sideToMoveDisplay: "WeiÃŸ am Zug",
            objective: "win",
            objectiveDisplay: "Ziel: Gewinn",
            icon: "ðŸŸ¢"
        };
    }
    const turn = chess.turn();
    const sideToMove = turn === "w" ? "white" : "black";
    // Display based on turn
    const sideToMoveDisplay = turn === "w" ? "WeiÃŸ am Zug" : "Schwarz am Zug";
    const icon = turn === "w" ? "ðŸŸ¢" : "âš«";
    // Objective detection
    const objective = goalFromData || detectObjective(fen);
    const objectiveDisplay = getObjectiveDisplay(objective);
    return {
        sideToMove,
        sideToMoveDisplay,
        objective,
        objectiveDisplay,
        icon
    };
}
/**
 * Auto-detect objective from position characteristics
 *
 * @function detectObjective
 * @private
 * @param {string} fen - FEN string to analyze
 * @returns {'win' | 'draw' | 'defend'} Detected objective
 *
 * @description
 * Uses heuristic rules to infer the most likely training objective
 * based on material balance and endgame characteristics. The algorithm
 * prioritizes common endgame patterns and material imbalances.
 *
 * @remarks
 * Heuristic rules applied:
 * 1. Material advantage â‰¥3 points â†’ 'win'
 * 2. Pawn endgame with extra pawn â†’ 'win'
 * 3. K+P vs K â†’ 'win'
 * 4. Equal material â†’ 'draw'
 * 5. Default â†’ 'win' (for learning purposes)
 *
 * Material values: Pawn=1, Knight/Bishop=3, Rook=5, Queen=9
 *
 * @example
 * ```typescript
 * // K+P vs K - typically winning
 * detectObjective('8/8/8/8/8/8/P7/K6k w - - 0 1'); // 'win'
 *
 * // Equal material - typically drawing
 * detectObjective('8/8/8/8/8/8/p7/K6k w - - 0 1'); // 'draw'
 * ```
 */ function detectObjective(fen) {
    const chess = new _chess.Chess();
    chess.load(fen);
    // Count material
    const board = chess.board();
    let whiteMaterial = 0;
    let blackMaterial = 0;
    let whiteHasPawns = false;
    let blackHasPawns = false;
    /**
   * Standard piece values for material calculation
   * @private
   */ const pieceValues = {
        p: 1,
        n: 3,
        b: 3,
        r: 5,
        q: 9,
        k: 0
    };
    for (const row of board){
        for (const square of row){
            if (square) {
                const value = pieceValues[square.type];
                if (square.color === "w") {
                    whiteMaterial += value;
                    if (square.type === "p") whiteHasPawns = true;
                } else {
                    blackMaterial += value;
                    if (square.type === "p") blackHasPawns = true;
                }
            }
        }
    }
    // Heuristic rules for objective detection
    const materialDiff = whiteMaterial - blackMaterial;
    // Strong material advantage usually means winning
    if (Math.abs(materialDiff) >= 3) {
        return "win";
    }
    // Pawn endgames with extra pawn often winning
    if (whiteHasPawns && blackHasPawns && Math.abs(materialDiff) >= 1) {
        return "win";
    }
    // King + Pawn vs King is usually winning
    if (whiteMaterial === 1 && blackMaterial === 0 || whiteMaterial === 0 && blackMaterial === 1) {
        return "win";
    }
    // Equal material often draw
    if (materialDiff === 0) {
        return "draw";
    }
    // Default to win for learning purposes
    return "win";
}
/**
 * Get display text for objective
 *
 * @function getObjectiveDisplay
 * @private
 * @param {'win' | 'draw' | 'defend'} objective - Training objective
 * @returns {string} Localized objective text in German
 *
 * @description
 * Converts internal objective codes to user-friendly German text
 * for display in the training interface.
 *
 * @example
 * ```typescript
 * getObjectiveDisplay('win');    // 'Ziel: Gewinn'
 * getObjectiveDisplay('draw');   // 'Ziel: Remis'
 * getObjectiveDisplay('defend'); // 'Ziel: Verteidigen'
 * ```
 *
 * @remarks
 * German translations:
 * - win â†’ "Gewinn" (victory)
 * - draw â†’ "Remis" (draw)
 * - defend â†’ "Verteidigen" (defend)
 */ function getObjectiveDisplay(objective) {
    switch(objective){
        case "win":
            return "Ziel: Gewinn";
        case "draw":
            return "Ziel: Remis";
        case "defend":
            return "Ziel: Verteidigen";
        default:
            return "Ziel: Gewinn";
    }
}

//# sourceMappingURL=data:application/json;base64,