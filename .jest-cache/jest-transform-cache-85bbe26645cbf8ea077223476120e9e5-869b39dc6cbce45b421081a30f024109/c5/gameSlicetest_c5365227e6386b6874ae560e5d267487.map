{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/store/slices/gameSlice.test.ts"],"sourcesContent":["/**\n * @file Tests for GameSlice with nested store structure\n * @module tests/unit/store/slices/gameSlice.nested\n */\n\nimport { useStore } from \"@shared/store/rootStore\";\nimport { chessService } from \"@shared/services/ChessService\";\n\n// Mock ChessService\njest.mock(\"@shared/services/ChessService\", () => ({\n  chessService: {\n    reset: jest.fn(),\n    initialize: jest.fn().mockReturnValue(true), // Mock initialize method\n    loadPosition: jest.fn(),\n    getFen: jest\n      .fn()\n      .mockReturnValue(\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n      ),\n    getPgn: jest.fn().mockReturnValue(\"\"),\n    getHistory: jest.fn().mockReturnValue([]),\n    turn: jest.fn().mockReturnValue(\"w\"),\n    isGameOver: jest.fn().mockReturnValue(false),\n    isCheck: jest.fn().mockReturnValue(false),\n    isCheckmate: jest.fn().mockReturnValue(false),\n    isDraw: jest.fn().mockReturnValue(false),\n    isStalemate: jest.fn().mockReturnValue(false),\n    isThreefoldRepetition: jest.fn().mockReturnValue(false),\n    isInsufficientMaterial: jest.fn().mockReturnValue(false),\n    onStateChange: jest.fn(),\n    move: jest.fn(),\n    undo: jest.fn(),\n    validateMove: jest.fn(),\n    getMoves: jest.fn().mockReturnValue([]),\n    subscribe: jest.fn().mockReturnValue(jest.fn()), // Mock subscribe to return unsubscribe function\n    emit: jest.fn(),\n  },\n}));\n\ndescribe(\"GameSlice - Nested Store Structure\", () => {\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Reset store to initial state - preserve actions by only updating state properties\n    useStore.setState((state) => {\n      state.game.currentFen =\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n      state.game.currentPgn = \"\";\n      state.game.moveHistory = [];\n      state.game.currentMoveIndex = -1;\n      state.game.isGameFinished = false;\n      state.game.gameResult = null;\n    });\n  });\n\n  describe(\"resetGame\", () => {\n    it(\"should call ChessService reset\", () => {\n      const store = useStore.getState();\n\n      // Modify some state first\n      store.game.setGameFinished(true);\n      expect(useStore.getState().game.isGameFinished).toBe(true);\n\n      // Reset game - this calls chessService.reset() which should emit an event\n      // In a real scenario, the rootStore subscription would sync the state\n      store.game.resetGame();\n\n      // Verify that ChessService.reset was called\n      expect(chessService.reset).toHaveBeenCalled();\n\n      // In unit tests, we'd need to manually trigger the state sync or mock the event system\n      // For now, just test that the service method was called\n    });\n  });\n\n  describe(\"initializeGame\", () => {\n    it(\"should initialize game with FEN\", () => {\n      const store = useStore.getState();\n      const testFen = \"8/8/8/8/8/8/8/8 w - - 0 1\";\n\n      const result = store.game.initializeGame(testFen);\n\n      // The actual implementation would use chessService\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe(\"setGameFinished\", () => {\n    it(\"should set game finished to true\", () => {\n      const store = useStore.getState();\n\n      store.game.setGameFinished(true);\n\n      const state = useStore.getState();\n      expect(state.game.isGameFinished).toBe(true);\n    });\n\n    it(\"should set game finished to false\", () => {\n      const store = useStore.getState();\n\n      store.game.setGameFinished(false);\n\n      const state = useStore.getState();\n      expect(state.game.isGameFinished).toBe(false);\n    });\n  });\n\n  describe(\"updatePosition\", () => {\n    it(\"should update position with FEN and PGN\", () => {\n      const store = useStore.getState();\n      const testFen = \"8/8/8/8/8/8/8/8 w - - 0 1\";\n      const testPgn = \"1. e4\";\n\n      store.game.updatePosition(testFen, testPgn);\n\n      const state = useStore.getState();\n      expect(state.game.currentFen).toBe(testFen);\n      expect(state.game.currentPgn).toBe(testPgn);\n    });\n  });\n\n  describe(\"setMoveHistory\", () => {\n    it(\"should set move history\", () => {\n      const store = useStore.getState();\n      const mockMoves = [\n        {\n          san: \"e4\",\n          from: \"e2\",\n          to: \"e4\",\n          color: \"w\",\n          piece: \"p\",\n          captured: undefined,\n        },\n        {\n          san: \"e5\",\n          from: \"e7\",\n          to: \"e5\",\n          color: \"b\",\n          piece: \"p\",\n          captured: undefined,\n        },\n      ] as any;\n\n      store.game.setMoveHistory(mockMoves);\n\n      const state = useStore.getState();\n      expect(state.game.moveHistory).toEqual(mockMoves);\n    });\n  });\n\n  describe(\"setCurrentMoveIndex\", () => {\n    it(\"should set current move index\", () => {\n      const store = useStore.getState();\n\n      store.game.setCurrentMoveIndex(5);\n\n      const state = useStore.getState();\n      expect(state.game.currentMoveIndex).toBe(5);\n    });\n  });\n\n  describe(\"Integration with nested structure\", () => {\n    it(\"should work with other slices in the store\", () => {\n      const store = useStore.getState();\n\n      // Verify that other slices exist\n      expect(store.tablebase).toBeDefined();\n      expect(store.training).toBeDefined();\n      expect(store.ui).toBeDefined();\n\n      // Set game data\n      store.game.setGameFinished(true);\n\n      // Verify it doesn't affect other slices\n      const state = useStore.getState();\n      expect(state.game.isGameFinished).toBe(true);\n      expect(state.tablebase.analysisStatus).toBeDefined();\n      expect(state.training.isPlayerTurn).toBeDefined();\n    });\n\n    it(\"should maintain proper nesting in state updates\", () => {\n      const store = useStore.getState();\n\n      // Make multiple updates\n      store.game.setGameFinished(true);\n      store.game.setCurrentMoveIndex(3);\n\n      // Check all updates were applied correctly\n      const state = useStore.getState();\n      expect(state.game.isGameFinished).toBe(true);\n      expect(state.game.currentMoveIndex).toBe(3);\n\n      // Verify structure is maintained\n      expect(state.game).toHaveProperty(\"currentFen\");\n      expect(state.game).toHaveProperty(\"moveHistory\");\n      expect(state.game).toHaveProperty(\"resetGame\");\n    });\n  });\n});\n"],"names":["jest","mock","chessService","reset","fn","initialize","mockReturnValue","loadPosition","getFen","getPgn","getHistory","turn","isGameOver","isCheck","isCheckmate","isDraw","isStalemate","isThreefoldRepetition","isInsufficientMaterial","onStateChange","move","undo","validateMove","getMoves","subscribe","emit","describe","beforeEach","clearAllMocks","useStore","setState","state","game","currentFen","currentPgn","moveHistory","currentMoveIndex","isGameFinished","gameResult","it","store","getState","setGameFinished","expect","toBe","resetGame","toHaveBeenCalled","testFen","result","initializeGame","toBeDefined","testPgn","updatePosition","mockMoves","san","from","to","color","piece","captured","undefined","setMoveHistory","toEqual","setCurrentMoveIndex","tablebase","training","ui","analysisStatus","isPlayerTurn","toHaveProperty"],"mappings":"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"}