{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/chess/gameStatus.test.ts"],"sourcesContent":["/**\n * @fileoverview Unit tests for chess game status utilities\n * @description Tests game status detection, objective determination, and turn management\n */\n\nimport { describe, test, expect } from \"@jest/globals\";\nimport { getGameStatus } from \"../../../shared/utils/chess/gameStatus\";\nimport { TEST_FENS } from \"../../../shared/testing/TestFixtures\";\n\ndescribe(\"Chess Game Status\", () => {\n  describe(\"getGameStatus\", () => {\n    describe(\"Turn Detection\", () => {\n      test(\"should_detect_white_to_move_from_starting_position\", () => {\n        const status = getGameStatus(TEST_FENS.STARTING_POSITION);\n\n        expect(status.sideToMove).toBe(\"white\");\n        expect(status.sideToMoveDisplay).toBe(\"WeiÃŸ am Zug\");\n        expect(status.icon).toBe(\"ðŸŸ¢\");\n      });\n\n      test(\"should_detect_black_to_move_from_after_e4\", () => {\n        const afterE4 =\n          \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\";\n        const status = getGameStatus(afterE4);\n\n        expect(status.sideToMove).toBe(\"black\");\n        expect(status.sideToMoveDisplay).toBe(\"Schwarz am Zug\");\n        expect(status.icon).toBe(\"âš«\");\n      });\n    });\n\n    describe(\"Objective Detection\", () => {\n      test(\"should_detect_win_objective_for_material_advantage\", () => {\n        // Queen vs King - clear winning advantage\n        const status = getGameStatus(TEST_FENS.KQK_TABLEBASE_WIN);\n\n        expect(status.objective).toBe(\"win\");\n        expect(status.objectiveDisplay).toBe(\"Ziel: Gewinn\");\n      });\n\n      test(\"should_detect_win_objective_for_pawn_endgame_advantage\", () => {\n        const status = getGameStatus(TEST_FENS.KPK_WINNING);\n\n        expect(status.objective).toBe(\"win\");\n        expect(status.objectiveDisplay).toBe(\"Ziel: Gewinn\");\n      });\n\n      test(\"should_detect_draw_objective_for_equal_material\", () => {\n        const status = getGameStatus(TEST_FENS.EQUAL_POSITION);\n\n        expect(status.objective).toBe(\"draw\");\n        expect(status.objectiveDisplay).toBe(\"Ziel: Remis\");\n      });\n\n      test(\"should_use_provided_goal_over_auto_detection\", () => {\n        const status = getGameStatus(TEST_FENS.KQK_TABLEBASE_WIN, \"defend\");\n\n        expect(status.objective).toBe(\"defend\");\n        expect(status.objectiveDisplay).toBe(\"Ziel: Verteidigen\");\n      });\n    });\n\n    describe(\"Error Handling\", () => {\n      test(\"should_handle_invalid_fen_gracefully\", () => {\n        const status = getGameStatus(TEST_FENS.INVALID_FEN);\n\n        expect(status.sideToMove).toBe(\"white\");\n        expect(status.sideToMoveDisplay).toBe(\"WeiÃŸ am Zug\");\n        expect(status.objective).toBe(\"win\");\n        expect(status.objectiveDisplay).toBe(\"Ziel: Gewinn\");\n        expect(status.icon).toBe(\"ðŸŸ¢\");\n      });\n\n      test(\"should_handle_empty_fen_gracefully\", () => {\n        const status = getGameStatus(TEST_FENS.EMPTY_FEN);\n\n        expect(status.sideToMove).toBe(\"white\");\n        expect(status.objective).toBe(\"win\");\n      });\n\n      test(\"should_handle_malformed_fen_gracefully\", () => {\n        const status = getGameStatus(TEST_FENS.MALFORMED_FEN);\n\n        expect(status.sideToMove).toBe(\"white\");\n        expect(status.objective).toBe(\"win\");\n      });\n\n      test(\"should_handle_null_fen_gracefully\", () => {\n        const status = getGameStatus(null as any);\n\n        expect(status.sideToMove).toBe(\"white\");\n        expect(status.objective).toBe(\"win\");\n      });\n\n      test(\"should_handle_undefined_fen_gracefully\", () => {\n        const status = getGameStatus(undefined as any);\n\n        expect(status.sideToMove).toBe(\"white\");\n        expect(status.objective).toBe(\"win\");\n      });\n    });\n\n    describe(\"Material Analysis Edge Cases\", () => {\n      test(\"should_detect_win_for_significant_material_advantage\", () => {\n        // White has queen, black has nothing\n        const queenVsEmpty = \"8/8/8/8/8/8/4K3/4k2Q w - - 0 1\";\n        const status = getGameStatus(queenVsEmpty);\n\n        expect(status.objective).toBe(\"win\");\n      });\n\n      test(\"should_detect_win_for_king_pawn_vs_king\", () => {\n        const status = getGameStatus(TEST_FENS.KPK_WINNING);\n\n        expect(status.objective).toBe(\"win\");\n      });\n\n      test(\"should_detect_draw_for_equal_material_complex\", () => {\n        // Both sides have rook\n        const rooksEqual = \"8/8/8/8/8/4r3/4K3/4k2R w - - 0 1\";\n        const status = getGameStatus(rooksEqual);\n\n        expect(status.objective).toBe(\"draw\");\n      });\n    });\n  });\n\n  describe(\"Integration with Advantage Positions\", () => {\n    test(\"should_handle_white_advantage_position_correctly\", () => {\n      const status = getGameStatus(TEST_FENS.WHITE_ADVANTAGE);\n\n      expect(status.sideToMove).toBe(\"black\");\n      expect(status.objective).toBe(\"win\"); // White has material advantage\n    });\n\n    test(\"should_handle_black_advantage_position_correctly\", () => {\n      const status = getGameStatus(TEST_FENS.BLACK_ADVANTAGE);\n\n      expect(status.sideToMove).toBe(\"black\");\n      expect([\"win\", \"draw\"]).toContain(status.objective);\n    });\n\n    test(\"should_handle_equal_position_correctly\", () => {\n      const status = getGameStatus(TEST_FENS.EQUAL_POSITION);\n\n      expect(status.sideToMove).toBe(\"white\");\n      expect(status.objective).toBe(\"draw\"); // Equal material rook endgame\n    });\n  });\n});\n"],"names":["describe","test","status","getGameStatus","TEST_FENS","STARTING_POSITION","expect","sideToMove","toBe","sideToMoveDisplay","icon","afterE4","KQK_TABLEBASE_WIN","objective","objectiveDisplay","KPK_WINNING","EQUAL_POSITION","INVALID_FEN","EMPTY_FEN","MALFORMED_FEN","undefined","queenVsEmpty","rooksEqual","WHITE_ADVANTAGE","BLACK_ADVANTAGE","toContain"],"mappings":"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"}