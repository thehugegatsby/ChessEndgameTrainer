d28d2990572c32246187319b9e08dd0a
/**
 * @file Tests for pawn promotion auto-win feature
 * @module tests/unit/store/orchestrators/handlePlayerMove.promotion
 */ "use strict";
// Mock services
jest.mock("@shared/services/ChessService", ()=>({
        chessService: {
            validateMove: jest.fn(),
            move: jest.fn(),
            getFen: jest.fn(),
            isGameOver: jest.fn(),
            turn: jest.fn()
        }
    }));
jest.mock("@shared/services/TablebaseService", ()=>({
        tablebaseService: {
            getEvaluation: jest.fn(),
            getTopMoves: jest.fn()
        }
    }));
jest.mock("@shared/store/orchestrators/handlePlayerMove/move.completion");
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _handlePlayerMove = require("../../../../shared/store/orchestrators/handlePlayerMove");
const _ChessService = require("../../../../shared/services/ChessService");
const _TablebaseService = require("../../../../shared/services/TablebaseService");
const _movecompletion = require("../../../../shared/store/orchestrators/handlePlayerMove/move.completion");
describe("Pawn Promotion Auto-Win Feature", ()=>{
    let mockApi;
    let mockState;
    beforeEach(()=>{
        // Create mock state
        mockState = {
            training: {
                isPlayerTurn: true,
                isOpponentThinking: false,
                currentPosition: {
                    colorToTrain: "white"
                }
            },
            ui: {
                loading: {
                    position: false
                },
                toasts: []
            }
        };
        // Create mock StoreApi
        mockApi = {
            getState: jest.fn(()=>mockState),
            setState: jest.fn((callback)=>{
                // Apply Immer-style updates to mockState
                callback(mockState);
            })
        };
        // Reset all mocks
        jest.clearAllMocks();
    });
    describe("Test Position: K+P endgame leading to promotion", ()=>{
        // Position from train/1: 4Q3/3K4/5k2/8/8/8/8/8 w - - 1 6
        // After moves: 1. Kd6 Kf7 2. Kd7 Kf8 3. e6 Kg8 4. e7 Kf7 5. e8=Q+
        it("should auto-complete training when white promotes pawn to queen with winning position", async ()=>{
            // Arrange - Position just before promotion: 4k3/4P3/8/8/8/8/8/4K3 w - - 0 1
            const moveBeforePromotion = {
                from: "e7",
                to: "e8",
                promotion: "q"
            };
            const fenAfterPromotion = "4Q3/8/8/8/8/8/8/4k3 b - - 0 1";
            // Mock chess service
            _ChessService.chessService.validateMove.mockReturnValue(true);
            _ChessService.chessService.move.mockReturnValue({
                san: "e8=Q+",
                color: "w",
                promotion: "q",
                from: "e7",
                to: "e8",
                flags: "p",
                piece: "p"
            });
            _ChessService.chessService.getFen.mockReturnValueOnce("4k3/4P3/8/8/8/8/8/4K3 w - - 0 1") // Before move
            .mockReturnValue(fenAfterPromotion); // After move
            _ChessService.chessService.isGameOver.mockReturnValue(false);
            _ChessService.chessService.turn.mockReturnValue("b"); // Black's turn after white moves
            // Mock tablebase evaluation - WDL from white's perspective after white promotes
            // Positive value means white wins
            _TablebaseService.tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result: {
                    wdl: 2,
                    dtz: 5,
                    dtm: 5,
                    category: "mate",
                    precise: true,
                    evaluation: "White is winning"
                }
            });
            // Mock getTopMoves for the move quality evaluation
            _TablebaseService.tablebaseService.getTopMoves.mockResolvedValue({
                isAvailable: false,
                moves: []
            });
            // Act
            const result = await (0, _handlePlayerMove.handlePlayerMove)(mockApi, moveBeforePromotion);
            // Assert
            expect(result).toBe(true);
            expect(_ChessService.chessService.move).toHaveBeenCalledWith(moveBeforePromotion);
            expect(_TablebaseService.tablebaseService.getEvaluation).toHaveBeenCalledWith(fenAfterPromotion);
            expect(_movecompletion.handleTrainingCompletion).toHaveBeenCalledWith(mockApi, true);
            // Check that success dialog was set (not toast anymore)
            expect(mockApi.setState).toHaveBeenCalled();
            expect(mockState.training.moveSuccessDialog).toEqual({
                isOpen: true,
                promotionPiece: "Dame",
                moveDescription: "e8=Q+"
            });
        });
        it("should NOT auto-complete if promotion leads to draw position", async ()=>{
            // Arrange - Same position but tablebase returns draw
            const moveBeforePromotion = {
                from: "e7",
                to: "e8",
                promotion: "q"
            };
            const fenAfterPromotion = "4Q3/8/8/8/8/8/8/4k3 b - - 0 1";
            _ChessService.chessService.validateMove.mockReturnValue(true);
            _ChessService.chessService.move.mockReturnValue({
                san: "e8=Q",
                color: "w",
                promotion: "q"
            });
            _ChessService.chessService.getFen.mockReturnValueOnce("4k3/4P3/8/8/8/8/8/4K3 w - - 0 1").mockReturnValue(fenAfterPromotion);
            _ChessService.chessService.isGameOver.mockReturnValue(false);
            // Mock tablebase returns draw (WDL = 0)
            _TablebaseService.tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result: {
                    wdl: 0,
                    dtz: null,
                    dtm: null,
                    category: "draw",
                    precise: true,
                    evaluation: "Drawn position"
                }
            });
            // Act
            await (0, _handlePlayerMove.handlePlayerMove)(mockApi, moveBeforePromotion);
            // Assert
            expect(_movecompletion.handleTrainingCompletion).not.toHaveBeenCalled();
        });
        it("should NOT auto-complete on rook promotion that leads to draw", async ()=>{
            // Arrange - Rook promotion that doesn't win
            const moveBeforePromotion = {
                from: "e7",
                to: "e8",
                promotion: "r"
            };
            _ChessService.chessService.validateMove.mockReturnValue(true);
            _ChessService.chessService.move.mockReturnValue({
                san: "e8=R",
                color: "w",
                promotion: "r"
            });
            _ChessService.chessService.getFen.mockReturnValueOnce("4k3/4P3/8/8/8/8/8/4K3 w - - 0 1").mockReturnValue("4R3/8/8/8/8/8/8/4k3 b - - 0 1");
            _ChessService.chessService.isGameOver.mockReturnValue(false);
            // Mock tablebase returns draw for rook promotion
            _TablebaseService.tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result: {
                    wdl: 0,
                    dtz: null,
                    dtm: null,
                    category: "draw",
                    precise: true,
                    evaluation: "Drawn position"
                }
            });
            // Act
            await (0, _handlePlayerMove.handlePlayerMove)(mockApi, moveBeforePromotion);
            // Assert
            expect(_TablebaseService.tablebaseService.getEvaluation).toHaveBeenCalled();
            expect(_movecompletion.handleTrainingCompletion).not.toHaveBeenCalled();
        });
        it("should auto-complete on rook promotion that leads to win", async ()=>{
            // Arrange - Rook promotion that wins
            const moveBeforePromotion = {
                from: "e7",
                to: "e8",
                promotion: "r"
            };
            _ChessService.chessService.validateMove.mockReturnValue(true);
            _ChessService.chessService.move.mockReturnValue({
                san: "e8=R",
                color: "w",
                promotion: "r",
                from: "e7",
                to: "e8",
                flags: "p",
                piece: "p"
            });
            _ChessService.chessService.getFen.mockReturnValueOnce("4k3/4P3/8/8/8/8/8/4K3 w - - 0 1").mockReturnValue("4R3/8/8/8/8/8/8/4k3 b - - 0 1");
            _ChessService.chessService.isGameOver.mockReturnValue(false);
            // Mock tablebase returns win for rook promotion - WDL from white's perspective
            _TablebaseService.tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result: {
                    wdl: 2,
                    dtz: 3,
                    dtm: 3,
                    category: "mate",
                    precise: true,
                    evaluation: "White is winning"
                }
            });
            // Mock getTopMoves for move quality evaluation
            _TablebaseService.tablebaseService.getTopMoves.mockResolvedValue({
                isAvailable: false,
                moves: []
            });
            // Act
            const result = await (0, _handlePlayerMove.handlePlayerMove)(mockApi, moveBeforePromotion);
            // Assert
            expect(result).toBe(true);
            expect(_ChessService.chessService.move).toHaveBeenCalledWith(moveBeforePromotion);
            expect(_movecompletion.handleTrainingCompletion).toHaveBeenCalledWith(mockApi, true);
            // Check that success dialog was set (not toast anymore)
            expect(mockApi.setState).toHaveBeenCalled();
            expect(mockState.training.moveSuccessDialog).toEqual({
                isOpen: true,
                promotionPiece: "Turm",
                moveDescription: "e8=R"
            });
        });
        it("should handle black pawn promotion correctly", async ()=>{
            // Arrange - Black promotes on e1
            mockState.training.currentPosition.colorToTrain = "black";
            const moveBeforePromotion = {
                from: "e2",
                to: "e1",
                promotion: "q"
            };
            const fenAfterPromotion = "8/8/8/8/8/8/8/4q3 w - - 0 1";
            _ChessService.chessService.validateMove.mockReturnValue(true);
            _ChessService.chessService.move.mockReturnValue({
                san: "e1=Q",
                color: "b",
                promotion: "q",
                from: "e2",
                to: "e1",
                flags: "p",
                piece: "p"
            });
            _ChessService.chessService.getFen.mockReturnValueOnce("8/8/8/8/8/8/4p3/8 b - - 0 1").mockReturnValue(fenAfterPromotion);
            _ChessService.chessService.isGameOver.mockReturnValue(false);
            // Mock tablebase - for black training, check WDL from white's perspective
            // WDL = -2 means white loses = black wins (training success)
            _TablebaseService.tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result: {
                    wdl: -2,
                    dtz: 5,
                    dtm: 5,
                    category: "mate",
                    precise: true,
                    evaluation: "Black is winning"
                }
            });
            // Mock getTopMoves for move quality evaluation
            _TablebaseService.tablebaseService.getTopMoves.mockResolvedValue({
                isAvailable: false,
                moves: []
            });
            // Act
            const result = await (0, _handlePlayerMove.handlePlayerMove)(mockApi, moveBeforePromotion);
            // Assert
            expect(result).toBe(true);
            expect(_ChessService.chessService.move).toHaveBeenCalledWith(moveBeforePromotion);
            expect(_movecompletion.handleTrainingCompletion).toHaveBeenCalledWith(mockApi, true);
            // Check that success dialog was set (not toast anymore)
            expect(mockApi.setState).toHaveBeenCalled();
            expect(mockState.training.moveSuccessDialog).toEqual({
                isOpen: true,
                promotionPiece: "Dame",
                moveDescription: "e1=Q"
            });
        });
        it("should continue normal flow if tablebase is unavailable", async ()=>{
            // Arrange
            const moveBeforePromotion = {
                from: "e7",
                to: "e8",
                promotion: "q"
            };
            _ChessService.chessService.validateMove.mockReturnValue(true);
            _ChessService.chessService.move.mockReturnValue({
                san: "e8=Q",
                color: "w",
                promotion: "q"
            });
            _ChessService.chessService.getFen.mockReturnValue("4Q3/8/8/8/8/8/8/4k3 b - - 0 1");
            _ChessService.chessService.isGameOver.mockReturnValue(false);
            // Tablebase unavailable
            _TablebaseService.tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: false
            });
            // Act
            await (0, _handlePlayerMove.handlePlayerMove)(mockApi, moveBeforePromotion);
            // Assert
            expect(_movecompletion.handleTrainingCompletion).not.toHaveBeenCalled();
        // Should continue with normal flow
        });
        it("should handle tablebase errors gracefully", async ()=>{
            // Arrange
            const moveBeforePromotion = {
                from: "e7",
                to: "e8",
                promotion: "q"
            };
            _ChessService.chessService.validateMove.mockReturnValue(true);
            _ChessService.chessService.move.mockReturnValue({
                san: "e8=Q",
                color: "w",
                promotion: "q"
            });
            _ChessService.chessService.getFen.mockReturnValue("4Q3/8/8/8/8/8/8/4k3 b - - 0 1");
            _ChessService.chessService.isGameOver.mockReturnValue(false);
            // Tablebase throws error
            _TablebaseService.tablebaseService.getEvaluation.mockRejectedValue(new Error("Network error"));
            // Act - Should not throw
            const result = await (0, _handlePlayerMove.handlePlayerMove)(mockApi, moveBeforePromotion);
            // Assert
            expect(result).toBe(true); // Move succeeds despite tablebase error
            expect(_movecompletion.handleTrainingCompletion).not.toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,