{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/store/orchestrators/handlePlayerMove.promotion.test.ts"],"sourcesContent":["/**\n * @file Tests for pawn promotion auto-win feature\n * @module tests/unit/store/orchestrators/handlePlayerMove.promotion\n */\n\nimport { handlePlayerMove } from \"@shared/store/orchestrators/handlePlayerMove\";\nimport { chessService } from \"@shared/services/ChessService\";\nimport { tablebaseService } from \"@shared/services/TablebaseService\";\nimport { handleTrainingCompletion } from \"@shared/store/orchestrators/handlePlayerMove/move.completion\";\nimport type { StoreApi } from \"@shared/store/orchestrators/types\";\n\n// Mock services\njest.mock(\"@shared/services/ChessService\", () => ({\n  chessService: {\n    validateMove: jest.fn(),\n    move: jest.fn(),\n    getFen: jest.fn(),\n    isGameOver: jest.fn(),\n    turn: jest.fn(),\n  },\n}));\n\njest.mock(\"@shared/services/TablebaseService\", () => ({\n  tablebaseService: {\n    getEvaluation: jest.fn(),\n    getTopMoves: jest.fn(),\n  },\n}));\n\njest.mock(\"@shared/store/orchestrators/handlePlayerMove/move.completion\");\n\ndescribe(\"Pawn Promotion Auto-Win Feature\", () => {\n  let mockApi: StoreApi;\n  let mockState: any;\n\n  beforeEach(() => {\n    // Create mock state\n    mockState = {\n      training: {\n        isPlayerTurn: true,\n        isOpponentThinking: false,\n        currentPosition: { colorToTrain: \"white\" },\n      },\n      ui: {\n        loading: { position: false },\n        toasts: [],\n      },\n    };\n\n    // Create mock StoreApi\n    mockApi = {\n      getState: jest.fn(() => mockState),\n      setState: jest.fn((callback) => {\n        // Apply Immer-style updates to mockState\n        callback(mockState);\n      }),\n    };\n\n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  describe(\"Test Position: K+P endgame leading to promotion\", () => {\n    // Position from train/1: 4Q3/3K4/5k2/8/8/8/8/8 w - - 1 6\n    // After moves: 1. Kd6 Kf7 2. Kd7 Kf8 3. e6 Kg8 4. e7 Kf7 5. e8=Q+\n\n    it(\"should auto-complete training when white promotes pawn to queen with winning position\", async () => {\n      // Arrange - Position just before promotion: 4k3/4P3/8/8/8/8/8/4K3 w - - 0 1\n      const moveBeforePromotion = { from: \"e7\", to: \"e8\", promotion: \"q\" };\n      const fenAfterPromotion = \"4Q3/8/8/8/8/8/8/4k3 b - - 0 1\";\n\n      // Mock chess service\n      (chessService.validateMove as jest.Mock).mockReturnValue(true);\n      (chessService.move as jest.Mock).mockReturnValue({\n        san: \"e8=Q+\",\n        color: \"w\",\n        promotion: \"q\",\n        from: \"e7\",\n        to: \"e8\",\n        flags: \"p\", // Promotion flag required by checkPromotion method\n        piece: \"p\", // Pawn piece\n      });\n      (chessService.getFen as jest.Mock)\n        .mockReturnValueOnce(\"4k3/4P3/8/8/8/8/8/4K3 w - - 0 1\") // Before move\n        .mockReturnValue(fenAfterPromotion); // After move\n      (chessService.isGameOver as jest.Mock).mockReturnValue(false);\n      (chessService.turn as jest.Mock).mockReturnValue(\"b\"); // Black's turn after white moves\n\n      // Mock tablebase evaluation - WDL from white's perspective after white promotes\n      // Positive value means white wins\n      (tablebaseService.getEvaluation as jest.Mock).mockResolvedValue({\n        isAvailable: true,\n        result: {\n          wdl: 2, // White wins (from white's perspective, positive = good for white)\n          dtz: 5,\n          dtm: 5,\n          category: \"mate\",\n          precise: true,\n          evaluation: \"White is winning\",\n        },\n      });\n\n      // Mock getTopMoves for the move quality evaluation\n      (tablebaseService.getTopMoves as jest.Mock).mockResolvedValue({\n        isAvailable: false,\n        moves: [],\n      });\n\n      // Act\n      const result = await handlePlayerMove(mockApi, moveBeforePromotion);\n\n      // Assert\n      expect(result).toBe(true);\n      expect(chessService.move).toHaveBeenCalledWith(moveBeforePromotion);\n      expect(tablebaseService.getEvaluation).toHaveBeenCalledWith(\n        fenAfterPromotion,\n      );\n      expect(handleTrainingCompletion).toHaveBeenCalledWith(mockApi, true);\n\n      // Check that success dialog was set (not toast anymore)\n      expect(mockApi.setState).toHaveBeenCalled();\n      expect(mockState.training.moveSuccessDialog).toEqual({\n        isOpen: true,\n        promotionPiece: \"Dame\",\n        moveDescription: \"e8=Q+\",\n      });\n    });\n\n    it(\"should NOT auto-complete if promotion leads to draw position\", async () => {\n      // Arrange - Same position but tablebase returns draw\n      const moveBeforePromotion = { from: \"e7\", to: \"e8\", promotion: \"q\" };\n      const fenAfterPromotion = \"4Q3/8/8/8/8/8/8/4k3 b - - 0 1\";\n\n      (chessService.validateMove as jest.Mock).mockReturnValue(true);\n      (chessService.move as jest.Mock).mockReturnValue({\n        san: \"e8=Q\",\n        color: \"w\",\n        promotion: \"q\",\n      });\n      (chessService.getFen as jest.Mock)\n        .mockReturnValueOnce(\"4k3/4P3/8/8/8/8/8/4K3 w - - 0 1\")\n        .mockReturnValue(fenAfterPromotion);\n      (chessService.isGameOver as jest.Mock).mockReturnValue(false);\n\n      // Mock tablebase returns draw (WDL = 0)\n      (tablebaseService.getEvaluation as jest.Mock).mockResolvedValue({\n        isAvailable: true,\n        result: {\n          wdl: 0, // Draw\n          dtz: null,\n          dtm: null,\n          category: \"draw\",\n          precise: true,\n          evaluation: \"Drawn position\",\n        },\n      });\n\n      // Act\n      await handlePlayerMove(mockApi, moveBeforePromotion);\n\n      // Assert\n      expect(handleTrainingCompletion).not.toHaveBeenCalled();\n    });\n\n    it(\"should NOT auto-complete on rook promotion that leads to draw\", async () => {\n      // Arrange - Rook promotion that doesn't win\n      const moveBeforePromotion = { from: \"e7\", to: \"e8\", promotion: \"r\" };\n\n      (chessService.validateMove as jest.Mock).mockReturnValue(true);\n      (chessService.move as jest.Mock).mockReturnValue({\n        san: \"e8=R\",\n        color: \"w\",\n        promotion: \"r\", // Rook\n      });\n      (chessService.getFen as jest.Mock)\n        .mockReturnValueOnce(\"4k3/4P3/8/8/8/8/8/4K3 w - - 0 1\")\n        .mockReturnValue(\"4R3/8/8/8/8/8/8/4k3 b - - 0 1\");\n      (chessService.isGameOver as jest.Mock).mockReturnValue(false);\n\n      // Mock tablebase returns draw for rook promotion\n      (tablebaseService.getEvaluation as jest.Mock).mockResolvedValue({\n        isAvailable: true,\n        result: {\n          wdl: 0, // Draw\n          dtz: null,\n          dtm: null,\n          category: \"draw\",\n          precise: true,\n          evaluation: \"Drawn position\",\n        },\n      });\n\n      // Act\n      await handlePlayerMove(mockApi, moveBeforePromotion);\n\n      // Assert\n      expect(tablebaseService.getEvaluation).toHaveBeenCalled();\n      expect(handleTrainingCompletion).not.toHaveBeenCalled();\n    });\n\n    it(\"should auto-complete on rook promotion that leads to win\", async () => {\n      // Arrange - Rook promotion that wins\n      const moveBeforePromotion = { from: \"e7\", to: \"e8\", promotion: \"r\" };\n\n      (chessService.validateMove as jest.Mock).mockReturnValue(true);\n      (chessService.move as jest.Mock).mockReturnValue({\n        san: \"e8=R\",\n        color: \"w\",\n        promotion: \"r\",\n        from: \"e7\",\n        to: \"e8\",\n        flags: \"p\", // Promotion flag required by checkPromotion method\n        piece: \"p\", // Pawn piece\n      });\n      (chessService.getFen as jest.Mock)\n        .mockReturnValueOnce(\"4k3/4P3/8/8/8/8/8/4K3 w - - 0 1\")\n        .mockReturnValue(\"4R3/8/8/8/8/8/8/4k3 b - - 0 1\");\n      (chessService.isGameOver as jest.Mock).mockReturnValue(false);\n\n      // Mock tablebase returns win for rook promotion - WDL from white's perspective\n      (tablebaseService.getEvaluation as jest.Mock).mockResolvedValue({\n        isAvailable: true,\n        result: {\n          wdl: 2, // White wins (positive = good for white)\n          dtz: 3,\n          dtm: 3,\n          category: \"mate\",\n          precise: true,\n          evaluation: \"White is winning\",\n        },\n      });\n\n      // Mock getTopMoves for move quality evaluation\n      (tablebaseService.getTopMoves as jest.Mock).mockResolvedValue({\n        isAvailable: false,\n        moves: [],\n      });\n\n      // Act\n      const result = await handlePlayerMove(mockApi, moveBeforePromotion);\n\n      // Assert\n      expect(result).toBe(true);\n      expect(chessService.move).toHaveBeenCalledWith(moveBeforePromotion);\n      expect(handleTrainingCompletion).toHaveBeenCalledWith(mockApi, true);\n\n      // Check that success dialog was set (not toast anymore)\n      expect(mockApi.setState).toHaveBeenCalled();\n      expect(mockState.training.moveSuccessDialog).toEqual({\n        isOpen: true,\n        promotionPiece: \"Turm\",\n        moveDescription: \"e8=R\",\n      });\n    });\n\n    it(\"should handle black pawn promotion correctly\", async () => {\n      // Arrange - Black promotes on e1\n      mockState.training.currentPosition.colorToTrain = \"black\";\n      const moveBeforePromotion = { from: \"e2\", to: \"e1\", promotion: \"q\" };\n      const fenAfterPromotion = \"8/8/8/8/8/8/8/4q3 w - - 0 1\";\n\n      (chessService.validateMove as jest.Mock).mockReturnValue(true);\n      (chessService.move as jest.Mock).mockReturnValue({\n        san: \"e1=Q\",\n        color: \"b\",\n        promotion: \"q\",\n        from: \"e2\",\n        to: \"e1\",\n        flags: \"p\", // Promotion flag required by checkPromotion method\n        piece: \"p\", // Pawn piece\n      });\n      (chessService.getFen as jest.Mock)\n        .mockReturnValueOnce(\"8/8/8/8/8/8/4p3/8 b - - 0 1\")\n        .mockReturnValue(fenAfterPromotion);\n      (chessService.isGameOver as jest.Mock).mockReturnValue(false);\n\n      // Mock tablebase - for black training, check WDL from white's perspective\n      // WDL = -2 means white loses = black wins (training success)\n      (tablebaseService.getEvaluation as jest.Mock).mockResolvedValue({\n        isAvailable: true,\n        result: {\n          wdl: -2, // White loses = black wins\n          dtz: 5,\n          dtm: 5,\n          category: \"mate\",\n          precise: true,\n          evaluation: \"Black is winning\",\n        },\n      });\n\n      // Mock getTopMoves for move quality evaluation\n      (tablebaseService.getTopMoves as jest.Mock).mockResolvedValue({\n        isAvailable: false,\n        moves: [],\n      });\n\n      // Act\n      const result = await handlePlayerMove(mockApi, moveBeforePromotion);\n\n      // Assert\n      expect(result).toBe(true);\n      expect(chessService.move).toHaveBeenCalledWith(moveBeforePromotion);\n      expect(handleTrainingCompletion).toHaveBeenCalledWith(mockApi, true);\n\n      // Check that success dialog was set (not toast anymore)\n      expect(mockApi.setState).toHaveBeenCalled();\n      expect(mockState.training.moveSuccessDialog).toEqual({\n        isOpen: true,\n        promotionPiece: \"Dame\",\n        moveDescription: \"e1=Q\",\n      });\n    });\n\n    it(\"should continue normal flow if tablebase is unavailable\", async () => {\n      // Arrange\n      const moveBeforePromotion = { from: \"e7\", to: \"e8\", promotion: \"q\" };\n\n      (chessService.validateMove as jest.Mock).mockReturnValue(true);\n      (chessService.move as jest.Mock).mockReturnValue({\n        san: \"e8=Q\",\n        color: \"w\",\n        promotion: \"q\",\n      });\n      (chessService.getFen as jest.Mock).mockReturnValue(\n        \"4Q3/8/8/8/8/8/8/4k3 b - - 0 1\",\n      );\n      (chessService.isGameOver as jest.Mock).mockReturnValue(false);\n\n      // Tablebase unavailable\n      (tablebaseService.getEvaluation as jest.Mock).mockResolvedValue({\n        isAvailable: false,\n      });\n\n      // Act\n      await handlePlayerMove(mockApi, moveBeforePromotion);\n\n      // Assert\n      expect(handleTrainingCompletion).not.toHaveBeenCalled();\n      // Should continue with normal flow\n    });\n\n    it(\"should handle tablebase errors gracefully\", async () => {\n      // Arrange\n      const moveBeforePromotion = { from: \"e7\", to: \"e8\", promotion: \"q\" };\n\n      (chessService.validateMove as jest.Mock).mockReturnValue(true);\n      (chessService.move as jest.Mock).mockReturnValue({\n        san: \"e8=Q\",\n        color: \"w\",\n        promotion: \"q\",\n      });\n      (chessService.getFen as jest.Mock).mockReturnValue(\n        \"4Q3/8/8/8/8/8/8/4k3 b - - 0 1\",\n      );\n      (chessService.isGameOver as jest.Mock).mockReturnValue(false);\n\n      // Tablebase throws error\n      (tablebaseService.getEvaluation as jest.Mock).mockRejectedValue(\n        new Error(\"Network error\"),\n      );\n\n      // Act - Should not throw\n      const result = await handlePlayerMove(mockApi, moveBeforePromotion);\n\n      // Assert\n      expect(result).toBe(true); // Move succeeds despite tablebase error\n      expect(handleTrainingCompletion).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"names":["jest","mock","chessService","validateMove","fn","move","getFen","isGameOver","turn","tablebaseService","getEvaluation","getTopMoves","describe","mockApi","mockState","beforeEach","training","isPlayerTurn","isOpponentThinking","currentPosition","colorToTrain","ui","loading","position","toasts","getState","setState","callback","clearAllMocks","it","moveBeforePromotion","from","to","promotion","fenAfterPromotion","mockReturnValue","san","color","flags","piece","mockReturnValueOnce","mockResolvedValue","isAvailable","result","wdl","dtz","dtm","category","precise","evaluation","moves","handlePlayerMove","expect","toBe","toHaveBeenCalledWith","handleTrainingCompletion","toHaveBeenCalled","moveSuccessDialog","toEqual","isOpen","promotionPiece","moveDescription","not","mockRejectedValue","Error"],"mappings":"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"}