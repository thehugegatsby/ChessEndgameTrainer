372263626d9ca2f410caacb8ce9f44a3
/**
 * Centralized Test FEN Database
 *
 * This file contains all FEN positions used across the test suite with metadata
 * for expected tablebase values, test scenarios, and usage patterns.
 * 
 * Benefits:
 * - Single source of truth for all test positions
 * - Reduces duplication across test files  
 * - Self-documenting with metadata and expected outcomes
 * - Type-safe FEN access with validation
 * - Easy to discover existing positions for reuse
 */ /**
 * Standard chess positions
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get E2EMoveSequences () {
        return E2EMoveSequences;
    },
    get E2EScenarios () {
        return E2EScenarios;
    },
    get EndgamePositions () {
        return EndgamePositions;
    },
    get IntegrationTestPositions () {
        return IntegrationTestPositions;
    },
    get KPKProgression () {
        return KPKProgression;
    },
    get KPKProgressions () {
        return KPKProgressions;
    },
    get MoveSequences () {
        return MoveSequences;
    },
    get OpeningSequences () {
        return OpeningSequences;
    },
    get SpecialPositions () {
        return SpecialPositions;
    },
    get StandardPositions () {
        return StandardPositions;
    },
    get TablebaseDefensePositions () {
        return TablebaseDefensePositions;
    },
    get ValidationTestPositions () {
        return ValidationTestPositions;
    },
    get getAllTestFENs () {
        return getAllTestFENs;
    },
    get getAllTestFENsEnhanced () {
        return getAllTestFENsEnhanced;
    },
    get getFensByDifficulty () {
        return getFensByDifficulty;
    },
    get getFensByEndgameType () {
        return getFensByEndgameType;
    },
    get getFensByTag () {
        return getFensByTag;
    },
    get getFensByUsage () {
        return getFensByUsage;
    },
    get getKPKProgression () {
        return getKPKProgression;
    },
    get getOpeningSequence () {
        return getOpeningSequence;
    },
    get getRandomEndgamePosition () {
        return getRandomEndgamePosition;
    },
    get getTablebaseDefensePosition () {
        return getTablebaseDefensePosition;
    },
    get validateAllTestFens () {
        return validateAllTestFens;
    }
});
/**
 *
 */ const StandardPositions = {
    /** Initial chess position */ STARTING: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
    /** After 1.e4 */ AFTER_E4: "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
    /** After 1.e4 e5 */ AFTER_E4_E5: "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2",
    /** After 1.e4 e5 2.Nf3 */ AFTER_E4_E5_NF3: "rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2",
    /** Position with castling rights */ CASTLING_AVAILABLE: "r3k2r/pppppppp/8/8/8/8/PPPPPPPP/R3K2R w KQkq - 0 1",
    /** En passant possible */ EN_PASSANT: "rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 3",
    /** En passant with pawn on d5 and c5 */ EN_PASSANT_COMPLEX: "8/8/8/2pP4/8/8/8/4K2k w - c6 0 1"
};
/**
 *
 */ const EndgamePositions = {
    /** King vs King - theoretical draw */ KK_DRAW: "4k3/8/4K3/8/8/8/8/8 w - - 0 1",
    /** King vs King (alternative) */ KK_DRAW_ALT: "8/8/8/8/8/8/8/K3k3 w - - 0 1",
    /** King and Pawn vs King - winning for white */ KPK_WIN: "K7/P7/k7/8/8/8/8/8 w - - 0 1",
    /** King and Pawn vs King - central pawn */ KPK_CENTRAL: "4k3/8/4K3/4P3/8/8/8/8 w - - 0 1",
    /** King and Pawn vs King - various positions */ KPK_VARIANTS: {
        SIDE_PAWN: "8/8/8/8/8/8/P7/K2k4 w - - 0 1",
        CENTER_ADVANCED: "8/2k5/8/2K5/2P5/8/8/8 w - - 0 1",
        ENDGAME_PAWN: "8/8/8/8/8/8/P7/K3k3 w - - 0 1",
        DRAW_POSITION: "8/8/8/3k4/8/2KP4/8/8 w - - 0 1",
        BLACK_TO_MOVE: "8/8/8/3k4/3P4/3K4/8/8 b - - 0 1"
    },
    /** King and Queen vs King - winning */ KQK_WIN: "4k3/8/8/8/8/8/8/4K2Q w - - 0 1",
    /** King and Queen vs King - black to move */ KQK_BLACK_TO_MOVE: "4k3/8/8/8/8/8/8/4K2Q b - - 0 1",
    /** King and Queen vs King (alternative) */ KQK_WIN_ALT: "8/8/8/8/8/8/1Q6/K3k3 w - - 0 1",
    /** King and Rook vs King - winning */ KRK_WIN: "8/8/8/8/8/8/R7/K3k3 w - - 0 1",
    /** King and Rook vs King (alternative) */ KRK_WIN_ALT: "4k3/R7/8/8/8/8/8/4K3 w - - 0 1",
    /** King and Rook vs King (another variant) */ KRK_WIN_VAR: "R7/8/8/8/8/8/8/K2k4 w - - 0 1",
    /** King and Rook vs King (center) */ KRK_CENTER: "8/8/8/8/8/3k4/8/R3K3 w - - 0 1",
    /** King and Knight vs King - insufficient material */ KNK_DRAW: "8/8/8/8/8/8/k7/K6N w - - 0 1",
    /** Lucena position */ LUCENA: "1K6/1P6/8/8/8/8/r7/1k6 b - - 0 1",
    /** Promotion position */ PROMOTION: "8/P7/8/8/8/8/8/k6K w - - 0 1"
};
/**
 *
 */ const SpecialPositions = {
    /** Checkmate position - Queen on e7, black king trapped on e8 */ CHECKMATE: "4k3/4Q3/3K4/8/8/8/8/8 b - - 0 1",
    /** Stalemate position */ STALEMATE: "k7/P7/K7/8/8/8/8/8 b - - 0 1",
    /** Checkmate in 1 move */ MATE_IN_1: "6k1/5ppp/8/8/8/8/5PPP/R5K1 w - - 0 1",
    /** Draw by insufficient material */ INSUFFICIENT_MATERIAL: {
        KK: "8/8/8/8/8/8/8/K2k4 w - - 0 1",
        KNK: "8/8/8/8/8/8/8/K2k2N1 w - - 0 1",
        KBK: "8/8/8/8/8/8/8/K2k2B1 w - - 0 1"
    },
    /** Complex middle game position */ COMPLEX_MIDGAME: "rnbqkbnr/pppp1ppp/8/4p3/6P1/5P2/PPPPP2P/RNBQKBNR b KQkq - 0 2",
    /** Too many pieces for tablebase (starting position) */ TOO_MANY_PIECES: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
    /** Empty board (for error testing) */ EMPTY_BOARD: "8/8/8/8/8/8/8/8 w - - 0 1",
    /** Pawn promotion position - white pawn on f7 ready to promote */ PROMOTION: "8/5P2/8/8/k7/8/K7/8 w - - 0 1",
    /** Position with black king in check from white queen on g5 */ BLACK_IN_CHECK: "rnbkqbnr/pppp1ppp/8/4p1Q1/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1",
    /** Invalid position with wrong pawn structure */ INVALID_TOO_MANY_PAWNS: "rnbqkbnr/ppppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
    /** Position with wrong ranks */ INVALID_WRONG_RANKS: "9/8/8/8/8/8/8/8 w - - 0 1",
    /** Position with insufficient ranks */ INVALID_INSUFFICIENT_RANKS: "8/8/8/8/8/8/8/7 w - - 0 1"
};
/**
 *
 */ const KPKProgression = {
    /** Initial winning position */ INITIAL: "K7/P7/k7/8/8/8/8/8 w - - 0 1",
    /** After Kb8 (still winning) */ AFTER_KB8: "1K6/P7/k7/8/8/8/8/8 b - - 1 1",
    /** After Kd6 (suboptimal but still winning) */ AFTER_KD6: "4k3/8/3K4/4P3/8/8/8/8 b - - 1 1",
    /** After Kd6 Kf8 (white to move) */ AFTER_KD6_KF8: "5k2/8/3K4/4P3/8/8/8/8 w - - 2 2",
    /** After Kc7 from setup position */ AFTER_KC7: "5k2/2K5/8/4P3/8/8/8/8 b - - 3 2"
};
/**
 *
 */ const MoveSequences = {
    /** Positions after specific moves */ e4: {
        before: StandardPositions.STARTING,
        after: StandardPositions.AFTER_E4
    },
    e4_e5: {
        before: StandardPositions.AFTER_E4,
        after: StandardPositions.AFTER_E4_E5
    },
    e4_e5_Nf3: {
        before: StandardPositions.AFTER_E4_E5,
        after: StandardPositions.AFTER_E4_E5_NF3
    }
};
/**
 *
 */ const E2EMoveSequences = {
    /** Pawn promotion sequence leading to automatic win */ PAWN_PROMOTION_TO_WIN: {
        startPosition: "4k3/8/4K3/4P3/8/8/8/8 w - - 0 1",
        moves: [
            "e6-d6",
            "e8-f7",
            "d6-d7",
            "f7-f8",
            "e5-e6",
            "f8-g8",
            "e6-e7",
            "g8-f7",
            "e7-e8=Q"
        ],
        description: "King and pawn endgame leading to promotion and auto-win detection",
        expectedResult: "win"
    },
    /** Pawn promotion sequence leading to draw (no auto-win) */ PAWN_PROMOTION_TO_DRAW: {
        startPosition: "4k3/8/4K3/4P3/8/8/8/8 w - - 0 1",
        moves: [
            "e6-d6",
            "e8-f7",
            "d6-c7",
            "f7-g7",
            "e5-e6",
            "g7-f6",
            "e6-e7",
            "f6-f7",
            "e7-e8=Q"
        ],
        description: "King and pawn endgame leading to promotion but NOT immediate win",
        expectedResult: "continue"
    }
};
function getAllTestFENs() {
    const positions = [];
    // Add standard positions
    Object.values(StandardPositions).forEach((pos)=>{
        if (typeof pos === "string") positions.push(pos);
    });
    // Add endgame positions
    Object.values(EndgamePositions).forEach((pos)=>{
        if (typeof pos === "string") {
            positions.push(pos);
        } else if (typeof pos === "object") {
            Object.values(pos).forEach((subPos)=>{
                if (typeof subPos === "string") positions.push(subPos);
            });
        }
    });
    // Add special positions
    Object.values(SpecialPositions).forEach((pos)=>{
        if (typeof pos === "string") {
            positions.push(pos);
        } else if (typeof pos === "object") {
            Object.values(pos).forEach((subPos)=>{
                if (typeof subPos === "string") positions.push(subPos);
            });
        }
    });
    // Add KPK progression
    Object.values(KPKProgression).forEach((pos)=>{
        if (typeof pos === "string") positions.push(pos);
    });
    return positions;
}
function getRandomEndgamePosition() {
    const endgames = [
        EndgamePositions.KPK_WIN,
        EndgamePositions.KPK_CENTRAL,
        EndgamePositions.KPK_VARIANTS.SIDE_PAWN,
        EndgamePositions.KPK_VARIANTS.CENTER_ADVANCED,
        EndgamePositions.KQK_WIN,
        EndgamePositions.KRK_WIN,
        EndgamePositions.KRK_WIN_ALT
    ];
    return endgames[Math.floor(Math.random() * endgames.length)];
}
const TablebaseDefensePositions = {
    /** 
   * Black to move, losing position - tests DTM sorting for defense
   * Expected: Kd7 (DTM -27) should be ranked first as best defense
   */ BLACK_LOSES_DTM_TEST: {
        fen: "2k5/8/8/4PK2/8/8/8/8 b - - 2 3",
        description: "Black to move in losing KPK position - DTM defense sorting test",
        expectedWdl: -2,
        expectedDtm: -27,
        expectedCategory: 'loss',
        tags: [
            'tablebase',
            'defense',
            'dtm-sorting',
            'kpk'
        ],
        difficulty: 'intermediate',
        endgameType: 'KPK',
        usage: 'integration'
    },
    /**
   * Complex KPK position from mock tests
   */ KPK_MOCK_POSITION: {
        fen: "5k2/2K5/8/4P3/8/8/8/8 b - - 3 2",
        description: "KPK position used in service mock tests",
        expectedWdl: -2,
        expectedCategory: 'loss',
        tags: [
            'kpk',
            'mock',
            'service-test'
        ],
        difficulty: 'advanced',
        endgameType: 'KPK',
        usage: 'integration'
    }
};
const OpeningSequences = {
    /** Classic 1.e4 e5 2.Nf3 sequence */ E4_E5_NF3_SEQUENCE: {
        startPosition: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
        moves: [
            "e2-e4",
            "e7-e5",
            "g1-f3"
        ],
        description: "Classic opening sequence: 1.e4 e5 2.Nf3",
        expectedResult: 'continue',
        tags: [
            'opening',
            'ui-test',
            'move-flow'
        ],
        positions: [
            {
                after: "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
                move: "e4",
                description: "After 1.e4"
            },
            {
                after: "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2",
                move: "e5",
                description: "After 1...e5"
            },
            {
                after: "rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2",
                move: "Nf3",
                description: "After 2.Nf3"
            }
        ]
    }
};
const KPKProgressions = {
    /** Classic winning KPK progression */ WINNING_PROGRESSION: {
        startPosition: "K7/P7/k7/8/8/8/8/8 w - - 0 1",
        description: "Classic winning KPK endgame progression",
        moves: [
            "Kb8",
            "Kd6",
            "Kc7"
        ],
        expectedResult: 'win',
        tags: [
            'kpk',
            'endgame',
            'winning',
            'progression'
        ],
        positions: [
            {
                fen: "K7/P7/k7/8/8/8/8/8 w - - 0 1",
                description: "Initial winning position",
                expectedDtm: 28,
                expectedWdl: 2
            },
            {
                fen: "1K6/P7/k7/8/8/8/8/8 b - - 1 1",
                description: "After Kb8 (still winning)",
                expectedDtm: 27,
                expectedWdl: 2
            },
            {
                fen: "4k3/8/3K4/4P3/8/8/8/8 b - - 1 1",
                description: "After Kd6 (suboptimal but winning)",
                expectedDtm: 25,
                expectedWdl: 2
            }
        ]
    }
};
const E2EScenarios = {
    /** Pawn promotion leading to automatic win */ PAWN_PROMOTION_AUTO_WIN: {
        startPosition: "4k3/8/4K3/4P3/8/8/8/8 w - - 0 1",
        moves: [
            "Kd6",
            "Kf7",
            "Kd7",
            "Kf8",
            "e6",
            "Kg8",
            "e7",
            "Kf7",
            "e8=Q"
        ],
        description: "KPK endgame leading to pawn promotion with auto-win detection",
        expectedResult: 'win',
        tags: [
            'e2e',
            'promotion',
            'auto-win',
            'kpk'
        ]
    },
    /** Pawn promotion without auto-win */ PAWN_PROMOTION_CONTINUE: {
        startPosition: "4k3/8/4K3/4P3/8/8/8/8 w - - 0 1",
        moves: [
            "Kd6",
            "Kf7",
            "Kc7",
            "Kg7",
            "e6",
            "Kf6",
            "e7",
            "Kf7",
            "e8=Q"
        ],
        description: "KPK endgame with promotion but no immediate auto-win",
        expectedResult: 'continue',
        tags: [
            'e2e',
            'promotion',
            'continue',
            'kpk'
        ]
    }
};
const IntegrationTestPositions = {
    /** Real API integration test position */ REAL_API_KPK: {
        fen: "1K6/P7/k7/8/8/8/8/8 b - - 1 1",
        description: "KPK position for real Lichess API integration testing",
        expectedWdl: -2,
        expectedCategory: 'loss',
        tags: [
            'integration',
            'real-api',
            'kpk'
        ],
        difficulty: 'basic',
        endgameType: 'KPK',
        usage: 'integration'
    },
    /** Complex endgame test position */ COMPLEX_ENDGAME: {
        fen: "8/8/8/8/4k3/4P3/5K2/8 b - - 1 2",
        description: "Complex endgame position from page tests",
        expectedCategory: 'unknown',
        tags: [
            'integration',
            'complex',
            'ui-test'
        ],
        difficulty: 'advanced',
        endgameType: 'KPK',
        usage: 'unit'
    }
};
const ValidationTestPositions = {
    /** Empty position for error testing */ EMPTY_POSITION: {
        fen: "8/8/8/8/8/8/8/8",
        description: "Empty board position for validation testing",
        expectedCategory: 'unknown',
        tags: [
            'validation',
            'error-test',
            'empty'
        ],
        difficulty: 'basic',
        endgameType: 'None',
        usage: 'unit'
    },
    /** Mock service position */ MOCK_SERVICE_POSITION: {
        fen: "2K5/2P2k2/8/8/4R3/8/1r6/8",
        description: "Complex position from jest setup mocks",
        tags: [
            'mock',
            'service',
            'complex'
        ],
        difficulty: 'advanced',
        endgameType: 'KRPKR',
        usage: 'unit'
    }
};
function getAllTestFENsEnhanced() {
    const positions = [];
    // Add tablebase defense positions
    Object.values(TablebaseDefensePositions).forEach((pos)=>positions.push(pos));
    // Add integration test positions  
    Object.values(IntegrationTestPositions).forEach((pos)=>positions.push(pos));
    // Add validation test positions
    Object.values(ValidationTestPositions).forEach((pos)=>positions.push(pos));
    return positions;
}
function getFensByTag(tag) {
    return getAllTestFENsEnhanced().filter((pos)=>pos.tags.includes(tag));
}
function getFensByDifficulty(difficulty) {
    return getAllTestFENsEnhanced().filter((pos)=>pos.difficulty === difficulty);
}
function getFensByUsage(usage) {
    return getAllTestFENsEnhanced().filter((pos)=>pos.usage === usage || pos.usage === 'all');
}
function getFensByEndgameType(endgameType) {
    return getAllTestFENsEnhanced().filter((pos)=>pos.endgameType === endgameType);
}
function getTablebaseDefensePosition() {
    return TablebaseDefensePositions.BLACK_LOSES_DTM_TEST;
}
function getOpeningSequence() {
    return OpeningSequences.E4_E5_NF3_SEQUENCE;
}
function getKPKProgression() {
    return KPKProgressions.WINNING_PROGRESSION;
}
function validateAllTestFens() {
    const allFens = getAllTestFENsEnhanced();
    const invalid = [];
    let valid = 0;
    allFens.forEach((entry)=>{
        // Basic FEN validation - should have 6 space-separated parts
        const parts = entry.fen.split(' ');
        if (parts.length === 6) {
            valid++;
        } else {
            invalid.push(entry.fen);
        }
    });
    return {
        valid,
        invalid
    };
}

//# sourceMappingURL=data:application/json;base64,