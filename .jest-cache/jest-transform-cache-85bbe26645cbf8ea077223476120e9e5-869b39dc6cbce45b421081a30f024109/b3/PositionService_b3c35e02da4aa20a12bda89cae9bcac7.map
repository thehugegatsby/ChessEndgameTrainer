{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/database/PositionService.ts"],"sourcesContent":["/**\n * @file Position service implementation\n * @module services/database/PositionService\n *\n * @description\n * Business logic layer for managing chess endgame positions.\n * Handles position-related operations with caching and business rules,\n * completely decoupled from data access implementation through repository pattern.\n *\n * @remarks\n * Key features:\n * - Repository pattern for data abstraction\n * - LRU caching for performance optimization\n * - Comprehensive error handling with logging\n * - Support for CRUD operations\n * - Category and difficulty filtering\n * - Position navigation (next/previous)\n * - Full-text search capabilities\n *\n * The service acts as an intermediary between the UI layer and data layer,\n * enforcing business rules and providing caching for frequently accessed positions.\n *\n * @example\n * ```typescript\n * // Create service with repository\n * const repository = new SQLitePositionRepository();\n * const service = new PositionService(repository, {\n *   cacheEnabled: true,\n *   cacheSize: 100\n * });\n *\n * // Use service\n * const position = await service.getPosition(1);\n * const positions = await service.getPositionsByCategory('basic-checkmates');\n * ```\n */\n\nimport { IPositionRepository } from \"@shared/repositories/IPositionRepository\";\nimport { IPositionService, IPositionServiceConfig } from \"./IPositionService\";\nimport {\n  EndgamePosition,\n  EndgameCategory,\n  EndgameChapter,\n} from \"@shared/types\";\nimport { getLogger } from \"@shared/services/logging\";\nimport { LRUCache } from \"@shared/lib/cache/LRUCache\";\nimport { RepositoryError } from \"./errors\";\nimport { CACHE } from \"@shared/constants\";\n\nconst logger = getLogger().setContext(\"PositionService\");\n\n/**\n * Service for managing chess positions\n *\n * @class PositionService\n * @implements {IPositionService}\n *\n * @description\n * Implements the position service interface with caching and business logic.\n * Uses repository pattern for data access abstraction, allowing different\n * storage backends (SQLite, PostgreSQL, etc.) without changing service code.\n *\n * @example\n * ```typescript\n * const service = new PositionService(repository, {\n *   cacheEnabled: true,\n *   cacheSize: 200,\n *   cacheTTL: 300000 // 5 minutes\n * });\n * ```\n */\nexport class PositionService implements IPositionService {\n  private repository: IPositionRepository;\n  private cache?: LRUCache<EndgamePosition>;\n  private config: IPositionServiceConfig;\n\n  /**\n   * Creates a new PositionService instance\n   *\n   * @param {IPositionRepository} repository - Data access repository\n   * @param {IPositionServiceConfig} [config={}] - Service configuration\n   *\n   * @example\n   * ```typescript\n   * const service = new PositionService(repository, {\n   *   cacheEnabled: true,\n   *   cacheSize: 100\n   * });\n   * ```\n   */\n  constructor(\n    repository: IPositionRepository,\n    config: IPositionServiceConfig = {},\n  ) {\n    this.repository = repository;\n    this.config = {\n      cacheEnabled: true,\n      cacheSize: CACHE.POSITION_CACHE_SIZE,\n      cacheTTL: CACHE.ANALYSIS_CACHE_TTL,\n      ...config,\n    };\n\n    if (this.config.cacheEnabled) {\n      this.cache = new LRUCache<EndgamePosition>(this.config.cacheSize!);\n    }\n\n    logger.info(\"PositionService initialized\", { config: this.config });\n  }\n\n  /**\n   * Get a single position by ID\n   *\n   * @param {number} id - Position identifier\n   * @returns {Promise<EndgamePosition | null>} Position if found, null otherwise\n   * @throws {RepositoryError} If repository operation fails\n   *\n   * @description\n   * Retrieves a position by ID with cache-first strategy.\n   * If found in cache, returns immediately. Otherwise fetches\n   * from repository and caches the result.\n   *\n   * @example\n   * ```typescript\n   * const position = await service.getPosition(1);\n   * if (position) {\n   *   console.log(position.title);\n   * }\n   * ```\n   */\n  async getPosition(id: number): Promise<EndgamePosition | null> {\n    // Check cache first\n    const cacheKey = id.toString();\n    if (this.cache?.has(cacheKey)) {\n      logger.debug(\"Cache hit for position\", { id });\n      return this.cache.get(cacheKey)!;\n    }\n\n    try {\n      const position = await this.repository.getPosition(id);\n\n      if (position && this.cache) {\n        this.cache.set(cacheKey, position);\n      }\n\n      return position;\n    } catch (error) {\n      logger.error(\"Failed to get position\", { id, error });\n      throw new RepositoryError(\"getPosition\", error as Error);\n    }\n  }\n\n  /**\n   * Get all positions\n   *\n   * @returns {Promise<EndgamePosition[]>} Array of all positions\n   * @throws {RepositoryError} If repository operation fails\n   *\n   * @description\n   * Retrieves all positions from the repository and caches\n   * each position individually for future single-position lookups.\n   *\n   * @remarks\n   * Use with caution on large datasets as this loads all positions\n   * into memory. Consider using pagination or filtering for better\n   * performance with large position databases.\n   *\n   * @example\n   * ```typescript\n   * const allPositions = await service.getAllPositions();\n   * console.log(`Total positions: ${allPositions.length}`);\n   * ```\n   */\n  async getAllPositions(): Promise<EndgamePosition[]> {\n    try {\n      const positions = await this.repository.getAllPositions();\n\n      // Cache individual positions\n      if (this.cache) {\n        positions.forEach((position) => {\n          this.cache!.set(position.id.toString(), position);\n        });\n      }\n\n      return positions;\n    } catch (error) {\n      logger.error(\"Failed to get all positions\", { error });\n      throw new RepositoryError(\"getAllPositions\", error as Error);\n    }\n  }\n\n  /**\n   * Get positions by category\n   *\n   * @param {string} category - Category identifier (e.g., 'basic-checkmates')\n   * @returns {Promise<EndgamePosition[]>} Positions in the category\n   *\n   * @description\n   * Retrieves all positions belonging to a specific category.\n   * Results are cached individually for improved performance\n   * on subsequent single-position lookups.\n   *\n   * @example\n   * ```typescript\n   * const checkmates = await service.getPositionsByCategory('basic-checkmates');\n   * const rookEndgames = await service.getPositionsByCategory('rook-endgames');\n   * ```\n   */\n  async getPositionsByCategory(category: string): Promise<EndgamePosition[]> {\n    try {\n      const positions = await this.repository.getPositionsByCategory(category);\n\n      // Cache individual positions\n      if (this.cache) {\n        positions.forEach((position) => {\n          this.cache!.set(position.id.toString(), position);\n        });\n      }\n\n      return positions;\n    } catch (error) {\n      logger.error(\"Failed to get positions by category\", { category, error });\n      return [];\n    }\n  }\n\n  /**\n   * Get positions by difficulty\n   * @param difficulty\n   */\n  async getPositionsByDifficulty(\n    difficulty: EndgamePosition[\"difficulty\"],\n  ): Promise<EndgamePosition[]> {\n    try {\n      const positions =\n        await this.repository.getPositionsByDifficulty(difficulty);\n\n      // Cache individual positions\n      if (this.cache) {\n        positions.forEach((position) => {\n          this.cache!.set(position.id.toString(), position);\n        });\n      }\n\n      return positions;\n    } catch (error) {\n      logger.error(\"Failed to get positions by difficulty\", {\n        difficulty,\n        error,\n      });\n      return [];\n    }\n  }\n\n  /**\n   * Search positions by title or description\n   *\n   * @param {string} searchTerm - Search query\n   * @returns {Promise<EndgamePosition[]>} Matching positions\n   *\n   * @description\n   * Performs full-text search across position titles and descriptions.\n   * Empty or whitespace-only search terms return empty results.\n   * Search is delegated to the repository implementation.\n   *\n   * @example\n   * ```typescript\n   * const results = await service.searchPositions('rook checkmate');\n   * const queenEndgames = await service.searchPositions('queen vs pawn');\n   * ```\n   */\n  async searchPositions(searchTerm: string): Promise<EndgamePosition[]> {\n    if (!searchTerm.trim()) {\n      return [];\n    }\n\n    try {\n      const positions = await this.repository.searchPositions(searchTerm);\n\n      // Cache individual positions\n      if (this.cache) {\n        positions.forEach((position) => {\n          this.cache!.set(position.id.toString(), position);\n        });\n      }\n\n      return positions;\n    } catch (error) {\n      logger.error(\"Failed to search positions\", { searchTerm, error });\n      return [];\n    }\n  }\n\n  /**\n   * Clear the cache\n   *\n   * @description\n   * Removes all cached positions from memory.\n   * Useful for testing or when positions are updated externally.\n   *\n   * @example\n   * ```typescript\n   * service.clearCache();\n   * console.log('Cache cleared');\n   * ```\n   */\n  clearCache(): void {\n    this.cache?.clear();\n    logger.info(\"Position cache cleared\");\n  }\n\n  /**\n   * Get cache statistics\n   *\n   * @returns {Object} Cache statistics\n   * @returns {number} returns.size - Number of cached items\n   * @returns {number[]} returns.keys - Array of cached position IDs\n   * @returns {boolean} returns.enabled - Whether caching is enabled\n   *\n   * @description\n   * Provides insight into cache usage for monitoring and debugging.\n   *\n   * @example\n   * ```typescript\n   * const stats = service.getCacheStats();\n   * console.log(`Cached positions: ${stats.size}`);\n   * console.log(`Cache enabled: ${stats.enabled}`);\n   * ```\n   */\n  getCacheStats(): { size: number; keys: number[]; enabled: boolean } {\n    if (!this.cache) {\n      return { size: 0, keys: [], enabled: false };\n    }\n\n    const stats = this.cache.getStats();\n    const keys = this.cache.keys().map((key) => parseInt(key, 10));\n    return {\n      size: stats.size,\n      keys: keys,\n      enabled: true,\n    };\n  }\n\n  /**\n   * Get all categories\n   */\n  async getCategories(): Promise<EndgameCategory[]> {\n    try {\n      return await this.repository.getCategories();\n    } catch (error) {\n      logger.error(\"Failed to get categories\", { error });\n      return [];\n    }\n  }\n\n  /**\n   * Get all chapters\n   */\n  async getChapters(): Promise<EndgameChapter[]> {\n    try {\n      return await this.repository.getChapters();\n    } catch (error) {\n      logger.error(\"Failed to get chapters\", { error });\n      return [];\n    }\n  }\n\n  /**\n   * Get chapters by category\n   * @param categoryId\n   */\n  async getChaptersByCategory(categoryId: string): Promise<EndgameChapter[]> {\n    try {\n      return await this.repository.getChaptersByCategory(categoryId);\n    } catch (error) {\n      logger.error(\"Failed to get chapters by category\", { categoryId, error });\n      return [];\n    }\n  }\n\n  /**\n   * Get next position in sequence (for navigation)\n   *\n   * @param {number} currentId - Current position ID\n   * @param {string} [categoryId] - Optional category constraint\n   * @returns {Promise<EndgamePosition | null>} Next position or null\n   *\n   * @description\n   * Retrieves the next position in sequence, optionally within\n   * the same category. Used for navigation between positions.\n   *\n   * @example\n   * ```typescript\n   * // Get next position in any category\n   * const next = await service.getNextPosition(5);\n   *\n   * // Get next position in same category\n   * const nextInCategory = await service.getNextPosition(5, 'rook-endgames');\n   * ```\n   */\n  async getNextPosition(\n    currentId: number,\n    categoryId?: string,\n  ): Promise<EndgamePosition | null> {\n    try {\n      const position = await this.repository.getNextPosition(\n        currentId,\n        categoryId,\n      );\n\n      if (position && this.cache) {\n        this.cache.set(position.id.toString(), position);\n      }\n\n      return position;\n    } catch (error) {\n      logger.error(\"Failed to get next position\", {\n        currentId,\n        categoryId,\n        error,\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Get previous position in sequence (for navigation)\n   * @param currentId\n   * @param categoryId\n   */\n  async getPreviousPosition(\n    currentId: number,\n    categoryId?: string,\n  ): Promise<EndgamePosition | null> {\n    try {\n      const position = await this.repository.getPreviousPosition(\n        currentId,\n        categoryId,\n      );\n\n      if (position && this.cache) {\n        this.cache.set(position.id.toString(), position);\n      }\n\n      return position;\n    } catch (error) {\n      logger.error(\"Failed to get previous position\", {\n        currentId,\n        categoryId,\n        error,\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Get total position count\n   */\n  async getTotalPositionCount(): Promise<number> {\n    try {\n      return await this.repository.getTotalPositionCount();\n    } catch (error) {\n      logger.error(\"Failed to get position count\", { error });\n      return 0;\n    }\n  }\n\n  /**\n   * Get position count by category\n   * @param categoryId\n   */\n  async getPositionCountByCategory(categoryId: string): Promise<number> {\n    try {\n      return await this.repository.getPositionCountByCategory(categoryId);\n    } catch (error) {\n      logger.error(\"Failed to get position count by category\", {\n        categoryId,\n        error,\n      });\n      return 0;\n    }\n  }\n\n  /**\n   * Create a new position (admin functionality)\n   *\n   * @param {Omit<EndgamePosition, 'id'>} position - Position data without ID\n   * @returns {Promise<EndgamePosition | null>} Created position or null on failure\n   *\n   * @description\n   * Creates a new position in the repository. The ID is auto-generated\n   * by the storage backend. Created position is automatically cached.\n   *\n   * @remarks\n   * This is an administrative function that may require special\n   * permissions in production environments.\n   *\n   * @example\n   * ```typescript\n   * const newPosition = await service.createPosition({\n   *   title: 'Queen vs Rook',\n   *   fen: '8/8/8/8/3Q4/8/8/3rk3 w - - 0 1',\n   *   category: 'queen-endgames',\n   *   difficulty: 'advanced'\n   * });\n   * ```\n   */\n  async createPosition(\n    position: Omit<EndgamePosition, \"id\">,\n  ): Promise<EndgamePosition | null> {\n    try {\n      const created = await this.repository.createPosition(position);\n\n      if (this.cache) {\n        this.cache.set(created.id.toString(), created);\n      }\n\n      logger.info(\"Position created\", { id: created.id });\n      return created;\n    } catch (error) {\n      logger.error(\"Failed to create position\", { error });\n      return null;\n    }\n  }\n\n  /**\n   * Update a position (admin functionality)\n   * @param id\n   * @param updates\n   */\n  async updatePosition(\n    id: number,\n    updates: Partial<EndgamePosition>,\n  ): Promise<EndgamePosition | null> {\n    try {\n      const updated = await this.repository.updatePosition(id, updates);\n\n      if (updated && this.cache) {\n        this.cache.set(id.toString(), updated);\n      }\n\n      logger.info(\"Position updated\", { id });\n      return updated;\n    } catch (error) {\n      logger.error(\"Failed to update position\", { id, error });\n      return null;\n    }\n  }\n\n  /**\n   * Delete a position (admin functionality)\n   * @param id\n   */\n  async deletePosition(id: number): Promise<boolean> {\n    try {\n      const deleted = await this.repository.deletePosition(id);\n\n      if (deleted && this.cache) {\n        this.cache.delete(id.toString());\n      }\n\n      logger.info(\"Position deleted\", { id });\n      return deleted;\n    } catch (error) {\n      logger.error(\"Failed to delete position\", { id, error });\n      return false;\n    }\n  }\n}\n"],"names":["PositionService","logger","getLogger","setContext","getPosition","id","cacheKey","toString","cache","has","debug","get","position","repository","set","error","RepositoryError","getAllPositions","positions","forEach","getPositionsByCategory","category","getPositionsByDifficulty","difficulty","searchPositions","searchTerm","trim","clearCache","clear","info","getCacheStats","size","keys","enabled","stats","getStats","map","key","parseInt","getCategories","getChapters","getChaptersByCategory","categoryId","getNextPosition","currentId","getPreviousPosition","getTotalPositionCount","getPositionCountByCategory","createPosition","created","updatePosition","updates","updated","deletePosition","deleted","delete","config","cacheEnabled","cacheSize","CACHE","POSITION_CACHE_SIZE","cacheTTL","ANALYSIS_CACHE_TTL","LRUCache"],"mappings":"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"}