0350dc5566e108459274184f6ada42a1
/**
 * Tests for ErrorService
 *
 * Tests cover:
 * - Singleton pattern behavior
 * - Error handling methods (tablebase, UI, network)
 * - Internal error log management
 * - Error statistics
 * - User message generation
 * - Logger integration (mocked)
 */ "use strict";
// Mock the Logger module
jest.mock("@shared/services/logging/Logger", ()=>({
        getLogger: jest.fn().mockReturnValue({
            setContext: jest.fn().mockReturnThis(),
            error: jest.fn(),
            warn: jest.fn(),
            info: jest.fn(),
            debug: jest.fn()
        })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _ErrorService = require("../../../shared/services/ErrorService");
const _Logger = require("../../../shared/services/logging/Logger");
describe("ErrorService", ()=>{
    let loggerMock;
    beforeEach(()=>{
        // Clear all mocks before each test
        jest.clearAllMocks();
        // Get the mocked logger instance
        loggerMock = (0, _Logger.getLogger)();
        // Clear the error log before each test
        _ErrorService.ErrorService.getInstance().clearErrorLog();
    });
    describe("Singleton Pattern", ()=>{
        it("should always return the same instance", ()=>{
            const instance1 = _ErrorService.ErrorService.getInstance();
            const instance2 = _ErrorService.ErrorService.getInstance();
            expect(instance1).toBe(instance2);
        });
    });
    describe("handleTablebaseError", ()=>{
        it("should log error and return German user message", ()=>{
            const error = new Error("Network timeout");
            const context = {
                component: "TrainingBoard",
                action: "evaluate-position"
            };
            const message = _ErrorService.ErrorService.handleTablebaseError(error, context);
            // Check logger was called with correct parameters
            expect(loggerMock.error).toHaveBeenCalledWith("Tablebase Error", error, expect.objectContaining({
                ...context,
                type: _ErrorService.ErrorType.TABLEBASE,
                timestamp: expect.any(Date)
            }));
            // Check German message
            expect(message).toBe("Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.");
        });
        it("should handle missing context gracefully", ()=>{
            const error = new Error("API error");
            const message = _ErrorService.ErrorService.handleTablebaseError(error);
            expect(loggerMock.error).toHaveBeenCalledWith("Tablebase Error", error, expect.objectContaining({
                type: _ErrorService.ErrorType.TABLEBASE,
                timestamp: expect.any(Date)
            }));
            expect(message).toBe("Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.");
        });
        it("should handle non-Error objects", ()=>{
            const errorString = "Simple error string";
            const message = _ErrorService.ErrorService.handleTablebaseError(errorString);
            expect(loggerMock.error).toHaveBeenCalled();
            expect(message).toBe("Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.");
        });
    });
    describe("handleUIError", ()=>{
        it("should log UI error with component name", ()=>{
            const error = new Error("Component render failed");
            const componentName = "ChessBoard";
            const context = {
                additionalData: {
                    moveCount: 5
                }
            };
            const message = _ErrorService.ErrorService.handleUIError(error, componentName, context);
            expect(loggerMock.error).toHaveBeenCalledWith(`UI Error in ${componentName}`, error, expect.objectContaining({
                ...context,
                component: componentName,
                type: _ErrorService.ErrorType.UI_COMPONENT,
                timestamp: expect.any(Date)
            }));
            expect(message).toBe("Ein Problem mit der Benutzeroberfläche ist aufgetreten. Bitte versuchen Sie es erneut.");
        });
    });
    describe("handleNetworkError", ()=>{
        it("should log network error and return appropriate message", ()=>{
            const error = new Error("Connection refused");
            const context = {
                action: "fetch-tablebase",
                additionalData: {
                    url: "https://api.example.com",
                    method: "GET"
                }
            };
            const message = _ErrorService.ErrorService.handleNetworkError(error, context);
            expect(loggerMock.error).toHaveBeenCalledWith("Network Error", error, expect.objectContaining({
                ...context,
                type: _ErrorService.ErrorType.NETWORK,
                timestamp: expect.any(Date)
            }));
            expect(message).toBe("Netzwerkfehler. Bitte prüfen Sie Ihre Internetverbindung.");
        });
    });
    describe("Error Log Management", ()=>{
        it("should store errors in internal log", ()=>{
            const error1 = new Error("Error 1");
            const error2 = new Error("Error 2");
            _ErrorService.ErrorService.handleUIError(error1, "Component1");
            _ErrorService.ErrorService.handleNetworkError(error2);
            const stats = _ErrorService.ErrorService.getInstance().getErrorStats();
            expect(stats.totalErrors).toBe(2);
            expect(stats.errorsByType[_ErrorService.ErrorType.UI_COMPONENT]).toBe(1);
            expect(stats.errorsByType[_ErrorService.ErrorType.NETWORK]).toBe(1);
        });
        it("should limit error log to 50 entries", ()=>{
            // Log 51 errors
            for(let i = 0; i < 51; i++){
                _ErrorService.ErrorService.handleTablebaseError(new Error(`Error ${i}`));
            }
            const stats = _ErrorService.ErrorService.getInstance().getErrorStats();
            expect(stats.totalErrors).toBe(50);
        });
        it("should clear error log when requested", ()=>{
            _ErrorService.ErrorService.handleUIError(new Error("Test error"), "TestComponent");
            let stats = _ErrorService.ErrorService.getInstance().getErrorStats();
            expect(stats.totalErrors).toBe(1);
            _ErrorService.ErrorService.getInstance().clearErrorLog();
            stats = _ErrorService.ErrorService.getInstance().getErrorStats();
            expect(stats.totalErrors).toBe(0);
        });
    });
    describe("getErrorStats", ()=>{
        it("should return correct statistics", ()=>{
            // Log different types of errors
            _ErrorService.ErrorService.handleTablebaseError(new Error("Tablebase error"));
            _ErrorService.ErrorService.handleUIError(new Error("UI error 1"), "Component1");
            _ErrorService.ErrorService.handleUIError(new Error("UI error 2"), "Component2");
            _ErrorService.ErrorService.handleNetworkError(new Error("Network error"));
            const stats = _ErrorService.ErrorService.getInstance().getErrorStats();
            expect(stats.totalErrors).toBe(4);
            expect(stats.errorsByType[_ErrorService.ErrorType.TABLEBASE]).toBe(1);
            expect(stats.errorsByType[_ErrorService.ErrorType.UI_COMPONENT]).toBe(2);
            expect(stats.errorsByType[_ErrorService.ErrorType.NETWORK]).toBe(1);
            expect(stats.recentErrors).toHaveLength(4);
            // Check recent errors structure
            const recentError = stats.recentErrors[0];
            expect(recentError).toHaveProperty("type");
            expect(recentError).toHaveProperty("component");
            expect(recentError).toHaveProperty("timestamp");
            expect(recentError).toHaveProperty("message");
        });
        it("should handle empty error log", ()=>{
            const stats = _ErrorService.ErrorService.getInstance().getErrorStats();
            expect(stats.totalErrors).toBe(0);
            expect(stats.errorsByType).toEqual({});
            expect(stats.recentErrors).toEqual([]);
        });
    });
    describe("User Message Generation", ()=>{
        it("should return correct German messages for each error type", ()=>{
            // We'll use the private method indirectly through public methods
            const tablebaseMsg = _ErrorService.ErrorService.handleTablebaseError(new Error("test"));
            expect(tablebaseMsg).toBe("Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.");
            const uiMsg = _ErrorService.ErrorService.handleUIError(new Error("test"), "Test");
            expect(uiMsg).toBe("Ein Problem mit der Benutzeroberfläche ist aufgetreten. Bitte versuchen Sie es erneut.");
            const networkMsg = _ErrorService.ErrorService.handleNetworkError(new Error("test"));
            expect(networkMsg).toBe("Netzwerkfehler. Bitte prüfen Sie Ihre Internetverbindung.");
        });
    });
    describe("Edge Cases", ()=>{
        it("should handle null error gracefully", ()=>{
            const message = _ErrorService.ErrorService.handleTablebaseError(null);
            expect(loggerMock.error).toHaveBeenCalled();
            expect(message).toBe("Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.");
        });
        it("should handle undefined error gracefully", ()=>{
            const message = _ErrorService.ErrorService.handleUIError(undefined, "Component");
            expect(loggerMock.error).toHaveBeenCalled();
            expect(message).toBe("Ein Problem mit der Benutzeroberfläche ist aufgetreten. Bitte versuchen Sie es erneut.");
        });
        it("should handle string errors", ()=>{
            const message = _ErrorService.ErrorService.handleNetworkError("Network failed");
            expect(loggerMock.error).toHaveBeenCalled();
            expect(message).toBe("Netzwerkfehler. Bitte prüfen Sie Ihre Internetverbindung.");
        });
        it("should handle errors with circular references", ()=>{
            const error = new Error("Circular error");
            error.circular = error; // Create circular reference
            const message = _ErrorService.ErrorService.handleTablebaseError(error);
            expect(loggerMock.error).toHaveBeenCalled();
            expect(message).toBe("Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvdGVzdHMvdW5pdC9zZXJ2aWNlcy9FcnJvclNlcnZpY2UudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3RzIGZvciBFcnJvclNlcnZpY2VcbiAqXG4gKiBUZXN0cyBjb3ZlcjpcbiAqIC0gU2luZ2xldG9uIHBhdHRlcm4gYmVoYXZpb3JcbiAqIC0gRXJyb3IgaGFuZGxpbmcgbWV0aG9kcyAodGFibGViYXNlLCBVSSwgbmV0d29yaylcbiAqIC0gSW50ZXJuYWwgZXJyb3IgbG9nIG1hbmFnZW1lbnRcbiAqIC0gRXJyb3Igc3RhdGlzdGljc1xuICogLSBVc2VyIG1lc3NhZ2UgZ2VuZXJhdGlvblxuICogLSBMb2dnZXIgaW50ZWdyYXRpb24gKG1vY2tlZClcbiAqL1xuXG5pbXBvcnQgeyBFcnJvclNlcnZpY2UsIEVycm9yVHlwZSB9IGZyb20gXCJAc2hhcmVkL3NlcnZpY2VzL0Vycm9yU2VydmljZVwiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSBcIkBzaGFyZWQvc2VydmljZXMvbG9nZ2luZy9Mb2dnZXJcIjtcblxuLy8gTW9jayB0aGUgTG9nZ2VyIG1vZHVsZVxuamVzdC5tb2NrKFwiQHNoYXJlZC9zZXJ2aWNlcy9sb2dnaW5nL0xvZ2dlclwiLCAoKSA9PiAoe1xuICBnZXRMb2dnZXI6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgIHNldENvbnRleHQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIGVycm9yOiBqZXN0LmZuKCksXG4gICAgd2FybjogamVzdC5mbigpLFxuICAgIGluZm86IGplc3QuZm4oKSxcbiAgICBkZWJ1ZzogamVzdC5mbigpLFxuICB9KSxcbn0pKTtcblxuZGVzY3JpYmUoXCJFcnJvclNlcnZpY2VcIiwgKCkgPT4ge1xuICBsZXQgbG9nZ2VyTW9jazogYW55O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIENsZWFyIGFsbCBtb2NrcyBiZWZvcmUgZWFjaCB0ZXN0XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG5cbiAgICAvLyBHZXQgdGhlIG1vY2tlZCBsb2dnZXIgaW5zdGFuY2VcbiAgICBsb2dnZXJNb2NrID0gZ2V0TG9nZ2VyKCk7XG5cbiAgICAvLyBDbGVhciB0aGUgZXJyb3IgbG9nIGJlZm9yZSBlYWNoIHRlc3RcbiAgICBFcnJvclNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5jbGVhckVycm9yTG9nKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiU2luZ2xldG9uIFBhdHRlcm5cIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGFsd2F5cyByZXR1cm4gdGhlIHNhbWUgaW5zdGFuY2VcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgaW5zdGFuY2UxID0gRXJyb3JTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgICBjb25zdCBpbnN0YW5jZTIgPSBFcnJvclNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgZXhwZWN0KGluc3RhbmNlMSkudG9CZShpbnN0YW5jZTIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcImhhbmRsZVRhYmxlYmFzZUVycm9yXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBsb2cgZXJyb3IgYW5kIHJldHVybiBHZXJtYW4gdXNlciBtZXNzYWdlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiTmV0d29yayB0aW1lb3V0XCIpO1xuICAgICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICAgY29tcG9uZW50OiBcIlRyYWluaW5nQm9hcmRcIixcbiAgICAgICAgYWN0aW9uOiBcImV2YWx1YXRlLXBvc2l0aW9uXCIsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtZXNzYWdlID0gRXJyb3JTZXJ2aWNlLmhhbmRsZVRhYmxlYmFzZUVycm9yKGVycm9yLCBjb250ZXh0KTtcblxuICAgICAgLy8gQ2hlY2sgbG9nZ2VyIHdhcyBjYWxsZWQgd2l0aCBjb3JyZWN0IHBhcmFtZXRlcnNcbiAgICAgIGV4cGVjdChsb2dnZXJNb2NrLmVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgXCJUYWJsZWJhc2UgRXJyb3JcIixcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAuLi5jb250ZXh0LFxuICAgICAgICAgIHR5cGU6IEVycm9yVHlwZS5UQUJMRUJBU0UsXG4gICAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KERhdGUpLFxuICAgICAgICB9KSxcbiAgICAgICk7XG5cbiAgICAgIC8vIENoZWNrIEdlcm1hbiBtZXNzYWdlXG4gICAgICBleHBlY3QobWVzc2FnZSkudG9CZShcbiAgICAgICAgXCJEaWUgVGFibGViYXNlLURhdGVuYmFuayBrb25udGUgbmljaHQgZ2VsYWRlbiB3ZXJkZW4uIEJpdHRlIGFrdHVhbGlzaWVyZW4gU2llIGRpZSBTZWl0ZS5cIixcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBoYW5kbGUgbWlzc2luZyBjb250ZXh0IGdyYWNlZnVsbHlcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJBUEkgZXJyb3JcIik7XG5cbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBFcnJvclNlcnZpY2UuaGFuZGxlVGFibGViYXNlRXJyb3IoZXJyb3IpO1xuXG4gICAgICBleHBlY3QobG9nZ2VyTW9jay5lcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIFwiVGFibGViYXNlIEVycm9yXCIsXG4gICAgICAgIGVycm9yLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdHlwZTogRXJyb3JUeXBlLlRBQkxFQkFTRSxcbiAgICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoRGF0ZSksXG4gICAgICAgIH0pLFxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KG1lc3NhZ2UpLnRvQmUoXG4gICAgICAgIFwiRGllIFRhYmxlYmFzZS1EYXRlbmJhbmsga29ubnRlIG5pY2h0IGdlbGFkZW4gd2VyZGVuLiBCaXR0ZSBha3R1YWxpc2llcmVuIFNpZSBkaWUgU2VpdGUuXCIsXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgaGFuZGxlIG5vbi1FcnJvciBvYmplY3RzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yU3RyaW5nID0gXCJTaW1wbGUgZXJyb3Igc3RyaW5nXCI7XG5cbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBFcnJvclNlcnZpY2UuaGFuZGxlVGFibGViYXNlRXJyb3IoZXJyb3JTdHJpbmcgYXMgYW55KTtcblxuICAgICAgZXhwZWN0KGxvZ2dlck1vY2suZXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlKS50b0JlKFxuICAgICAgICBcIkRpZSBUYWJsZWJhc2UtRGF0ZW5iYW5rIGtvbm50ZSBuaWNodCBnZWxhZGVuIHdlcmRlbi4gQml0dGUgYWt0dWFsaXNpZXJlbiBTaWUgZGllIFNlaXRlLlwiLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJoYW5kbGVVSUVycm9yXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBsb2cgVUkgZXJyb3Igd2l0aCBjb21wb25lbnQgbmFtZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIkNvbXBvbmVudCByZW5kZXIgZmFpbGVkXCIpO1xuICAgICAgY29uc3QgY29tcG9uZW50TmFtZSA9IFwiQ2hlc3NCb2FyZFwiO1xuICAgICAgY29uc3QgY29udGV4dCA9IHsgYWRkaXRpb25hbERhdGE6IHsgbW92ZUNvdW50OiA1IH0gfTtcblxuICAgICAgY29uc3QgbWVzc2FnZSA9IEVycm9yU2VydmljZS5oYW5kbGVVSUVycm9yKGVycm9yLCBjb21wb25lbnROYW1lLCBjb250ZXh0KTtcblxuICAgICAgZXhwZWN0KGxvZ2dlck1vY2suZXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBgVUkgRXJyb3IgaW4gJHtjb21wb25lbnROYW1lfWAsXG4gICAgICAgIGVycm9yLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgLi4uY29udGV4dCxcbiAgICAgICAgICBjb21wb25lbnQ6IGNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgdHlwZTogRXJyb3JUeXBlLlVJX0NPTVBPTkVOVCxcbiAgICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoRGF0ZSksXG4gICAgICAgIH0pLFxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KG1lc3NhZ2UpLnRvQmUoXG4gICAgICAgIFwiRWluIFByb2JsZW0gbWl0IGRlciBCZW51dHplcm9iZXJmbMOkY2hlIGlzdCBhdWZnZXRyZXRlbi4gQml0dGUgdmVyc3VjaGVuIFNpZSBlcyBlcm5ldXQuXCIsXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcImhhbmRsZU5ldHdvcmtFcnJvclwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgbG9nIG5ldHdvcmsgZXJyb3IgYW5kIHJldHVybiBhcHByb3ByaWF0ZSBtZXNzYWdlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiQ29ubmVjdGlvbiByZWZ1c2VkXCIpO1xuICAgICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICAgYWN0aW9uOiBcImZldGNoLXRhYmxlYmFzZVwiLFxuICAgICAgICBhZGRpdGlvbmFsRGF0YTogeyB1cmw6IFwiaHR0cHM6Ly9hcGkuZXhhbXBsZS5jb21cIiwgbWV0aG9kOiBcIkdFVFwiIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtZXNzYWdlID0gRXJyb3JTZXJ2aWNlLmhhbmRsZU5ldHdvcmtFcnJvcihlcnJvciwgY29udGV4dCk7XG5cbiAgICAgIGV4cGVjdChsb2dnZXJNb2NrLmVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgXCJOZXR3b3JrIEVycm9yXCIsXG4gICAgICAgIGVycm9yLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgLi4uY29udGV4dCxcbiAgICAgICAgICB0eXBlOiBFcnJvclR5cGUuTkVUV09SSyxcbiAgICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoRGF0ZSksXG4gICAgICAgIH0pLFxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KG1lc3NhZ2UpLnRvQmUoXG4gICAgICAgIFwiTmV0endlcmtmZWhsZXIuIEJpdHRlIHByw7xmZW4gU2llIElocmUgSW50ZXJuZXR2ZXJiaW5kdW5nLlwiLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJFcnJvciBMb2cgTWFuYWdlbWVudFwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgc3RvcmUgZXJyb3JzIGluIGludGVybmFsIGxvZ1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvcjEgPSBuZXcgRXJyb3IoXCJFcnJvciAxXCIpO1xuICAgICAgY29uc3QgZXJyb3IyID0gbmV3IEVycm9yKFwiRXJyb3IgMlwiKTtcblxuICAgICAgRXJyb3JTZXJ2aWNlLmhhbmRsZVVJRXJyb3IoZXJyb3IxLCBcIkNvbXBvbmVudDFcIik7XG4gICAgICBFcnJvclNlcnZpY2UuaGFuZGxlTmV0d29ya0Vycm9yKGVycm9yMik7XG5cbiAgICAgIGNvbnN0IHN0YXRzID0gRXJyb3JTZXJ2aWNlLmdldEluc3RhbmNlKCkuZ2V0RXJyb3JTdGF0cygpO1xuXG4gICAgICBleHBlY3Qoc3RhdHMudG90YWxFcnJvcnMpLnRvQmUoMik7XG4gICAgICBleHBlY3Qoc3RhdHMuZXJyb3JzQnlUeXBlW0Vycm9yVHlwZS5VSV9DT01QT05FTlRdKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHN0YXRzLmVycm9yc0J5VHlwZVtFcnJvclR5cGUuTkVUV09SS10pLnRvQmUoMSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBsaW1pdCBlcnJvciBsb2cgdG8gNTAgZW50cmllc1wiLCAoKSA9PiB7XG4gICAgICAvLyBMb2cgNTEgZXJyb3JzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDUxOyBpKyspIHtcbiAgICAgICAgRXJyb3JTZXJ2aWNlLmhhbmRsZVRhYmxlYmFzZUVycm9yKG5ldyBFcnJvcihgRXJyb3IgJHtpfWApKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3RhdHMgPSBFcnJvclNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5nZXRFcnJvclN0YXRzKCk7XG5cbiAgICAgIGV4cGVjdChzdGF0cy50b3RhbEVycm9ycykudG9CZSg1MCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBjbGVhciBlcnJvciBsb2cgd2hlbiByZXF1ZXN0ZWRcIiwgKCkgPT4ge1xuICAgICAgRXJyb3JTZXJ2aWNlLmhhbmRsZVVJRXJyb3IobmV3IEVycm9yKFwiVGVzdCBlcnJvclwiKSwgXCJUZXN0Q29tcG9uZW50XCIpO1xuXG4gICAgICBsZXQgc3RhdHMgPSBFcnJvclNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5nZXRFcnJvclN0YXRzKCk7XG4gICAgICBleHBlY3Qoc3RhdHMudG90YWxFcnJvcnMpLnRvQmUoMSk7XG5cbiAgICAgIEVycm9yU2VydmljZS5nZXRJbnN0YW5jZSgpLmNsZWFyRXJyb3JMb2coKTtcblxuICAgICAgc3RhdHMgPSBFcnJvclNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5nZXRFcnJvclN0YXRzKCk7XG4gICAgICBleHBlY3Qoc3RhdHMudG90YWxFcnJvcnMpLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiZ2V0RXJyb3JTdGF0c1wiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgcmV0dXJuIGNvcnJlY3Qgc3RhdGlzdGljc1wiLCAoKSA9PiB7XG4gICAgICAvLyBMb2cgZGlmZmVyZW50IHR5cGVzIG9mIGVycm9yc1xuICAgICAgRXJyb3JTZXJ2aWNlLmhhbmRsZVRhYmxlYmFzZUVycm9yKG5ldyBFcnJvcihcIlRhYmxlYmFzZSBlcnJvclwiKSk7XG4gICAgICBFcnJvclNlcnZpY2UuaGFuZGxlVUlFcnJvcihuZXcgRXJyb3IoXCJVSSBlcnJvciAxXCIpLCBcIkNvbXBvbmVudDFcIik7XG4gICAgICBFcnJvclNlcnZpY2UuaGFuZGxlVUlFcnJvcihuZXcgRXJyb3IoXCJVSSBlcnJvciAyXCIpLCBcIkNvbXBvbmVudDJcIik7XG4gICAgICBFcnJvclNlcnZpY2UuaGFuZGxlTmV0d29ya0Vycm9yKG5ldyBFcnJvcihcIk5ldHdvcmsgZXJyb3JcIikpO1xuXG4gICAgICBjb25zdCBzdGF0cyA9IEVycm9yU2VydmljZS5nZXRJbnN0YW5jZSgpLmdldEVycm9yU3RhdHMoKTtcblxuICAgICAgZXhwZWN0KHN0YXRzLnRvdGFsRXJyb3JzKS50b0JlKDQpO1xuICAgICAgZXhwZWN0KHN0YXRzLmVycm9yc0J5VHlwZVtFcnJvclR5cGUuVEFCTEVCQVNFXSkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChzdGF0cy5lcnJvcnNCeVR5cGVbRXJyb3JUeXBlLlVJX0NPTVBPTkVOVF0pLnRvQmUoMik7XG4gICAgICBleHBlY3Qoc3RhdHMuZXJyb3JzQnlUeXBlW0Vycm9yVHlwZS5ORVRXT1JLXSkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChzdGF0cy5yZWNlbnRFcnJvcnMpLnRvSGF2ZUxlbmd0aCg0KTtcblxuICAgICAgLy8gQ2hlY2sgcmVjZW50IGVycm9ycyBzdHJ1Y3R1cmVcbiAgICAgIGNvbnN0IHJlY2VudEVycm9yID0gc3RhdHMucmVjZW50RXJyb3JzWzBdO1xuICAgICAgZXhwZWN0KHJlY2VudEVycm9yKS50b0hhdmVQcm9wZXJ0eShcInR5cGVcIik7XG4gICAgICBleHBlY3QocmVjZW50RXJyb3IpLnRvSGF2ZVByb3BlcnR5KFwiY29tcG9uZW50XCIpO1xuICAgICAgZXhwZWN0KHJlY2VudEVycm9yKS50b0hhdmVQcm9wZXJ0eShcInRpbWVzdGFtcFwiKTtcbiAgICAgIGV4cGVjdChyZWNlbnRFcnJvcikudG9IYXZlUHJvcGVydHkoXCJtZXNzYWdlXCIpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgaGFuZGxlIGVtcHR5IGVycm9yIGxvZ1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGF0cyA9IEVycm9yU2VydmljZS5nZXRJbnN0YW5jZSgpLmdldEVycm9yU3RhdHMoKTtcblxuICAgICAgZXhwZWN0KHN0YXRzLnRvdGFsRXJyb3JzKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHN0YXRzLmVycm9yc0J5VHlwZSkudG9FcXVhbCh7fSk7XG4gICAgICBleHBlY3Qoc3RhdHMucmVjZW50RXJyb3JzKS50b0VxdWFsKFtdKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJVc2VyIE1lc3NhZ2UgR2VuZXJhdGlvblwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgcmV0dXJuIGNvcnJlY3QgR2VybWFuIG1lc3NhZ2VzIGZvciBlYWNoIGVycm9yIHR5cGVcIiwgKCkgPT4ge1xuICAgICAgLy8gV2UnbGwgdXNlIHRoZSBwcml2YXRlIG1ldGhvZCBpbmRpcmVjdGx5IHRocm91Z2ggcHVibGljIG1ldGhvZHNcbiAgICAgIGNvbnN0IHRhYmxlYmFzZU1zZyA9IEVycm9yU2VydmljZS5oYW5kbGVUYWJsZWJhc2VFcnJvcihuZXcgRXJyb3IoXCJ0ZXN0XCIpKTtcbiAgICAgIGV4cGVjdCh0YWJsZWJhc2VNc2cpLnRvQmUoXG4gICAgICAgIFwiRGllIFRhYmxlYmFzZS1EYXRlbmJhbmsga29ubnRlIG5pY2h0IGdlbGFkZW4gd2VyZGVuLiBCaXR0ZSBha3R1YWxpc2llcmVuIFNpZSBkaWUgU2VpdGUuXCIsXG4gICAgICApO1xuXG4gICAgICBjb25zdCB1aU1zZyA9IEVycm9yU2VydmljZS5oYW5kbGVVSUVycm9yKG5ldyBFcnJvcihcInRlc3RcIiksIFwiVGVzdFwiKTtcbiAgICAgIGV4cGVjdCh1aU1zZykudG9CZShcbiAgICAgICAgXCJFaW4gUHJvYmxlbSBtaXQgZGVyIEJlbnV0emVyb2JlcmZsw6RjaGUgaXN0IGF1ZmdldHJldGVuLiBCaXR0ZSB2ZXJzdWNoZW4gU2llIGVzIGVybmV1dC5cIixcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IG5ldHdvcmtNc2cgPSBFcnJvclNlcnZpY2UuaGFuZGxlTmV0d29ya0Vycm9yKG5ldyBFcnJvcihcInRlc3RcIikpO1xuICAgICAgZXhwZWN0KG5ldHdvcmtNc2cpLnRvQmUoXG4gICAgICAgIFwiTmV0endlcmtmZWhsZXIuIEJpdHRlIHByw7xmZW4gU2llIElocmUgSW50ZXJuZXR2ZXJiaW5kdW5nLlwiLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJFZGdlIENhc2VzXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBoYW5kbGUgbnVsbCBlcnJvciBncmFjZWZ1bGx5XCIsICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBFcnJvclNlcnZpY2UuaGFuZGxlVGFibGViYXNlRXJyb3IobnVsbCBhcyBhbnkpO1xuXG4gICAgICBleHBlY3QobG9nZ2VyTW9jay5lcnJvcikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1lc3NhZ2UpLnRvQmUoXG4gICAgICAgIFwiRGllIFRhYmxlYmFzZS1EYXRlbmJhbmsga29ubnRlIG5pY2h0IGdlbGFkZW4gd2VyZGVuLiBCaXR0ZSBha3R1YWxpc2llcmVuIFNpZSBkaWUgU2VpdGUuXCIsXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgaGFuZGxlIHVuZGVmaW5lZCBlcnJvciBncmFjZWZ1bGx5XCIsICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBFcnJvclNlcnZpY2UuaGFuZGxlVUlFcnJvcih1bmRlZmluZWQgYXMgYW55LCBcIkNvbXBvbmVudFwiKTtcblxuICAgICAgZXhwZWN0KGxvZ2dlck1vY2suZXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlKS50b0JlKFxuICAgICAgICBcIkVpbiBQcm9ibGVtIG1pdCBkZXIgQmVudXR6ZXJvYmVyZmzDpGNoZSBpc3QgYXVmZ2V0cmV0ZW4uIEJpdHRlIHZlcnN1Y2hlbiBTaWUgZXMgZXJuZXV0LlwiLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGhhbmRsZSBzdHJpbmcgZXJyb3JzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBFcnJvclNlcnZpY2UuaGFuZGxlTmV0d29ya0Vycm9yKFwiTmV0d29yayBmYWlsZWRcIiBhcyBhbnkpO1xuXG4gICAgICBleHBlY3QobG9nZ2VyTW9jay5lcnJvcikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1lc3NhZ2UpLnRvQmUoXG4gICAgICAgIFwiTmV0endlcmtmZWhsZXIuIEJpdHRlIHByw7xmZW4gU2llIElocmUgSW50ZXJuZXR2ZXJiaW5kdW5nLlwiLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGhhbmRsZSBlcnJvcnMgd2l0aCBjaXJjdWxhciByZWZlcmVuY2VzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yOiBhbnkgPSBuZXcgRXJyb3IoXCJDaXJjdWxhciBlcnJvclwiKTtcbiAgICAgIGVycm9yLmNpcmN1bGFyID0gZXJyb3I7IC8vIENyZWF0ZSBjaXJjdWxhciByZWZlcmVuY2VcblxuICAgICAgY29uc3QgbWVzc2FnZSA9IEVycm9yU2VydmljZS5oYW5kbGVUYWJsZWJhc2VFcnJvcihlcnJvcik7XG5cbiAgICAgIGV4cGVjdChsb2dnZXJNb2NrLmVycm9yKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QobWVzc2FnZSkudG9CZShcbiAgICAgICAgXCJEaWUgVGFibGViYXNlLURhdGVuYmFuayBrb25udGUgbmljaHQgZ2VsYWRlbiB3ZXJkZW4uIEJpdHRlIGFrdHVhbGlzaWVyZW4gU2llIGRpZSBTZWl0ZS5cIixcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJnZXRMb2dnZXIiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsInNldENvbnRleHQiLCJtb2NrUmV0dXJuVGhpcyIsImVycm9yIiwid2FybiIsImluZm8iLCJkZWJ1ZyIsImRlc2NyaWJlIiwibG9nZ2VyTW9jayIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiRXJyb3JTZXJ2aWNlIiwiZ2V0SW5zdGFuY2UiLCJjbGVhckVycm9yTG9nIiwiaXQiLCJpbnN0YW5jZTEiLCJpbnN0YW5jZTIiLCJleHBlY3QiLCJ0b0JlIiwiRXJyb3IiLCJjb250ZXh0IiwiY29tcG9uZW50IiwiYWN0aW9uIiwibWVzc2FnZSIsImhhbmRsZVRhYmxlYmFzZUVycm9yIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJvYmplY3RDb250YWluaW5nIiwidHlwZSIsIkVycm9yVHlwZSIsIlRBQkxFQkFTRSIsInRpbWVzdGFtcCIsImFueSIsIkRhdGUiLCJlcnJvclN0cmluZyIsInRvSGF2ZUJlZW5DYWxsZWQiLCJjb21wb25lbnROYW1lIiwiYWRkaXRpb25hbERhdGEiLCJtb3ZlQ291bnQiLCJoYW5kbGVVSUVycm9yIiwiVUlfQ09NUE9ORU5UIiwidXJsIiwibWV0aG9kIiwiaGFuZGxlTmV0d29ya0Vycm9yIiwiTkVUV09SSyIsImVycm9yMSIsImVycm9yMiIsInN0YXRzIiwiZ2V0RXJyb3JTdGF0cyIsInRvdGFsRXJyb3JzIiwiZXJyb3JzQnlUeXBlIiwiaSIsInJlY2VudEVycm9ycyIsInRvSGF2ZUxlbmd0aCIsInJlY2VudEVycm9yIiwidG9IYXZlUHJvcGVydHkiLCJ0b0VxdWFsIiwidGFibGViYXNlTXNnIiwidWlNc2ciLCJuZXR3b3JrTXNnIiwidW5kZWZpbmVkIiwiY2lyY3VsYXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0NBVUM7QUFLRCx5QkFBeUI7QUFDekJBLEtBQUtDLElBQUksQ0FBQyxt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