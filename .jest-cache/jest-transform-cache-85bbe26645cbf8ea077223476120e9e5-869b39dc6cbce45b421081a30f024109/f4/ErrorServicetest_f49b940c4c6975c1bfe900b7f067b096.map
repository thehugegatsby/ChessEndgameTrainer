{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/services/ErrorService.test.ts"],"sourcesContent":["/**\n * Tests for ErrorService\n *\n * Tests cover:\n * - Singleton pattern behavior\n * - Error handling methods (tablebase, UI, network)\n * - Internal error log management\n * - Error statistics\n * - User message generation\n * - Logger integration (mocked)\n */\n\nimport { ErrorService, ErrorType } from \"@shared/services/ErrorService\";\nimport { getLogger } from \"@shared/services/logging/Logger\";\n\n// Mock the Logger module\njest.mock(\"@shared/services/logging/Logger\", () => ({\n  getLogger: jest.fn().mockReturnValue({\n    setContext: jest.fn().mockReturnThis(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    info: jest.fn(),\n    debug: jest.fn(),\n  }),\n}));\n\ndescribe(\"ErrorService\", () => {\n  let loggerMock: any;\n\n  beforeEach(() => {\n    // Clear all mocks before each test\n    jest.clearAllMocks();\n\n    // Get the mocked logger instance\n    loggerMock = getLogger();\n\n    // Clear the error log before each test\n    ErrorService.getInstance().clearErrorLog();\n  });\n\n  describe(\"Singleton Pattern\", () => {\n    it(\"should always return the same instance\", () => {\n      const instance1 = ErrorService.getInstance();\n      const instance2 = ErrorService.getInstance();\n\n      expect(instance1).toBe(instance2);\n    });\n  });\n\n  describe(\"handleTablebaseError\", () => {\n    it(\"should log error and return German user message\", () => {\n      const error = new Error(\"Network timeout\");\n      const context = {\n        component: \"TrainingBoard\",\n        action: \"evaluate-position\",\n      };\n\n      const message = ErrorService.handleTablebaseError(error, context);\n\n      // Check logger was called with correct parameters\n      expect(loggerMock.error).toHaveBeenCalledWith(\n        \"Tablebase Error\",\n        error,\n        expect.objectContaining({\n          ...context,\n          type: ErrorType.TABLEBASE,\n          timestamp: expect.any(Date),\n        }),\n      );\n\n      // Check German message\n      expect(message).toBe(\n        \"Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.\",\n      );\n    });\n\n    it(\"should handle missing context gracefully\", () => {\n      const error = new Error(\"API error\");\n\n      const message = ErrorService.handleTablebaseError(error);\n\n      expect(loggerMock.error).toHaveBeenCalledWith(\n        \"Tablebase Error\",\n        error,\n        expect.objectContaining({\n          type: ErrorType.TABLEBASE,\n          timestamp: expect.any(Date),\n        }),\n      );\n\n      expect(message).toBe(\n        \"Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.\",\n      );\n    });\n\n    it(\"should handle non-Error objects\", () => {\n      const errorString = \"Simple error string\";\n\n      const message = ErrorService.handleTablebaseError(errorString as any);\n\n      expect(loggerMock.error).toHaveBeenCalled();\n      expect(message).toBe(\n        \"Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.\",\n      );\n    });\n  });\n\n  describe(\"handleUIError\", () => {\n    it(\"should log UI error with component name\", () => {\n      const error = new Error(\"Component render failed\");\n      const componentName = \"ChessBoard\";\n      const context = { additionalData: { moveCount: 5 } };\n\n      const message = ErrorService.handleUIError(error, componentName, context);\n\n      expect(loggerMock.error).toHaveBeenCalledWith(\n        `UI Error in ${componentName}`,\n        error,\n        expect.objectContaining({\n          ...context,\n          component: componentName,\n          type: ErrorType.UI_COMPONENT,\n          timestamp: expect.any(Date),\n        }),\n      );\n\n      expect(message).toBe(\n        \"Ein Problem mit der Benutzeroberfläche ist aufgetreten. Bitte versuchen Sie es erneut.\",\n      );\n    });\n  });\n\n  describe(\"handleNetworkError\", () => {\n    it(\"should log network error and return appropriate message\", () => {\n      const error = new Error(\"Connection refused\");\n      const context = {\n        action: \"fetch-tablebase\",\n        additionalData: { url: \"https://api.example.com\", method: \"GET\" },\n      };\n\n      const message = ErrorService.handleNetworkError(error, context);\n\n      expect(loggerMock.error).toHaveBeenCalledWith(\n        \"Network Error\",\n        error,\n        expect.objectContaining({\n          ...context,\n          type: ErrorType.NETWORK,\n          timestamp: expect.any(Date),\n        }),\n      );\n\n      expect(message).toBe(\n        \"Netzwerkfehler. Bitte prüfen Sie Ihre Internetverbindung.\",\n      );\n    });\n  });\n\n  describe(\"Error Log Management\", () => {\n    it(\"should store errors in internal log\", () => {\n      const error1 = new Error(\"Error 1\");\n      const error2 = new Error(\"Error 2\");\n\n      ErrorService.handleUIError(error1, \"Component1\");\n      ErrorService.handleNetworkError(error2);\n\n      const stats = ErrorService.getInstance().getErrorStats();\n\n      expect(stats.totalErrors).toBe(2);\n      expect(stats.errorsByType[ErrorType.UI_COMPONENT]).toBe(1);\n      expect(stats.errorsByType[ErrorType.NETWORK]).toBe(1);\n    });\n\n    it(\"should limit error log to 50 entries\", () => {\n      // Log 51 errors\n      for (let i = 0; i < 51; i++) {\n        ErrorService.handleTablebaseError(new Error(`Error ${i}`));\n      }\n\n      const stats = ErrorService.getInstance().getErrorStats();\n\n      expect(stats.totalErrors).toBe(50);\n    });\n\n    it(\"should clear error log when requested\", () => {\n      ErrorService.handleUIError(new Error(\"Test error\"), \"TestComponent\");\n\n      let stats = ErrorService.getInstance().getErrorStats();\n      expect(stats.totalErrors).toBe(1);\n\n      ErrorService.getInstance().clearErrorLog();\n\n      stats = ErrorService.getInstance().getErrorStats();\n      expect(stats.totalErrors).toBe(0);\n    });\n  });\n\n  describe(\"getErrorStats\", () => {\n    it(\"should return correct statistics\", () => {\n      // Log different types of errors\n      ErrorService.handleTablebaseError(new Error(\"Tablebase error\"));\n      ErrorService.handleUIError(new Error(\"UI error 1\"), \"Component1\");\n      ErrorService.handleUIError(new Error(\"UI error 2\"), \"Component2\");\n      ErrorService.handleNetworkError(new Error(\"Network error\"));\n\n      const stats = ErrorService.getInstance().getErrorStats();\n\n      expect(stats.totalErrors).toBe(4);\n      expect(stats.errorsByType[ErrorType.TABLEBASE]).toBe(1);\n      expect(stats.errorsByType[ErrorType.UI_COMPONENT]).toBe(2);\n      expect(stats.errorsByType[ErrorType.NETWORK]).toBe(1);\n      expect(stats.recentErrors).toHaveLength(4);\n\n      // Check recent errors structure\n      const recentError = stats.recentErrors[0];\n      expect(recentError).toHaveProperty(\"type\");\n      expect(recentError).toHaveProperty(\"component\");\n      expect(recentError).toHaveProperty(\"timestamp\");\n      expect(recentError).toHaveProperty(\"message\");\n    });\n\n    it(\"should handle empty error log\", () => {\n      const stats = ErrorService.getInstance().getErrorStats();\n\n      expect(stats.totalErrors).toBe(0);\n      expect(stats.errorsByType).toEqual({});\n      expect(stats.recentErrors).toEqual([]);\n    });\n  });\n\n  describe(\"User Message Generation\", () => {\n    it(\"should return correct German messages for each error type\", () => {\n      // We'll use the private method indirectly through public methods\n      const tablebaseMsg = ErrorService.handleTablebaseError(new Error(\"test\"));\n      expect(tablebaseMsg).toBe(\n        \"Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.\",\n      );\n\n      const uiMsg = ErrorService.handleUIError(new Error(\"test\"), \"Test\");\n      expect(uiMsg).toBe(\n        \"Ein Problem mit der Benutzeroberfläche ist aufgetreten. Bitte versuchen Sie es erneut.\",\n      );\n\n      const networkMsg = ErrorService.handleNetworkError(new Error(\"test\"));\n      expect(networkMsg).toBe(\n        \"Netzwerkfehler. Bitte prüfen Sie Ihre Internetverbindung.\",\n      );\n    });\n  });\n\n  describe(\"Edge Cases\", () => {\n    it(\"should handle null error gracefully\", () => {\n      const message = ErrorService.handleTablebaseError(null as any);\n\n      expect(loggerMock.error).toHaveBeenCalled();\n      expect(message).toBe(\n        \"Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.\",\n      );\n    });\n\n    it(\"should handle undefined error gracefully\", () => {\n      const message = ErrorService.handleUIError(undefined as any, \"Component\");\n\n      expect(loggerMock.error).toHaveBeenCalled();\n      expect(message).toBe(\n        \"Ein Problem mit der Benutzeroberfläche ist aufgetreten. Bitte versuchen Sie es erneut.\",\n      );\n    });\n\n    it(\"should handle string errors\", () => {\n      const message = ErrorService.handleNetworkError(\"Network failed\" as any);\n\n      expect(loggerMock.error).toHaveBeenCalled();\n      expect(message).toBe(\n        \"Netzwerkfehler. Bitte prüfen Sie Ihre Internetverbindung.\",\n      );\n    });\n\n    it(\"should handle errors with circular references\", () => {\n      const error: any = new Error(\"Circular error\");\n      error.circular = error; // Create circular reference\n\n      const message = ErrorService.handleTablebaseError(error);\n\n      expect(loggerMock.error).toHaveBeenCalled();\n      expect(message).toBe(\n        \"Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.\",\n      );\n    });\n  });\n});\n"],"names":["jest","mock","getLogger","fn","mockReturnValue","setContext","mockReturnThis","error","warn","info","debug","describe","loggerMock","beforeEach","clearAllMocks","ErrorService","getInstance","clearErrorLog","it","instance1","instance2","expect","toBe","Error","context","component","action","message","handleTablebaseError","toHaveBeenCalledWith","objectContaining","type","ErrorType","TABLEBASE","timestamp","any","Date","errorString","toHaveBeenCalled","componentName","additionalData","moveCount","handleUIError","UI_COMPONENT","url","method","handleNetworkError","NETWORK","error1","error2","stats","getErrorStats","totalErrors","errorsByType","i","recentErrors","toHaveLength","recentError","toHaveProperty","toEqual","tablebaseMsg","uiMsg","networkMsg","undefined","circular"],"mappings":"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"}