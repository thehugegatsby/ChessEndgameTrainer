ffe43580aef3c509fb952e78fd244d2c
/**
 * Core chess domain types
 * Comprehensive type definitions for the chess training application
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createValidatedMove", {
    enumerable: true,
    get: function() {
        return createValidatedMove;
    }
});
function createValidatedMove(chessMove, fenBefore, fenAfter) {
    const domainMove = {
        color: chessMove.color,
        from: chessMove.from,
        to: chessMove.to,
        piece: chessMove.piece,
        captured: chessMove.captured,
        promotion: chessMove.promotion,
        flags: chessMove.flags,
        san: chessMove.san,
        lan: chessMove.lan,
        fenBefore,
        fenAfter,
        timestamp: Date.now(),
        // Helper methods
        isCapture: ()=>!!chessMove.captured,
        isPromotion: ()=>!!chessMove.promotion,
        isEnPassant: ()=>chessMove.flags.includes("e"),
        isKingsideCastle: ()=>chessMove.flags.includes("k"),
        isQueensideCastle: ()=>chessMove.flags.includes("q"),
        isBigPawn: ()=>chessMove.flags.includes("b")
    };
    return domainMove;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL3R5cGVzL2NoZXNzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29yZSBjaGVzcyBkb21haW4gdHlwZXNcbiAqIENvbXByZWhlbnNpdmUgdHlwZSBkZWZpbml0aW9ucyBmb3IgdGhlIGNoZXNzIHRyYWluaW5nIGFwcGxpY2F0aW9uXG4gKi9cblxuaW1wb3J0IHtcbiAgQ2hlc3MsXG4gIFNxdWFyZSBhcyBDaGVzc0pzU3F1YXJlLFxuICBQaWVjZVN5bWJvbCBhcyBDaGVzc0pzUGllY2VTeW1ib2wsXG59IGZyb20gXCJjaGVzcy5qc1wiO1xuXG4vLyBCYXNpYyBjaGVzcyB0eXBlc1xuZXhwb3J0IHR5cGUgU3F1YXJlID0gQ2hlc3NKc1NxdWFyZTsgLy8gVXNlIGNoZXNzLmpzIFNxdWFyZSB0eXBlIGRpcmVjdGx5XG5leHBvcnQgdHlwZSBQaWVjZVN5bWJvbCA9IENoZXNzSnNQaWVjZVN5bWJvbDsgLy8gVXNlIGNoZXNzLmpzIFBpZWNlU3ltYm9sIHR5cGVcbmV4cG9ydCB0eXBlIFBpZWNlID1cbiAgfCBcInBcIlxuICB8IFwiblwiXG4gIHwgXCJiXCJcbiAgfCBcInJcIlxuICB8IFwicVwiXG4gIHwgXCJrXCJcbiAgfCBcIlBcIlxuICB8IFwiTlwiXG4gIHwgXCJCXCJcbiAgfCBcIlJcIlxuICB8IFwiUVwiXG4gIHwgXCJLXCI7IC8vIEtlZXAgZm9yIEZFTi9kaXNwbGF5IHB1cnBvc2VzXG5leHBvcnQgdHlwZSBDb2xvciA9IFwid1wiIHwgXCJiXCI7XG5leHBvcnQgdHlwZSBGaWxlID0gXCJhXCIgfCBcImJcIiB8IFwiY1wiIHwgXCJkXCIgfCBcImVcIiB8IFwiZlwiIHwgXCJnXCIgfCBcImhcIjtcbi8vIE1vdmUgcmVsYXRlZCB0eXBlcyAtIENsZWFuIERvbWFpbiBUeXBlc1xuZXhwb3J0IGludGVyZmFjZSBNb3ZlIHtcbiAgY29sb3I6IENvbG9yO1xuICBmcm9tOiBTcXVhcmU7XG4gIHRvOiBTcXVhcmU7XG4gIHBpZWNlOiBQaWVjZVN5bWJvbDtcbiAgY2FwdHVyZWQ/OiBQaWVjZVN5bWJvbDtcbiAgcHJvbW90aW9uPzogXCJxXCIgfCBcInJcIiB8IFwiYlwiIHwgXCJuXCI7IC8vIFN0cmljdDogb25seSB2YWxpZCBwcm9tb3Rpb24gcGllY2VzXG4gIGZsYWdzOiBzdHJpbmc7XG4gIHNhbjogc3RyaW5nO1xuICBsYW46IHN0cmluZztcbiAgZmVuQmVmb3JlOiBzdHJpbmc7XG4gIGZlbkFmdGVyOiBzdHJpbmc7XG4gIHRpbWVzdGFtcD86IG51bWJlcjtcbiAgLy8gQW5hbHlzaXMgZGF0YSBmb3IgcG9zdC1nYW1lIHJldmlld1xuICBldmFsQmVmb3JlPzogbnVtYmVyOyAvLyBXREwgZXZhbHVhdGlvbiBiZWZvcmUgbW92ZSAoLTIgdG8gMilcbiAgZXZhbEFmdGVyPzogbnVtYmVyOyAvLyBXREwgZXZhbHVhdGlvbiBhZnRlciBtb3ZlICgtMiB0byAyKVxuICBiZXN0TW92ZVNhbj86IHN0cmluZzsgLy8gQmVzdCBtb3ZlIGluIGFsZ2VicmFpYyBub3RhdGlvblxuICBtb3ZlUXVhbGl0eT86IFwiZXhjZWxsZW50XCIgfCBcImdvb2RcIiB8IFwiaW5hY2N1cmFjeVwiIHwgXCJtaXN0YWtlXCIgfCBcImJsdW5kZXJcIjtcbiAgZHR6QmVmb3JlPzogbnVtYmVyIHwgbnVsbDsgLy8gRGlzdGFuY2UgdG8gemVyb2luZyBiZWZvcmUgbW92ZVxuICBkdHpBZnRlcj86IG51bWJlciB8IG51bGw7IC8vIERpc3RhbmNlIHRvIHplcm9pbmcgYWZ0ZXIgbW92ZVxuICAvLyBIZWxwZXIgbWV0aG9kcyAoYXZhaWxhYmxlIG9uIGNoZXNzLmpzIE1vdmUgaW5zdGFuY2VzKVxuICBpc0NhcHR1cmU6ICgpID0+IGJvb2xlYW47XG4gIGlzUHJvbW90aW9uOiAoKSA9PiBib29sZWFuO1xuICBpc0VuUGFzc2FudDogKCkgPT4gYm9vbGVhbjtcbiAgaXNLaW5nc2lkZUNhc3RsZTogKCkgPT4gYm9vbGVhbjtcbiAgaXNRdWVlbnNpZGVDYXN0bGU6ICgpID0+IGJvb2xlYW47XG4gIGlzQmlnUGF3bjogKCkgPT4gYm9vbGVhbjtcbn1cblxuLy8gQnJhbmQgVHlwZXMgZm9yIGFkZGl0aW9uYWwgdHlwZSBzYWZldHlcbmRlY2xhcmUgY29uc3QgX19kb21haW5Nb3ZlQnJhbmQ6IHVuaXF1ZSBzeW1ib2w7XG5leHBvcnQgdHlwZSBEb21haW5Nb3ZlID0gTW92ZSAmIHsgcmVhZG9ubHkgW19fZG9tYWluTW92ZUJyYW5kXTogdHJ1ZSB9O1xuXG5kZWNsYXJlIGNvbnN0IF9fdmFsaWRhdGVkTW92ZUJyYW5kOiB1bmlxdWUgc3ltYm9sO1xuZXhwb3J0IHR5cGUgVmFsaWRhdGVkTW92ZSA9IERvbWFpbk1vdmUgJiB7XG4gIHJlYWRvbmx5IFtfX3ZhbGlkYXRlZE1vdmVCcmFuZF06IHRydWU7XG59O1xuXG4vKipcbiAqIFR5cGUtc2FmZSBmYWN0b3J5IGZvciBjcmVhdGluZyBWYWxpZGF0ZWRNb3ZlIGZyb20gY2hlc3MuanMgTW92ZVxuICpcbiAqIEBwYXJhbSBjaGVzc01vdmUgLSBNb3ZlIHJlc3VsdCBmcm9tIGNoZXNzLmpzXG4gKiBAcGFyYW0gZmVuQmVmb3JlIC0gRkVOIHN0cmluZyBiZWZvcmUgdGhlIG1vdmVcbiAqIEBwYXJhbSBmZW5BZnRlciAtIEZFTiBzdHJpbmcgYWZ0ZXIgdGhlIG1vdmVcbiAqIEByZXR1cm5zIFR5cGUtc2FmZSBWYWxpZGF0ZWRNb3ZlIHdpdGggYWxsIHJlcXVpcmVkIHByb3BlcnRpZXNcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgY2hlc3NNb3ZlID0gZ2FtZS5tb3ZlKCdlNCcpO1xuICogY29uc3QgdmFsaWRhdGVkTW92ZSA9IGNyZWF0ZVZhbGlkYXRlZE1vdmUoY2hlc3NNb3ZlLCBnYW1lLmZlbigpLCBnYW1lQ29weS5mZW4oKSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZhbGlkYXRlZE1vdmUoXG4gIGNoZXNzTW92ZTogaW1wb3J0KFwiY2hlc3MuanNcIikuTW92ZSxcbiAgZmVuQmVmb3JlOiBzdHJpbmcsXG4gIGZlbkFmdGVyOiBzdHJpbmcsXG4pOiBWYWxpZGF0ZWRNb3ZlIHtcbiAgY29uc3QgZG9tYWluTW92ZTogTW92ZSA9IHtcbiAgICBjb2xvcjogY2hlc3NNb3ZlLmNvbG9yLFxuICAgIGZyb206IGNoZXNzTW92ZS5mcm9tLFxuICAgIHRvOiBjaGVzc01vdmUudG8sXG4gICAgcGllY2U6IGNoZXNzTW92ZS5waWVjZSxcbiAgICBjYXB0dXJlZDogY2hlc3NNb3ZlLmNhcHR1cmVkLFxuICAgIHByb21vdGlvbjogY2hlc3NNb3ZlLnByb21vdGlvbiBhcyBcInFcIiB8IFwiclwiIHwgXCJiXCIgfCBcIm5cIiB8IHVuZGVmaW5lZCxcbiAgICBmbGFnczogY2hlc3NNb3ZlLmZsYWdzLFxuICAgIHNhbjogY2hlc3NNb3ZlLnNhbixcbiAgICBsYW46IGNoZXNzTW92ZS5sYW4sXG4gICAgZmVuQmVmb3JlLFxuICAgIGZlbkFmdGVyLFxuICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcblxuICAgIC8vIEhlbHBlciBtZXRob2RzXG4gICAgaXNDYXB0dXJlOiAoKSA9PiAhIWNoZXNzTW92ZS5jYXB0dXJlZCxcbiAgICBpc1Byb21vdGlvbjogKCkgPT4gISFjaGVzc01vdmUucHJvbW90aW9uLFxuICAgIGlzRW5QYXNzYW50OiAoKSA9PiBjaGVzc01vdmUuZmxhZ3MuaW5jbHVkZXMoXCJlXCIpLFxuICAgIGlzS2luZ3NpZGVDYXN0bGU6ICgpID0+IGNoZXNzTW92ZS5mbGFncy5pbmNsdWRlcyhcImtcIiksXG4gICAgaXNRdWVlbnNpZGVDYXN0bGU6ICgpID0+IGNoZXNzTW92ZS5mbGFncy5pbmNsdWRlcyhcInFcIiksXG4gICAgaXNCaWdQYXduOiAoKSA9PiBjaGVzc01vdmUuZmxhZ3MuaW5jbHVkZXMoXCJiXCIpLFxuICB9O1xuXG4gIHJldHVybiBkb21haW5Nb3ZlIGFzIFZhbGlkYXRlZE1vdmU7XG59XG5cbi8vIFBvc2l0aW9uIHR5cGVzXG5leHBvcnQgaW50ZXJmYWNlIFBvc2l0aW9uIHtcbiAgZmVuOiBzdHJpbmc7XG4gIGJvYXJkOiAoUGllY2UgfCBudWxsKVtdW107XG4gIHR1cm46IENvbG9yO1xuICBjYXN0bGluZzoge1xuICAgIHc6IHsgazogYm9vbGVhbjsgcTogYm9vbGVhbiB9O1xuICAgIGI6IHsgazogYm9vbGVhbjsgcTogYm9vbGVhbiB9O1xuICB9O1xuICBlblBhc3NhbnQ6IFNxdWFyZSB8IG51bGw7XG4gIGhhbGZNb3ZlQ2xvY2s6IG51bWJlcjtcbiAgZnVsbE1vdmVOdW1iZXI6IG51bWJlcjtcbn1cblxuLy8gR2FtZSBzdGF0ZSB0eXBlc1xuXG5leHBvcnQgaW50ZXJmYWNlIEdhbWVTdGF0dXMge1xuICBpc0NoZWNrOiBib29sZWFuO1xuICBpc0NoZWNrbWF0ZTogYm9vbGVhbjtcbiAgaXNTdGFsZW1hdGU6IGJvb2xlYW47XG4gIGlzRHJhdzogYm9vbGVhbjtcbiAgaXNUaHJlZWZvbGRSZXBldGl0aW9uOiBib29sZWFuO1xuICBpc0luc3VmZmljaWVudE1hdGVyaWFsOiBib29sZWFuO1xuICBpc0ZpZnR5TW92ZVJ1bGU6IGJvb2xlYW47XG4gIGlzR2FtZU92ZXI6IGJvb2xlYW47XG59XG5cbi8vIFRyYWluaW5nIHNwZWNpZmljIHR5cGVzXG5leHBvcnQgaW50ZXJmYWNlIFRyYWluaW5nUG9zaXRpb24ge1xuICBpZDogbnVtYmVyO1xuICBuYW1lOiBzdHJpbmc7XG4gIGZlbjogc3RyaW5nO1xuICB0YXJnZXRTcXVhcmVzPzogU3F1YXJlW107XG4gIG1vdmVTZXF1ZW5jZT86IE1vdmVbXTtcbiAgaGludHM/OiBzdHJpbmdbXTtcbiAgZGlmZmljdWx0eTogXCJiZWdpbm5lclwiIHwgXCJpbnRlcm1lZGlhdGVcIiB8IFwiYWR2YW5jZWRcIjtcbiAgY2F0ZWdvcnk6IHN0cmluZztcbn1cblxuLy8gQW5hbHlzaXMgcmVsYXRlZCB0eXBlc1xuXG4vLyBWYWxpZGF0aW9uIHR5cGVzXG5cbi8vIENoZXNzLmpzIGluc3RhbmNlIHR5cGUgKGZvciBiZXR0ZXIgdHlwaW5nKVxuZXhwb3J0IHR5cGUgQ2hlc3NJbnN0YW5jZSA9IENoZXNzO1xuXG4vLyBVdGlsaXR5IHR5cGVzXG5leHBvcnQgdHlwZSBGRU4gPSBzdHJpbmc7XG5leHBvcnQgdHlwZSBQR04gPSBzdHJpbmc7XG4iXSwibmFtZXMiOlsiY3JlYXRlVmFsaWRhdGVkTW92ZSIsImNoZXNzTW92ZSIsImZlbkJlZm9yZSIsImZlbkFmdGVyIiwiZG9tYWluTW92ZSIsImNvbG9yIiwiZnJvbSIsInRvIiwicGllY2UiLCJjYXB0dXJlZCIsInByb21vdGlvbiIsImZsYWdzIiwic2FuIiwibGFuIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzQ2FwdHVyZSIsImlzUHJvbW90aW9uIiwiaXNFblBhc3NhbnQiLCJpbmNsdWRlcyIsImlzS2luZ3NpZGVDYXN0bGUiLCJpc1F1ZWVuc2lkZUNhc3RsZSIsImlzQmlnUGF3biJdLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDOzs7OytCQStFZUE7OztlQUFBQTs7O0FBQVQsU0FBU0Esb0JBQ2RDLFNBQWtDLEVBQ2xDQyxTQUFpQixFQUNqQkMsUUFBZ0I7SUFFaEIsTUFBTUMsYUFBbUI7UUFDdkJDLE9BQU9KLFVBQVVJLEtBQUs7UUFDdEJDLE1BQU1MLFVBQVVLLElBQUk7UUFDcEJDLElBQUlOLFVBQVVNLEVBQUU7UUFDaEJDLE9BQU9QLFVBQVVPLEtBQUs7UUFDdEJDLFVBQVVSLFVBQVVRLFFBQVE7UUFDNUJDLFdBQVdULFVBQVVTLFNBQVM7UUFDOUJDLE9BQU9WLFVBQVVVLEtBQUs7UUFDdEJDLEtBQUtYLFVBQVVXLEdBQUc7UUFDbEJDLEtBQUtaLFVBQVVZLEdBQUc7UUFDbEJYO1FBQ0FDO1FBQ0FXLFdBQVdDLEtBQUtDLEdBQUc7UUFFbkIsaUJBQWlCO1FBQ2pCQyxXQUFXLElBQU0sQ0FBQyxDQUFDaEIsVUFBVVEsUUFBUTtRQUNyQ1MsYUFBYSxJQUFNLENBQUMsQ0FBQ2pCLFVBQVVTLFNBQVM7UUFDeENTLGFBQWEsSUFBTWxCLFVBQVVVLEtBQUssQ0FBQ1MsUUFBUSxDQUFDO1FBQzVDQyxrQkFBa0IsSUFBTXBCLFVBQVVVLEtBQUssQ0FBQ1MsUUFBUSxDQUFDO1FBQ2pERSxtQkFBbUIsSUFBTXJCLFVBQVVVLEtBQUssQ0FBQ1MsUUFBUSxDQUFDO1FBQ2xERyxXQUFXLElBQU10QixVQUFVVSxLQUFLLENBQUNTLFFBQVEsQ0FBQztJQUM1QztJQUVBLE9BQU9oQjtBQUNUIn0=