{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/ChessService.ts"],"sourcesContent":["/**\n * @file ChessService - Singleton service for chess game logic\n * @module services/ChessService\n *\n * @description\n * Encapsulates Chess.js instance as a singleton service to avoid\n * Immer/WritableDraft conflicts while maintaining clean separation\n * of concerns. Provides event-driven updates for store synchronization.\n */\n\nimport { Chess, Move as ChessJsMove } from \"chess.js\";\nimport type { ValidatedMove } from \"@shared/types/chess\";\nimport { createValidatedMove } from \"@shared/types/chess\";\nimport { getLogger } from \"./logging\";\n\nconst logger = getLogger().setContext(\"ChessService\");\n\n/**\n * Game state payload for events\n */\nexport interface GameStatePayload {\n  fen: string;\n  pgn: string;\n  moveHistory: ValidatedMove[];\n  currentMoveIndex: number;\n  isGameOver: boolean;\n  gameResult: string | null;\n}\n\n/**\n * Event types emitted by ChessService\n */\nexport type ChessServiceEvent =\n  | {\n      type: \"stateUpdate\";\n      payload: GameStatePayload;\n      source: \"move\" | \"reset\" | \"undo\" | \"redo\" | \"load\";\n    }\n  | { type: \"error\"; payload: { error: Error; move?: any; message: string } };\n\n/**\n * Listener function type for ChessService events\n */\nexport type ChessServiceListener = (event: ChessServiceEvent) => void;\n\n/**\n * Chess game service - singleton pattern\n * Manages Chess.js instance outside of Zustand/Immer state\n */\nclass ChessService {\n  private chess: Chess;\n  private listeners = new Set<ChessServiceListener>();\n  private moveHistory: ValidatedMove[] = [];\n  private currentMoveIndex = -1;\n  private fenCache = new Map<string, string>(); // LRU cache for FEN strings (not Chess instances!)\n  private readonly MAX_CACHE_SIZE = 100;\n  private initialFen: string =\n    \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"; // Store initial position\n\n  constructor() {\n    this.chess = new Chess();\n    logger.debug(\"ChessService initialized\");\n  }\n\n  /**\n   * Subscribe to chess service events\n   */\n  subscribe(listener: ChessServiceListener): () => void {\n    this.listeners.add(listener);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  /**\n   * Emit event to all listeners\n   */\n  private emit(event: ChessServiceEvent): void {\n    this.listeners.forEach((listener) => {\n      try {\n        listener(event);\n      } catch (error) {\n        logger.error(\"Error in ChessService listener\", { error });\n      }\n    });\n  }\n\n  /**\n   * Build complete game state payload for events\n   */\n  private buildStatePayload(): GameStatePayload {\n    return {\n      fen: this.chess.fen(),\n      pgn: this.chess.pgn(),\n      // Only include moves up to the current index (for proper undo behavior)\n      moveHistory: this.moveHistory.slice(0, this.currentMoveIndex + 1),\n      currentMoveIndex: this.currentMoveIndex,\n      isGameOver: this.chess.isGameOver(),\n      gameResult: this.getGameResult(),\n    };\n  }\n\n  /**\n   * Initialize with a FEN position\n   */\n  initialize(fen: string): boolean {\n    try {\n      // logger.debug(\"ChessService.initialize called\", { fen });\n\n      // Check cache first (storing normalized FEN strings, not Chess instances)\n      if (this.fenCache.has(fen)) {\n        const cachedFen = this.fenCache.get(fen)!;\n        this.chess = new Chess(cachedFen);\n        // Using cached FEN\n      } else {\n        this.chess = new Chess(fen);\n        // Cache the normalized FEN\n        this.updateCache(fen, this.chess.fen());\n        // Created new Chess instance\n      }\n\n      // CRITICAL: Store the initial FEN for reset operations\n      this.initialFen = this.chess.fen();\n      this.moveHistory = [];\n      this.currentMoveIndex = -1;\n\n      // ChessService initialized\n\n      this.emit({\n        type: \"stateUpdate\",\n        payload: this.buildStatePayload(),\n        source: \"load\",\n      });\n\n      // State update emitted to listeners\n      return true;\n    } catch (error) {\n      // Emit error event for initialization failures\n      this.emit({\n        type: \"error\",\n        payload: {\n          error: error instanceof Error ? error : new Error(String(error)),\n          move: undefined,\n          message: \"Ungültige FEN-Position\",\n        },\n      });\n      logger.error(\"Failed to initialize with FEN\", { fen, error });\n      return false;\n    }\n  }\n\n  /**\n   * Make a move\n   */\n  move(\n    move:\n      | ChessJsMove\n      | { from: string; to: string; promotion?: string }\n      | string,\n  ): ValidatedMove | null {\n    try {\n      const fenBefore = this.chess.fen();\n      // logger.debug(\"ChessService.move called\", { move, fenBefore });\n\n      const result = this.chess.move(move);\n\n      if (!result) {\n        // Emit error event for invalid moves\n        logger.warn(\"Invalid move attempted\", {\n          move,\n          fenBefore,\n        });\n\n        this.emit({\n          type: \"error\",\n          payload: {\n            error: new Error(\"Invalid move\"),\n            move,\n            message: \"Ungültiger Zug\",\n          },\n        });\n        return null;\n      }\n\n      const fenAfter = this.chess.fen();\n      const validatedMove = createValidatedMove(result, fenBefore, fenAfter);\n\n      // Truncate history if we're not at the end\n      this.moveHistory = this.moveHistory.slice(0, this.currentMoveIndex + 1);\n      this.moveHistory.push(validatedMove);\n      this.currentMoveIndex = this.moveHistory.length - 1;\n\n      this.emit({\n        type: \"stateUpdate\",\n        payload: this.buildStatePayload(),\n        source: \"move\",\n      });\n\n      return validatedMove;\n    } catch (error) {\n      // Emit error event for exceptions\n      this.emit({\n        type: \"error\",\n        payload: {\n          error: error instanceof Error ? error : new Error(String(error)),\n          move,\n          message: \"Fehler beim Ausführen des Zuges\",\n        },\n      });\n      logger.error(\"Error making move\", { move, error });\n      return null;\n    }\n  }\n\n  /**\n   * Undo last move\n   */\n  undo(): boolean {\n    if (this.currentMoveIndex < 0) {\n      // Emit error event for no moves to undo\n      this.emit({\n        type: \"error\",\n        payload: {\n          error: new Error(\"No moves to undo\"),\n          move: undefined,\n          message: \"Keine Züge zum Rückgängigmachen\",\n        },\n      });\n      logger.warn(\"No moves to undo\");\n      return false;\n    }\n\n    try {\n      const targetIndex = this.currentMoveIndex - 1;\n      const targetFen =\n        targetIndex >= 0\n          ? this.moveHistory[targetIndex].fenAfter\n          : this.moveHistory[0].fenBefore;\n\n      this.chess = new Chess(targetFen);\n      this.currentMoveIndex = targetIndex;\n\n      this.emit({\n        type: \"stateUpdate\",\n        payload: this.buildStatePayload(),\n        source: \"undo\",\n      });\n\n      return true;\n    } catch (error) {\n      // Emit error event for undo failures\n      this.emit({\n        type: \"error\",\n        payload: {\n          error: error instanceof Error ? error : new Error(String(error)),\n          move: undefined,\n          message: \"Fehler beim Rückgängigmachen\",\n        },\n      });\n      logger.error(\"Failed to undo move\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Redo previously undone move\n   */\n  redo(): boolean {\n    if (this.currentMoveIndex >= this.moveHistory.length - 1) {\n      // Emit error event for no moves to redo\n      this.emit({\n        type: \"error\",\n        payload: {\n          error: new Error(\"No moves to redo\"),\n          move: undefined,\n          message: \"Keine Züge zum Wiederherstellen\",\n        },\n      });\n      logger.warn(\"No moves to redo\");\n      return false;\n    }\n\n    try {\n      const targetIndex = this.currentMoveIndex + 1;\n      const targetFen = this.moveHistory[targetIndex].fenAfter;\n\n      this.chess = new Chess(targetFen);\n      this.currentMoveIndex = targetIndex;\n\n      this.emit({\n        type: \"stateUpdate\",\n        payload: this.buildStatePayload(),\n        source: \"redo\",\n      });\n\n      return true;\n    } catch (error) {\n      // Emit error event for redo failures\n      this.emit({\n        type: \"error\",\n        payload: {\n          error: error instanceof Error ? error : new Error(String(error)),\n          move: undefined,\n          message: \"Fehler beim Wiederherstellen\",\n        },\n      });\n      logger.error(\"Failed to redo move\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Reset to starting position\n   */\n  reset(): void {\n    // Use the stored initial FEN instead of default starting position\n    this.chess = new Chess(this.initialFen);\n    this.moveHistory = [];\n    this.currentMoveIndex = -1;\n\n    this.emit({\n      type: \"stateUpdate\",\n      payload: this.buildStatePayload(),\n      source: \"reset\",\n    });\n\n    logger.debug(\"Reset to starting position\");\n  }\n\n  /**\n   * Get current FEN\n   */\n  getFen(): string {\n    return this.chess.fen();\n  }\n\n  /**\n   * Get current PGN\n   */\n  getPgn(): string {\n    return this.chess.pgn();\n  }\n\n  /**\n   * Get move history\n   */\n  getMoveHistory(): ValidatedMove[] {\n    return [...this.moveHistory];\n  }\n\n  /**\n   * Get current move index\n   */\n  getCurrentMoveIndex(): number {\n    return this.currentMoveIndex;\n  }\n\n  /**\n   * Check if game is over\n   */\n  isGameOver(): boolean {\n    return this.chess.isGameOver();\n  }\n\n  /**\n   * Check if in check\n   */\n  isCheck(): boolean {\n    return this.chess.isCheck();\n  }\n\n  /**\n   * Check if checkmate\n   */\n  isCheckmate(): boolean {\n    return this.chess.isCheckmate();\n  }\n\n  /**\n   * Check if stalemate\n   */\n  isStalemate(): boolean {\n    return this.chess.isStalemate();\n  }\n\n  /**\n   * Check if draw\n   */\n  isDraw(): boolean {\n    return this.chess.isDraw();\n  }\n\n  /**\n   * Get whose turn it is\n   */\n  turn(): \"w\" | \"b\" {\n    return this.chess.turn();\n  }\n\n  /**\n   * Get legal moves for a square\n   */\n  moves(options?: {\n    square?: string;\n    verbose?: boolean;\n  }): string[] | ChessJsMove[] {\n    return this.chess.moves(options as any);\n  }\n\n  /**\n   * Validate a move without making it\n   */\n  validateMove(\n    move:\n      | ChessJsMove\n      | { from: string; to: string; promotion?: string }\n      | string,\n  ): boolean {\n    try {\n      const currentFen = this.chess.fen();\n      // logger.debug(\"ChessService.validateMove\", { move, currentFen });\n\n      // Additional validation for move object format\n      if (typeof move === 'object' && move !== null) {\n        // Check if it's a move object with from/to properties\n        if ('from' in move && 'to' in move) {\n          const { from, to } = move as { from: string; to: string; promotion?: string };\n          \n          // Basic square format validation (e.g., \"e2\", \"h8\")\n          const squareRegex = /^[a-h][1-8]$/;\n          if (!squareRegex.test(from) || !squareRegex.test(to)) {\n            logger.debug(\"Invalid square format in move object\", { from, to });\n            return false;\n          }\n          \n          // Check if source square actually has a piece\n          const tempChess = new Chess(currentFen);\n          const piece = tempChess.get(from as any);\n          if (!piece) {\n            logger.debug(\"No piece on source square\", { from, currentFen });\n            return false;\n          }\n        }\n      }\n\n      // Create a temporary chess instance to test the move\n      const tempChess = new Chess(currentFen);\n      const result = tempChess.move(move);\n\n      // Validation result determined\n      return result !== null;\n    } catch (error) {\n      // Enhanced error logging to debug E2E issues\n      logger.error(\"ChessService.validateMove error\", { \n        error: error instanceof Error ? error.message : String(error),\n        errorType: error ? error.constructor.name : 'unknown',\n        move: typeof move === 'object' ? JSON.stringify(move) : String(move),\n        moveType: typeof move,\n        currentFen: this.chess.fen(),\n        stack: error instanceof Error ? error.stack : undefined\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Get game result\n   */\n  getGameResult(): string | null {\n    if (!this.chess.isGameOver()) return null;\n\n    if (this.chess.isCheckmate()) {\n      return this.chess.turn() === \"w\" ? \"0-1\" : \"1-0\";\n    }\n\n    return \"1/2-1/2\"; // Draw\n  }\n\n  /**\n   * Load from PGN\n   */\n  loadPgn(pgn: string): boolean {\n    try {\n      this.chess.loadPgn(pgn);\n\n      // Rebuild move history from PGN\n      const moves = this.chess.history({ verbose: true });\n      this.chess = new Chess(); // Reset to start\n      this.moveHistory = [];\n\n      for (const move of moves) {\n        const fenBefore = this.chess.fen();\n        this.chess.move(move);\n        const fenAfter = this.chess.fen();\n        const validatedMove = createValidatedMove(move, fenBefore, fenAfter);\n        this.moveHistory.push(validatedMove);\n      }\n\n      this.currentMoveIndex = this.moveHistory.length - 1;\n\n      this.emit({\n        type: \"stateUpdate\",\n        payload: this.buildStatePayload(),\n        source: \"load\",\n      });\n\n      return true;\n    } catch (error) {\n      // Emit error event for PGN loading failures\n      this.emit({\n        type: \"error\",\n        payload: {\n          error: error instanceof Error ? error : new Error(String(error)),\n          move: undefined,\n          message: \"Ungültiges PGN-Format\",\n        },\n      });\n      logger.error(\"Failed to load PGN\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * Update FEN cache with true LRU eviction\n   */\n  private updateCache(key: string, normalizedFen: string): void {\n    // If key exists, delete it first to move to end (LRU behavior)\n    if (this.fenCache.has(key)) {\n      this.fenCache.delete(key);\n    }\n\n    // Check if we need to evict\n    if (this.fenCache.size >= this.MAX_CACHE_SIZE) {\n      // Remove oldest entry (first in map) - true LRU since we move accessed items to end\n      const firstKey = this.fenCache.keys().next().value;\n      if (firstKey !== undefined) {\n        this.fenCache.delete(firstKey);\n      }\n    }\n\n    // Add to end of map (most recently used)\n    this.fenCache.set(key, normalizedFen);\n  }\n\n  /**\n   * Go to specific move in history\n   */\n  goToMove(moveIndex: number): boolean {\n    if (moveIndex < -1 || moveIndex >= this.moveHistory.length) {\n      // Emit error event for invalid index\n      this.emit({\n        type: \"error\",\n        payload: {\n          error: new Error(`Invalid move index: ${moveIndex}`),\n          move: undefined,\n          message: `Ungültiger Zugindex: ${moveIndex}`,\n        },\n      });\n      logger.warn(\"Invalid move index\", { moveIndex });\n      return false;\n    }\n\n    try {\n      const targetFen =\n        moveIndex === -1\n          ? this.moveHistory[0]?.fenBefore || this.initialFen\n          : this.moveHistory[moveIndex].fenAfter;\n\n      this.chess = new Chess(targetFen);\n      this.currentMoveIndex = moveIndex;\n\n      this.emit({\n        type: \"stateUpdate\",\n        payload: this.buildStatePayload(),\n        source: \"load\",\n      });\n\n      return true;\n    } catch (error) {\n      // Emit error event for navigation failures\n      this.emit({\n        type: \"error\",\n        payload: {\n          error: error instanceof Error ? error : new Error(String(error)),\n          move: undefined,\n          message: \"Fehler beim Navigieren zum Zug\",\n        },\n      });\n      logger.error(\"Failed to go to move\", { moveIndex, error });\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const chessService = new ChessService();\n\n// Also export class for testing purposes\nexport { ChessService };\n"],"names":["ChessService","chessService","logger","getLogger","setContext","subscribe","listener","listeners","add","delete","emit","event","forEach","error","buildStatePayload","fen","chess","pgn","moveHistory","slice","currentMoveIndex","isGameOver","gameResult","getGameResult","initialize","fenCache","has","cachedFen","get","Chess","updateCache","initialFen","type","payload","source","Error","String","move","undefined","message","fenBefore","result","warn","fenAfter","validatedMove","createValidatedMove","push","length","undo","targetIndex","targetFen","redo","reset","debug","getFen","getPgn","getMoveHistory","getCurrentMoveIndex","isCheck","isCheckmate","isStalemate","isDraw","turn","moves","options","validateMove","currentFen","from","to","squareRegex","test","tempChess","piece","errorType","name","JSON","stringify","moveType","stack","loadPgn","history","verbose","key","normalizedFen","size","MAX_CACHE_SIZE","firstKey","keys","next","value","set","goToMove","moveIndex","Set","Map"],"mappings":"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"}