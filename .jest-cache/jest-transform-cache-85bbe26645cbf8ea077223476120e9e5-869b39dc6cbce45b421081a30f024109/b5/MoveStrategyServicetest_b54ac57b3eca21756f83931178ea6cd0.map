{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/services/MoveStrategyService.test.ts"],"sourcesContent":["/**\n * @file Unit tests for MoveStrategyService\n * @module tests/unit/services/MoveStrategyService.test\n * \n * @description\n * Comprehensive test suite for MoveStrategyService which provides\n * different chess move selection strategies for opponent play.\n * Tests all three strategies: longest resistance, best move, and human-like.\n * \n * @see {@link MoveStrategyService} - Service being tested\n * @see {@link TablebaseService} - Mocked dependency\n */\n\nimport type { TablebaseMove } from '@shared/types/tablebase';\n\n// Mock dependencies BEFORE importing the service\njest.mock('@shared/services/logging', () => {\n  const mockLoggerInstance = {\n    error: jest.fn(),\n    warn: jest.fn(), \n    debug: jest.fn(),\n    setContext: jest.fn(function() { return this; }),\n  };\n  mockLoggerInstance.setContext.mockReturnValue(mockLoggerInstance);\n  \n  return {\n    getLogger: jest.fn(() => mockLoggerInstance),\n    /**\n     * Helper to access mock logger instance in tests\n     * @returns Mock logger instance\n     */\n    __getMockLogger: () => mockLoggerInstance,\n  };\n});\n\njest.mock('@shared/services/TablebaseService');\n\n// Now import the service and dependencies\nimport { moveStrategyService } from '@shared/services/MoveStrategyService';\nimport { tablebaseService } from '@shared/services/TablebaseService';\n\n// Get the mock logger instance\nconst { __getMockLogger } = require('@shared/services/logging');\nconst mockLogger = __getMockLogger();\nconst mockTablebaseService = tablebaseService as jest.Mocked<typeof tablebaseService>;\n\n/**\n * Create a mock TablebaseMove object for testing\n * \n * @param overrides - Partial move properties to override defaults\n * @returns Complete TablebaseMove object\n */\nconst createMockMove = (overrides: Partial<TablebaseMove>): TablebaseMove => ({\n  uci: 'e2e4',\n  san: 'e4',\n  wdl: 0,\n  dtz: 0,\n  dtm: null,\n  category: 'draw' as const,\n  ...overrides,\n});\n\n/**\n * Create a successful tablebase response with moves\n * \n * @param moves - Array of moves to include in response\n * @returns Mocked tablebase response object\n */\nconst createMockResponse = (moves: TablebaseMove[]) => ({\n  isAvailable: true,\n  moves,\n});\n\ndescribe('MoveStrategyService', () => {\n  const testFen = 'K7/P7/k7/8/8/8/8/8 w - - 0 1';\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockLogger.error.mockClear();\n    mockLogger.warn.mockClear();\n    mockLogger.debug.mockClear();\n  });\n\n  describe('getLongestResistanceMove', () => {\n    it('returns longest resistance move for losing position', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'a7a8q', san: 'a8=Q', wdl: -2, dtm: -15, dtz: -12 }),\n        createMockMove({ uci: 'a7a8r', san: 'a8=R', wdl: -2, dtm: -8, dtz: -10 }),\n        createMockMove({ uci: 'a8b7', san: 'Kb7', wdl: -2, dtm: -20, dtz: -15 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const result = await moveStrategyService.getLongestResistanceMove(testFen);\n\n      expect(result).toBe('a8b7'); // Highest DTM (20) for longest resistance\n      expect(mockTablebaseService.getTopMoves).toHaveBeenCalledWith(testFen, 100);\n    });\n\n    it('returns fastest win for winning position', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'a7b6', san: 'Kb6', wdl: 2, dtm: 5, dtz: 3 }),\n        createMockMove({ uci: 'a7b7', san: 'Kb7', wdl: 2, dtm: 8, dtz: 5 }),\n        createMockMove({ uci: 'a7a6', san: 'Ka6', wdl: 2, dtm: 3, dtz: 2 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const result = await moveStrategyService.getLongestResistanceMove(testFen);\n\n      expect(result).toBe('a7a6'); // Lowest DTZ (2) for fastest win\n    });\n\n    it('returns any drawing move for drawn position', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'a7b6', san: 'Kb6', wdl: 0, dtm: null, dtz: 0 }),\n        createMockMove({ uci: 'a7b7', san: 'Kb7', wdl: 0, dtm: null, dtz: 0 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const result = await moveStrategyService.getLongestResistanceMove(testFen);\n\n      expect(['a7b6', 'a7b7']).toContain(result);\n    });\n\n    it('prefers DTM over DTZ for losing positions when available', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'move1', san: 'Move1', wdl: -2, dtm: -10, dtz: -20 }),\n        createMockMove({ uci: 'move2', san: 'Move2', wdl: -2, dtm: -15, dtz: -5 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const result = await moveStrategyService.getLongestResistanceMove(testFen);\n\n      expect(result).toBe('move2'); // Higher DTM (15) despite lower DTZ\n    });\n\n    it('falls back to DTZ when DTM is not available', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'move1', san: 'Move1', wdl: -2, dtm: null, dtz: -10 }),\n        createMockMove({ uci: 'move2', san: 'Move2', wdl: -2, dtm: null, dtz: -20 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const result = await moveStrategyService.getLongestResistanceMove(testFen);\n\n      expect(result).toBe('move2'); // Higher DTZ (20) when DTM unavailable\n    });\n\n    it('handles empty moves array', async () => {\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse([]));\n\n      const result = await moveStrategyService.getLongestResistanceMove(testFen);\n\n      expect(result).toBeNull();\n      expect(mockLogger.warn).toHaveBeenCalledWith(\n        'No tablebase moves available for position',\n        { fen: testFen }\n      );\n    });\n\n    it('handles tablebase not available', async () => {\n      mockTablebaseService.getTopMoves.mockResolvedValue({\n        isAvailable: false,\n      });\n\n      const result = await moveStrategyService.getLongestResistanceMove(testFen);\n\n      expect(result).toBeNull();\n    });\n\n    it('handles tablebase service error gracefully', async () => {\n      const error = new Error('Tablebase API error');\n      mockTablebaseService.getTopMoves.mockRejectedValue(error);\n\n      const result = await moveStrategyService.getLongestResistanceMove(testFen);\n\n      expect(result).toBeNull();\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        'Failed to get longest resistance move',\n        error,\n        { fen: testFen }\n      );\n    });\n\n    it('uses secondary criterion DTZ when DTM is equal', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'move1', san: 'Move1', wdl: -2, dtm: -10, dtz: -5 }),\n        createMockMove({ uci: 'move2', san: 'Move2', wdl: -2, dtm: -10, dtz: -8 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const result = await moveStrategyService.getLongestResistanceMove(testFen);\n\n      expect(result).toBe('move2'); // Same DTM, higher DTZ wins\n    });\n  });\n\n  describe('getBestMove', () => {\n    it('returns objectively best move', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'a7a8q', san: 'a8=Q', wdl: 2, dtm: 5, dtz: 3 }),\n        createMockMove({ uci: 'a7a8r', san: 'a8=R', wdl: 2, dtm: 8, dtz: 5 }),\n        createMockMove({ uci: 'a7b6', san: 'Kb6', wdl: 1, dtm: 12, dtz: 8 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const result = await moveStrategyService.getBestMove(testFen);\n\n      expect(result).toBe('a7a8q'); // First move (API returns sorted)\n      expect(mockTablebaseService.getTopMoves).toHaveBeenCalledWith(testFen, 1);\n    });\n\n    it('handles empty moves array', async () => {\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse([]));\n\n      const result = await moveStrategyService.getBestMove(testFen);\n\n      expect(result).toBeNull();\n    });\n\n    it('handles tablebase service error', async () => {\n      const error = new Error('Tablebase API error');\n      mockTablebaseService.getTopMoves.mockRejectedValue(error);\n\n      const result = await moveStrategyService.getBestMove(testFen);\n\n      expect(result).toBeNull();\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        'Failed to get best move',\n        error,\n        { fen: testFen }\n      );\n    });\n\n    it('handles tablebase not available', async () => {\n      mockTablebaseService.getTopMoves.mockResolvedValue({\n        isAvailable: false,\n      });\n\n      const result = await moveStrategyService.getBestMove(testFen);\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getHumanLikeMove', () => {\n    it('returns best move with default strength most of the time', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'best', san: 'Best', wdl: 2, dtm: 5, dtz: 3 }),\n        createMockMove({ uci: 'good', san: 'Good', wdl: 2, dtm: 8, dtz: 5 }),\n        createMockMove({ uci: 'okay', san: 'Okay', wdl: 1, dtm: 12, dtz: 8 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      // Mock Math.random to return value below strength threshold (0.8)\n      const originalRandom = Math.random;\n      Math.random = jest.fn().mockReturnValue(0.5);\n\n      const result = await moveStrategyService.getHumanLikeMove(testFen);\n\n      expect(result).toBe('best');\n      \n      Math.random = originalRandom;\n    });\n\n    it('occasionally returns suboptimal move', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'best', san: 'Best', wdl: 2, dtm: 5, dtz: 3 }),\n        createMockMove({ uci: 'good', san: 'Good', wdl: 2, dtm: 8, dtz: 5 }),\n        createMockMove({ uci: 'okay', san: 'Okay', wdl: 1, dtm: 12, dtz: 8 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      // Mock Math.random to return value above strength threshold\n      const originalRandom = Math.random;\n      Math.random = jest.fn()\n        .mockReturnValueOnce(0.85) // Above 0.8 threshold\n        .mockReturnValueOnce(0.6); // For move selection\n\n      const result = await moveStrategyService.getHumanLikeMove(testFen);\n\n      expect(['best', 'good', 'okay']).toContain(result);\n      \n      Math.random = originalRandom;\n    });\n\n    it('always returns best move with strength 1', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'best', san: 'Best', wdl: 2, dtm: 5, dtz: 3 }),\n        createMockMove({ uci: 'good', san: 'Good', wdl: 2, dtm: 8, dtz: 5 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const result = await moveStrategyService.getHumanLikeMove(testFen, 1);\n\n      expect(result).toBe('best');\n    });\n\n    it('handles single move gracefully', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'only', san: 'Only', wdl: 2, dtm: 5, dtz: 3 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const result = await moveStrategyService.getHumanLikeMove(testFen);\n\n      expect(result).toBe('only');\n    });\n\n    it('handles empty moves array', async () => {\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse([]));\n\n      const result = await moveStrategyService.getHumanLikeMove(testFen);\n\n      expect(result).toBeNull();\n    });\n\n    it('handles tablebase service error', async () => {\n      const error = new Error('Tablebase API error');\n      mockTablebaseService.getTopMoves.mockRejectedValue(error);\n\n      const result = await moveStrategyService.getHumanLikeMove(testFen);\n\n      expect(result).toBeNull();\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        'Failed to get human-like move',\n        error,\n        { fen: testFen }\n      );\n    });\n\n    it('respects custom strength parameter', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'best', san: 'Best', wdl: 2, dtm: 5, dtz: 3 }),\n        createMockMove({ uci: 'good', san: 'Good', wdl: 2, dtm: 8, dtz: 5 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const originalRandom = Math.random;\n      Math.random = jest.fn().mockReturnValue(0.3); // Below 0.5 strength\n\n      const result = await moveStrategyService.getHumanLikeMove(testFen, 0.5);\n\n      expect(result).toBe('best');\n      \n      Math.random = originalRandom;\n    });\n  });\n\n  describe('Integration scenarios', () => {\n    it('handles all service methods consistently for same position', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'a7a8q', san: 'a8=Q', wdl: 2, dtm: 5, dtz: 3 }),\n        createMockMove({ uci: 'a7a8r', san: 'a8=R', wdl: 2, dtm: 8, dtz: 5 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const [longest, best, humanLike] = await Promise.all([\n        moveStrategyService.getLongestResistanceMove(testFen),\n        moveStrategyService.getBestMove(testFen),\n        moveStrategyService.getHumanLikeMove(testFen),\n      ]);\n\n      expect(longest).toBeDefined();\n      expect(best).toBeDefined();\n      expect(humanLike).toBeDefined();\n      expect(mockTablebaseService.getTopMoves).toHaveBeenCalledTimes(3);\n    });\n\n    it('logs debug information for move selection', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'a7a8q', san: 'a8=Q', wdl: 2, dtm: 5, dtz: 3 }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      await moveStrategyService.getLongestResistanceMove(testFen);\n\n      expect(mockLogger.debug).toHaveBeenCalledWith(\n        expect.stringContaining('Selected'),\n        expect.objectContaining({\n          move: 'a8=Q',\n        })\n      );\n    });\n\n    it('handles positions with undefined/null DTM and DTZ gracefully', async () => {\n      const mockMoves = [\n        createMockMove({ uci: 'move1', san: 'Move1', wdl: 0, dtm: undefined, dtz: null }),\n        createMockMove({ uci: 'move2', san: 'Move2', wdl: 0, dtm: null, dtz: undefined }),\n      ];\n      mockTablebaseService.getTopMoves.mockResolvedValue(createMockResponse(mockMoves));\n\n      const result = await moveStrategyService.getLongestResistanceMove(testFen);\n\n      expect(result).toBeDefined();\n      expect(['move1', 'move2']).toContain(result);\n    });\n  });\n});"],"names":["jest","mock","mockLoggerInstance","error","fn","warn","debug","setContext","mockReturnValue","getLogger","__getMockLogger","require","mockLogger","mockTablebaseService","tablebaseService","createMockMove","overrides","uci","san","wdl","dtz","dtm","category","createMockResponse","moves","isAvailable","describe","testFen","beforeEach","clearAllMocks","mockClear","it","mockMoves","getTopMoves","mockResolvedValue","result","moveStrategyService","getLongestResistanceMove","expect","toBe","toHaveBeenCalledWith","toContain","toBeNull","fen","Error","mockRejectedValue","getBestMove","originalRandom","Math","random","getHumanLikeMove","mockReturnValueOnce","longest","best","humanLike","Promise","all","toBeDefined","toHaveBeenCalledTimes","stringContaining","objectContaining","move","undefined"],"mappings":"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"}