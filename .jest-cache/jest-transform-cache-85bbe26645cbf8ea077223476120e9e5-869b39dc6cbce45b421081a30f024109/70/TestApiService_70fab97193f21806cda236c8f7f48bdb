d237f1de75f3ebf2d23fb6f53ab2ee10
/**
 * @file Test API Service - Clean interface for E2E tests
 * @version 1.0.0
 * @description Provides a dedicated service for test interactions,
 * separating test infrastructure from UI components.
 *
 * ARCHITECTURE PRINCIPLES:
 * - Single Responsibility: Only handles test interactions
 * - Clean Interface: Well-defined API for E2E tests
 * - No UI Coupling: Independent of component implementation
 * - Deterministic: Provides predictable test behavior
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get TestApiService () {
        return TestApiService;
    },
    get getTestApi () {
        return getTestApi;
    }
});
const _chess = require("chess.js");
const _constants = require("../../constants");
const _logging = require("../logging");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const logger = (0, _logging.getLogger)().setContext("TestApiService");
class TestApiService {
    /**
   * Get singleton instance of TestApiService
   *
   * @static
   * @description
   * Returns the singleton instance of TestApiService, creating it if
   * it doesn't exist. Ensures consistent test state across all test
   * scenarios and prevents multiple instances from interfering.
   *
   * @returns {TestApiService} The singleton TestApiService instance
   *
   * @example
   * ```typescript
   * const testApi = TestApiService.getInstance();
   * await testApi.initialize(storeAccess);
   * ```
   */ static getInstance() {
        if (!TestApiService.instance) {
            TestApiService.instance = new TestApiService();
        }
        return TestApiService.instance;
    }
    /**
   * Initialize test API for a test session
   * @param storeAccess
   * @param storeAccess.getState
   * @param storeAccess.subscribe
   * @param storeAccess.makeMove
   * @param storeAccess._internalApplyMove
   * @param storeAccess.resetPosition
   * @param storeAccess.setPosition
   * @param storeAccess.goToMove
   * @param storeAccess.setAnalysisStatus
   * @param config
   */ initialize(storeAccess, config) {
        // Validate required actions
        if (!storeAccess.makeMove || !storeAccess.resetPosition) {
            logger.error("Required store actions not available");
            this._isInitialized = false;
            return;
        }
        this.storeAccess = storeAccess;
        this._isInitialized = true;
        if (config) {
            this.tablebaseConfig = {
                ...this.tablebaseConfig,
                ...config
            };
        }
        logger.info("âœ… TestApiService: Successfully initialized with store actions");
        // Emit initialization event
        this.emit("test:initialized", {
            config: this.tablebaseConfig
        });
    }
    /**
   * Clean up test API after test session
   *
   * @description
   * Resets the TestApiService to its initial state, clearing all
   * configuration and store access. Should be called after each
   * test to prevent state leakage between test scenarios.
   *
   * @remarks
   * Cleanup operations:
   * - Reset tablebase configuration to defaults
   * - Clear store access references
   * - Emit cleanup event for test coordination
   * - Destroy singleton instance
   *
   * @example
   * ```typescript
   * // In test teardown
   * testApi.cleanup();
   * // Fresh instance will be created on next getInstance() call
   * ```
   */ cleanup() {
        this.tablebaseConfig = {
            deterministic: false
        };
        this._isInitialized = false;
        this.storeAccess = null;
        this.emit("test:cleanup", {});
        TestApiService.instance = null;
    }
    /**
   * Check if service is initialized and ready for use
   *
   * @description
   * Returns whether the TestApiService has been properly initialized
   * with store access and is ready to handle test operations.
   *
   * @returns {boolean} True if service is initialized and ready
   *
   * @example
   * ```typescript
   * if (!testApi.isInitialized) {
   *   await testApi.initialize(storeAccess);
   * }
   * ```
   */ get isInitialized() {
        return this._isInitialized;
    }
    /**
   * Make a chess move through full validation pipeline (like real user interaction)
   * @param move - Move in format 'from-to' (e.g., 'e2-e4') or SAN notation
   * @returns Promise resolving to move execution result with validation
   */ async makeValidatedMove(move) {
        if (!this.storeAccess) {
            throw new Error("TestApiService not initialized with store access");
        }
        try {
            var _finalState_game, _finalState_game_moveHistory, _finalState_game1, _finalState_game2, _finalState_game_moveHistory1, _finalState_game3;
            // Parse move format
            let moveObj;
            if (move.includes("-")) {
                // Format: 'e2-e4'
                const [from, to] = move.split("-");
                moveObj = {
                    from,
                    to
                };
            } else {
                // SAN notation
                moveObj = move;
            }
            // Import handlePlayerMove directly (it's not part of store, it's an orchestrator)
            const { handlePlayerMove } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../store/orchestrators/handlePlayerMove")));
            // Create a store API object that handlePlayerMove expects (like in rootStore.ts:186)
            const storeApi = {
                getState: this.storeAccess.getState,
                setState: (updater)=>{
                    // We need the actual setState from store access - this is the key fix
                    // The storeAccess should provide the actual Zustand setState method
                    if (this.storeAccess && "setState" in this.storeAccess) {
                        // If storeAccess provides setState directly
                        this.storeAccess.setState(updater);
                    } else {
                        // Fallback - log warning but don't fail
                        logger.warn("TestApiService: setState not available in storeAccess - state updates may not work");
                    }
                }
            };
            // Execute move through the FULL validation pipeline
            const result = await handlePlayerMove(storeApi, moveObj);
            // Get final state after move processing
            const finalState = this.storeAccess.getState();
            this.emit("test:validated_move", {
                move,
                success: result,
                fen: ((_finalState_game = finalState.game) === null || _finalState_game === void 0 ? void 0 : _finalState_game.currentFen) || finalState.currentFen || "unknown",
                moveCount: ((_finalState_game1 = finalState.game) === null || _finalState_game1 === void 0 ? void 0 : (_finalState_game_moveHistory = _finalState_game1.moveHistory) === null || _finalState_game_moveHistory === void 0 ? void 0 : _finalState_game_moveHistory.length) || 0
            });
            return {
                success: result,
                resultingFen: ((_finalState_game2 = finalState.game) === null || _finalState_game2 === void 0 ? void 0 : _finalState_game2.currentFen) || finalState.currentFen || "unknown",
                moveCount: ((_finalState_game3 = finalState.game) === null || _finalState_game3 === void 0 ? void 0 : (_finalState_game_moveHistory1 = _finalState_game3.moveHistory) === null || _finalState_game_moveHistory1 === void 0 ? void 0 : _finalState_game_moveHistory1.length) || 0,
                error: result ? undefined : "Move rejected by validation pipeline"
            };
        } catch (error) {
            logger.error("TestApiService.makeValidatedMove error:", error);
            return {
                success: false,
                error: `Error: ${error instanceof Error ? error.message : String(error)}`
            };
        }
    }
    /**
   * Make a chess move (bypasses validation for fast test setup)
   * @param move - Move in format 'from-to' (e.g., 'e2-e4') or SAN notation
   * @deprecated Use makeValidatedMove for behavior testing, this is for setup only
   */ async makeMove(move) {
        if (!this.storeAccess) {
            throw new Error("TestApiService not initialized with store access");
        }
        try {
            // Parse move format
            let moveObj;
            if (move.includes("-")) {
                // Format: 'e2-e4'
                const [from, to] = move.split("-");
                moveObj = {
                    from,
                    to
                };
            } else {
                // SAN notation
                moveObj = move;
            }
            // Execute move through store actions (bypass validation for tests)
            this.storeAccess._internalApplyMove(moveObj);
            const success = true; // makeMove is synchronous in Zustand
            if (success) {
                var _newState_training, _newState_training_moveHistory, _newState_training1, _newState_history, _finalState_game, _finalState_game_moveHistory, _finalState_game1;
                const newState = this.storeAccess.getState();
                // Check if deterministic mode is enabled and if we should mock tablebase response
                if (this.tablebaseConfig.deterministic && this.tablebaseConfig.fixedResponses) {
                    // After player move, check if tablebase should respond with a fixed move
                    await this.handleDeterministicTablebaseMove(newState.fen);
                }
                this.emit("test:move", {
                    move,
                    fen: ((_newState_training = newState.training) === null || _newState_training === void 0 ? void 0 : _newState_training.currentFen) || newState.fen,
                    moveCount: ((_newState_training1 = newState.training) === null || _newState_training1 === void 0 ? void 0 : (_newState_training_moveHistory = _newState_training1.moveHistory) === null || _newState_training_moveHistory === void 0 ? void 0 : _newState_training_moveHistory.length) || ((_newState_history = newState.history) === null || _newState_history === void 0 ? void 0 : _newState_history.length) || 0
                });
                // Get updated state after potential tablebase move
                const finalState = this.storeAccess.getState();
                return {
                    success: true,
                    resultingFen: ((_finalState_game = finalState.game) === null || _finalState_game === void 0 ? void 0 : _finalState_game.currentFen) || finalState.currentFen || "unknown",
                    moveCount: ((_finalState_game1 = finalState.game) === null || _finalState_game1 === void 0 ? void 0 : (_finalState_game_moveHistory = _finalState_game1.moveHistory) === null || _finalState_game_moveHistory === void 0 ? void 0 : _finalState_game_moveHistory.length) || 0
                };
            } else {
                return {
                    success: false,
                    error: "Invalid move"
                };
            }
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : "Unknown error"
            };
        }
    }
    /**
   * Get current game state for test verification
   *
   * @description
   * Returns comprehensive game state information for test assertions
   * and verification. Constructs a detailed game state object from
   * the current store state with all relevant chess game information.
   *
   * @returns {TestGameState} Current game state with position, moves, and status
   *
   * @throws {Error} If service is not initialized with store access
   *
   * @example
   * ```typescript
   * const state = testApi.getGameState();
   * expect(state.fen).toBe('expected-fen');
   * expect(state.turn).toBe('w');
   * expect(state.moveCount).toBe(2);
   * expect(state.isCheck).toBe(false);
   * ```
   */ getGameState() {
        var _state_training, _state_training1, _state_training_currentEvaluation, _state_training2, _state_evaluation_engineEvaluation, _state_evaluation;
        if (!this.storeAccess) {
            throw new Error("TestApiService not initialized with store access");
        }
        const state = this.storeAccess.getState();
        const currentFen = ((_state_training = state.training) === null || _state_training === void 0 ? void 0 : _state_training.currentFen) || state.fen || "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
        const game = new _chess.Chess(currentFen);
        // Get last move if available
        const history = ((_state_training1 = state.training) === null || _state_training1 === void 0 ? void 0 : _state_training1.moveHistory) || state.history || [];
        let lastMove;
        if (history.length > 0) {
            const lastHistoryItem = history[history.length - 1];
            lastMove = {
                from: lastHistoryItem.from || "",
                to: lastHistoryItem.to || "",
                san: lastHistoryItem.san
            };
        }
        return {
            fen: currentFen,
            turn: game.turn(),
            moveCount: history.length,
            pgn: game.pgn(),
            isGameOver: game.isGameOver(),
            gameOverReason: this.getGameOverReason(game),
            history: history.map((h)=>h.san),
            evaluation: ((_state_training2 = state.training) === null || _state_training2 === void 0 ? void 0 : (_state_training_currentEvaluation = _state_training2.currentEvaluation) === null || _state_training_currentEvaluation === void 0 ? void 0 : _state_training_currentEvaluation.evaluation) || ((_state_evaluation = state.evaluation) === null || _state_evaluation === void 0 ? void 0 : (_state_evaluation_engineEvaluation = _state_evaluation.engineEvaluation) === null || _state_evaluation_engineEvaluation === void 0 ? void 0 : _state_evaluation_engineEvaluation.value),
            isCheck: game.isCheck(),
            isCheckmate: game.isCheckmate(),
            isDraw: game.isDraw(),
            lastMove
        };
    }
    /**
   * Reset game to initial position
   *
   * @description
   * Resets the chess game to its initial starting position, clearing
   * all move history and returning to the standard opening setup.
   * Useful for test scenarios that need a clean game state.
   *
   * @returns {Promise<void>} Promise that resolves when reset is complete
   *
   * @throws {Error} If service is not initialized with store access
   *
   * @example
   * ```typescript
   * // Reset before starting a new test scenario
   * await testApi.resetGame();
   * const state = testApi.getGameState();
   * expect(state.fen).toBe('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1');
   * ```
   */ async resetGame() {
        if (!this.storeAccess) {
            throw new Error("TestApiService not initialized with store access");
        }
        this.storeAccess.resetPosition();
        this.emit("test:reset", {});
    }
    /**
   * Configure tablebase for deterministic behavior
   * @param config
   */ configureTablebase(config) {
        this.tablebaseConfig = {
            ...this.tablebaseConfig,
            ...config
        };
        this.emit("test:tablebaseConfigured", {
            config: this.tablebaseConfig
        });
    // Note: TestBridge system already handles configuration propagation
    // to the actual tablebase instance for deterministic test behavior
    }
    /**
   * Trigger tablebase analysis for current position
   * @param timeoutMs - Maximum time to wait (for mock tablebase this is instant)
   *
   * Note: In the new architecture, tablebase analysis happens automatically
   * through the store when moves are made. This method now just waits
   * for the tablebase status to become ready.
   */ async triggerTablebaseAnalysis(timeoutMs = _constants.TESTING.DEFAULT_TIMEOUT) {
        if (!this.storeAccess) {
            throw new Error("TestApiService not initialized");
        }
        try {
            const startTime = Date.now();
            // Wait for tablebase to be ready
            while(Date.now() - startTime < timeoutMs){
                var _state_tablebase;
                const state = this.storeAccess.getState();
                const analysisStatus = ((_state_tablebase = state.tablebase) === null || _state_tablebase === void 0 ? void 0 : _state_tablebase.analysisStatus) || "idle";
                if (analysisStatus === "idle" || analysisStatus === "success") {
                    var _state_game;
                    // Tablebase is working or has finished
                    this.emit("test:tablebaseAnalysisComplete", {
                        fen: ((_state_game = state.game) === null || _state_game === void 0 ? void 0 : _state_game.currentFen) || state.currentFen
                    });
                    return true;
                }
                // Wait a bit before checking again
                await new Promise((resolve)=>setTimeout(resolve, _constants.TESTING.POLL_INTERVAL));
            }
            // Timeout reached
            logger.warn("Tablebase analysis timeout after", {
                timeoutMs
            });
            return false;
        } catch (error) {
            logger.error("Tablebase analysis check failed", error);
            this.emit("test:tablebaseError", {
                error: error instanceof Error ? error.message : "Unknown error"
            });
            return false;
        }
    }
    /**
   * Subscribe to test events
   * @param event
   * @param handler
   */ on(event, handler) {
        this.eventEmitter.addEventListener(event, (e)=>handler(e.detail));
    }
    /**
   * Unsubscribe from test events
   * @param event
   * @param handler
   */ off(event, handler) {
        this.eventEmitter.removeEventListener(event, (e)=>handler(e.detail));
    }
    /**
   * Emit test event
   * @param event
   * @param detail
   */ emit(event, detail) {
        this.eventEmitter.dispatchEvent(new CustomEvent(event, {
            detail
        }));
    }
    /**
   * Handle deterministic tablebase move in mock mode
   * @param currentFen
   */ async handleDeterministicTablebaseMove(currentFen) {
        if (!this.storeAccess || !this.tablebaseConfig.fixedResponses) {
            return;
        }
        // Check if we have a fixed response for this position
        const tablebaseMove = this.tablebaseConfig.fixedResponses.get(currentFen);
        if (tablebaseMove) {
            // Wait a bit to simulate tablebase thinking time (optional)
            if (this.tablebaseConfig.timeLimit && this.tablebaseConfig.timeLimit > 0) {
                await new Promise((resolve)=>setTimeout(resolve, this.tablebaseConfig.timeLimit));
            }
            // Make the deterministic tablebase move
            try {
                // Use direct makeMove for test bypass
                if (this.storeAccess.makeMove) {
                    this.storeAccess.makeMove(tablebaseMove);
                }
                this.emit("test:tablebaseMove", {
                    move: tablebaseMove,
                    fen: currentFen,
                    deterministic: true
                });
            } catch (error) {
                logger.warn("Deterministic tablebase move failed", {
                    tablebaseMove,
                    position: currentFen,
                    error
                });
            }
        }
    }
    /**
   * Get game over reason
   * @param game
   */ getGameOverReason(game) {
        if (!game.isGameOver()) return undefined;
        if (game.isCheckmate()) return "checkmate";
        if (game.isDraw()) {
            if (game.isStalemate()) return "stalemate";
            if (game.isThreefoldRepetition()) return "threefold repetition";
            if (game.isInsufficientMaterial()) return "insufficient material";
            return "draw";
        }
        return "game over";
    }
    constructor(){
        _define_property(this, "tablebaseConfig", {
            deterministic: false
        });
        _define_property(this, "eventEmitter", new EventTarget());
        _define_property(this, "_isInitialized", false);
        // Tablebase control is now handled via TestBridge, not directly
        _define_property(this, "storeAccess", null);
    }
}
_define_property(TestApiService, "instance", null);
const getTestApi = ()=>TestApiService.getInstance();

//# sourceMappingURL=data:application/json;base64,