{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/services/SpacedRepetitionService.test.ts"],"sourcesContent":["/**\n * @file Unit tests for SpacedRepetitionService\n * @description Tests the spaced repetition algorithm implementation and utilities\n */\n\nimport {\n  mapBinaryToQuality,\n  mapMoveQualityToSM2,\n  updateCardProgress,\n  getDueCards,\n  getDueCardsFromMap,\n  createNewCard,\n  resetCardProgress,\n  batchUpdateCards,\n  calculateCardStatistics,\n  isCardDifficult,\n  sortByReviewPriority,\n} from '@shared/services/SpacedRepetitionService';\nimport type { CardProgress } from '@shared/store/slices/types';\n\n// Mock logger to avoid console noise in tests\njest.mock('@shared/services/logging/Logger', () => ({\n  getLogger: () => ({\n    setContext: jest.fn().mockReturnThis(),\n    debug: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    info: jest.fn(),\n  }),\n}));\n\ndescribe('SpacedRepetitionService', () => {\n  const NOW = 1704067200000; // 2024-01-01 00:00:00 UTC\n  const ONE_DAY_MS = 86400000;\n\n  // Helper to create a test card\n  const createTestCard = (overrides?: Partial<CardProgress>): CardProgress => ({\n    id: 'test-card',\n    nextReviewAt: NOW,\n    lastReviewedAt: NOW - ONE_DAY_MS,\n    interval: 1,\n    repetition: 1,\n    efactor: 2.5,\n    lapses: 0,\n    ...overrides,\n  });\n\n  describe('mapBinaryToQuality', () => {\n    it('should map correct to quality 4', () => {\n      expect(mapBinaryToQuality(true)).toBe(4);\n    });\n\n    it('should map incorrect to quality 0', () => {\n      expect(mapBinaryToQuality(false)).toBe(0);\n    });\n  });\n\n  describe('mapMoveQualityToSM2', () => {\n    it('should map fail to 0', () => {\n      expect(mapMoveQualityToSM2('fail')).toBe(0);\n    });\n\n    it('should map hard to 3', () => {\n      expect(mapMoveQualityToSM2('hard')).toBe(3);\n    });\n\n    it('should map good to 4', () => {\n      expect(mapMoveQualityToSM2('good')).toBe(4);\n    });\n\n    it('should map easy to 5', () => {\n      expect(mapMoveQualityToSM2('easy')).toBe(5);\n    });\n  });\n\n  describe('updateCardProgress', () => {\n    it('should update card with quality 0 (fail)', () => {\n      const card = createTestCard();\n      const updated = updateCardProgress(card, 0, NOW);\n\n      expect(updated.interval).toBe(1); // Reset to 1 day\n      expect(updated.repetition).toBe(0); // Reset repetitions\n      expect(updated.efactor).toBeLessThan(2.5); // Decrease ease\n      expect(updated.lapses).toBe(1); // Increment lapses\n      expect(updated.lastReviewedAt).toBe(NOW);\n      expect(updated.nextReviewAt).toBe(NOW + ONE_DAY_MS);\n    });\n\n    it('should update card with quality 4 (good)', () => {\n      const card = createTestCard({ repetition: 2, interval: 6 });\n      const updated = updateCardProgress(card, 4, NOW);\n\n      expect(updated.interval).toBeGreaterThan(6); // Interval should increase\n      expect(updated.repetition).toBe(3); // Increment repetitions\n      expect(updated.efactor).toBeGreaterThanOrEqual(2.5); // Maintain or increase\n      expect(updated.lapses).toBe(0); // No change\n      expect(updated.lastReviewedAt).toBe(NOW);\n    });\n\n    it('should update card with quality 5 (perfect)', () => {\n      const card = createTestCard();\n      const updated = updateCardProgress(card, 5, NOW);\n\n      expect(updated.interval).toBeGreaterThan(1);\n      expect(updated.repetition).toBe(2);\n      expect(updated.efactor).toBeGreaterThan(2.5); // Should increase\n      expect(updated.lapses).toBe(0);\n    });\n\n    it('should throw error for invalid quality', () => {\n      const card = createTestCard();\n      \n      expect(() => updateCardProgress(card, -1, NOW)).toThrow('Quality must be between 0 and 5');\n      expect(() => updateCardProgress(card, 6, NOW)).toThrow('Quality must be between 0 and 5');\n    });\n\n    it('should handle NaN from supermemo gracefully', () => {\n      // Test with edge case values that might cause NaN\n      const card = createTestCard({ repetition: 0, efactor: 0 });\n      const updated = updateCardProgress(card, 3, NOW);\n\n      expect(isNaN(updated.interval)).toBe(false);\n      expect(isNaN(updated.efactor)).toBe(false);\n      expect(isNaN(updated.repetition)).toBe(false);\n    });\n  });\n\n  describe('getDueCards', () => {\n    it('should return cards due for review', () => {\n      const cards: CardProgress[] = [\n        createTestCard({ id: 'due-1', nextReviewAt: NOW - ONE_DAY_MS }),\n        createTestCard({ id: 'due-2', nextReviewAt: NOW }),\n        createTestCard({ id: 'not-due', nextReviewAt: NOW + ONE_DAY_MS }),\n      ];\n\n      const dueCards = getDueCards(cards, NOW);\n      \n      expect(dueCards).toHaveLength(2);\n      expect(dueCards.map(c => c.id)).toEqual(['due-1', 'due-2']);\n    });\n\n    it('should return empty array when no cards are due', () => {\n      const cards: CardProgress[] = [\n        createTestCard({ nextReviewAt: NOW + ONE_DAY_MS }),\n        createTestCard({ nextReviewAt: NOW + 2 * ONE_DAY_MS }),\n      ];\n\n      const dueCards = getDueCards(cards, NOW);\n      expect(dueCards).toHaveLength(0);\n    });\n  });\n\n  describe('getDueCardsFromMap', () => {\n    it('should return due cards from a map structure', () => {\n      const cardMap: Record<string, CardProgress> = {\n        'due-1': createTestCard({ id: 'due-1', nextReviewAt: NOW - ONE_DAY_MS }),\n        'due-2': createTestCard({ id: 'due-2', nextReviewAt: NOW }),\n        'not-due': createTestCard({ id: 'not-due', nextReviewAt: NOW + ONE_DAY_MS }),\n      };\n\n      const dueCards = getDueCardsFromMap(cardMap, NOW);\n      \n      expect(dueCards).toHaveLength(2);\n      expect(dueCards.map(c => c.id).sort()).toEqual(['due-1', 'due-2']);\n    });\n  });\n\n  describe('createNewCard', () => {\n    it('should create a new card with default values', () => {\n      const card = createNewCard('new-card', NOW);\n\n      expect(card).toEqual({\n        id: 'new-card',\n        nextReviewAt: NOW, // Immediately due\n        lastReviewedAt: 0,\n        interval: 0,\n        repetition: 0,\n        efactor: 2.5,\n        lapses: 0,\n      });\n    });\n  });\n\n  describe('resetCardProgress', () => {\n    it('should reset card to initial state', () => {\n      const card = resetCardProgress({ id: 'reset-card' });\n\n      expect(card).toEqual({\n        id: 'reset-card',\n        nextReviewAt: 0,\n        lastReviewedAt: 0,\n        interval: 0,\n        repetition: 0,\n        efactor: 2.5,\n        lapses: 0,\n      });\n    });\n\n    it('should preserve override values', () => {\n      const card = resetCardProgress({\n        id: 'reset-card',\n        efactor: 2.0,\n        lapses: 5,\n      });\n\n      expect(card.efactor).toBe(2.0);\n      expect(card.lapses).toBe(5);\n      expect(card.interval).toBe(0); // Still reset\n    });\n  });\n\n  describe('batchUpdateCards', () => {\n    it('should update multiple cards', () => {\n      const cards: CardProgress[] = [\n        createTestCard({ id: 'card-1' }),\n        createTestCard({ id: 'card-2' }),\n        createTestCard({ id: 'card-3' }),\n      ];\n\n      const results = {\n        'card-1': 4, // Good\n        'card-2': 0, // Fail\n        // card-3 not included\n      };\n\n      const updated = batchUpdateCards(cards, results, NOW);\n\n      expect(updated[0].repetition).toBe(2); // card-1 succeeded\n      expect(updated[1].repetition).toBe(0); // card-2 failed\n      expect(updated[1].lapses).toBe(1); // card-2 lapsed\n      expect(updated[2]).toEqual(cards[2]); // card-3 unchanged\n    });\n  });\n\n  describe('calculateCardStatistics', () => {\n    it('should calculate correct statistics', () => {\n      const cards: CardProgress[] = [\n        createTestCard({ id: '1', interval: 0, repetition: 0, nextReviewAt: NOW }), // New, due\n        createTestCard({ id: '2', interval: 7, nextReviewAt: NOW - ONE_DAY_MS }), // Learning, due  \n        createTestCard({ id: '3', interval: 30, efactor: 2.3, nextReviewAt: NOW + 30 * ONE_DAY_MS }), // Mastered, not due\n        createTestCard({ id: '4', interval: 21, lapses: 2, nextReviewAt: NOW + 21 * ONE_DAY_MS }), // Mastered, not due\n      ];\n\n      const stats = calculateCardStatistics(cards, NOW);\n\n      expect(stats.totalCards).toBe(4);\n      expect(stats.dueCards).toBe(2);\n      expect(stats.masteredCards).toBe(2); // interval >= 21\n      expect(stats.learningCards).toBe(1); // 0 < interval < 21\n      expect(stats.newCards).toBe(1); // repetition === 0\n      expect(stats.totalLapses).toBe(2);\n      expect(stats.duePercentage).toBe(50); // 2 due out of 4 total\n      expect(stats.averageEfactor).toBeCloseTo(2.45, 2); // (2.5 + 2.5 + 2.3 + 2.5) / 4 = 2.45\n    });\n\n    it('should handle empty array', () => {\n      const stats = calculateCardStatistics([], NOW);\n\n      expect(stats.totalCards).toBe(0);\n      expect(stats.dueCards).toBe(0);\n      expect(stats.averageEfactor).toBe(2.5); // Default\n      expect(stats.duePercentage).toBe(0);\n    });\n  });\n\n  describe('isCardDifficult', () => {\n    it('should identify difficult cards by low efactor', () => {\n      const card = createTestCard({ efactor: 1.8 });\n      expect(isCardDifficult(card)).toBe(true);\n    });\n\n    it('should identify difficult cards by high lapses', () => {\n      const card = createTestCard({ lapses: 4 });\n      expect(isCardDifficult(card)).toBe(true);\n    });\n\n    it('should not mark normal cards as difficult', () => {\n      const card = createTestCard({ efactor: 2.3, lapses: 2 });\n      expect(isCardDifficult(card)).toBe(false);\n    });\n  });\n\n  describe('sortByReviewPriority', () => {\n    it('should sort overdue cards first, most overdue at top', () => {\n      const cards: CardProgress[] = [\n        createTestCard({ id: 'future', nextReviewAt: NOW + ONE_DAY_MS }),\n        createTestCard({ id: 'very-overdue', nextReviewAt: NOW - 2 * ONE_DAY_MS }),\n        createTestCard({ id: 'slightly-overdue', nextReviewAt: NOW - ONE_DAY_MS }),\n        createTestCard({ id: 'due-now', nextReviewAt: NOW }),\n      ];\n\n      const sorted = sortByReviewPriority(cards, NOW);\n      \n      expect(sorted.map(c => c.id)).toEqual([\n        'very-overdue',\n        'slightly-overdue',\n        'due-now',\n        'future',\n      ]);\n    });\n\n    it('should sort future cards by soonest first', () => {\n      const cards: CardProgress[] = [\n        createTestCard({ id: 'far-future', nextReviewAt: NOW + 10 * ONE_DAY_MS }),\n        createTestCard({ id: 'tomorrow', nextReviewAt: NOW + ONE_DAY_MS }),\n        createTestCard({ id: 'next-week', nextReviewAt: NOW + 7 * ONE_DAY_MS }),\n      ];\n\n      const sorted = sortByReviewPriority(cards, NOW);\n      \n      expect(sorted.map(c => c.id)).toEqual([\n        'tomorrow',\n        'next-week',\n        'far-future',\n      ]);\n    });\n  });\n});"],"names":["jest","mock","getLogger","setContext","fn","mockReturnThis","debug","warn","error","info","describe","NOW","ONE_DAY_MS","createTestCard","overrides","id","nextReviewAt","lastReviewedAt","interval","repetition","efactor","lapses","it","expect","mapBinaryToQuality","toBe","mapMoveQualityToSM2","card","updated","updateCardProgress","toBeLessThan","toBeGreaterThan","toBeGreaterThanOrEqual","toThrow","isNaN","cards","dueCards","getDueCards","toHaveLength","map","c","toEqual","cardMap","getDueCardsFromMap","sort","createNewCard","resetCardProgress","results","batchUpdateCards","stats","calculateCardStatistics","totalCards","masteredCards","learningCards","newCards","totalLapses","duePercentage","averageEfactor","toBeCloseTo","isCardDifficult","sorted","sortByReviewPriority"],"mappings":"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"}