{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/repositories/implementations/FirebasePositionRepository.ts"],"sourcesContent":["/**\n * Firebase implementation of IPositionRepository\n * Encapsulates all Firebase-specific logic\n */\n\nimport {\n  doc,\n  getDoc,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n  collection,\n  getDocs,\n  query,\n  where,\n  orderBy,\n  limit,\n  DocumentData,\n  Firestore,\n  writeBatch,\n  Query,\n} from \"firebase/firestore\";\n\nimport {\n  IPositionRepository,\n  IPositionRepositoryConfig,\n} from \"../IPositionRepository\";\nimport {\n  EndgamePosition,\n  EndgameCategory,\n  EndgameChapter,\n} from \"@shared/types\";\nimport { validateAndSanitizeFen } from \"@shared/utils/fenValidator\";\nimport { getLogger } from \"@shared/services/logging\";\n\nconst logger = getLogger().setContext(\"FirebasePositionRepository\");\n\nexport class FirebasePositionRepository implements IPositionRepository {\n  private db: Firestore;\n  private config: IPositionRepositoryConfig;\n\n  constructor(firestore: Firestore, config: IPositionRepositoryConfig = {}) {\n    this.db = firestore;\n    this.config = config;\n    logger.info(\"FirebasePositionRepository initialized\", { config });\n  }\n\n  async getPosition(id: number): Promise<EndgamePosition | null> {\n    try {\n      const docRef = doc(this.db, \"positions\", id.toString());\n      const docSnap = await getDoc(docRef);\n\n      if (docSnap.exists()) {\n        const data = docSnap.data();\n        const position: EndgamePosition = { ...data, id } as EndgamePosition;\n        // Validate FEN\n        if (position.fen) {\n          const validation = validateAndSanitizeFen(position.fen);\n          if (!validation.isValid) {\n            logger.error(\n              `Invalid FEN from Firestore for position ${id}: ${validation.errors.join(\", \")}`,\n            );\n            throw new Error(\"Invalid position data\");\n          }\n          position.fen = validation.sanitized;\n        }\n        this.config.events?.onDataFetched?.(\"getPosition\", 1);\n        return position;\n      }\n\n      logger.warn(`Position ${id} not found`);\n      return null;\n    } catch (error) {\n      logger.error(\"Failed to get position\", error as Error, { id });\n      this.config.events?.onError?.(\"getPosition\", error as Error);\n      throw error;\n    }\n  }\n\n  async createPosition(\n    data: Omit<EndgamePosition, \"id\">,\n  ): Promise<EndgamePosition> {\n    try {\n      // Generate unique ID using crypto.randomUUID for collision-free identifiers\n      const uniqueId = crypto.randomUUID();\n      // Convert to number for compatibility with existing EndgamePosition.id type\n      // Using hash code of the UUID string\n      const id = Math.abs(\n        uniqueId.split(\"\").reduce((a, b) => {\n          a = (a << 5) - a + b.charCodeAt(0);\n          return a & a;\n        }, 0),\n      );\n      const position: EndgamePosition = { ...data, id };\n\n      // Validate FEN before saving\n      if (position.fen) {\n        const validation = validateAndSanitizeFen(position.fen);\n        if (!validation.isValid) {\n          throw new Error(`Invalid FEN: ${validation.errors.join(\", \")}`);\n        }\n        position.fen = validation.sanitized;\n      }\n\n      const docRef = doc(this.db, \"positions\", id.toString());\n      await setDoc(docRef, position);\n\n      this.config.events?.onDataModified?.(\"createPosition\", [id]);\n      return position;\n    } catch (error) {\n      logger.error(\"Failed to create position\", error as Error);\n      this.config.events?.onError?.(\"createPosition\", error as Error);\n      throw error;\n    }\n  }\n\n  async updatePosition(\n    id: number,\n    updates: Partial<EndgamePosition>,\n  ): Promise<EndgamePosition | null> {\n    try {\n      // Validate FEN if provided\n      if (updates.fen) {\n        const validation = validateAndSanitizeFen(updates.fen);\n        if (!validation.isValid) {\n          throw new Error(`Invalid FEN: ${validation.errors.join(\", \")}`);\n        }\n        updates.fen = validation.sanitized;\n      }\n\n      const docRef = doc(this.db, \"positions\", id.toString());\n      await updateDoc(docRef, updates as DocumentData);\n\n      this.config.events?.onDataModified?.(\"updatePosition\", [id]);\n      return this.getPosition(id);\n    } catch (error) {\n      logger.error(\"Failed to update position\", error as Error, { id });\n      this.config.events?.onError?.(\"updatePosition\", error as Error);\n      throw error;\n    }\n  }\n\n  async deletePosition(id: number): Promise<boolean> {\n    try {\n      const docRef = doc(this.db, \"positions\", id.toString());\n      await deleteDoc(docRef);\n\n      this.config.events?.onDataModified?.(\"deletePosition\", [id]);\n      return true;\n    } catch (error) {\n      logger.error(\"Failed to delete position\", error as Error, { id });\n      this.config.events?.onError?.(\"deletePosition\", error as Error);\n      return false;\n    }\n  }\n\n  async getAllPositions(): Promise<EndgamePosition[]> {\n    try {\n      const positionsRef = collection(this.db, \"positions\");\n      const snapshot = await getDocs(positionsRef);\n\n      const positions: EndgamePosition[] = [];\n      snapshot.forEach((doc) => {\n        const data = doc.data();\n        const position: EndgamePosition = {\n          ...data,\n          id: parseInt(doc.id),\n        } as EndgamePosition;\n        // Validate FEN\n        if (position.fen) {\n          const validation = validateAndSanitizeFen(position.fen);\n          if (validation.isValid) {\n            position.fen = validation.sanitized;\n            positions.push(position);\n          } else {\n            logger.error(\n              `Invalid FEN for position ${position.id}: ${validation.errors.join(\", \")}`,\n            );\n          }\n        } else {\n          positions.push(position);\n        }\n      });\n\n      this.config.events?.onDataFetched?.(\"getAllPositions\", positions.length);\n      return positions;\n    } catch (error) {\n      logger.error(\"Failed to get all positions\", error as Error);\n      this.config.events?.onError?.(\"getAllPositions\", error as Error);\n      return [];\n    }\n  }\n\n  async getPositionsByCategory(category: string): Promise<EndgamePosition[]> {\n    try {\n      const positionsRef = collection(this.db, \"positions\");\n      const q = query(positionsRef, where(\"category\", \"==\", category));\n      const snapshot = await getDocs(q);\n\n      const positions: EndgamePosition[] = [];\n      snapshot.forEach((doc) => {\n        const data = doc.data();\n        const position: EndgamePosition = {\n          ...data,\n          id: parseInt(doc.id),\n        } as EndgamePosition;\n        // Validate FEN\n        if (position.fen) {\n          const validation = validateAndSanitizeFen(position.fen);\n          if (validation.isValid) {\n            position.fen = validation.sanitized;\n            positions.push(position);\n          } else {\n            logger.error(\n              `Invalid FEN for position ${position.id}: ${validation.errors.join(\", \")}`,\n            );\n          }\n        } else {\n          positions.push(position);\n        }\n      });\n\n      this.config.events?.onDataFetched?.(\n        \"getPositionsByCategory\",\n        positions.length,\n      );\n      return positions;\n    } catch (error) {\n      logger.error(\"Failed to get positions by category\", error as Error, {\n        category,\n      });\n      this.config.events?.onError?.(\"getPositionsByCategory\", error as Error);\n      return [];\n    }\n  }\n\n  async getPositionsByDifficulty(\n    difficulty: EndgamePosition[\"difficulty\"],\n  ): Promise<EndgamePosition[]> {\n    try {\n      const positionsRef = collection(this.db, \"positions\");\n      const q = query(positionsRef, where(\"difficulty\", \"==\", difficulty));\n      const snapshot = await getDocs(q);\n\n      const positions: EndgamePosition[] = [];\n      snapshot.forEach((doc) => {\n        const data = doc.data();\n        const position: EndgamePosition = {\n          ...data,\n          id: parseInt(doc.id),\n        } as EndgamePosition;\n        // Validate FEN\n        if (position.fen) {\n          const validation = validateAndSanitizeFen(position.fen);\n          if (validation.isValid) {\n            position.fen = validation.sanitized;\n            positions.push(position);\n          } else {\n            logger.error(\n              `Invalid FEN for position ${position.id}: ${validation.errors.join(\", \")}`,\n            );\n          }\n        } else {\n          positions.push(position);\n        }\n      });\n\n      this.config.events?.onDataFetched?.(\n        \"getPositionsByDifficulty\",\n        positions.length,\n      );\n      return positions;\n    } catch (error) {\n      logger.error(\"Failed to get positions by difficulty\", error as Error, {\n        difficulty,\n      });\n      this.config.events?.onError?.(\"getPositionsByDifficulty\", error as Error);\n      return [];\n    }\n  }\n\n  async getPositionsByIds(ids: number[]): Promise<EndgamePosition[]> {\n    try {\n      const positions = await Promise.all(\n        ids.map((id) => this.getPosition(id)),\n      );\n\n      const validPositions = positions.filter(\n        (p): p is EndgamePosition => p !== null,\n      );\n      this.config.events?.onDataFetched?.(\n        \"getPositionsByIds\",\n        validPositions.length,\n      );\n\n      return validPositions;\n    } catch (error) {\n      logger.error(\"Failed to get positions by ids\", error as Error, { ids });\n      this.config.events?.onError?.(\"getPositionsByIds\", error as Error);\n      return [];\n    }\n  }\n\n  async searchPositions(searchTerm: string): Promise<EndgamePosition[]> {\n    try {\n      // Firestore doesn't support full-text search natively\n      // For production, consider Algolia or Elasticsearch\n      const positions = await this.getAllPositions();\n      const lowerSearch = searchTerm.toLowerCase();\n\n      const results = positions.filter(\n        (p) =>\n          p.title.toLowerCase().includes(lowerSearch) ||\n          p.description.toLowerCase().includes(lowerSearch),\n      );\n\n      this.config.events?.onDataFetched?.(\"searchPositions\", results.length);\n      return results;\n    } catch (error) {\n      logger.error(\"Failed to search positions\", error as Error, {\n        searchTerm,\n      });\n      this.config.events?.onError?.(\"searchPositions\", error as Error);\n      return [];\n    }\n  }\n\n  async getPositionsByTags(_tags: string[]): Promise<EndgamePosition[]> {\n    // Tags are not yet implemented in EndgamePosition type\n    // Return empty array for now\n    logger.warn(\n      \"getPositionsByTags: tags property not yet implemented in EndgamePosition\",\n    );\n    this.config.events?.onDataFetched?.(\"getPositionsByTags\", 0);\n    return [];\n  }\n\n  async getNextPosition(\n    currentId: number,\n    categoryId?: string,\n  ): Promise<EndgamePosition | null> {\n    try {\n      const positionsRef = collection(this.db, \"positions\");\n      let q: Query<DocumentData>;\n\n      if (categoryId) {\n        q = query(\n          positionsRef,\n          where(\"category\", \"==\", categoryId),\n          where(\"id\", \">\", currentId),\n          orderBy(\"id\"),\n          limit(1),\n        );\n      } else {\n        q = query(\n          positionsRef,\n          where(\"id\", \">\", currentId),\n          orderBy(\"id\"),\n          limit(1),\n        );\n      }\n\n      const snapshot = await getDocs(q);\n\n      if (snapshot.empty) {\n        return null;\n      }\n\n      const data = snapshot.docs[0].data();\n      const position: EndgamePosition = {\n        ...data,\n        id: parseInt(snapshot.docs[0].id),\n      } as EndgamePosition;\n\n      // Validate FEN\n      if (position.fen) {\n        const validation = validateAndSanitizeFen(position.fen);\n        if (!validation.isValid) {\n          logger.error(\n            `Invalid FEN for position ${position.id}: ${validation.errors.join(\", \")}`,\n          );\n          return null;\n        }\n        position.fen = validation.sanitized;\n      }\n\n      this.config.events?.onDataFetched?.(\"getNextPosition\", 1);\n      return position;\n    } catch (error) {\n      logger.error(\"Failed to get next position\", error as Error, {\n        currentId,\n        categoryId,\n      });\n      this.config.events?.onError?.(\"getNextPosition\", error as Error);\n      return null;\n    }\n  }\n\n  async getPreviousPosition(\n    currentId: number,\n    categoryId?: string,\n  ): Promise<EndgamePosition | null> {\n    try {\n      const positionsRef = collection(this.db, \"positions\");\n      let q: Query<DocumentData>;\n\n      if (categoryId) {\n        q = query(\n          positionsRef,\n          where(\"category\", \"==\", categoryId),\n          where(\"id\", \"<\", currentId),\n          orderBy(\"id\", \"desc\"),\n          limit(1),\n        );\n      } else {\n        q = query(\n          positionsRef,\n          where(\"id\", \"<\", currentId),\n          orderBy(\"id\", \"desc\"),\n          limit(1),\n        );\n      }\n\n      const snapshot = await getDocs(q);\n\n      if (snapshot.empty) {\n        return null;\n      }\n\n      const data = snapshot.docs[0].data();\n      const position: EndgamePosition = {\n        ...data,\n        id: parseInt(snapshot.docs[0].id),\n      } as EndgamePosition;\n\n      // Validate FEN\n      if (position.fen) {\n        const validation = validateAndSanitizeFen(position.fen);\n        if (!validation.isValid) {\n          logger.error(\n            `Invalid FEN for position ${position.id}: ${validation.errors.join(\", \")}`,\n          );\n          return null;\n        }\n        position.fen = validation.sanitized;\n      }\n\n      this.config.events?.onDataFetched?.(\"getPreviousPosition\", 1);\n      return position;\n    } catch (error) {\n      logger.error(\"Failed to get previous position\", error as Error, {\n        currentId,\n        categoryId,\n      });\n      this.config.events?.onError?.(\"getPreviousPosition\", error as Error);\n      return null;\n    }\n  }\n\n  async getCategories(): Promise<EndgameCategory[]> {\n    try {\n      const categoriesRef = collection(this.db, \"categories\");\n      const snapshot = await getDocs(categoriesRef);\n\n      const categories: EndgameCategory[] = [];\n      snapshot.forEach((doc) => {\n        categories.push(doc.data() as EndgameCategory);\n      });\n\n      this.config.events?.onDataFetched?.(\"getCategories\", categories.length);\n      return categories;\n    } catch (error) {\n      logger.error(\"Failed to get categories\", error as Error);\n      this.config.events?.onError?.(\"getCategories\", error as Error);\n      return [];\n    }\n  }\n\n  async getCategory(id: string): Promise<EndgameCategory | null> {\n    try {\n      const docRef = doc(this.db, \"categories\", id);\n      const docSnap = await getDoc(docRef);\n\n      if (docSnap.exists()) {\n        this.config.events?.onDataFetched?.(\"getCategory\", 1);\n        return docSnap.data() as EndgameCategory;\n      }\n\n      return null;\n    } catch (error) {\n      logger.error(\"Failed to get category\", error as Error, { id });\n      this.config.events?.onError?.(\"getCategory\", error as Error);\n      return null;\n    }\n  }\n\n  async getChapters(): Promise<EndgameChapter[]> {\n    try {\n      const chaptersRef = collection(this.db, \"chapters\");\n      const snapshot = await getDocs(chaptersRef);\n\n      const chapters: EndgameChapter[] = [];\n      snapshot.forEach((doc) => {\n        chapters.push(doc.data() as EndgameChapter);\n      });\n\n      this.config.events?.onDataFetched?.(\"getChapters\", chapters.length);\n      return chapters;\n    } catch (error) {\n      logger.error(\"Failed to get chapters\", error as Error);\n      this.config.events?.onError?.(\"getChapters\", error as Error);\n      return [];\n    }\n  }\n\n  async getChaptersByCategory(categoryId: string): Promise<EndgameChapter[]> {\n    try {\n      const chaptersRef = collection(this.db, \"chapters\");\n      const q = query(chaptersRef, where(\"category\", \"==\", categoryId));\n      const snapshot = await getDocs(q);\n\n      const chapters: EndgameChapter[] = [];\n      snapshot.forEach((doc) => {\n        chapters.push(doc.data() as EndgameChapter);\n      });\n\n      this.config.events?.onDataFetched?.(\n        \"getChaptersByCategory\",\n        chapters.length,\n      );\n      return chapters;\n    } catch (error) {\n      logger.error(\"Failed to get chapters by category\", error as Error, {\n        categoryId,\n      });\n      this.config.events?.onError?.(\"getChaptersByCategory\", error as Error);\n      return [];\n    }\n  }\n\n  async getTotalPositionCount(): Promise<number> {\n    try {\n      const positionsRef = collection(this.db, \"positions\");\n      const snapshot = await getDocs(positionsRef);\n\n      const count = snapshot.size;\n      this.config.events?.onDataFetched?.(\"getTotalPositionCount\", count);\n\n      return count;\n    } catch (error) {\n      logger.error(\"Failed to get total position count\", error as Error);\n      this.config.events?.onError?.(\"getTotalPositionCount\", error as Error);\n      return 0;\n    }\n  }\n\n  async getPositionCountByCategory(categoryId: string): Promise<number> {\n    try {\n      const positionsRef = collection(this.db, \"positions\");\n      const q = query(positionsRef, where(\"category\", \"==\", categoryId));\n      const snapshot = await getDocs(q);\n\n      const count = snapshot.size;\n      this.config.events?.onDataFetched?.(\"getPositionCountByCategory\", count);\n\n      return count;\n    } catch (error) {\n      logger.error(\"Failed to get position count by category\", error as Error, {\n        categoryId,\n      });\n      this.config.events?.onError?.(\n        \"getPositionCountByCategory\",\n        error as Error,\n      );\n      return 0;\n    }\n  }\n\n  async getPositionCountByDifficulty(\n    difficulty: EndgamePosition[\"difficulty\"],\n  ): Promise<number> {\n    try {\n      const positionsRef = collection(this.db, \"positions\");\n      const q = query(positionsRef, where(\"difficulty\", \"==\", difficulty));\n      const snapshot = await getDocs(q);\n\n      const count = snapshot.size;\n      this.config.events?.onDataFetched?.(\n        \"getPositionCountByDifficulty\",\n        count,\n      );\n\n      return count;\n    } catch (error) {\n      logger.error(\n        \"Failed to get position count by difficulty\",\n        error as Error,\n        { difficulty },\n      );\n      this.config.events?.onError?.(\n        \"getPositionCountByDifficulty\",\n        error as Error,\n      );\n      return 0;\n    }\n  }\n\n  async batchCreatePositions(\n    positions: Omit<EndgamePosition, \"id\">[],\n  ): Promise<EndgamePosition[]> {\n    try {\n      const batch = writeBatch(this.db);\n      const createdPositions: EndgamePosition[] = [];\n\n      for (const data of positions) {\n        // Generate unique ID using crypto.randomUUID for each position\n        const uniqueId = crypto.randomUUID();\n        const id = Math.abs(\n          uniqueId.split(\"\").reduce((a, b) => {\n            a = (a << 5) - a + b.charCodeAt(0);\n            return a & a;\n          }, 0),\n        );\n        const position: EndgamePosition = { ...data, id };\n\n        // Validate FEN\n        if (position.fen) {\n          const validation = validateAndSanitizeFen(position.fen);\n          if (!validation.isValid) {\n            throw new Error(\n              `Invalid FEN for position: ${validation.errors.join(\", \")}`,\n            );\n          }\n          position.fen = validation.sanitized;\n        }\n\n        const docRef = doc(this.db, \"positions\", id.toString());\n        batch.set(docRef, position);\n        createdPositions.push(position);\n      }\n\n      await batch.commit();\n\n      const ids = createdPositions.map((p) => p.id);\n      this.config.events?.onDataModified?.(\"batchCreatePositions\", ids);\n\n      return createdPositions;\n    } catch (error) {\n      logger.error(\"Failed to batch create positions\", error as Error);\n      this.config.events?.onError?.(\"batchCreatePositions\", error as Error);\n      throw error;\n    }\n  }\n\n  async batchUpdatePositions(\n    updates: Array<{ id: number; updates: Partial<EndgamePosition> }>,\n  ): Promise<EndgamePosition[]> {\n    try {\n      const batch = writeBatch(this.db);\n      const ids: number[] = [];\n\n      for (const { id, updates: updateData } of updates) {\n        // Validate FEN if provided\n        if (updateData.fen) {\n          const validation = validateAndSanitizeFen(updateData.fen);\n          if (!validation.isValid) {\n            throw new Error(\n              `Invalid FEN for position ${id}: ${validation.errors.join(\", \")}`,\n            );\n          }\n          updateData.fen = validation.sanitized;\n        }\n\n        const docRef = doc(this.db, \"positions\", id.toString());\n        batch.update(docRef, updateData as DocumentData);\n        ids.push(id);\n      }\n\n      await batch.commit();\n\n      this.config.events?.onDataModified?.(\"batchUpdatePositions\", ids);\n      return this.getPositionsByIds(ids);\n    } catch (error) {\n      logger.error(\"Failed to batch update positions\", error as Error);\n      this.config.events?.onError?.(\"batchUpdatePositions\", error as Error);\n      throw error;\n    }\n  }\n\n  async batchDeletePositions(ids: number[]): Promise<boolean> {\n    try {\n      const batch = writeBatch(this.db);\n\n      for (const id of ids) {\n        const docRef = doc(this.db, \"positions\", id.toString());\n        batch.delete(docRef);\n      }\n\n      await batch.commit();\n\n      this.config.events?.onDataModified?.(\"batchDeletePositions\", ids);\n      return true;\n    } catch (error) {\n      logger.error(\"Failed to batch delete positions\", error as Error, { ids });\n      this.config.events?.onError?.(\"batchDeletePositions\", error as Error);\n      return false;\n    }\n  }\n}\n"],"names":["FirebasePositionRepository","logger","getLogger","setContext","getPosition","id","docRef","doc","db","toString","docSnap","getDoc","exists","data","position","fen","validation","validateAndSanitizeFen","isValid","error","errors","join","Error","sanitized","config","events","onDataFetched","warn","onError","createPosition","uniqueId","crypto","randomUUID","Math","abs","split","reduce","a","b","charCodeAt","setDoc","onDataModified","updatePosition","updates","updateDoc","deletePosition","deleteDoc","getAllPositions","positionsRef","collection","snapshot","getDocs","positions","forEach","parseInt","push","length","getPositionsByCategory","category","q","query","where","getPositionsByDifficulty","difficulty","getPositionsByIds","ids","Promise","all","map","validPositions","filter","p","searchPositions","searchTerm","lowerSearch","toLowerCase","results","title","includes","description","getPositionsByTags","_tags","getNextPosition","currentId","categoryId","orderBy","limit","empty","docs","getPreviousPosition","getCategories","categoriesRef","categories","getCategory","getChapters","chaptersRef","chapters","getChaptersByCategory","getTotalPositionCount","count","size","getPositionCountByCategory","getPositionCountByDifficulty","batchCreatePositions","batch","writeBatch","createdPositions","set","commit","batchUpdatePositions","updateData","update","batchDeletePositions","delete","firestore","info"],"mappings":"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"}