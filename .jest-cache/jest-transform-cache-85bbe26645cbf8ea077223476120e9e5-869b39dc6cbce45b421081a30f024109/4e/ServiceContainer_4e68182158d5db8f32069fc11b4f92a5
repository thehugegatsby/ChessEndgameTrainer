e7caa7149b9c612bc66cab8ebd417489
/**
 * @file Service Container Implementation
 * @module services/container/ServiceContainer
 *
 * @description
 * Lightweight dependency injection container for platform services.
 * Provides a centralized way to manage service instances and their dependencies,
 * supporting both singleton and factory patterns with circular dependency detection.
 *
 * @remarks
 * Key features:
 * - Lazy service instantiation
 * - Singleton and factory patterns
 * - Circular dependency detection
 * - Mock services for testing
 * - Browser API abstraction
 * - Type-safe service registry
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ServiceContainer", {
    enumerable: true,
    get: function() {
        return ServiceContainer;
    }
});
const _types = require("./types");
const _mocks = require("./mocks");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
class ServiceContainer {
    /**
   * Create a production container with real browser APIs
   *
   * @static
   * @returns {ServiceContainer} Container configured for production use
   *
   * @example
   * ```typescript
   * const container = ServiceContainer.createProductionContainer();
   * const platform = container.get('platform');
   * ```
   */ static createProductionContainer() {
        const container = new ServiceContainer();
        if (typeof window !== "undefined") {
            container.registerBrowserAPIs({
                localStorage: window.localStorage,
                sessionStorage: window.sessionStorage,
                navigator: window.navigator,
                window: window,
                document: window.document,
                performance: window.performance
            });
            // Register platform services
            container.registerPlatformServices();
        }
        return container;
    }
    /**
   * Create a test container with browser API mocks
   *
   * @description
   * This is the main entry point for Jest tests. Creates a container with
   * mocked browser APIs and platform services suitable for testing.
   *
   * @static
   * @param {Partial<IBrowserAPIs>} [mockAPIs] - Optional custom mock implementations
   * @returns {ServiceContainer} Container configured for testing
   *
   * @example
   * ```typescript
   * // In a test file
   * const container = ServiceContainer.createTestContainer({
   *   localStorage: customMockStorage
   * });
   *
   * const storage = container.get('storage');
   * await storage.save('key', 'value');
   * ```
   */ static createTestContainer(mockAPIs) {
        const container = new ServiceContainer();
        // Register mock browser APIs
        const apis = {
            localStorage: (0, _mocks.createMockStorage)(),
            sessionStorage: (0, _mocks.createMockStorage)(),
            navigator: (0, _mocks.createMockNavigator)(),
            window: (0, _mocks.createMockWindow)(),
            document: (0, _mocks.createMockDocument)(),
            performance: (0, _mocks.createMockPerformance)(),
            ...mockAPIs
        };
        container.registerBrowserAPIs(apis);
        // Register platform services with mocked dependencies
        container.registerPlatformServices();
        return container;
    }
    /**
   * Register a service with type-safe key
   *
   * @template K - Key from the ServiceRegistry type
   * @param {K} key - Service identifier from ServiceRegistry
   * @param {ServiceFactory<ServiceRegistry[K]>} factory - Factory function to create service
   * @throws {ServiceAlreadyRegisteredError} If service is already registered
   *
   * @example
   * ```typescript
   * container.register('storage', (container) => {
   *   const platform = container.get('platform');
   *   return new StorageService(platform);
   * });
   * ```
   */ register(key, factory) {
        this.registerInternal(key, factory);
    }
    /**
   * Register a service with custom key
   */ registerCustom(key, factory) {
        this.registerInternal(key, factory);
    }
    /**
   * Internal registration method
   */ registerInternal(key, factory) {
        if (this.config.validateKeys && this.factories.has(key)) {
            throw new _types.ServiceAlreadyRegisteredError(key);
        }
        this.config.logger(`Registering service: ${key}`);
        this.factories.set(key, factory);
        // Clear existing instance if re-registering
        if (this.instances.has(key)) {
            this.instances.delete(key);
        }
    }
    /**
   * Resolve a service with type-safe key
   */ resolve(key) {
        return this.resolveInternal(key);
    }
    /**
   * Resolve a custom service
   */ resolveCustom(key) {
        return this.resolveInternal(key);
    }
    /**
   * Internal resolution method
   */ resolveInternal(key) {
        // Check for circular dependencies
        if (this.resolving.has(key)) {
            const chain = Array.from(this.resolving);
            chain.push(key);
            throw new _types.CircularDependencyError(chain);
        }
        // Return existing instance if using singletons
        if (this.config.useSingletons && this.instances.has(key)) {
            this.config.logger(`Returning cached instance: ${key}`);
            return this.instances.get(key);
        }
        // Check if factory is registered
        const factory = this.factories.get(key);
        if (!factory) {
            throw new _types.ServiceNotFoundError(key);
        }
        // Mark as resolving for circular dependency detection
        this.resolving.add(key);
        try {
            this.config.logger(`Creating instance: ${key}`);
            const instance = factory(this);
            // Cache instance if using singletons
            if (this.config.useSingletons) {
                this.instances.set(key, instance);
            }
            return instance;
        } finally{
            // Always remove from resolving set
            this.resolving.delete(key);
        }
    }
    /**
   * Check if service is registered (type-safe)
   */ has(key) {
        return this.factories.has(key);
    }
    /**
   * Check if custom service is registered
   */ hasCustom(key) {
        return this.factories.has(key);
    }
    /**
   * Clear all resolved instances
   */ clearInstances() {
        this.config.logger("Clearing all service instances");
        this.instances.clear();
        this.resolving.clear();
    }
    /**
   * Get all registered service keys
   */ getRegisteredKeys() {
        return Array.from(this.factories.keys());
    }
    /**
   * Get container statistics (useful for debugging)
   */ getStats() {
        return {
            registeredServices: this.factories.size,
            resolvedInstances: this.instances.size,
            currentlyResolving: this.resolving.size
        };
    }
    /**
   * Register browser APIs abstraction
   */ registerBrowserAPIs(apis) {
        // Register complete browser APIs object
        if (apis.localStorage && apis.navigator && apis.window && apis.document && apis.performance) {
            this.registerCustom("browser.apis", ()=>({
                    localStorage: apis.localStorage,
                    sessionStorage: apis.sessionStorage || apis.window.sessionStorage,
                    navigator: apis.navigator,
                    window: apis.window,
                    document: apis.document,
                    performance: apis.performance
                }));
        }
        // Register individual APIs
        if (apis.localStorage) {
            this.registerCustom("browser.localStorage", ()=>apis.localStorage);
        }
        if (apis.navigator) {
            this.registerCustom("browser.navigator", ()=>apis.navigator);
        }
        if (apis.window) {
            this.registerCustom("browser.window", ()=>apis.window);
        }
        if (apis.document) {
            this.registerCustom("browser.document", ()=>apis.document);
        }
        if (apis.performance) {
            this.registerCustom("browser.performance", ()=>apis.performance);
        }
    }
    /**
   * Register platform services using the existing WebPlatformService
   */ registerPlatformServices() {
        // For Phase 1, we keep it simple and register a factory that will
        // import WebPlatformService when first accessed
        this.registerCustom("platform.service", ()=>{
            const { WebPlatformService } = require("../platform/web/WebPlatformService");
            return new WebPlatformService();
        });
        // Register individual services that delegate to the main service
        this.register("platform.storage", (container)=>{
            const platformService = container.resolveCustom("platform.service");
            return platformService.storage;
        });
        this.register("platform.notifications", (container)=>{
            const platformService = container.resolveCustom("platform.service");
            return platformService.notifications;
        });
        this.register("platform.device", (container)=>{
            const platformService = container.resolveCustom("platform.service");
            return platformService.device;
        });
        this.register("platform.performance", (container)=>{
            const platformService = container.resolveCustom("platform.service");
            return platformService.performance;
        });
        this.register("platform.clipboard", (container)=>{
            const platformService = container.resolveCustom("platform.service");
            return platformService.clipboard;
        });
        this.register("platform.share", (container)=>{
            const platformService = container.resolveCustom("platform.service");
            return platformService.share;
        });
        this.register("platform.analytics", (container)=>{
            const platformService = container.resolveCustom("platform.service");
            return platformService.analytics;
        });
    }
    /**
   * Create a child container with same factories but separate instances
   */ createChild(config) {
        const child = new ServiceContainer({
            ...this.config,
            ...config
        });
        // Copy all factories to child
        this.factories.forEach((factory, key)=>{
            child.factories.set(key, factory);
        });
        return child;
    }
    /**
   * Creates a new service container
   *
   * @param {ServiceContainerConfig} config - Configuration options
   * @param {boolean} [config.useSingletons=true] - Whether to cache service instances
   * @param {boolean} [config.validateKeys=true] - Whether to validate service keys
   * @param {Function} [config.logger] - Optional logger function
   */ constructor(config = {}){
        _define_property(this, "factories", new Map());
        _define_property(this, "instances", new Map());
        _define_property(this, "resolving", new Set()); // For circular dependency detection
        _define_property(this, "config", void 0);
        this.config = {
            useSingletons: true,
            validateKeys: true,
            logger: config.logger || (()=>{}),
            ...config
        };
    }
}

//# sourceMappingURL=data:application/json;base64,