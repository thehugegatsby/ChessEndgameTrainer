{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/orchestrators/handlePlayerMove/MoveValidator.ts"],"sourcesContent":["/**\n * @file Move validation module\n * @module store/orchestrators/handlePlayerMove/MoveValidator\n *\n * @description\n * Handles move validation logic including turn validation,\n * move legality checking, and game state verification.\n */\n\nimport type { Move as ChessJsMove } from \"chess.js\";\nimport { chessService } from \"@shared/services/ChessService\";\nimport type { TrainingState } from \"@shared/store/slices/types\";\n\n/**\n * Result of move validation containing validity status and error information\n * @interface ValidationResult\n */\nexport interface ValidationResult {\n  /** Whether the move is valid */\n  isValid: boolean;\n  /** Error message if move is invalid */\n  errorMessage?: string;\n}\n\n/**\n * Game state information for comprehensive game status checking\n * @interface GameStateInfo\n */\nexport interface GameStateInfo {\n  /** Whether the game has ended */\n  isGameOver: boolean;\n  /** Whether the position is checkmate */\n  isCheckmate: boolean;\n  /** Whether the position is a draw */\n  isDraw: boolean;\n  /** Whether the position is stalemate */\n  isStalemate: boolean;\n}\n\n/**\n * Validates and manages chess move validation\n * @class MoveValidator\n *\n * @description\n * Handles comprehensive move validation including:\n * - Move legality using chess.js engine\n * - Game state verification (turn, game over checks)\n * - Error message generation for UI feedback\n *\n * @example\n * ```typescript\n * const validator = new MoveValidator();\n * const result = await validator.validateMove(\"e2-e4\");\n * if (!result.isValid) {\n *   console.log(result.errorMessage);\n * }\n * ```\n */\nexport class MoveValidator {\n  /**\n   * Validates if it's the player's turn and opponent is not thinking\n   *\n   * @param state - Current training state\n   * @returns True if player can move\n   */\n  validateTurn(state: TrainingState): boolean {\n    return state.isPlayerTurn && !state.isOpponentThinking;\n  }\n\n  /**\n   * Validates if a move is legal according to chess rules\n   *\n   * @param move - The move to validate\n   * @returns Validation result with error message if invalid\n   */\n  validateMove(\n    move:\n      | ChessJsMove\n      | { from: string; to: string; promotion?: string }\n      | string,\n  ): ValidationResult {\n    try {\n      const isValid = chessService.validateMove(move);\n\n      if (!isValid) {\n        return {\n          isValid: false,\n          errorMessage: \"Invalid move\",\n        };\n      }\n\n      return { isValid: true };\n    } catch (error) {\n      return {\n        isValid: false,\n        errorMessage: error instanceof Error ? error.message : \"Invalid move\",\n      };\n    }\n  }\n\n  /**\n   * Checks the current game state\n   *\n   * @returns Current game state information\n   */\n  checkGameState(): GameStateInfo {\n    return {\n      isGameOver: chessService.isGameOver(),\n      isCheckmate: chessService.isCheckmate(),\n      isDraw: chessService.isDraw(),\n      isStalemate: chessService.isStalemate(),\n    };\n  }\n}\n"],"names":["MoveValidator","validateTurn","state","isPlayerTurn","isOpponentThinking","validateMove","move","isValid","chessService","errorMessage","error","Error","message","checkGameState","isGameOver","isCheckmate","isDraw","isStalemate"],"mappings":"AAAA;;;;;;;CAOC;;;;+BAmDYA;;;eAAAA;;;8BAhDgB;AAgDtB,MAAMA;IACX;;;;;GAKC,GACDC,aAAaC,KAAoB,EAAW;QAC1C,OAAOA,MAAMC,YAAY,IAAI,CAACD,MAAME,kBAAkB;IACxD;IAEA;;;;;GAKC,GACDC,aACEC,IAGU,EACQ;QAClB,IAAI;YACF,MAAMC,UAAUC,0BAAY,CAACH,YAAY,CAACC;YAE1C,IAAI,CAACC,SAAS;gBACZ,OAAO;oBACLA,SAAS;oBACTE,cAAc;gBAChB;YACF;YAEA,OAAO;gBAAEF,SAAS;YAAK;QACzB,EAAE,OAAOG,OAAO;YACd,OAAO;gBACLH,SAAS;gBACTE,cAAcC,iBAAiBC,QAAQD,MAAME,OAAO,GAAG;YACzD;QACF;IACF;IAEA;;;;GAIC,GACDC,iBAAgC;QAC9B,OAAO;YACLC,YAAYN,0BAAY,CAACM,UAAU;YACnCC,aAAaP,0BAAY,CAACO,WAAW;YACrCC,QAAQR,0BAAY,CAACQ,MAAM;YAC3BC,aAAaT,0BAAY,CAACS,WAAW;QACvC;IACF;AACF"}