{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/utils/createTestContainer.ts"],"sourcesContent":["/**\n * Test Container Utilities\n * Easy setup for Jest tests with ServiceContainer\n */\n\nimport React from \"react\";\nimport {\n  ServiceContainer,\n  IServiceContainer,\n} from \"@shared/services/container\";\nimport { BrowserAPIs } from \"@shared/services/platform/web/WebPlatformService\";\nimport { MockStorage } from \"./MockStorage\";\n\n/**\n * Service overrides for specific tests\n */\nexport interface TestServiceOverrides {\n  localStorage?: Storage;\n  sessionStorage?: Storage;\n  navigator?: Navigator;\n  window?: Window;\n  document?: Document;\n  performance?: Performance;\n}\n\n/**\n * Create a test container with optional overrides\n * Main entry point for Jest tests - replaces global localStorage mocks\n */\nexport function createTestContainer(\n  overrides?: TestServiceOverrides,\n): IServiceContainer {\n  const container = new ServiceContainer();\n\n  // Create mock instances\n  const mockStorage = overrides?.localStorage || new MockStorage();\n  const mockNavigator =\n    overrides?.navigator ||\n    ({\n      userAgent: \"Mozilla/5.0 (Test Environment)\",\n      onLine: true,\n      deviceMemory: 8,\n      clipboard: {\n        writeText: jest.fn().mockResolvedValue(undefined),\n        readText: jest.fn().mockResolvedValue(\"mocked text\"),\n      },\n      share: jest.fn().mockResolvedValue(undefined),\n    } as any);\n\n  const mockWindow =\n    overrides?.window ||\n    ({\n      screen: { width: 1920, height: 1080 },\n      devicePixelRatio: 1,\n      localStorage: mockStorage,\n      sessionStorage: overrides?.sessionStorage || new MockStorage(),\n    } as any);\n\n  const mockDocument =\n    overrides?.document ||\n    ({\n      createElement: jest.fn(),\n      body: { appendChild: jest.fn(), removeChild: jest.fn() },\n    } as any);\n\n  const mockPerformance =\n    overrides?.performance ||\n    ({\n      now: jest.fn().mockReturnValue(1000),\n    } as any);\n\n  // Build browser APIs object\n  const browserAPIs: BrowserAPIs = {\n    localStorage: mockStorage,\n    sessionStorage: mockWindow.sessionStorage,\n    navigator: mockNavigator,\n    window: mockWindow,\n    document: mockDocument,\n    performance: mockPerformance,\n  };\n\n  // Register browser APIs individually for direct access\n  container.registerCustom(\n    \"browser.localStorage\",\n    () => browserAPIs.localStorage,\n  );\n  container.registerCustom(\"browser.navigator\", () => browserAPIs.navigator);\n  container.registerCustom(\"browser.window\", () => browserAPIs.window!);\n  container.registerCustom(\"browser.document\", () => browserAPIs.document!);\n  container.registerCustom(\n    \"browser.performance\",\n    () => browserAPIs.performance!,\n  );\n\n  // Register the WebPlatformService with injected mock dependencies\n  container.registerCustom(\"platform.service\", () => {\n    const {\n      WebPlatformService,\n    } = require(\"@shared/services/platform/web/WebPlatformService\");\n    return new WebPlatformService(browserAPIs);\n  });\n\n  // Register individual platform services that delegate to the main service\n  container.register(\"platform.storage\", (c) => {\n    const platformService = c.resolveCustom(\"platform.service\") as any;\n    return platformService.storage;\n  });\n\n  container.register(\"platform.notifications\", (c) => {\n    const platformService = c.resolveCustom(\"platform.service\") as any;\n    return platformService.notifications;\n  });\n\n  container.register(\"platform.device\", (c) => {\n    const platformService = c.resolveCustom(\"platform.service\") as any;\n    return platformService.device;\n  });\n\n  container.register(\"platform.performance\", (c) => {\n    const platformService = c.resolveCustom(\"platform.service\") as any;\n    return platformService.performance;\n  });\n\n  container.register(\"platform.clipboard\", (c) => {\n    const platformService = c.resolveCustom(\"platform.service\") as any;\n    return platformService.clipboard;\n  });\n\n  container.register(\"platform.share\", (c) => {\n    const platformService = c.resolveCustom(\"platform.service\") as any;\n    return platformService.share;\n  });\n\n  container.register(\"platform.analytics\", (c) => {\n    const platformService = c.resolveCustom(\"platform.service\") as any;\n    return platformService.analytics;\n  });\n\n  return container;\n}\n\n/**\n * Setup function for beforeEach hooks\n * Ensures clean container per test\n */\nexport function setupTestContainer(\n  overrides?: TestServiceOverrides,\n): () => IServiceContainer {\n  let container: IServiceContainer;\n\n  beforeEach(() => {\n    container = createTestContainer(overrides);\n  });\n\n  return () => container;\n}\n\n/**\n * React Testing Library helper\n * Provides ServiceContainer context for component tests\n */\nexport function createTestWrapper(overrides?: TestServiceOverrides) {\n  const container = createTestContainer(overrides);\n\n  return function TestWrapper({ children }: { children: React.ReactNode }) {\n    // Dynamic import to avoid SSR issues\n    const { ServiceProvider } = require(\"@shared/services/container/adapter\");\n    return React.createElement(ServiceProvider, { container }, children);\n  };\n}\n\n/**\n * Mock localStorage that works with or without Jest\n */\nexport function createMockLocalStorage(): Storage {\n  const store: Record<string, string> = {};\n\n  const mockFn = (impl: (...args: any[]) => any) => {\n    if (typeof jest !== \"undefined\" && jest.fn) {\n      return jest.fn(impl);\n    }\n    return impl;\n  };\n\n  return {\n    getItem: mockFn((key: string) => store[key] || null),\n    setItem: mockFn((key: string, value: string) => {\n      store[key] = value;\n    }),\n    removeItem: mockFn((key: string) => {\n      delete store[key];\n    }),\n    clear: mockFn(() => {\n      Object.keys(store).forEach((key) => delete store[key]);\n    }),\n    key: mockFn((index: number) => {\n      const keys = Object.keys(store);\n      return keys[index] || null;\n    }),\n    get length() {\n      return Object.keys(store).length;\n    },\n  };\n}\n\n/**\n * Pre-configured test scenarios for common use cases\n */\nexport const TestScenarios = {\n  /**\n   * Default test container - most common use case\n   */\n  default: () => createTestContainer(),\n\n  /**\n   * localStorage with pre-populated data\n   */\n  withStorageData: (data: Record<string, string>) => {\n    const mockStorage = createMockLocalStorage();\n    Object.entries(data).forEach(([key, value]) => {\n      mockStorage.setItem(key, value);\n    });\n\n    return createTestContainer({ localStorage: mockStorage });\n  },\n\n  /**\n   * Offline scenario\n   */\n  offline: () => {\n    const mockNavigator = {\n      onLine: false,\n      userAgent: \"Mozilla/5.0 (Test Environment - Offline)\",\n      deviceMemory: 8,\n      connection: { type: \"none\", effectiveType: undefined, downlink: 0 },\n      mozConnection: { type: \"none\", effectiveType: undefined, downlink: 0 },\n      webkitConnection: { type: \"none\", effectiveType: undefined, downlink: 0 },\n      clipboard: {\n        writeText: jest.fn().mockResolvedValue(undefined),\n        readText: jest.fn().mockResolvedValue(\"mocked text\"),\n      },\n      share: jest.fn().mockResolvedValue(undefined),\n    } as any;\n\n    return createTestContainer({ navigator: mockNavigator });\n  },\n\n  /**\n   * Mobile device scenario\n   */\n  mobile: () => {\n    const mockNavigator = {\n      onLine: true,\n      userAgent: \"Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)\",\n    } as Navigator;\n\n    const mockWindow = {\n      screen: { width: 375, height: 667 },\n      devicePixelRatio: 2,\n    } as Window;\n\n    return createTestContainer({\n      navigator: mockNavigator,\n      window: mockWindow,\n    });\n  },\n\n  /**\n   * Low memory device scenario\n   */\n  lowMemory: () => {\n    const mockNavigator = {\n      deviceMemory: 2, // 2GB\n      onLine: true,\n      userAgent: \"Mozilla/5.0 (Test Environment - Low Memory)\",\n      clipboard: {\n        writeText: jest.fn().mockResolvedValue(undefined),\n        readText: jest.fn().mockResolvedValue(\"mocked text\"),\n      },\n      share: jest.fn().mockResolvedValue(undefined),\n    } as any;\n\n    return createTestContainer({ navigator: mockNavigator });\n  },\n};\n\n/**\n * Assertion helpers for common test patterns\n */\nexport const TestAssertions = {\n  /**\n   * Assert localStorage operations\n   */\n  expectStorageCall: (\n    storage: Storage,\n    method: keyof Storage,\n    ...args: any[]\n  ) => {\n    if (typeof jest !== \"undefined\") {\n      expect(storage[method]).toHaveBeenCalledWith(...args);\n    }\n  },\n\n  /**\n   * Assert storage state\n   */\n  expectStorageState: (\n    storage: Storage,\n    expectedData: Record<string, string>,\n  ) => {\n    Object.entries(expectedData).forEach(([key, value]) => {\n      expect(storage.getItem(key)).toBe(value);\n    });\n  },\n\n  /**\n   * Assert storage is empty\n   */\n  expectStorageEmpty: (storage: Storage) => {\n    expect(storage.length).toBe(0);\n  },\n};\n"],"names":["TestAssertions","TestScenarios","createMockLocalStorage","createTestContainer","createTestWrapper","setupTestContainer","overrides","container","ServiceContainer","mockStorage","localStorage","MockStorage","mockNavigator","navigator","userAgent","onLine","deviceMemory","clipboard","writeText","jest","fn","mockResolvedValue","undefined","readText","share","mockWindow","window","screen","width","height","devicePixelRatio","sessionStorage","mockDocument","document","createElement","body","appendChild","removeChild","mockPerformance","performance","now","mockReturnValue","browserAPIs","registerCustom","WebPlatformService","require","register","c","platformService","resolveCustom","storage","notifications","device","analytics","beforeEach","TestWrapper","children","ServiceProvider","React","store","mockFn","impl","getItem","key","setItem","value","removeItem","clear","Object","keys","forEach","index","length","default","withStorageData","data","entries","offline","connection","type","effectiveType","downlink","mozConnection","webkitConnection","mobile","lowMemory","expectStorageCall","method","args","expect","toHaveBeenCalledWith","expectStorageState","expectedData","toBe","expectStorageEmpty"],"mappings":"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"}