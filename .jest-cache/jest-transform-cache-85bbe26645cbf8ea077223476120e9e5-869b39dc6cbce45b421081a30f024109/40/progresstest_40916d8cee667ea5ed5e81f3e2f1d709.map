{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/types/progress.test.ts"],"sourcesContent":["/**\n * @file Unit tests for progress branded types\n * @description Comprehensive tests for DueCard branded types and utilities\n */\n\nimport {\n  DueCard,\n  isDueCard,\n  toDueCard,\n  filterDueCards,\n  fromDueCard,\n  areDueCards,\n  createDueCardsMap,\n  calculateDueCardsStats\n} from '@shared/types/progress';\nimport type { CardProgress } from '@shared/store/slices/types';\n\n// Test helpers\nconst createTestCard = (id: string, nextReviewAt: number): CardProgress => ({\n  id,\n  nextReviewAt,\n  lastReviewedAt: Date.now() - 86400000, // 24 hours ago\n  interval: 1,\n  repetition: 1,\n  efactor: 2.5,\n  lapses: 0\n});\n\nconst createDueTestCard = (id: string): CardProgress => createTestCard(id, Date.now() - 1000);\nconst createFutureTestCard = (id: string): CardProgress => createTestCard(id, Date.now() + 86400000);\n\ndescribe('Progress Branded Types', () => {\n  const now = Date.now();\n  \n  describe('isDueCard', () => {\n    it('should return true for cards that are due', () => {\n      const dueCard = createDueTestCard('test-1');\n      expect(isDueCard(dueCard, now)).toBe(true);\n    });\n    \n    it('should return false for cards that are not due', () => {\n      const futureCard = createFutureTestCard('test-1');\n      expect(isDueCard(futureCard, now)).toBe(false);\n    });\n    \n    it('should return true for cards due exactly now', () => {\n      const exactCard = createTestCard('test-1', now);\n      expect(isDueCard(exactCard, now)).toBe(true);\n    });\n    \n    it('should handle invalid card structures gracefully', () => {\n      const invalidCard = { id: 'test' } as CardProgress;\n      expect(isDueCard(invalidCard, now)).toBe(false);\n    });\n    \n    it('should handle null/undefined cards', () => {\n      expect(isDueCard(null as any, now)).toBe(false);\n      expect(isDueCard(undefined as any, now)).toBe(false);\n    });\n    \n    it('should use current time when now parameter is not provided', () => {\n      const dueCard = createTestCard('test-1', Date.now() - 1000);\n      expect(isDueCard(dueCard)).toBe(true);\n    });\n  });\n  \n  describe('toDueCard', () => {\n    it('should successfully convert a due card', () => {\n      const card = createDueTestCard('test-1');\n      const dueCard = toDueCard(card, now);\n      \n      expect(dueCard).toMatchObject(card);\n      expect(dueCard.__isDue).toBe(true);\n      expect(dueCard.__brand).toBe('DueCard');\n    });\n    \n    it('should throw error for non-due cards', () => {\n      const futureCard = createFutureTestCard('test-1');\n      \n      expect(() => toDueCard(futureCard, now)).toThrow();\n      expect(() => toDueCard(futureCard, now)).toThrow(/not due for review/);\n    });\n    \n    it('should include detailed error information', () => {\n      const futureCard = createFutureTestCard('test-1');\n      \n      try {\n        toDueCard(futureCard, now);\n      } catch (error) {\n        expect((error as Error).message).toContain('test-1');\n        expect((error as Error).message).toContain('Next review:');\n        expect((error as Error).message).toContain('Current:');\n      }\n    });\n    \n    it('should use current time when now parameter is not provided', () => {\n      const dueCard = createTestCard('test-1', Date.now() - 1000);\n      const result = toDueCard(dueCard);\n      \n      expect(result.__isDue).toBe(true);\n      expect(result.__brand).toBe('DueCard');\n    });\n  });\n  \n  describe('filterDueCards', () => {\n    it('should filter due cards from mixed collection', () => {\n      const cards = [\n        createDueTestCard('due-1'),\n        createFutureTestCard('future-1'),\n        createDueTestCard('due-2'),\n        createFutureTestCard('future-2')\n      ];\n      \n      const dueCards = filterDueCards(cards, now);\n      \n      expect(dueCards).toHaveLength(2);\n      expect(dueCards[0].id).toBe('due-1');\n      expect(dueCards[1].id).toBe('due-2');\n      expect(dueCards[0].__isDue).toBe(true);\n      expect(dueCards[0].__brand).toBe('DueCard');\n    });\n    \n    it('should return empty array for no due cards', () => {\n      const cards = [\n        createFutureTestCard('future-1'),\n        createFutureTestCard('future-2')\n      ];\n      \n      const dueCards = filterDueCards(cards, now);\n      expect(dueCards).toHaveLength(0);\n    });\n    \n    it('should handle empty array input', () => {\n      const dueCards = filterDueCards([], now);\n      expect(dueCards).toHaveLength(0);\n    });\n    \n    it('should handle invalid array input gracefully', () => {\n      const dueCards = filterDueCards(null as any, now);\n      expect(dueCards).toHaveLength(0);\n    });\n    \n    it('should skip invalid cards in the collection', () => {\n      const cards = [\n        createDueTestCard('due-1'),\n        { id: 'invalid' } as CardProgress, // Missing nextReviewAt\n        createDueTestCard('due-2'),\n        null as any\n      ];\n      \n      const dueCards = filterDueCards(cards, now);\n      expect(dueCards).toHaveLength(2);\n      expect(dueCards[0].id).toBe('due-1');\n      expect(dueCards[1].id).toBe('due-2');\n    });\n    \n    it('should handle large collections efficiently', () => {\n      // Create large collection\n      const largeCollection = Array.from({ length: 1000 }, (_, i) => \n        i % 2 === 0 ? createDueTestCard(`due-${i}`) : createFutureTestCard(`future-${i}`)\n      );\n      \n      const start = performance.now();\n      const dueCards = filterDueCards(largeCollection, now);\n      const duration = performance.now() - start;\n      \n      expect(dueCards).toHaveLength(500); // Half should be due\n      expect(duration).toBeLessThan(50); // Should be fast (<50ms)\n    });\n    \n    it('should use current time when now parameter is not provided', () => {\n      const cards = [createTestCard('test-1', Date.now() - 1000)];\n      const dueCards = filterDueCards(cards);\n      \n      expect(dueCards).toHaveLength(1);\n    });\n  });\n  \n  describe('fromDueCard', () => {\n    it('should extract CardProgress from DueCard', () => {\n      const originalCard = createDueTestCard('test-1');\n      const dueCard = toDueCard(originalCard, now);\n      const extracted = fromDueCard(dueCard);\n      \n      expect(extracted).toMatchObject(originalCard);\n      expect(extracted).not.toHaveProperty('__isDue');\n      expect(extracted).not.toHaveProperty('__brand');\n    });\n  });\n  \n  describe('areDueCards', () => {\n    it('should return true for array of DueCard objects', () => {\n      const cards = [\n        createDueTestCard('due-1'),\n        createDueTestCard('due-2')\n      ];\n      const dueCards = filterDueCards(cards, now);\n      \n      expect(areDueCards(dueCards)).toBe(true);\n    });\n    \n    it('should return false for mixed array', () => {\n      const cards = [\n        createDueTestCard('due-1'),\n        createDueTestCard('due-2')\n      ];\n      const dueCards = filterDueCards(cards, now);\n      const mixed = [...dueCards, createFutureTestCard('future-1')];\n      \n      expect(areDueCards(mixed)).toBe(false);\n    });\n    \n    it('should return true for empty array', () => {\n      expect(areDueCards([])).toBe(true);\n    });\n    \n    it('should return false for invalid objects', () => {\n      const invalid = [{ id: 'test' }, null, undefined];\n      expect(areDueCards(invalid)).toBe(false);\n    });\n  });\n  \n  describe('createDueCardsMap', () => {\n    it('should create map with positionId keys', () => {\n      const cards = [\n        createDueTestCard('due-1'),\n        createDueTestCard('due-2')\n      ];\n      const dueCards = filterDueCards(cards, now);\n      const map = createDueCardsMap(dueCards);\n      \n      expect(map.size).toBe(2);\n      expect(map.has('due-1')).toBe(true);\n      expect(map.has('due-2')).toBe(true);\n      expect(map.get('due-1')).toMatchObject(dueCards[0]);\n    });\n    \n    it('should handle empty array', () => {\n      const map = createDueCardsMap([]);\n      expect(map.size).toBe(0);\n    });\n    \n    it('should skip cards without id', () => {\n      const cards = [createDueTestCard('due-1')];\n      const dueCards = filterDueCards(cards, now);\n      // Remove id from one card\n      delete (dueCards[0] as any).id;\n      \n      const map = createDueCardsMap(dueCards);\n      expect(map.size).toBe(0);\n    });\n  });\n  \n  describe('calculateDueCardsStats', () => {\n    it('should calculate correct statistics', () => {\n      const allCards = [\n        createDueTestCard('due-1'),\n        createDueTestCard('due-2'), \n        createFutureTestCard('future-1'),\n        createFutureTestCard('future-2')\n      ];\n      const dueCards = filterDueCards(allCards, now);\n      \n      const stats = calculateDueCardsStats(allCards, dueCards, now);\n      \n      expect(stats.totalCards).toBe(4);\n      expect(stats.dueCount).toBe(2);\n      expect(stats.duePercentage).toBe(50);\n      expect(stats.nextDueAt).toBeTruthy();\n      expect(typeof stats.averageInterval).toBe('number');\n    });\n    \n    it('should handle empty collections', () => {\n      const stats = calculateDueCardsStats([], [], now);\n      \n      expect(stats.totalCards).toBe(0);\n      expect(stats.dueCount).toBe(0);\n      expect(stats.duePercentage).toBe(0);\n      expect(stats.nextDueAt).toBeNull();\n      expect(stats.averageInterval).toBe(0);\n    });\n    \n    it('should handle no future due cards', () => {\n      const allCards = [\n        createDueTestCard('due-1'),\n        createDueTestCard('due-2')\n      ];\n      const dueCards = filterDueCards(allCards, now);\n      \n      const stats = calculateDueCardsStats(allCards, dueCards, now);\n      \n      expect(stats.nextDueAt).toBeNull();\n    });\n    \n    it('should calculate average interval correctly', () => {\n      const cards = [\n        createDueTestCard('due-1'),\n        createDueTestCard('due-2')\n      ];\n      // Set specific intervals\n      cards[0].interval = 2;\n      cards[1].interval = 4;\n      \n      const dueCards = filterDueCards(cards, now);\n      const stats = calculateDueCardsStats(cards, dueCards, now);\n      \n      expect(stats.averageInterval).toBe(3); // (2 + 4) / 2\n    });\n    \n    it('should find next due card correctly', () => {\n      const nextDueTime = now + 3600000; // 1 hour from now\n      const allCards = [\n        createDueTestCard('due-1'),\n        createTestCard('next-due', nextDueTime),\n        createTestCard('later-due', now + 7200000) // 2 hours from now\n      ];\n      const dueCards = filterDueCards(allCards, now);\n      \n      const stats = calculateDueCardsStats(allCards, dueCards, now);\n      \n      expect(stats.nextDueAt).toBe(nextDueTime);\n    });\n  });\n  \n  describe('TypeScript type checking', () => {\n    it('should enforce DueCard branded type at compile time', () => {\n      const card = createDueTestCard('test-1');\n      const dueCard = toDueCard(card, now);\n      \n      // These should compile without errors\n      const branded: DueCard = dueCard;\n      expect(branded.__isDue).toBe(true);\n      expect(branded.__brand).toBe('DueCard');\n      \n      // This should be caught by TypeScript (though not at runtime)\n      // const invalid: DueCard = card; // Would fail TypeScript compilation\n    });\n  });\n});"],"names":["createTestCard","id","nextReviewAt","lastReviewedAt","Date","now","interval","repetition","efactor","lapses","createDueTestCard","createFutureTestCard","describe","it","dueCard","expect","isDueCard","toBe","futureCard","exactCard","invalidCard","undefined","card","toDueCard","toMatchObject","__isDue","__brand","toThrow","error","message","toContain","result","cards","dueCards","filterDueCards","toHaveLength","largeCollection","Array","from","length","_","i","start","performance","duration","toBeLessThan","originalCard","extracted","fromDueCard","not","toHaveProperty","areDueCards","mixed","invalid","map","createDueCardsMap","size","has","get","allCards","stats","calculateDueCardsStats","totalCards","dueCount","duePercentage","nextDueAt","toBeTruthy","averageInterval","toBeNull","nextDueTime","branded"],"mappings":"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"}