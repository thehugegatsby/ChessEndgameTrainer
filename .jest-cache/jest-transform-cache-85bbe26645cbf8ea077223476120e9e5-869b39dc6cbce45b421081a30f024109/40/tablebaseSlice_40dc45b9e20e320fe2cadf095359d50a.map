{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/slices/tablebaseSlice.ts"],"sourcesContent":["/**\n * @file Tablebase state slice for Zustand store\n * @module store/slices/tablebaseSlice\n * @description Manages tablebase API interactions, caching, and analysis state.\n * This slice handles communication with the Lichess tablebase API and maintains\n * evaluation results for chess positions.\n *\n * @example\n * ```typescript\n * // Using the tablebase slice in a component\n * import { useStore } from '@/store';\n * import { tablebaseSelectors } from '@/store/slices/tablebaseSlice';\n *\n * function TablebasePanel() {\n *   const analysisStatus = useStore(tablebaseSelectors.selectAnalysisStatus);\n *   const currentEval = useStore(tablebaseSelectors.selectCurrentEvaluation);\n *   const isLoading = useStore(tablebaseSelectors.selectIsLoading);\n *\n *   if (isLoading) return <Spinner />;\n *   if (currentEval) return <EvaluationDisplay eval={currentEval} />;\n * }\n * ```\n */\n\nimport { ImmerStateCreator, TablebaseSlice, TablebaseState, TablebaseActions } from \"./types\";\nimport type { PositionAnalysis } from \"@shared/types/evaluation\";\nimport type { AnalysisStatus } from \"../types\";\n\n/**\n * Initial state for the tablebase slice\n * Exported separately to enable proper store reset in tests\n */\nexport const initialTablebaseState = {\n  tablebaseMove: undefined as string | null | undefined,\n  analysisStatus: \"idle\" as AnalysisStatus,\n  evaluations: [] as PositionAnalysis[],\n  currentEvaluation: undefined as PositionAnalysis | undefined,\n};\n\n/**\n * Creates the initial tablebase state with default values\n * @deprecated Use initialTablebaseState export directly\n */\nexport const createInitialTablebaseState = () => ({ ...initialTablebaseState });\n\n/**\n * Creates the tablebase state (data only, no actions)\n *\n * @returns {TablebaseState} Tablebase state properties only\n *\n * @remarks\n * This function creates only the state properties for tablebase slice.\n * Actions are created separately to avoid Immer middleware stripping functions.\n *\n * @example\n * ```typescript\n * const tablebaseState = createTablebaseState();\n * const tablebaseActions = createTablebaseActions(set, get);\n * ```\n */\nexport const createTablebaseState = (): TablebaseState => ({\n  tablebaseMove: undefined as string | null | undefined,\n  analysisStatus: \"idle\" as AnalysisStatus,\n  evaluations: [],\n  currentEvaluation: undefined as PositionAnalysis | undefined,\n});\n\n/**\n * Creates the tablebase actions (functions only, no state)\n *\n * @param {Function} set - Zustand's set function for state updates\n * @returns {TablebaseActions} Tablebase action functions\n *\n * @remarks\n * This function creates only the action functions for tablebase slice.\n * Actions are kept separate from state to prevent Immer middleware from stripping them.\n *\n * @example\n * ```typescript\n * const tablebaseActions = createTablebaseActions(set, get);\n * ```\n */\nexport const createTablebaseActions = (\n  set: any,\n): TablebaseActions => ({\n\n  /**\n   * Sets the tablebase move for the current position\n   *\n   * @param {string|null|undefined} move - The tablebase move\n   *   - undefined: No tablebase lookup performed yet\n   *   - null: Position is a draw (no winning move)\n   *   - string: Best move in algebraic notation (e.g., \"e4\", \"Nf3\")\n   *\n   * @fires stateChange - When tablebase move is updated\n   *\n   * @remarks\n   * This action is typically called by orchestrators after receiving\n   * a response from the tablebase API. The three-state pattern allows\n   * distinguishing between \"not checked\", \"draw\", and \"has best move\".\n   *\n   * @example\n   * ```typescript\n   * // No lookup performed yet\n   * store.getState().setTablebaseMove(undefined);\n   *\n   * // Position is a draw\n   * store.getState().setTablebaseMove(null);\n   *\n   * // Best move found\n   * store.getState().setTablebaseMove(\"Ra8#\");\n   * ```\n   */\n  setTablebaseMove: (move: string | null | undefined) => {\n    set((state) => {\n      state.tablebase.tablebaseMove = move;\n    });\n  },\n\n  /**\n   * Sets the analysis status for tablebase operations\n   *\n   * @param {AnalysisStatus} status - The analysis status\n   *   - \"idle\": No analysis in progress\n   *   - \"loading\": Analysis is being performed\n   *   - \"success\": Analysis completed successfully\n   *   - \"error\": Analysis failed\n   *\n   * @fires stateChange - When analysis status changes\n   *\n   * @remarks\n   * This status is used to show loading spinners, handle errors,\n   * and coordinate UI state during async tablebase operations.\n   *\n   * @example\n   * ```typescript\n   * // Start analysis\n   * store.getState().setAnalysisStatus(\"loading\");\n   *\n   * // Analysis completed\n   * store.getState().setAnalysisStatus(\"success\");\n   *\n   * // Analysis failed\n   * store.getState().setAnalysisStatus(\"error\");\n   * ```\n   */\n  setAnalysisStatus: (status: AnalysisStatus) => {\n    set((state) => {\n      state.tablebase.analysisStatus = status;\n    });\n  },\n\n  /**\n   * Adds a position evaluation to the evaluations array\n   *\n   * @param {PositionAnalysis} evaluation - The position evaluation to add\n   *\n   * @fires stateChange - When evaluation is added\n   *\n   * @remarks\n   * This action appends evaluations to maintain a history of analyzed\n   * positions. Useful for showing analysis history or implementing\n   * client-side caching strategies. The array is not automatically\n   * limited in size - consider implementing cleanup if needed.\n   *\n   * @example\n   * ```typescript\n   * const evaluation: PositionAnalysis = {\n   *   fen: \"8/8/8/8/8/8/R7/K3k3 w - - 0 1\",\n   *   evaluation: {\n   *     wdl: 1000,\n   *     dtz: 5,\n   *     outcome: \"win\",\n   *     bestMove: \"Ra8#\"\n   *   },\n   *   topMoves: [...],\n   *   isTablebasePosition: true\n   * };\n   *\n   * store.getState().addEvaluation(evaluation);\n   * ```\n   */\n  addEvaluation: (evaluation: PositionAnalysis) => {\n    set((state) => {\n      state.tablebase.evaluations = [...state.tablebase.evaluations, evaluation];\n    });\n  },\n\n  /**\n   * Replaces the entire evaluations array\n   *\n   * @param {PositionAnalysis[]} evaluations - New evaluations array\n   *\n   * @fires stateChange - When evaluations are replaced\n   *\n   * @remarks\n   * Use this action to bulk update evaluations, clear history,\n   * or restore evaluations from a saved state. This replaces\n   * the entire array rather than merging.\n   *\n   * @example\n   * ```typescript\n   * // Clear all evaluations\n   * store.getState().setEvaluations([]);\n   *\n   * // Set specific evaluations\n   * store.getState().setEvaluations([\n   *   evaluation1,\n   *   evaluation2,\n   *   evaluation3\n   * ]);\n   *\n   * // Limit evaluation history\n   * const recentEvals = store.getState().evaluations.slice(-10);\n   * store.getState().setEvaluations(recentEvals);\n   * ```\n   */\n  setEvaluations: (evaluations: PositionAnalysis[]) => {\n    set((state) => {\n      state.tablebase.evaluations = evaluations;\n    });\n  },\n\n  /**\n   * Sets the current position evaluation\n   *\n   * @param {PositionAnalysis|undefined} evaluation - The current evaluation or undefined\n   *\n   * @fires stateChange - When current evaluation changes\n   *\n   * @remarks\n   * The current evaluation represents the active position being analyzed\n   * or displayed. This is separate from the evaluations array to allow\n   * for quick access without searching. Set to undefined when no position\n   * is actively selected.\n   *\n   * @example\n   * ```typescript\n   * // Set active evaluation\n   * store.getState().setCurrentEvaluation(evaluation);\n   *\n   * // Clear current evaluation\n   * store.getState().setCurrentEvaluation(undefined);\n   *\n   * // Update from evaluations array\n   * const latest = store.getState().evaluations[0];\n   * store.getState().setCurrentEvaluation(latest);\n   * ```\n   */\n  setCurrentEvaluation: (evaluation: PositionAnalysis | undefined) => {\n    set((state) => {\n      state.tablebase.currentEvaluation = evaluation;\n    });\n  },\n\n  /**\n   * Clears all tablebase state to initial values\n   *\n   * @fires stateChange - When state is cleared\n   *\n   * @remarks\n   * Resets all tablebase-related state to initial values. Useful when\n   * switching positions, starting a new game, or cleaning up. This is\n   * a complete reset - consider if you need to preserve some data.\n   *\n   * @example\n   * ```typescript\n   * // Clear all tablebase data\n   * store.getState().clearTablebaseState();\n   *\n   * // Common usage in game reset\n   * store.getState().resetGame();\n   * store.getState().clearTablebaseState();\n   * store.getState().resetTraining();\n   * ```\n   */\n  clearTablebaseState: () => {\n    set((state) => {\n      Object.assign(state.tablebase, createInitialTablebaseState());\n    });\n  },\n});\n\n/**\n * Legacy slice creator for backwards compatibility\n * @deprecated Use createTablebaseState() and createTablebaseActions() separately\n */\nexport const createTablebaseSlice: ImmerStateCreator<TablebaseSlice> = (\n  set,\n) => ({\n  ...createTablebaseState(),\n  ...createTablebaseActions(set),\n});\n\n/**\n * Selector functions for efficient state access\n *\n * @remarks\n * These selectors provide a consistent API for accessing tablebase state\n * and can be used with Zustand's subscribe mechanism for optimal\n * re-renders. Use these instead of inline selectors when possible.\n *\n * The selectors include both direct state access and computed values\n * for common use cases like loading states and move availability.\n *\n * @example\n * ```typescript\n * import { useStore } from '@/store';\n * import { tablebaseSelectors } from '@/store/slices/tablebaseSlice';\n *\n * // In a component\n * const isLoading = useStore(tablebaseSelectors.selectIsLoading);\n * const hasMove = useStore(tablebaseSelectors.selectHasTablebaseMove);\n * const evaluations = useStore(tablebaseSelectors.selectEvaluations);\n * ```\n */\nexport const tablebaseSelectors = {\n  /**\n   * Selects the tablebase move\n   * @param {TablebaseSlice} state - The tablebase slice of the store\n   * @returns {string|null|undefined} The tablebase move\n   */\n  selectTablebaseMove: (state: TablebaseSlice) => state.tablebaseMove,\n\n  /**\n   * Selects the analysis status\n   * @param {TablebaseSlice} state - The tablebase slice of the store\n   * @returns {AnalysisStatus} Current analysis status\n   */\n  selectAnalysisStatus: (state: TablebaseSlice) => state.analysisStatus,\n\n  /**\n   * Selects all evaluations\n   * @param {TablebaseSlice} state - The tablebase slice of the store\n   * @returns {PositionAnalysis[]} Array of position evaluations\n   */\n  selectEvaluations: (state: TablebaseSlice) => state.evaluations,\n\n  /**\n   * Selects the current evaluation\n   * @param {TablebaseSlice} state - The tablebase slice of the store\n   * @returns {PositionAnalysis|undefined} Current position evaluation\n   */\n  selectCurrentEvaluation: (state: TablebaseSlice) => state.currentEvaluation,\n\n  /**\n   * Selects whether analysis is currently loading\n   * @param {TablebaseSlice} state - The tablebase slice of the store\n   * @returns {boolean} True if analysis is in progress\n   */\n  selectIsLoading: (state: TablebaseSlice) =>\n    state.analysisStatus === \"loading\",\n\n  /**\n   * Selects whether analysis has completed successfully\n   * @param {TablebaseSlice} state - The tablebase slice of the store\n   * @returns {boolean} True if analysis succeeded\n   */\n  selectIsSuccess: (state: TablebaseSlice) =>\n    state.analysisStatus === \"success\",\n\n  /**\n   * Selects whether analysis has failed\n   * @param {TablebaseSlice} state - The tablebase slice of the store\n   * @returns {boolean} True if analysis failed\n   */\n  selectIsError: (state: TablebaseSlice) => state.analysisStatus === \"error\",\n\n  /**\n   * Selects whether a tablebase move is available\n   * @param {TablebaseSlice} state - The tablebase slice of the store\n   * @returns {boolean} True if a move is available (not undefined)\n   *\n   * @remarks\n   * Returns true even if move is null (draw), as this still represents\n   * a valid tablebase result. Only returns false if undefined.\n   */\n  selectHasTablebaseMove: (state: TablebaseSlice) =>\n    state.tablebaseMove !== undefined,\n\n  /**\n   * Selects whether the position is a draw according to tablebase\n   * @param {TablebaseSlice} state - The tablebase slice of the store\n   * @returns {boolean} True if position is a draw (move is null)\n   */\n  selectIsDrawPosition: (state: TablebaseSlice) => state.tablebaseMove === null,\n\n  /**\n   * Selects evaluation for a specific FEN\n   * @param {string} fen - The FEN to search for\n   * @returns {Function} Selector function that returns the evaluation or undefined\n   *\n   * @example\n   * ```typescript\n   * const eval = useStore(\n   *   tablebaseSelectors.selectEvaluationByFen(\"8/8/8/8/8/8/R7/K3k3 w - - 0 1\")\n   * );\n   * ```\n   */\n  selectEvaluationByFen: (fen: string) => (state: TablebaseSlice) =>\n    state.evaluations.find((e) => e.fen === fen),\n\n  /**\n   * Selects the number of cached evaluations\n   * @param {TablebaseSlice} state - The tablebase slice of the store\n   * @returns {number} Count of evaluations in cache\n   */\n  selectEvaluationCount: (state: TablebaseSlice) => state.evaluations.length,\n};\n"],"names":["createInitialTablebaseState","createTablebaseActions","createTablebaseSlice","createTablebaseState","initialTablebaseState","tablebaseSelectors","tablebaseMove","undefined","analysisStatus","evaluations","currentEvaluation","set","setTablebaseMove","move","state","tablebase","setAnalysisStatus","status","addEvaluation","evaluation","setEvaluations","setCurrentEvaluation","clearTablebaseState","Object","assign","selectTablebaseMove","selectAnalysisStatus","selectEvaluations","selectCurrentEvaluation","selectIsLoading","selectIsSuccess","selectIsError","selectHasTablebaseMove","selectIsDrawPosition","selectEvaluationByFen","fen","find","e","selectEvaluationCount","length"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;CAsBC;;;;;;;;;;;QAqBYA;eAAAA;;QAuCAC;eAAAA;;QA6MAC;eAAAA;;QAnOAC;eAAAA;;QA5BAC;eAAAA;;QA4RAC;eAAAA;;;AA5RN,MAAMD,wBAAwB;IACnCE,eAAeC;IACfC,gBAAgB;IAChBC,aAAa,EAAE;IACfC,mBAAmBH;AACrB;AAMO,MAAMP,8BAA8B,IAAO,CAAA;QAAE,GAAGI,qBAAqB;IAAC,CAAA;AAiBtE,MAAMD,uBAAuB,IAAuB,CAAA;QACzDG,eAAeC;QACfC,gBAAgB;QAChBC,aAAa,EAAE;QACfC,mBAAmBH;IACrB,CAAA;AAiBO,MAAMN,yBAAyB,CACpCU,MACsB,CAAA;QAEtB;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACDC,kBAAkB,CAACC;YACjBF,IAAI,CAACG;gBACHA,MAAMC,SAAS,CAACT,aAAa,GAAGO;YAClC;QACF;QAEA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACDG,mBAAmB,CAACC;YAClBN,IAAI,CAACG;gBACHA,MAAMC,SAAS,CAACP,cAAc,GAAGS;YACnC;QACF;QAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BC,GACDC,eAAe,CAACC;YACdR,IAAI,CAACG;gBACHA,MAAMC,SAAS,CAACN,WAAW,GAAG;uBAAIK,MAAMC,SAAS,CAACN,WAAW;oBAAEU;iBAAW;YAC5E;QACF;QAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BC,GACDC,gBAAgB,CAACX;YACfE,IAAI,CAACG;gBACHA,MAAMC,SAAS,CAACN,WAAW,GAAGA;YAChC;QACF;QAEA;;;;;;;;;;;;;;;;;;;;;;;;;GAyBC,GACDY,sBAAsB,CAACF;YACrBR,IAAI,CAACG;gBACHA,MAAMC,SAAS,CAACL,iBAAiB,GAAGS;YACtC;QACF;QAEA;;;;;;;;;;;;;;;;;;;;GAoBC,GACDG,qBAAqB;YACnBX,IAAI,CAACG;gBACHS,OAAOC,MAAM,CAACV,MAAMC,SAAS,EAAEf;YACjC;QACF;IACF,CAAA;AAMO,MAAME,uBAA0D,CACrES,MACI,CAAA;QACJ,GAAGR,sBAAsB;QACzB,GAAGF,uBAAuBU,IAAI;IAChC,CAAA;AAwBO,MAAMN,qBAAqB;IAChC;;;;GAIC,GACDoB,qBAAqB,CAACX,QAA0BA,MAAMR,aAAa;IAEnE;;;;GAIC,GACDoB,sBAAsB,CAACZ,QAA0BA,MAAMN,cAAc;IAErE;;;;GAIC,GACDmB,mBAAmB,CAACb,QAA0BA,MAAML,WAAW;IAE/D;;;;GAIC,GACDmB,yBAAyB,CAACd,QAA0BA,MAAMJ,iBAAiB;IAE3E;;;;GAIC,GACDmB,iBAAiB,CAACf,QAChBA,MAAMN,cAAc,KAAK;IAE3B;;;;GAIC,GACDsB,iBAAiB,CAAChB,QAChBA,MAAMN,cAAc,KAAK;IAE3B;;;;GAIC,GACDuB,eAAe,CAACjB,QAA0BA,MAAMN,cAAc,KAAK;IAEnE;;;;;;;;GAQC,GACDwB,wBAAwB,CAAClB,QACvBA,MAAMR,aAAa,KAAKC;IAE1B;;;;GAIC,GACD0B,sBAAsB,CAACnB,QAA0BA,MAAMR,aAAa,KAAK;IAEzE;;;;;;;;;;;GAWC,GACD4B,uBAAuB,CAACC,MAAgB,CAACrB,QACvCA,MAAML,WAAW,CAAC2B,IAAI,CAAC,CAACC,IAAMA,EAAEF,GAAG,KAAKA;IAE1C;;;;GAIC,GACDG,uBAAuB,CAACxB,QAA0BA,MAAML,WAAW,CAAC8B,MAAM;AAC5E"}