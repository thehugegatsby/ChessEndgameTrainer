{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/services/ChessService.validateMove.test.ts"],"sourcesContent":["/**\n * @file ChessService validateMove Edge Cases Tests\n * @description Coverage tests for validateMove edge cases (Lines 431-432, 439-440, 406)\n * Target: Remaining coverage gaps for 100% completion\n */\n\nimport { ChessService } from \"@shared/services/ChessService\";\nimport { Chess } from \"chess.js\";\n\n// Mock chess.js following existing pattern\njest.mock(\"chess.js\");\n\nconst MockedChess = Chess as jest.MockedClass<typeof Chess>;\n\ndescribe(\"ChessService validateMove Edge Cases\", () => {\n  let chessService: ChessService;\n  let mockChessInstance: jest.Mocked<InstanceType<typeof Chess>>;\n\n  beforeEach(() => {\n    MockedChess.mockClear();\n\n    // Create comprehensive mock Chess instance\n    mockChessInstance = {\n      move: jest.fn(),\n      fen: jest.fn().mockReturnValue(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"),\n      pgn: jest.fn().mockReturnValue(\"\"),\n      history: jest.fn().mockReturnValue([]),\n      load: jest.fn(),\n      loadPgn: jest.fn(),\n      isGameOver: jest.fn().mockReturnValue(false),\n      turn: jest.fn().mockReturnValue(\"w\"),\n      moves: jest.fn().mockReturnValue([\"e4\", \"e3\", \"Nf3\"] as any),\n      isCheck: jest.fn().mockReturnValue(false),\n      isCheckmate: jest.fn().mockReturnValue(false),\n      isStalemate: jest.fn().mockReturnValue(false),\n      isDraw: jest.fn().mockReturnValue(false),\n      get: jest.fn(), // For piece checking in validateMove\n    } as any;\n\n    MockedChess.mockImplementation(() => mockChessInstance);\n    chessService = new ChessService();\n    chessService.initialize(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\");\n  });\n\n  describe(\"validateMove() Edge Cases - Lines 431-432, 439-440\", () => {\n    it(\"should handle invalid square format in move object - Line 431-432\", () => {\n      // Test invalid 'from' square format (Line 431)\n      const invalidFromMove = { from: \"z9\", to: \"e4\" }; // Invalid square format\n      \n      const result = chessService.validateMove(invalidFromMove);\n      \n      expect(result).toBe(false);\n      // Should not call temp chess instance since format validation fails first\n    });\n\n    it(\"should handle invalid 'to' square format in move object - Line 431-432\", () => {\n      // Test invalid 'to' square format (Line 431)\n      const invalidToMove = { from: \"e2\", to: \"x0\" }; // Invalid square format\n      \n      const result = chessService.validateMove(invalidToMove);\n      \n      expect(result).toBe(false);\n    });\n\n    it(\"should handle both invalid square formats - Line 431-432\", () => {\n      // Test both invalid formats\n      const invalidMove = { from: \"zz\", to: \"yy\" };\n      \n      const result = chessService.validateMove(invalidMove);\n      \n      expect(result).toBe(false);\n    });\n\n    it(\"should handle no piece on source square - Line 439-440\", () => {\n      // Create temp chess instance that returns null for get()\n      const tempChessInstance = {\n        get: jest.fn().mockReturnValue(null),\n        move: jest.fn(),\n      };\n      MockedChess.mockImplementation(() => tempChessInstance as any);\n      \n      const moveWithNoPiece = { from: \"d4\", to: \"d5\" }; // Valid format but no piece on d4\n      \n      const result = chessService.validateMove(moveWithNoPiece);\n      \n      expect(result).toBe(false);\n      expect(tempChessInstance.get).toHaveBeenCalledWith(\"d4\");\n    });\n\n    it(\"should handle valid square format with piece present\", () => {\n      // Mock get() to return a piece (this will be called on the temp instance)\n      const tempChessInstance = {\n        move: jest.fn().mockReturnValue({ from: \"e2\", to: \"e4\", san: \"e4\" }),\n        get: jest.fn().mockReturnValue({ type: \"p\", color: \"w\" }),\n      };\n      \n      // Mock Chess constructor to return temp instance for validation\n      MockedChess.mockImplementation(() => tempChessInstance as any);\n      \n      const validMove = { from: \"e2\", to: \"e4\" };\n      \n      const result = chessService.validateMove(validMove);\n      \n      expect(result).toBe(true);\n      expect(tempChessInstance.get).toHaveBeenCalledWith(\"e2\");\n      expect(tempChessInstance.move).toHaveBeenCalledWith(validMove);\n    });\n\n    it(\"should handle promotion move validation\", () => {\n      const tempChessInstance = {\n        move: jest.fn().mockReturnValue({ from: \"e7\", to: \"e8\", san: \"e8=Q\", promotion: \"q\" }),\n        get: jest.fn().mockReturnValue({ type: \"p\", color: \"w\" }),\n      };\n      MockedChess.mockImplementation(() => tempChessInstance as any);\n      \n      const promotionMove = { from: \"e7\", to: \"e8\", promotion: \"q\" };\n      \n      const result = chessService.validateMove(promotionMove);\n      \n      expect(result).toBe(true);\n      expect(tempChessInstance.move).toHaveBeenCalledWith(promotionMove);\n    });\n\n    it(\"should handle string moves (not object format)\", () => {\n      const tempChessInstance = {\n        move: jest.fn().mockReturnValue({ from: \"e2\", to: \"e4\", san: \"e4\" }),\n      };\n      MockedChess.mockImplementation(() => tempChessInstance as any);\n      \n      const stringMove = \"e4\";\n      \n      const result = chessService.validateMove(stringMove);\n      \n      expect(result).toBe(true);\n      expect(tempChessInstance.move).toHaveBeenCalledWith(stringMove);\n      // Should not call get() for string moves (different validation path)\n      expect(mockChessInstance.get).not.toHaveBeenCalled();\n    });\n\n    it(\"should handle chess.js move objects\", () => {\n      const tempChessInstance = {\n        move: jest.fn().mockReturnValue({ from: \"e2\", to: \"e4\", san: \"e4\" }),\n        get: jest.fn().mockReturnValue({ type: \"p\", color: \"w\" }),\n      };\n      MockedChess.mockImplementation(() => tempChessInstance as any);\n      \n      const chessJsMove = { from: \"e2\", to: \"e4\", san: \"e4\", piece: \"p\", color: \"w\" };\n      \n      const result = chessService.validateMove(chessJsMove);\n      \n      expect(result).toBe(true);\n      expect(tempChessInstance.move).toHaveBeenCalledWith(chessJsMove);\n    });\n\n    it(\"should handle validation error exceptions\", () => {\n      // Mock exception during validation\n      const tempChessInstance = {\n        move: jest.fn().mockImplementation(() => {\n          throw new Error(\"Validation failed\");\n        }),\n      };\n      MockedChess.mockImplementation(() => tempChessInstance as any);\n      \n      const move = { from: \"e2\", to: \"e4\" };\n      mockChessInstance.get.mockReturnValue({ type: \"p\", color: \"w\" });\n      \n      const result = chessService.validateMove(move);\n      \n      expect(result).toBe(false);\n    });\n  });\n\n  describe(\"moves() method - Line 406\", () => {\n    it(\"should call chess.js moves() method without options\", () => {\n      mockChessInstance.moves.mockReturnValue([\"e4\", \"e3\", \"Nf3\"] as any);\n      \n      const result = chessService.moves() as string[];\n      \n      expect(result).toEqual([\"e4\", \"e3\", \"Nf3\"]);\n      expect(mockChessInstance.moves).toHaveBeenCalledWith(undefined);\n    });\n\n    it(\"should call chess.js moves() method with square option\", () => {\n      mockChessInstance.moves.mockReturnValue([\"e3\", \"e4\"] as any);\n      \n      const result = chessService.moves({ square: \"e2\" }) as string[];\n      \n      expect(result).toEqual([\"e3\", \"e4\"]);\n      expect(mockChessInstance.moves).toHaveBeenCalledWith({ square: \"e2\" });\n    });\n\n    it(\"should call chess.js moves() method with verbose option\", () => {\n      const verboseMoves = [\n        { from: \"e2\", to: \"e3\", san: \"e3\" },\n        { from: \"e2\", to: \"e4\", san: \"e4\" },\n      ];\n      mockChessInstance.moves.mockReturnValue(verboseMoves as any);\n      \n      const result = chessService.moves({ verbose: true });\n      \n      expect(result).toEqual(verboseMoves);\n      expect(mockChessInstance.moves).toHaveBeenCalledWith({ verbose: true });\n    });\n\n    it(\"should call chess.js moves() method with both square and verbose options\", () => {\n      const verboseMoves = [\n        { from: \"e2\", to: \"e3\", san: \"e3\" },\n        { from: \"e2\", to: \"e4\", san: \"e4\" },\n      ];\n      mockChessInstance.moves.mockReturnValue(verboseMoves as any);\n      \n      const result = chessService.moves({ square: \"e2\", verbose: true });\n      \n      expect(result).toEqual(verboseMoves);\n      expect(mockChessInstance.moves).toHaveBeenCalledWith({ square: \"e2\", verbose: true });\n    });\n  });\n\n  describe(\"Integration with existing validation\", () => {\n    it(\"should maintain consistency with move() method validation\", () => {\n      // Setup valid move scenario\n      mockChessInstance.get.mockReturnValue({ type: \"p\", color: \"w\" });\n      \n      const tempChessInstance = {\n        move: jest.fn().mockReturnValue({ from: \"e2\", to: \"e4\", san: \"e4\" }),\n      };\n      MockedChess.mockImplementation(() => tempChessInstance as any);\n      \n      const move = { from: \"e2\", to: \"e4\" };\n      \n      // validateMove should return true  \n      // Need to reset mock for validation call\n      const tempValidationInstance = {\n        move: jest.fn().mockReturnValue({ from: \"e2\", to: \"e4\", san: \"e4\" }),\n        get: jest.fn().mockReturnValue({ type: \"p\", color: \"w\" }),\n      };\n      MockedChess.mockImplementation(() => tempValidationInstance as any);\n      \n      expect(chessService.validateMove(move)).toBe(true);\n      \n      // Reset mocks for actual move\n      MockedChess.mockImplementation(() => mockChessInstance);\n      mockChessInstance.move.mockReturnValue({ from: \"e2\", to: \"e4\", san: \"e4\" } as any);\n      \n      // Actual move should also succeed\n      const moveResult = chessService.move(move);\n      expect(moveResult).not.toBeNull();\n    });\n  });\n});"],"names":["jest","mock","MockedChess","Chess","describe","chessService","mockChessInstance","beforeEach","mockClear","move","fn","fen","mockReturnValue","pgn","history","load","loadPgn","isGameOver","turn","moves","isCheck","isCheckmate","isStalemate","isDraw","get","mockImplementation","ChessService","initialize","it","invalidFromMove","from","to","result","validateMove","expect","toBe","invalidToMove","invalidMove","tempChessInstance","moveWithNoPiece","toHaveBeenCalledWith","san","type","color","validMove","promotion","promotionMove","stringMove","not","toHaveBeenCalled","chessJsMove","piece","Error","toEqual","undefined","square","verboseMoves","verbose","tempValidationInstance","moveResult","toBeNull"],"mappings":"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"}