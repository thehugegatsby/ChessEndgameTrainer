{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/ErrorService.ts"],"sourcesContent":["/**\n * Centralized Error Handling Service\n *\n * Provides consistent error handling, logging, and user-friendly messages\n * across the application.\n */\n\nimport { getLogger } from \"./logging\";\n\n/**\n * Error types for categorizing different error scenarios\n * @enum {string}\n * @remarks Used to provide context-specific error messages in German\n */\nexport enum ErrorType {\n  TABLEBASE = \"TABLEBASE\",\n  UI_COMPONENT = \"UI_COMPONENT\",\n  NETWORK = \"NETWORK\",\n  STORAGE = \"STORAGE\",\n  VALIDATION = \"VALIDATION\",\n}\n\n/**\n * Context information for error tracking and debugging\n * @interface ErrorContext\n * @property {string} [component] - Component where error occurred\n * @property {string} [action] - User action that triggered the error\n * @property {string} [user] - User identifier for error tracking\n * @property {Date} [timestamp] - When the error occurred\n * @property {ErrorType} [type] - Categorized error type\n * @property {Record<string, any>} [additionalData] - Extra debugging information\n */\nexport interface ErrorContext {\n  component?: string;\n  action?: string;\n  user?: string;\n  timestamp?: Date;\n  type?: ErrorType;\n  additionalData?: Record<string, any>;\n}\n\n/**\n * Centralized Error Handling Service\n *\n * Provides a single point of error management across the application.\n * Handles different error types, logs them internally, and returns\n * user-friendly German error messages.\n *\n * @singleton\n * @example\n * // Get the singleton instance\n * const errorService = ErrorService.getInstance();\n *\n * @example\n * // Handle a tablebase error\n * try {\n *   await tablebaseService.getEvaluation(fen);\n * } catch (error) {\n *   const userMessage = ErrorService.handleTablebaseError(error, {\n *     component: 'TrainingBoard',\n *     action: 'evaluate-position'\n *   });\n *   showToast(userMessage, 'error');\n * }\n */\nexport class ErrorService {\n  private static instance: ErrorService;\n  private errorLog: Array<{\n    error: Error;\n    context: ErrorContext;\n    timestamp: Date;\n  }> = [];\n  private logger = getLogger().setContext(\"ErrorService\");\n\n  /**\n   * Gets the singleton instance of ErrorService.\n   *\n   * Creates a new instance on first call and returns the same\n   * instance on subsequent calls. This ensures consistent error\n   * handling and a single error log across the application.\n   *\n   * @returns {ErrorService} The singleton ErrorService instance\n   * @example\n   * const errorService = ErrorService.getInstance();\n   * const stats = errorService.getErrorStats();\n   */\n  static getInstance(): ErrorService {\n    if (!ErrorService.instance) {\n      ErrorService.instance = new ErrorService();\n    }\n    return ErrorService.instance;\n  }\n\n  /**\n   * Handles errors from tablebase operations.\n   *\n   * Processes errors that occur when interacting with the Lichess\n   * tablebase API. Logs the error with context and returns a\n   * user-friendly German message.\n   *\n   * Side effects:\n   * - Logs the error via Logger service with ERROR level\n   * - Adds the error to internal error log\n   *\n   * @static\n   * @param {Error} error - The error object from tablebase operations\n   * @param {ErrorContext} [context={}] - Additional context for debugging\n   * @param {string} [context.component] - Component where error occurred\n   * @param {string} [context.action] - Action that triggered the error\n   * @param {Record<string, any>} [context.additionalData] - Extra debug data\n   * @returns {string} User-friendly German error message\n   *\n   * @example\n   * try {\n   *   await tablebaseService.getEvaluation(fen);\n   * } catch (error) {\n   *   const message = ErrorService.handleTablebaseError(error, {\n   *     component: \"TrainingBoard\",\n   *     action: \"evaluate-position\",\n   *     additionalData: { fen, pieceCount: 7 }\n   *   });\n   *   showToast(message, \"error\");\n   * }\n   *\n   * @remarks\n   * Common tablebase errors include:\n   * - Network timeout: \"Request timeout after retries\"\n   * - Invalid FEN: \"Invalid FEN: <details>\"\n   * - Rate limiting: \"API error: 429\"\n   * - Too many pieces: Position has >7 pieces\n   */\n  static handleTablebaseError(error: Error, context: ErrorContext = {}) {\n    const service = ErrorService.getInstance();\n    const enhancedContext = {\n      ...context,\n      type: ErrorType.TABLEBASE,\n      timestamp: new Date(),\n    };\n\n    service.logger.error(\"Tablebase Error\", error, enhancedContext);\n\n    service.logError(error, enhancedContext);\n    return service.getUserFriendlyMessage(ErrorType.TABLEBASE, error);\n  }\n\n  /**\n   * Handles errors from UI components.\n   *\n   * Processes errors that occur in React components, including render\n   * errors, state update issues, and prop validation failures. Logs the\n   * error with component context and returns a user-friendly German message.\n   *\n   * Side effects:\n   * - Logs the error via Logger service with ERROR level\n   * - Adds the error to internal error log with component name\n   *\n   * @static\n   * @param {Error} error - The error object from React component\n   * @param {string} componentName - Name of the component that errored\n   * @param {ErrorContext} [context={}] - Additional debugging context\n   * @param {string} [context.action] - User action that triggered the error\n   * @param {Record<string, any>} [context.additionalData] - Extra debug data (e.g., ErrorInfo from React)\n   * @returns {string} User-friendly German error message\n   *\n   * @example\n   * // In React Error Boundary\n   * componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n   *   const message = ErrorService.handleUIError(error, \"ChessBoard\", {\n   *     additionalData: errorInfo\n   *   });\n   *   this.setState({ errorMessage: message });\n   * }\n   *\n   * @example\n   * // In event handler\n   * try {\n   *   handleSquareClick(square);\n   * } catch (error) {\n   *   const message = ErrorService.handleUIError(error, \"TrainingBoard\", {\n   *     action: \"square-click\",\n   *     additionalData: { square, position: currentPosition }\n   *   });\n   *   showToast(message, \"error\");\n   * }\n   *\n   * @remarks\n   * Common UI errors include:\n   * - State update on unmounted component\n   * - Invalid props passed to component\n   * - Chess.js move validation failures\n   * - Render errors from missing data\n   * - Event handler exceptions\n   */\n  static handleUIError(\n    error: Error,\n    componentName: string,\n    context: ErrorContext = {},\n  ) {\n    const service = ErrorService.getInstance();\n    const enhancedContext = {\n      ...context,\n      component: componentName,\n      type: ErrorType.UI_COMPONENT,\n      timestamp: new Date(),\n    };\n\n    service.logger.error(\n      `UI Error in ${componentName}`,\n      error,\n      enhancedContext,\n    );\n\n    service.logError(error, enhancedContext);\n    return service.getUserFriendlyMessage(ErrorType.UI_COMPONENT, error);\n  }\n\n  /**\n   * Handles network and API communication errors.\n   *\n   * Processes errors that occur during network requests, including\n   * timeouts, connection failures, and API response errors. Logs the\n   * error with request context and returns a user-friendly German message.\n   *\n   * Side effects:\n   * - Logs the error via Logger service with ERROR level\n   * - Adds the error to internal error log with network context\n   *\n   * @static\n   * @param {Error} error - Network or API error object\n   * @param {ErrorContext} [context={}] - Additional context for debugging\n   * @param {string} [context.component] - Component making the request\n   * @param {string} [context.action] - Action that triggered the request\n   * @param {Record<string, any>} [context.additionalData] - Extra debug data (URL, method, headers)\n   * @returns {string} User-friendly German error message\n   *\n   * @example\n   * // In async fetch call\n   * try {\n   *   const response = await fetch(url);\n   *   return await response.json();\n   * } catch (error) {\n   *   const message = ErrorService.handleNetworkError(error, {\n   *     action: \"fetch-tablebase\",\n   *     additionalData: { url, method: \"GET\" }\n   *   });\n   *   return { error: message };\n   * }\n   *\n   * @example\n   * // With AbortController for timeout\n   * const controller = new AbortController();\n   * const timeout = setTimeout(() => controller.abort(), 5000);\n   *\n   * try {\n   *   const response = await fetch(url, { signal: controller.signal });\n   *   return await response.json();\n   * } catch (error) {\n   *   const message = ErrorService.handleNetworkError(error, {\n   *     component: \"TablebaseService\",\n   *     action: \"evaluate-position\",\n   *     additionalData: {\n   *       url,\n   *       timeout: 5000,\n   *       aborted: error.name === 'AbortError'\n   *     }\n   *   });\n   *   throw new Error(message);\n   * } finally {\n   *   clearTimeout(timeout);\n   * }\n   *\n   * @remarks\n   * Common network errors include:\n   * - AbortError: Request timeout or manual abort\n   * - TypeError: Network failure (no connection)\n   * - HTTP 429: Rate limit exceeded\n   * - HTTP 503: Service temporarily unavailable\n   * - HTTP 500: Server error\n   * - CORS errors: Cross-origin request blocked\n   */\n  static handleNetworkError(error: Error, context: ErrorContext = {}) {\n    const service = ErrorService.getInstance();\n    const enhancedContext = {\n      ...context,\n      type: ErrorType.NETWORK,\n      timestamp: new Date(),\n    };\n\n    service.logger.error(\"Network Error\", error, enhancedContext);\n\n    service.logError(error, enhancedContext);\n    return service.getUserFriendlyMessage(ErrorType.NETWORK, error);\n  }\n\n  /**\n   * Logs an error to the internal error log.\n   *\n   * Maintains a rolling log of the last 50 errors for debugging\n   * and monitoring purposes. Older errors are automatically removed\n   * when the limit is exceeded.\n   *\n   * @private\n   * @param {Error} error - The error object to log\n   * @param {ErrorContext} context - Additional context information\n   */\n  private logError(error: Error, context: ErrorContext) {\n    this.errorLog.push({\n      error,\n      context,\n      timestamp: new Date(),\n    });\n\n    // Keep only last 50 errors in memory\n    if (this.errorLog.length > 50) {\n      this.errorLog.shift();\n    }\n  }\n\n  /**\n   * Gets a user-friendly German error message based on error type.\n   *\n   * Returns localized messages suitable for display to end users.\n   * Technical error details are logged separately and not exposed\n   * to users for security and usability reasons.\n   *\n   * @private\n   * @param {ErrorType} type - The category of error\n   * @param {Error} _error - The error object (unused, for future extension)\n   * @returns {string} A German error message suitable for user display\n   */\n  private getUserFriendlyMessage(type: ErrorType, _error: Error): string {\n    switch (type) {\n      case ErrorType.TABLEBASE:\n        return \"Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.\";\n\n      case ErrorType.UI_COMPONENT:\n        return \"Ein Problem mit der Benutzeroberfläche ist aufgetreten. Bitte versuchen Sie es erneut.\";\n\n      case ErrorType.NETWORK:\n        return \"Netzwerkfehler. Bitte prüfen Sie Ihre Internetverbindung.\";\n\n      case ErrorType.STORAGE:\n        return \"Fehler beim Speichern der Daten. Bitte versuchen Sie es erneut.\";\n\n      case ErrorType.VALIDATION:\n        return \"Ungültige Eingabe. Bitte überprüfen Sie Ihre Eingaben.\";\n\n      default:\n        return \"Ein unerwarteter Fehler ist aufgetreten. Bitte versuchen Sie es erneut.\";\n    }\n  }\n\n  /**\n   * Gets statistics about logged errors.\n   *\n   * Provides a summary of all errors in the internal log, grouped\n   * by type and including recent error details. Useful for debugging\n   * and monitoring application health.\n   *\n   * @returns {Object} Error statistics including:\n   *   - totalErrors: Total number of errors in log\n   *   - errorsByType: Count of errors grouped by ErrorType\n   *   - recentErrors: Array of last 5 errors with details\n   * @example\n   * import { getLogger } from '@shared/services/logging/Logger';\n   * const logger = getLogger();\n   * const stats = errorService.getErrorStats();\n   * logger.info(`Total errors: ${stats.totalErrors}`);\n   * logger.info(`UI errors: ${stats.errorsByType.UI_COMPONENT || 0}`);\n   */\n  getErrorStats() {\n    const stats = this.errorLog.reduce(\n      (acc, log) => {\n        const type = log.context.type || \"UNKNOWN\";\n        acc[type] = (acc[type] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    return {\n      totalErrors: this.errorLog.length,\n      errorsByType: stats,\n      recentErrors: this.errorLog.slice(-5).map((log) => ({\n        type: log.context.type,\n        component: log.context.component,\n        timestamp: log.timestamp,\n        message: log.error.message,\n      })),\n    };\n  }\n\n  /**\n   * Clears all errors from the internal log.\n   *\n   * Resets the error tracking to a clean state. Primarily used\n   * for testing, but can also be used to reset error tracking\n   * after exporting or processing error data.\n   *\n   * @returns {void}\n   * @example\n   * // Export errors then clear\n   * const stats = errorService.getErrorStats();\n   * await sendErrorReport(stats);\n   * errorService.clearErrorLog();\n   */\n  clearErrorLog() {\n    this.errorLog = [];\n  }\n}\n"],"names":["ErrorService","ErrorType","getInstance","instance","handleTablebaseError","error","context","service","enhancedContext","type","timestamp","Date","logger","logError","getUserFriendlyMessage","handleUIError","componentName","component","handleNetworkError","errorLog","push","length","shift","_error","getErrorStats","stats","reduce","acc","log","totalErrors","errorsByType","recentErrors","slice","map","message","clearErrorLog","getLogger","setContext"],"mappings":"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"}