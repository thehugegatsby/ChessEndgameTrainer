ae7f8fee082d988c126f918a22640e97
/**
 * Centralized Error Handling Service
 *
 * Provides consistent error handling, logging, and user-friendly messages
 * across the application.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ErrorService () {
        return ErrorService;
    },
    get ErrorType () {
        return ErrorType;
    }
});
const _logging = require("./logging");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var ErrorType = /*#__PURE__*/ function(ErrorType) {
    ErrorType["TABLEBASE"] = "TABLEBASE";
    ErrorType["UI_COMPONENT"] = "UI_COMPONENT";
    ErrorType["NETWORK"] = "NETWORK";
    ErrorType["STORAGE"] = "STORAGE";
    ErrorType["VALIDATION"] = "VALIDATION";
    return ErrorType;
}({});
class ErrorService {
    /**
   * Gets the singleton instance of ErrorService.
   *
   * Creates a new instance on first call and returns the same
   * instance on subsequent calls. This ensures consistent error
   * handling and a single error log across the application.
   *
   * @returns {ErrorService} The singleton ErrorService instance
   * @example
   * const errorService = ErrorService.getInstance();
   * const stats = errorService.getErrorStats();
   */ static getInstance() {
        if (!ErrorService.instance) {
            ErrorService.instance = new ErrorService();
        }
        return ErrorService.instance;
    }
    /**
   * Handles errors from tablebase operations.
   *
   * Processes errors that occur when interacting with the Lichess
   * tablebase API. Logs the error with context and returns a
   * user-friendly German message.
   *
   * Side effects:
   * - Logs the error via Logger service with ERROR level
   * - Adds the error to internal error log
   *
   * @static
   * @param {Error} error - The error object from tablebase operations
   * @param {ErrorContext} [context={}] - Additional context for debugging
   * @param {string} [context.component] - Component where error occurred
   * @param {string} [context.action] - Action that triggered the error
   * @param {Record<string, any>} [context.additionalData] - Extra debug data
   * @returns {string} User-friendly German error message
   *
   * @example
   * try {
   *   await tablebaseService.getEvaluation(fen);
   * } catch (error) {
   *   const message = ErrorService.handleTablebaseError(error, {
   *     component: "TrainingBoard",
   *     action: "evaluate-position",
   *     additionalData: { fen, pieceCount: 7 }
   *   });
   *   showToast(message, "error");
   * }
   *
   * @remarks
   * Common tablebase errors include:
   * - Network timeout: "Request timeout after retries"
   * - Invalid FEN: "Invalid FEN: <details>"
   * - Rate limiting: "API error: 429"
   * - Too many pieces: Position has >7 pieces
   */ static handleTablebaseError(error, context = {}) {
        const service = ErrorService.getInstance();
        const enhancedContext = {
            ...context,
            type: "TABLEBASE",
            timestamp: new Date()
        };
        service.logger.error("Tablebase Error", error, enhancedContext);
        service.logError(error, enhancedContext);
        return service.getUserFriendlyMessage("TABLEBASE", error);
    }
    /**
   * Handles errors from UI components.
   *
   * Processes errors that occur in React components, including render
   * errors, state update issues, and prop validation failures. Logs the
   * error with component context and returns a user-friendly German message.
   *
   * Side effects:
   * - Logs the error via Logger service with ERROR level
   * - Adds the error to internal error log with component name
   *
   * @static
   * @param {Error} error - The error object from React component
   * @param {string} componentName - Name of the component that errored
   * @param {ErrorContext} [context={}] - Additional debugging context
   * @param {string} [context.action] - User action that triggered the error
   * @param {Record<string, any>} [context.additionalData] - Extra debug data (e.g., ErrorInfo from React)
   * @returns {string} User-friendly German error message
   *
   * @example
   * // In React Error Boundary
   * componentDidCatch(error: Error, errorInfo: ErrorInfo) {
   *   const message = ErrorService.handleUIError(error, "ChessBoard", {
   *     additionalData: errorInfo
   *   });
   *   this.setState({ errorMessage: message });
   * }
   *
   * @example
   * // In event handler
   * try {
   *   handleSquareClick(square);
   * } catch (error) {
   *   const message = ErrorService.handleUIError(error, "TrainingBoard", {
   *     action: "square-click",
   *     additionalData: { square, position: currentPosition }
   *   });
   *   showToast(message, "error");
   * }
   *
   * @remarks
   * Common UI errors include:
   * - State update on unmounted component
   * - Invalid props passed to component
   * - Chess.js move validation failures
   * - Render errors from missing data
   * - Event handler exceptions
   */ static handleUIError(error, componentName, context = {}) {
        const service = ErrorService.getInstance();
        const enhancedContext = {
            ...context,
            component: componentName,
            type: "UI_COMPONENT",
            timestamp: new Date()
        };
        service.logger.error(`UI Error in ${componentName}`, error, enhancedContext);
        service.logError(error, enhancedContext);
        return service.getUserFriendlyMessage("UI_COMPONENT", error);
    }
    /**
   * Handles network and API communication errors.
   *
   * Processes errors that occur during network requests, including
   * timeouts, connection failures, and API response errors. Logs the
   * error with request context and returns a user-friendly German message.
   *
   * Side effects:
   * - Logs the error via Logger service with ERROR level
   * - Adds the error to internal error log with network context
   *
   * @static
   * @param {Error} error - Network or API error object
   * @param {ErrorContext} [context={}] - Additional context for debugging
   * @param {string} [context.component] - Component making the request
   * @param {string} [context.action] - Action that triggered the request
   * @param {Record<string, any>} [context.additionalData] - Extra debug data (URL, method, headers)
   * @returns {string} User-friendly German error message
   *
   * @example
   * // In async fetch call
   * try {
   *   const response = await fetch(url);
   *   return await response.json();
   * } catch (error) {
   *   const message = ErrorService.handleNetworkError(error, {
   *     action: "fetch-tablebase",
   *     additionalData: { url, method: "GET" }
   *   });
   *   return { error: message };
   * }
   *
   * @example
   * // With AbortController for timeout
   * const controller = new AbortController();
   * const timeout = setTimeout(() => controller.abort(), 5000);
   *
   * try {
   *   const response = await fetch(url, { signal: controller.signal });
   *   return await response.json();
   * } catch (error) {
   *   const message = ErrorService.handleNetworkError(error, {
   *     component: "TablebaseService",
   *     action: "evaluate-position",
   *     additionalData: {
   *       url,
   *       timeout: 5000,
   *       aborted: error.name === 'AbortError'
   *     }
   *   });
   *   throw new Error(message);
   * } finally {
   *   clearTimeout(timeout);
   * }
   *
   * @remarks
   * Common network errors include:
   * - AbortError: Request timeout or manual abort
   * - TypeError: Network failure (no connection)
   * - HTTP 429: Rate limit exceeded
   * - HTTP 503: Service temporarily unavailable
   * - HTTP 500: Server error
   * - CORS errors: Cross-origin request blocked
   */ static handleNetworkError(error, context = {}) {
        const service = ErrorService.getInstance();
        const enhancedContext = {
            ...context,
            type: "NETWORK",
            timestamp: new Date()
        };
        service.logger.error("Network Error", error, enhancedContext);
        service.logError(error, enhancedContext);
        return service.getUserFriendlyMessage("NETWORK", error);
    }
    /**
   * Logs an error to the internal error log.
   *
   * Maintains a rolling log of the last 50 errors for debugging
   * and monitoring purposes. Older errors are automatically removed
   * when the limit is exceeded.
   *
   * @private
   * @param {Error} error - The error object to log
   * @param {ErrorContext} context - Additional context information
   */ logError(error, context) {
        this.errorLog.push({
            error,
            context,
            timestamp: new Date()
        });
        // Keep only last 50 errors in memory
        if (this.errorLog.length > 50) {
            this.errorLog.shift();
        }
    }
    /**
   * Gets a user-friendly German error message based on error type.
   *
   * Returns localized messages suitable for display to end users.
   * Technical error details are logged separately and not exposed
   * to users for security and usability reasons.
   *
   * @private
   * @param {ErrorType} type - The category of error
   * @param {Error} _error - The error object (unused, for future extension)
   * @returns {string} A German error message suitable for user display
   */ getUserFriendlyMessage(type, _error) {
        switch(type){
            case "TABLEBASE":
                return "Die Tablebase-Datenbank konnte nicht geladen werden. Bitte aktualisieren Sie die Seite.";
            case "UI_COMPONENT":
                return "Ein Problem mit der Benutzeroberfläche ist aufgetreten. Bitte versuchen Sie es erneut.";
            case "NETWORK":
                return "Netzwerkfehler. Bitte prüfen Sie Ihre Internetverbindung.";
            case "STORAGE":
                return "Fehler beim Speichern der Daten. Bitte versuchen Sie es erneut.";
            case "VALIDATION":
                return "Ungültige Eingabe. Bitte überprüfen Sie Ihre Eingaben.";
            default:
                return "Ein unerwarteter Fehler ist aufgetreten. Bitte versuchen Sie es erneut.";
        }
    }
    /**
   * Gets statistics about logged errors.
   *
   * Provides a summary of all errors in the internal log, grouped
   * by type and including recent error details. Useful for debugging
   * and monitoring application health.
   *
   * @returns {Object} Error statistics including:
   *   - totalErrors: Total number of errors in log
   *   - errorsByType: Count of errors grouped by ErrorType
   *   - recentErrors: Array of last 5 errors with details
   * @example
   * import { getLogger } from '@shared/services/logging/Logger';
   * const logger = getLogger();
   * const stats = errorService.getErrorStats();
   * logger.info(`Total errors: ${stats.totalErrors}`);
   * logger.info(`UI errors: ${stats.errorsByType.UI_COMPONENT || 0}`);
   */ getErrorStats() {
        const stats = this.errorLog.reduce((acc, log)=>{
            const type = log.context.type || "UNKNOWN";
            acc[type] = (acc[type] || 0) + 1;
            return acc;
        }, {});
        return {
            totalErrors: this.errorLog.length,
            errorsByType: stats,
            recentErrors: this.errorLog.slice(-5).map((log)=>({
                    type: log.context.type,
                    component: log.context.component,
                    timestamp: log.timestamp,
                    message: log.error.message
                }))
        };
    }
    /**
   * Clears all errors from the internal log.
   *
   * Resets the error tracking to a clean state. Primarily used
   * for testing, but can also be used to reset error tracking
   * after exporting or processing error data.
   *
   * @returns {void}
   * @example
   * // Export errors then clear
   * const stats = errorService.getErrorStats();
   * await sendErrorReport(stats);
   * errorService.clearErrorLog();
   */ clearErrorLog() {
        this.errorLog = [];
    }
    constructor(){
        _define_property(this, "errorLog", []);
        _define_property(this, "logger", (0, _logging.getLogger)().setContext("ErrorService"));
    }
}
_define_property(ErrorService, "instance", void 0);

//# sourceMappingURL=data:application/json;base64,