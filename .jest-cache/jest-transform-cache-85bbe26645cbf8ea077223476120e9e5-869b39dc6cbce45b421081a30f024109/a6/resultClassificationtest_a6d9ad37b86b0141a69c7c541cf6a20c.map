{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/utils/tablebase/resultClassification.test.ts"],"sourcesContent":["/**\n * Unit tests for tablebase result classification utilities\n */\n\nimport {\n  getMoveResultType,\n  getMoveResultTypeFromWdl,\n  groupMovesByResult,\n  sortMovesByResult,\n  classifyMovesByDTZ,\n  getColorClass,\n  getEvaluationBarColor,\n  getResultIcon,\n  calculateBarWidth,\n  formatDtzDisplay,\n  getResultTypeTitle,\n  type TablebaseMove,\n} from \"@shared/utils/tablebase/resultClassification\";\n\ndescribe(\"Result Classification Utilities\", () => {\n  const mockMoves: TablebaseMove[] = [\n    { move: \"e4\", san: \"e4\", dtz: 5, dtm: 10, wdl: 2, category: \"win\" },\n    { move: \"e5\", san: \"e5\", dtz: 0, dtm: 0, wdl: 0, category: \"draw\" },\n    { move: \"e6\", san: \"e6\", dtz: -3, dtm: -6, wdl: -2, category: \"loss\" },\n    { move: \"f4\", san: \"f4\", dtz: 2, dtm: 4, wdl: 2, category: \"win\" },\n    { move: \"f5\", san: \"f5\", dtz: 0, dtm: 0, wdl: 0, category: \"draw\" },\n    { move: \"f6\", san: \"f6\", dtz: -7, dtm: -14, wdl: -2, category: \"loss\" },\n  ];\n\n  describe(\"getMoveResultType\", () => {\n    it(\"should return win for positive DTZ values\", () => {\n      expect(getMoveResultType(5)).toBe(\"win\");\n      expect(getMoveResultType(1)).toBe(\"win\");\n    });\n\n    it(\"should return draw for zero DTZ values\", () => {\n      expect(getMoveResultType(0)).toBe(\"draw\");\n    });\n\n    it(\"should return loss for negative DTZ values\", () => {\n      expect(getMoveResultType(-3)).toBe(\"loss\");\n      expect(getMoveResultType(-1)).toBe(\"loss\");\n    });\n  });\n\n  describe(\"getMoveResultTypeFromWdl\", () => {\n    it(\"should return win for positive WDL values\", () => {\n      expect(getMoveResultTypeFromWdl(2)).toBe(\"win\");\n      expect(getMoveResultTypeFromWdl(1)).toBe(\"win\");\n    });\n\n    it(\"should return draw for zero WDL values\", () => {\n      expect(getMoveResultTypeFromWdl(0)).toBe(\"draw\");\n    });\n\n    it(\"should return loss for negative WDL values\", () => {\n      expect(getMoveResultTypeFromWdl(-2)).toBe(\"loss\");\n      expect(getMoveResultTypeFromWdl(-1)).toBe(\"loss\");\n    });\n  });\n\n  describe(\"groupMovesByResult\", () => {\n    it(\"should group moves by result type\", () => {\n      const grouped = groupMovesByResult(mockMoves);\n\n      expect(grouped.win).toHaveLength(2);\n      expect(grouped.draw).toHaveLength(2);\n      expect(grouped.loss).toHaveLength(2);\n\n      expect(grouped.win[0].san).toBe(\"e4\");\n      expect(grouped.win[1].san).toBe(\"f4\");\n      expect(grouped.draw[0].san).toBe(\"e5\");\n      expect(grouped.draw[1].san).toBe(\"f5\");\n      expect(grouped.loss[0].san).toBe(\"e6\");\n      expect(grouped.loss[1].san).toBe(\"f6\");\n    });\n  });\n\n  describe(\"sortMovesByResult\", () => {\n    it(\"should sort moves by result type priority and DTZ values\", () => {\n      const sorted = sortMovesByResult(mockMoves);\n\n      // Should be ordered: win moves first, then draw, then loss\n      expect(sorted[0].san).toBe(\"f4\"); // Win with DTZ 2\n      expect(sorted[1].san).toBe(\"e4\"); // Win with DTZ 5\n      expect(sorted[2].san).toBe(\"e5\"); // Draw (alphabetical)\n      expect(sorted[3].san).toBe(\"f5\"); // Draw (alphabetical)\n      expect(sorted[4].san).toBe(\"e6\"); // Loss with DTZ -3\n      expect(sorted[5].san).toBe(\"f6\"); // Loss with DTZ -7\n    });\n  });\n\n  describe(\"classifyMovesByDTZ\", () => {\n    it(\"should classify and sort moves correctly\", () => {\n      const classified = classifyMovesByDTZ(mockMoves);\n\n      expect(classified.winningMoves).toHaveLength(2);\n      expect(classified.drawingMoves).toHaveLength(2);\n      expect(classified.losingMoves).toHaveLength(2);\n      expect(classified.totalMoves).toBe(6);\n\n      // Check sorting within groups\n      expect(classified.winningMoves[0].san).toBe(\"f4\"); // DTZ 2 before DTZ 5\n      expect(classified.winningMoves[1].san).toBe(\"e4\");\n      expect(classified.losingMoves[0].san).toBe(\"e6\"); // DTZ -3 before DTZ -7\n      expect(classified.losingMoves[1].san).toBe(\"f6\");\n    });\n  });\n\n  describe(\"getColorClass\", () => {\n    it(\"should return correct color classes for each result type\", () => {\n      expect(getColorClass(\"win\")).toContain(\"text-green-700\");\n      expect(getColorClass(\"draw\")).toContain(\"text-yellow-700\");\n      expect(getColorClass(\"loss\")).toContain(\"text-red-700\");\n    });\n  });\n\n  describe(\"getEvaluationBarColor\", () => {\n    it(\"should return correct bar colors for each result type\", () => {\n      expect(getEvaluationBarColor(\"win\")).toBe(\"bg-green-500\");\n      expect(getEvaluationBarColor(\"draw\")).toBe(\"bg-yellow-500\");\n      expect(getEvaluationBarColor(\"loss\")).toBe(\"bg-red-500\");\n    });\n  });\n\n  describe(\"getResultIcon\", () => {\n    it(\"should return correct icons for each result type\", () => {\n      expect(getResultIcon(\"win\")).toBe(\"✓\");\n      expect(getResultIcon(\"draw\")).toBe(\"=\");\n      expect(getResultIcon(\"loss\")).toBe(\"✗\");\n    });\n  });\n\n  describe(\"calculateBarWidth\", () => {\n    it(\"should calculate correct bar widths\", () => {\n      expect(calculateBarWidth(5, 10)).toBe(60); // (5/10) * 80 + 20 = 60\n      expect(calculateBarWidth(0, 10)).toBe(20); // (0/10) * 80 + 20 = 20\n      expect(calculateBarWidth(-5, 10)).toBe(60); // abs(-5/10) * 80 + 20 = 60\n    });\n\n    it(\"should handle edge cases\", () => {\n      expect(calculateBarWidth(0, 0)).toBe(50); // Default for draws when maxDtz is 0\n      expect(calculateBarWidth(10, 10)).toBe(100); // Maximum width\n    });\n  });\n\n  describe(\"formatDtzDisplay\", () => {\n    it(\"should format DTZ values correctly\", () => {\n      expect(formatDtzDisplay(5)).toBe(\"Win in 5\");\n      expect(formatDtzDisplay(0)).toBe(\"Draw\");\n      expect(formatDtzDisplay(-3)).toBe(\"Loss in 3\");\n    });\n  });\n\n  describe(\"getResultTypeTitle\", () => {\n    it(\"should return correct titles for each result type\", () => {\n      expect(getResultTypeTitle(\"win\")).toBe(\"Winning Moves\");\n      expect(getResultTypeTitle(\"draw\")).toBe(\"Drawing Moves\");\n      expect(getResultTypeTitle(\"loss\")).toBe(\"Losing Moves\");\n    });\n  });\n});\n"],"names":["describe","mockMoves","move","san","dtz","dtm","wdl","category","it","expect","getMoveResultType","toBe","getMoveResultTypeFromWdl","grouped","groupMovesByResult","win","toHaveLength","draw","loss","sorted","sortMovesByResult","classified","classifyMovesByDTZ","winningMoves","drawingMoves","losingMoves","totalMoves","getColorClass","toContain","getEvaluationBarColor","getResultIcon","calculateBarWidth","formatDtzDisplay","getResultTypeTitle"],"mappings":"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"}