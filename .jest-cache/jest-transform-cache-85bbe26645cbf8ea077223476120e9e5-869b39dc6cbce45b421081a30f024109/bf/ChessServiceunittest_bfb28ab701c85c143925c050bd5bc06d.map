{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/services/ChessService.unit.test.ts"],"sourcesContent":["/**\n * ChessService Unit Tests - Issue #85 Phase 1\n *\n * Focus: Unit testing with mocked chess.js (70% of total test strategy)\n * Target: >90% coverage for move() and validateMove() methods\n * Strategy: Mock chess.js to test ChessService orchestration logic\n */\n\nimport { ChessService } from \"@shared/services/ChessService\";\nimport {\n  StandardPositions,\n  EndgamePositions,\n} from \"../../fixtures/fenPositions\";\nimport {\n  createMockListener,\n  createMockListeners,\n  getLastEmittedEvent,\n  isValidStateUpdateEvent,\n  isValidErrorEvent,\n  createTestMove,\n} from \"../../helpers/chessTestHelpers\";\nimport { Chess } from \"chess.js\";\n\n// Mock chess.js for all unit tests\njest.mock(\"chess.js\");\n\nconst MockedChess = Chess as jest.MockedClass<typeof Chess>;\n\ndescribe(\"ChessService Unit Tests\", () => {\n  let chessService: ChessService;\n  let mockChessInstance: jest.Mocked<InstanceType<typeof Chess>>;\n\n  beforeEach(() => {\n    MockedChess.mockClear();\n\n    // Create comprehensive mock Chess instance\n    mockChessInstance = {\n      move: jest.fn(),\n      fen: jest.fn().mockReturnValue(StandardPositions.STARTING),\n      pgn: jest.fn().mockReturnValue(\"\"),\n      history: jest.fn().mockReturnValue([]),\n      load: jest.fn(),\n      isGameOver: jest.fn().mockReturnValue(false),\n      turn: jest.fn().mockReturnValue(\"w\"),\n      moves: jest.fn().mockReturnValue([\"e4\", \"e3\", \"Nf3\"]),\n    } as any;\n\n    MockedChess.mockImplementation(() => mockChessInstance);\n    chessService = new ChessService();\n  });\n\n  describe(\"Constructor & Initialization\", () => {\n    it(\"should create ChessService instance\", () => {\n      expect(chessService).toBeInstanceOf(ChessService);\n      expect(MockedChess).toHaveBeenCalledTimes(1);\n    });\n\n    it(\"should initialize with custom FEN\", () => {\n      const customFen = EndgamePositions.KPK_WIN;\n      mockChessInstance.fen.mockReturnValue(customFen);\n\n      const result = chessService.initialize(customFen);\n\n      expect(result).toBe(true);\n      expect(MockedChess).toHaveBeenLastCalledWith(customFen);\n    });\n\n    it(\"should handle initialization errors and emit error event\", () => {\n      const mockListener = createMockListener();\n      chessService.subscribe(mockListener);\n\n      // Mock error during Chess constructor\n      MockedChess.mockImplementationOnce(() => {\n        throw new Error(\"Invalid FEN\");\n      });\n\n      const result = chessService.initialize(\"invalid-fen\");\n\n      expect(result).toBe(false);\n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"error\",\n          payload: expect.objectContaining({\n            message: \"Ungültige FEN-Position\",\n          }),\n        }),\n      );\n    });\n  });\n\n  describe(\"Event System\", () => {\n    let mockListener: jest.MockedFunction<any>;\n\n    beforeEach(() => {\n      mockListener = createMockListener();\n      chessService.subscribe(mockListener);\n    });\n\n    it(\"should subscribe and emit stateUpdate events\", () => {\n      mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n      mockChessInstance.fen.mockReturnValue(StandardPositions.AFTER_E4);\n\n      chessService.move(createTestMove(\"e2\", \"e4\"));\n\n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"stateUpdate\",\n          source: \"move\",\n        }),\n      );\n      expect(isValidStateUpdateEvent(getLastEmittedEvent(mockListener)!)).toBe(\n        true,\n      );\n    });\n\n    it(\"should unsubscribe correctly\", () => {\n      const unsubscribe = chessService.subscribe(mockListener);\n\n      // Verify event is received\n      mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n      chessService.move(createTestMove(\"e2\", \"e4\"));\n      expect(mockListener).toHaveBeenCalledTimes(1);\n\n      // Unsubscribe and verify no more events\n      mockListener.mockClear();\n      unsubscribe();\n      chessService.move(createTestMove(\"e7\", \"e5\"));\n      expect(mockListener).not.toHaveBeenCalled();\n    });\n\n    it(\"should handle multiple listeners\", () => {\n      const listeners = createMockListeners(3);\n      listeners.forEach((l) => chessService.subscribe(l));\n\n      mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n      chessService.move(createTestMove(\"e2\", \"e4\"));\n\n      listeners.forEach((listener) => {\n        expect(listener).toHaveBeenCalledTimes(1);\n        expect(isValidStateUpdateEvent(getLastEmittedEvent(listener)!)).toBe(\n          true,\n        );\n      });\n    });\n\n    it(\"should handle listener exceptions gracefully\", () => {\n      const errorListener = jest.fn().mockImplementation(() => {\n        throw new Error(\"Listener error\");\n      });\n      chessService.subscribe(errorListener);\n\n      // Should not throw when listener errors\n      expect(() => {\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n      }).not.toThrow();\n\n      expect(errorListener).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"move() method - Core Focus\", () => {\n    let mockListener: jest.MockedFunction<any>;\n\n    beforeEach(() => {\n      mockListener = createMockListener();\n      chessService.subscribe(mockListener);\n    });\n\n    it(\"should execute valid moves successfully\", () => {\n      const moveResult = {\n        san: \"e4\",\n        from: \"e2\",\n        to: \"e4\",\n        piece: \"p\",\n        color: \"w\",\n        flags: \"b\",\n      };\n      mockChessInstance.move.mockReturnValue(moveResult as any);\n      mockChessInstance.fen.mockReturnValue(StandardPositions.AFTER_E4);\n\n      const result = chessService.move(createTestMove(\"e2\", \"e4\"));\n\n      expect(result).not.toBeNull();\n      expect(result?.san).toBe(\"e4\");\n      expect(mockChessInstance.move).toHaveBeenCalledWith({\n        from: \"e2\",\n        to: \"e4\",\n      });\n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"stateUpdate\",\n          source: \"move\",\n        }),\n      );\n    });\n\n    it(\"should return null for invalid moves and emit error event\", () => {\n      mockChessInstance.move.mockReturnValue(null as any);\n\n      const result = chessService.move(createTestMove(\"e2\", \"e5\"));\n\n      expect(result).toBeNull();\n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"error\",\n          payload: expect.objectContaining({\n            message: \"Ungültiger Zug\",\n          }),\n        }),\n      );\n    });\n\n    it(\"should handle promotion moves correctly\", () => {\n      const promotionMove = {\n        san: \"e8=Q+\",\n        from: \"e7\",\n        to: \"e8\",\n        promotion: \"q\",\n        piece: \"p\",\n        color: \"w\",\n      };\n      mockChessInstance.move.mockReturnValue(promotionMove as any);\n\n      const result = chessService.move(createTestMove(\"e7\", \"e8\", \"q\"));\n\n      expect(result).not.toBeNull();\n      expect(mockChessInstance.move).toHaveBeenCalledWith({\n        from: \"e7\",\n        to: \"e8\",\n        promotion: \"q\",\n      });\n    });\n\n    it(\"should handle move exceptions gracefully\", () => {\n      mockChessInstance.move.mockImplementation(() => {\n        throw new Error(\"Chess.js internal error\");\n      });\n\n      const result = chessService.move(createTestMove(\"e2\", \"e4\"));\n\n      expect(result).toBeNull();\n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"error\",\n          payload: expect.objectContaining({\n            message: \"Fehler beim Ausführen des Zuges\",\n          }),\n        }),\n      );\n    });\n\n    it(\"should update internal move history correctly\", () => {\n      // Make first move\n      mockChessInstance.move\n        .mockReturnValueOnce({\n          san: \"e4\",\n          from: \"e2\",\n          to: \"e4\",\n          piece: \"p\",\n          color: \"w\",\n        } as any)\n        .mockReturnValueOnce({\n          san: \"e5\",\n          from: \"e7\",\n          to: \"e5\",\n          piece: \"p\",\n          color: \"b\",\n        } as any);\n\n      chessService.move(createTestMove(\"e2\", \"e4\"));\n      chessService.move(createTestMove(\"e7\", \"e5\"));\n\n      const history = chessService.getMoveHistory();\n      expect(history).toHaveLength(2);\n      expect(history[0].san).toBe(\"e4\");\n      expect(history[1].san).toBe(\"e5\");\n    });\n\n    it(\"should accept string moves in SAN notation\", () => {\n      mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n\n      const result = chessService.move(\"e4\"); // String instead of object\n\n      expect(result).not.toBeNull();\n      expect(mockChessInstance.move).toHaveBeenCalledWith(\"e4\");\n    });\n  });\n\n  describe(\"validateMove() method - Core Focus\", () => {\n    it(\"should validate moves without changing main chess state\", () => {\n      // Setup validation mock instance with all required methods\n      const validationMock = {\n        fen: jest.fn().mockReturnValue(StandardPositions.STARTING),\n        get: jest.fn().mockReturnValue({ type: 'p', color: 'w' }), // Add get() for piece validation\n        move: jest.fn().mockReturnValue({ \n          san: \"e4\", \n          from: \"e2\", \n          to: \"e4\", \n          color: \"w\", \n          piece: \"p\", \n          flags: \"b\" \n        }),\n      } as any;\n\n      // Use mockImplementation instead of mockImplementationOnce to cover both Chess instances\n      MockedChess.mockImplementation(() => validationMock);\n\n      const isValid = chessService.validateMove(createTestMove(\"e2\", \"e4\"));\n\n      expect(isValid).toBe(true);\n      expect(validationMock.move).toHaveBeenCalledWith({\n        from: \"e2\",\n        to: \"e4\",\n      });\n      // Main chess instance should not be affected\n      expect(mockChessInstance.move).not.toHaveBeenCalled();\n      \n      // Reset mock for next tests\n      MockedChess.mockImplementation(() => mockChessInstance);\n    });\n\n    it(\"should return false for invalid moves\", () => {\n      const validationMock = {\n        fen: jest.fn().mockReturnValue(StandardPositions.STARTING),\n        move: jest.fn().mockReturnValue(null),\n      } as any;\n\n      MockedChess.mockImplementationOnce(() => validationMock);\n\n      const isValid = chessService.validateMove(createTestMove(\"e2\", \"e5\"));\n\n      expect(isValid).toBe(false);\n    });\n\n    it(\"should handle validation errors gracefully\", () => {\n      const validationMock = {\n        fen: jest.fn().mockImplementation(() => {\n          throw new Error(\"Validation error\");\n        }),\n      } as any;\n\n      MockedChess.mockImplementationOnce(() => validationMock);\n\n      const isValid = chessService.validateMove(createTestMove(\"e2\", \"e4\"));\n\n      expect(isValid).toBe(false);\n    });\n\n    it(\"should validate string moves correctly\", () => {\n      const validationMock = {\n        fen: jest.fn().mockReturnValue(StandardPositions.STARTING),\n        move: jest.fn().mockReturnValue({ san: \"Nf3\" }),\n      } as any;\n\n      MockedChess.mockImplementationOnce(() => validationMock);\n\n      const isValid = chessService.validateMove(\"Nf3\");\n\n      expect(isValid).toBe(true);\n      expect(validationMock.move).toHaveBeenCalledWith(\"Nf3\");\n    });\n  });\n\n  describe(\"Getter Methods\", () => {\n    it(\"should return current FEN from chess instance\", () => {\n      const testFen = EndgamePositions.KPK_WIN;\n      mockChessInstance.fen.mockReturnValue(testFen);\n\n      expect(chessService.getFen()).toBe(testFen);\n      expect(mockChessInstance.fen).toHaveBeenCalled();\n    });\n\n    it(\"should return current PGN from chess instance\", () => {\n      const testPgn = \"1. e4 e5\";\n      mockChessInstance.pgn.mockReturnValue(testPgn);\n\n      expect(chessService.getPgn()).toBe(testPgn);\n      expect(mockChessInstance.pgn).toHaveBeenCalled();\n    });\n\n    it(\"should return move history (ChessService managed)\", () => {\n      const history = chessService.getMoveHistory();\n      expect(Array.isArray(history)).toBe(true);\n      expect(history).toHaveLength(0); // Empty initially\n    });\n\n    it(\"should return game over status from chess instance\", () => {\n      mockChessInstance.isGameOver.mockReturnValue(true);\n      expect(chessService.isGameOver()).toBe(true);\n      expect(mockChessInstance.isGameOver).toHaveBeenCalled();\n    });\n\n    it(\"should return current turn from chess instance\", () => {\n      mockChessInstance.turn.mockReturnValue(\"b\");\n      expect(chessService.turn()).toBe(\"b\");\n      expect(mockChessInstance.turn).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Cache Management\", () => {\n    it(\"should use cached FEN when available\", () => {\n      const testFen = EndgamePositions.KPK_CENTRAL;\n\n      // Initialize once to populate cache\n      chessService.initialize(testFen);\n      expect(MockedChess).toHaveBeenCalledTimes(2); // Constructor + initialize\n\n      // Clear mock call count to test cache usage\n      MockedChess.mockClear();\n\n      // Initialize with same FEN should use cache\n      chessService.initialize(testFen);\n      expect(MockedChess).toHaveBeenCalledTimes(1); // Only new instance for current state\n    });\n\n    it(\"should handle cache overflow gracefully\", () => {\n      // Simulate adding many positions to trigger LRU eviction\n      for (let i = 0; i < 150; i++) {\n        // Exceeds MAX_CACHE_SIZE = 100\n        const testFen = `test-fen-${i}`;\n        chessService.initialize(testFen);\n      }\n\n      // Should not throw errors\n      expect(() => {\n        chessService.initialize(\"final-test-fen\");\n      }).not.toThrow();\n    });\n  });\n\n  describe(\"State Management\", () => {\n    it(\"should build correct state payload for events\", () => {\n      mockChessInstance.fen.mockReturnValue(StandardPositions.AFTER_E4);\n      mockChessInstance.pgn.mockReturnValue(\"1. e4\");\n      mockChessInstance.isGameOver.mockReturnValue(false);\n\n      const mockListener = createMockListener();\n      chessService.subscribe(mockListener);\n\n      mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n      chessService.move(createTestMove(\"e2\", \"e4\"));\n\n      const event = getLastEmittedEvent(mockListener);\n      expect(event!.type).toBe(\"stateUpdate\");\n\n      if (event!.type === \"stateUpdate\") {\n        expect(event!.payload.fen).toBe(StandardPositions.AFTER_E4);\n        expect(event!.payload.pgn).toBe(\"1. e4\");\n        expect(event!.payload.isGameOver).toBe(false);\n        expect(event!.payload.moveHistory).toHaveLength(1);\n        expect(event!.payload.currentMoveIndex).toBe(0);\n      }\n    });\n  });\n\n  describe(\"FEN Cache Management - Issue #86\", () => {\n    it(\"should cache FEN strings for performance\", () => {\n      const testFen = EndgamePositions.KPK_WIN;\n      mockChessInstance.fen.mockReturnValue(testFen);\n\n      // First initialization should create Chess instance\n      chessService.initialize(testFen);\n      expect(MockedChess).toHaveBeenCalledWith(testFen);\n\n      // Reset mock but keep the same return value for fen()\n      MockedChess.mockClear();\n      mockChessInstance.fen.mockReturnValue(testFen);\n\n      // Second initialization with same FEN should create new Chess instance but use cached normalized FEN\n      chessService.initialize(testFen);\n      expect(MockedChess).toHaveBeenCalledTimes(1); // New instance created\n    });\n\n    it(\"should handle cache overflow with LRU eviction\", () => {\n      // Add more than MAX_CACHE_SIZE (100) entries to trigger eviction\n      for (let i = 0; i < 110; i++) {\n        const testFen = `test-fen-${i}-8/8/8/8/8/8/8/k6K w - - 0 1`;\n        mockChessInstance.fen.mockReturnValue(testFen);\n        chessService.initialize(testFen);\n      }\n\n      // Should not throw errors and cache should handle overflow gracefully\n      expect(() => {\n        chessService.initialize(\"final-test-fen-8/8/8/8/8/8/8/k6K w - - 0 1\");\n      }).not.toThrow();\n    });\n\n    it(\"should move accessed items to end in LRU cache\", () => {\n      // This test verifies LRU behavior by checking that frequently accessed items aren't evicted\n      const frequentFen = \"frequent-8/8/8/8/8/8/8/k6K w - - 0 1\";\n      const rareFens: string[] = [];\n\n      // Add frequent FEN\n      mockChessInstance.fen.mockReturnValue(frequentFen);\n      chessService.initialize(frequentFen);\n\n      // Add 99 more FENs to almost fill cache\n      for (let i = 0; i < 99; i++) {\n        const rareFen = `rare-${i}-8/8/8/8/8/8/8/k6K w - - 0 1`;\n        rareFens.push(rareFen);\n        mockChessInstance.fen.mockReturnValue(rareFen);\n        chessService.initialize(rareFen);\n      }\n\n      // Access frequent FEN again (moves to end of LRU)\n      chessService.initialize(frequentFen);\n\n      // Add one more FEN to trigger eviction of oldest (should evict first rare FEN, not frequent)\n      const newFen = \"new-8/8/8/8/8/8/8/k6K w - - 0 1\";\n      mockChessInstance.fen.mockReturnValue(newFen);\n      chessService.initialize(newFen);\n\n      // Frequent FEN should still be accessible (not evicted)\n      chessService.initialize(frequentFen);\n      // If this doesn't throw, the frequent FEN is still cached\n      expect(() => chessService.initialize(frequentFen)).not.toThrow();\n    });\n\n    it(\"should store normalized FEN strings in cache\", () => {\n      const inputFen = EndgamePositions.KPK_WIN;\n      const normalizedFen = StandardPositions.STARTING; // Mock normalization\n\n      mockChessInstance.fen.mockReturnValue(normalizedFen);\n      chessService.initialize(inputFen);\n\n      // Verify that Chess was called with the original FEN\n      expect(MockedChess).toHaveBeenCalledWith(inputFen);\n    });\n\n    it(\"should handle cache key collisions correctly\", () => {\n      const fen1 = \"8/8/8/8/8/8/8/K6k w - - 0 1\";\n      const fen2 = \"8/8/8/8/8/8/8/K6k w - - 0 1\"; // Same FEN\n\n      mockChessInstance.fen.mockReturnValue(fen1);\n\n      // Initialize twice with same FEN\n      chessService.initialize(fen1);\n      const firstCallCount = MockedChess.mock.calls.length;\n\n      chessService.initialize(fen2);\n      const secondCallCount = MockedChess.mock.calls.length;\n\n      // Should use cache for second call (same FEN)\n      expect(secondCallCount).toBe(firstCallCount + 1); // Only one new Chess instance\n    });\n  });\n\n  describe(\"Navigation Methods - Issue #86\", () => {\n    describe(\"undo() method\", () => {\n      let mockListener: jest.MockedFunction<any>;\n\n      beforeEach(() => {\n        mockListener = createMockListener();\n        chessService.subscribe(mockListener);\n      });\n\n      it(\"should successfully undo last move\", () => {\n        // Setup: Make a move first\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        mockChessInstance.fen\n          .mockReturnValueOnce(StandardPositions.STARTING)\n          .mockReturnValueOnce(StandardPositions.AFTER_E4);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n        mockListener.mockClear();\n\n        // Test undo\n        mockChessInstance.fen.mockReturnValue(StandardPositions.STARTING);\n        const result = chessService.undo();\n\n        expect(result).toBe(true);\n        expect(MockedChess).toHaveBeenLastCalledWith(\n          StandardPositions.STARTING,\n        );\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"stateUpdate\",\n            source: \"undo\",\n          }),\n        );\n      });\n\n      it(\"should return false and emit error when no moves to undo\", () => {\n        // No moves made yet\n        const result = chessService.undo();\n\n        expect(result).toBe(false);\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"error\",\n            payload: expect.objectContaining({\n              message: \"Keine Züge zum Rückgängigmachen\",\n            }),\n          }),\n        );\n      });\n\n      it(\"should handle undo exceptions gracefully\", () => {\n        // Setup: Make a move first\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n        mockListener.mockClear();\n\n        // Mock Chess constructor to throw during undo\n        MockedChess.mockImplementationOnce(() => {\n          throw new Error(\"FEN restoration failed\");\n        });\n\n        const result = chessService.undo();\n\n        expect(result).toBe(false);\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"error\",\n            payload: expect.objectContaining({\n              message: \"Fehler beim Rückgängigmachen\",\n            }),\n          }),\n        );\n      });\n\n      it(\"should correctly update currentMoveIndex after undo\", () => {\n        // Make 3 moves\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n        chessService.move(createTestMove(\"e7\", \"e5\"));\n        chessService.move(createTestMove(\"g1\", \"f3\"));\n\n        expect(chessService.getCurrentMoveIndex()).toBe(2);\n\n        // Undo once\n        chessService.undo();\n        expect(chessService.getCurrentMoveIndex()).toBe(1);\n\n        // Undo again\n        chessService.undo();\n        expect(chessService.getCurrentMoveIndex()).toBe(0);\n      });\n    });\n\n    describe(\"redo() method\", () => {\n      let mockListener: jest.MockedFunction<any>;\n\n      beforeEach(() => {\n        mockListener = createMockListener();\n        chessService.subscribe(mockListener);\n      });\n\n      it(\"should successfully redo undone move\", () => {\n        // Setup: Make a move, then undo it\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        mockChessInstance.fen.mockReturnValue(StandardPositions.AFTER_E4);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n        chessService.undo(); // Now currentMoveIndex = -1\n        mockListener.mockClear();\n\n        // Test redo\n        const result = chessService.redo();\n\n        expect(result).toBe(true);\n        expect(MockedChess).toHaveBeenLastCalledWith(\n          StandardPositions.AFTER_E4,\n        );\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"stateUpdate\",\n            source: \"redo\",\n          }),\n        );\n      });\n\n      it(\"should return false and emit error when no moves to redo\", () => {\n        // No moves made or already at end of history\n        const result = chessService.redo();\n\n        expect(result).toBe(false);\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"error\",\n            payload: expect.objectContaining({\n              message: \"Keine Züge zum Wiederherstellen\",\n            }),\n          }),\n        );\n      });\n\n      it(\"should return false when already at end of history\", () => {\n        // Make a move (at end of history)\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n        mockListener.mockClear();\n\n        const result = chessService.redo();\n\n        expect(result).toBe(false);\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"error\",\n            payload: expect.objectContaining({\n              message: \"Keine Züge zum Wiederherstellen\",\n            }),\n          }),\n        );\n      });\n\n      it(\"should handle redo exceptions gracefully\", () => {\n        // Setup: Make move and undo\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n        chessService.undo();\n        mockListener.mockClear();\n\n        // Mock Chess constructor to throw during redo\n        MockedChess.mockImplementationOnce(() => {\n          throw new Error(\"FEN restoration failed\");\n        });\n\n        const result = chessService.redo();\n\n        expect(result).toBe(false);\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"error\",\n            payload: expect.objectContaining({\n              message: \"Fehler beim Wiederherstellen\",\n            }),\n          }),\n        );\n      });\n    });\n\n    describe(\"goToMove() method\", () => {\n      let mockListener: jest.MockedFunction<any>;\n\n      beforeEach(() => {\n        mockListener = createMockListener();\n        chessService.subscribe(mockListener);\n      });\n\n      it(\"should navigate to specific move index successfully\", () => {\n        // Setup: Make 3 moves\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        mockChessInstance.fen.mockReturnValue(StandardPositions.AFTER_E4);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n        chessService.move(createTestMove(\"e7\", \"e5\"));\n        chessService.move(createTestMove(\"g1\", \"f3\"));\n        mockListener.mockClear();\n\n        // Navigate to move 1 (second move)\n        const result = chessService.goToMove(1);\n\n        expect(result).toBe(true);\n        expect(chessService.getCurrentMoveIndex()).toBe(1);\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"stateUpdate\",\n            source: \"load\",\n          }),\n        );\n      });\n\n      it(\"should navigate to starting position with index -1\", () => {\n        // Setup: Make moves\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n        chessService.move(createTestMove(\"e7\", \"e5\"));\n        mockListener.mockClear();\n\n        // Navigate to start (-1)\n        const result = chessService.goToMove(-1);\n\n        expect(result).toBe(true);\n        expect(chessService.getCurrentMoveIndex()).toBe(-1);\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"stateUpdate\",\n            source: \"load\",\n          }),\n        );\n      });\n\n      it(\"should return false for invalid negative index\", () => {\n        const result = chessService.goToMove(-2);\n\n        expect(result).toBe(false);\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"error\",\n            payload: expect.objectContaining({\n              message: \"Ungültiger Zugindex: -2\",\n            }),\n          }),\n        );\n      });\n\n      it(\"should return false for index beyond history length\", () => {\n        // Make 2 moves\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n        chessService.move(createTestMove(\"e7\", \"e5\"));\n        mockListener.mockClear();\n\n        // Try to go to index 5 (out of bounds)\n        const result = chessService.goToMove(5);\n\n        expect(result).toBe(false);\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"error\",\n            payload: expect.objectContaining({\n              message: \"Ungültiger Zugindex: 5\",\n            }),\n          }),\n        );\n      });\n\n      it(\"should handle navigation exceptions gracefully\", () => {\n        // Setup: Make a move\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n        mockListener.mockClear();\n\n        // Mock Chess constructor to throw\n        MockedChess.mockImplementationOnce(() => {\n          throw new Error(\"FEN restoration failed\");\n        });\n\n        const result = chessService.goToMove(0);\n\n        expect(result).toBe(false);\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"error\",\n            payload: expect.objectContaining({\n              message: \"Fehler beim Navigieren zum Zug\",\n            }),\n          }),\n        );\n      });\n    });\n\n    describe(\"reset() method\", () => {\n      let mockListener: jest.MockedFunction<any>;\n\n      beforeEach(() => {\n        mockListener = createMockListener();\n        chessService.subscribe(mockListener);\n      });\n\n      it(\"should reset to initial position\", () => {\n        // Setup: Make some moves\n        mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n        chessService.move(createTestMove(\"e7\", \"e5\"));\n        mockListener.mockClear();\n\n        // Reset\n        chessService.reset();\n\n        expect(chessService.getCurrentMoveIndex()).toBe(-1);\n        expect(chessService.getMoveHistory()).toHaveLength(0);\n        expect(mockListener).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: \"stateUpdate\",\n            source: \"reset\",\n          }),\n        );\n      });\n\n      it(\"should reset to custom initial FEN, not default starting position\", () => {\n        // Initialize with custom FEN\n        const customFen = EndgamePositions.KPK_WIN;\n        mockChessInstance.fen.mockReturnValue(customFen);\n        chessService.initialize(customFen);\n\n        // Make some moves\n        mockChessInstance.move.mockReturnValue({ san: \"Kb8\" } as any);\n        chessService.move(createTestMove(\"a8\", \"b8\"));\n        mockListener.mockClear();\n\n        // Reset should go back to custom FEN, not default\n        chessService.reset();\n\n        expect(MockedChess).toHaveBeenLastCalledWith(customFen);\n      });\n    });\n  });\n\n  describe(\"Complex Navigation Flows - Issue #86\", () => {\n    let mockListener: jest.MockedFunction<any>;\n\n    beforeEach(() => {\n      mockListener = createMockListener();\n      chessService.subscribe(mockListener);\n    });\n\n    it(\"should handle complex navigation scenario: moves -> undo -> new moves -> goTo -> reset\", () => {\n      // Step 1: Make 5 moves\n      mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n      for (let i = 0; i < 5; i++) {\n        chessService.move(createTestMove(\"e2\", \"e4\"));\n      }\n      expect(chessService.getCurrentMoveIndex()).toBe(4);\n      expect(chessService.getMoveHistory()).toHaveLength(5);\n\n      // Step 2: Undo 3 times\n      for (let i = 0; i < 3; i++) {\n        chessService.undo();\n      }\n      expect(chessService.getCurrentMoveIndex()).toBe(1);\n\n      // Step 3: Make 2 different moves (should truncate history)\n      chessService.move(createTestMove(\"g1\", \"f3\"));\n      chessService.move(createTestMove(\"b8\", \"c6\"));\n      expect(chessService.getCurrentMoveIndex()).toBe(3);\n      expect(chessService.getMoveHistory()).toHaveLength(4); // First 2 + 2 new moves\n\n      // Step 4: GoToMove(1) - middle of new history\n      const goToResult = chessService.goToMove(1);\n      expect(goToResult).toBe(true);\n      expect(chessService.getCurrentMoveIndex()).toBe(1);\n\n      // Step 5: Redo should work (still moves ahead in history)\n      const redoResult = chessService.redo();\n      expect(redoResult).toBe(true);\n      expect(chessService.getCurrentMoveIndex()).toBe(2);\n\n      // Step 6: Reset - back to initial position\n      chessService.reset();\n      expect(chessService.getCurrentMoveIndex()).toBe(-1);\n      expect(chessService.getMoveHistory()).toHaveLength(0);\n    });\n\n    it(\"should handle undo/redo at history boundaries correctly\", () => {\n      // Start with no moves - undo should fail\n      expect(chessService.undo()).toBe(false);\n      expect(chessService.redo()).toBe(false);\n\n      // Make 1 move\n      mockChessInstance.move.mockReturnValue({ san: \"e4\" } as any);\n      chessService.move(createTestMove(\"e2\", \"e4\"));\n\n      // At end of history - redo should fail\n      expect(chessService.redo()).toBe(false);\n\n      // Undo should work\n      expect(chessService.undo()).toBe(true);\n      expect(chessService.getCurrentMoveIndex()).toBe(-1);\n\n      // At start of history - undo should fail again\n      expect(chessService.undo()).toBe(false);\n\n      // Redo should work\n      expect(chessService.redo()).toBe(true);\n      expect(chessService.getCurrentMoveIndex()).toBe(0);\n    });\n  });\n});\n"],"names":["jest","mock","MockedChess","Chess","describe","chessService","mockChessInstance","beforeEach","mockClear","move","fn","fen","mockReturnValue","StandardPositions","STARTING","pgn","history","load","isGameOver","turn","moves","mockImplementation","ChessService","it","expect","toBeInstanceOf","toHaveBeenCalledTimes","customFen","EndgamePositions","KPK_WIN","result","initialize","toBe","toHaveBeenLastCalledWith","mockListener","createMockListener","subscribe","mockImplementationOnce","Error","toHaveBeenCalledWith","objectContaining","type","payload","message","san","AFTER_E4","createTestMove","source","isValidStateUpdateEvent","getLastEmittedEvent","unsubscribe","not","toHaveBeenCalled","listeners","createMockListeners","forEach","l","listener","errorListener","toThrow","moveResult","from","to","piece","color","flags","toBeNull","promotionMove","promotion","mockReturnValueOnce","getMoveHistory","toHaveLength","validationMock","get","isValid","validateMove","testFen","getFen","testPgn","getPgn","Array","isArray","KPK_CENTRAL","i","event","moveHistory","currentMoveIndex","frequentFen","rareFens","rareFen","push","newFen","inputFen","normalizedFen","fen1","fen2","firstCallCount","calls","length","secondCallCount","undo","getCurrentMoveIndex","redo","goToMove","reset","goToResult","redoResult"],"mappings":"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"}