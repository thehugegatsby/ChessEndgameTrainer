{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/orchestrators/handlePlayerMove/MoveDialogManager.ts"],"sourcesContent":["/**\n * @file Move dialog manager module\n * @module store/orchestrators/handlePlayerMove/MoveDialogManager\n *\n * @description\n * Manages various move-related dialog interactions including error dialogs,\n * pawn promotion choices, and confirmation dialogs. Centralizes dialog logic\n * for better maintainability and consistent UX throughout the chess training application.\n *\n * @remarks\n * This module provides a unified interface for handling all dialog-based user interactions\n * that occur during chess move execution. It abstracts dialog state management and provides\n * consistent formatting for user-facing messages.\n *\n * Key features:\n * - Error dialog management for suboptimal moves\n * - Pawn promotion dialog coordination (future enhancement)\n * - Confirmation dialogs for critical actions\n * - WDL change formatting with German localization\n * - Move quality assessment and user feedback\n *\n * @example\n * ```typescript\n * const dialogManager = new MoveDialogManager();\n *\n * // Show error for suboptimal move\n * dialogManager.showMoveErrorDialog(api, -1, 0, \"Nf3\");\n *\n * // Close error dialog\n * dialogManager.closeMoveErrorDialog(api);\n *\n * // Format WDL change for user\n * const message = dialogManager.formatWdlChange(-2, 1);\n * // Returns: \"Position verbessert sich um 3 Punkte\"\n * ```\n */\n\nimport { getLogger } from \"@shared/services/logging\";\nimport type { StoreApi } from \"../types\";\n\n/**\n * Data structure for move error dialog state\n * @interface MoveErrorDialogData\n */\nexport interface MoveErrorDialogData {\n  /** Whether the dialog is currently open */\n  isOpen: boolean;\n  /** WDL evaluation before the move */\n  wdlBefore: number;\n  /** WDL evaluation after the move */\n  wdlAfter: number;\n  /** Suggested best move in algebraic notation */\n  bestMove?: string;\n}\n\n/**\n * Data structure for pawn promotion dialog state (future implementation)\n * @interface PromotionDialogData\n */\nexport interface PromotionDialogData {\n  /** Whether the promotion dialog is currently open */\n  isOpen: boolean;\n  /** Source square of the promoting pawn */\n  from: string;\n  /** Target square where pawn promotes */\n  to: string;\n  /** Available pieces for promotion */\n  availablePieces: (\"q\" | \"r\" | \"n\" | \"b\")[];\n  /** Callback function executed when user selects a piece */\n  callback?: (piece: \"q\" | \"r\" | \"n\" | \"b\") => void;\n}\n\n/**\n * Manages comprehensive dialog interactions for chess move feedback\n * @class MoveDialogManager\n *\n * @description\n * Centralizes all dialog-related functionality for chess move execution including:\n * - Error dialogs for suboptimal moves with detailed feedback\n * - Move quality assessment with German localization\n * - WDL (Win/Draw/Loss) change formatting for user understanding\n * - Future support for pawn promotion and confirmation dialogs\n * - Consistent state management through the Zustand store API\n *\n * @remarks\n * The MoveDialogManager provides a clean separation between dialog logic and the main\n * move orchestration flow. It handles all user-facing feedback related to move quality,\n * ensuring consistent presentation of chess evaluation data.\n *\n * Dialog types handled:\n * 1. **Move Error Dialog**: Shows when user makes suboptimal move that changes outcome\n * 2. **Promotion Dialog**: Future enhancement for pawn promotion choices\n * 3. **Confirmation Dialog**: Future enhancement for critical move confirmation\n *\n * The manager integrates with the training store to update UI state and provides\n * localized German messages for all user interactions.\n *\n * @example\n * ```typescript\n * const dialogManager = new MoveDialogManager();\n *\n * // Show detailed error dialog for move that worsened position\n * dialogManager.showMoveErrorDialog(api, 2, -1, \"Be5\");\n *\n * // Check if WDL change is significant enough for dialog\n * const shouldShow = dialogManager.isSignificantWdlChange(2, -1, 1);\n * // Returns: true (change of 3 >= threshold of 1)\n *\n * // Get user-friendly description of move quality\n * const description = dialogManager.getMoveQualityDescription(false, true);\n * // Returns: \"Achtung! Dieser Zug verschlechtert deine Position erheblich.\"\n * ```\n */\nexport class MoveDialogManager {\n  /**\n   * Shows error dialog for suboptimal moves\n   *\n   * @param api - Store API for state updates\n   * @param wdlBefore - Position evaluation before move\n   * @param wdlAfter - Position evaluation after move\n   * @param bestMove - Recommended optimal move (optional)\n   */\n  showMoveErrorDialog(\n    api: StoreApi,\n    wdlBefore: number,\n    wdlAfter: number,\n    bestMove?: string,\n  ): void {\n    getLogger().debug(\"[MoveDialog] Showing move error dialog:\", {\n      wdlBefore,\n      wdlAfter,\n      bestMove,\n    });\n\n    const { setState } = api;\n\n    setState((draft) => {\n      draft.training.moveErrorDialog = {\n        isOpen: true,\n        wdlBefore,\n        wdlAfter,\n        bestMove,\n      };\n    });\n  }\n\n  /**\n   * Closes the move error dialog\n   *\n   * @param api - Store API for state updates\n   */\n  closeMoveErrorDialog(api: StoreApi): void {\n    getLogger().debug(\"[MoveDialog] Closing move error dialog\");\n\n    const { setState } = api;\n\n    setState((draft) => {\n      draft.training.moveErrorDialog = {\n        isOpen: false,\n        wdlBefore: 0,\n        wdlAfter: 0,\n        bestMove: undefined,\n      };\n    });\n  }\n\n  /**\n   * Shows pawn promotion dialog (future implementation)\n   *\n   * @param api - Store API for state updates\n   * @param from - Source square (e.g., \"e7\")\n   * @param to - Target square (e.g., \"e8\")\n   * @param callback - Callback to execute with chosen piece\n   */\n  showPromotionDialog(\n    api: StoreApi,\n    from: string,\n    to: string,\n    callback: (piece: \"q\" | \"r\" | \"n\" | \"b\") => void,\n  ): void {\n    getLogger().debug(\"[MoveDialog] Showing promotion dialog:\", { from, to });\n\n    const { setState } = api;\n\n    // For now, store callback in a temporary way\n    // TODO: Implement proper promotion dialog state management\n    setState((draft) => {\n      // Add promotion dialog to UI state when UI is implemented\n      draft.ui.toasts.push({\n        id: Date.now().toString(),\n        message: `Bauernumwandlung: ${from}-${to}`,\n        type: \"info\",\n      });\n    });\n\n    // For now, auto-promote to queen (chess.js default behavior)\n    const chosenPiece: \"q\" | \"r\" | \"n\" | \"b\" = \"q\";\n    callback(chosenPiece);\n  }\n\n  /**\n   * Shows confirmation dialog for critical moves (future implementation)\n   *\n   * @param api - Store API for state updates\n   * @param message - Confirmation message\n   * @param onConfirm - Callback for confirmed action\n   * @param onCancel - Callback for cancelled action\n   */\n  showConfirmationDialog(\n    api: StoreApi,\n    message: string,\n    onConfirm: () => void,\n    _onCancel: () => void,\n  ): void {\n    getLogger().debug(\"[MoveDialog] Showing confirmation dialog:\", { message });\n\n    const { setState } = api;\n\n    // TODO: Implement proper confirmation dialog state management\n    setState((draft) => {\n      draft.ui.toasts.push({\n        id: Date.now().toString(),\n        message: message,\n        type: \"info\",\n      });\n    });\n\n    // For now, auto-confirm\n    onConfirm();\n  }\n\n  /**\n   * Formats WDL difference for user-friendly display\n   *\n   * @param wdlBefore - WDL before move\n   * @param wdlAfter - WDL after move\n   * @returns Formatted message describing the position change\n   */\n  formatWdlChange(wdlBefore: number, wdlAfter: number): string {\n    const difference = wdlAfter - wdlBefore;\n\n    if (difference > 0) {\n      return `Position verbessert sich um ${difference} Punkte`;\n    } else if (difference < 0) {\n      return `Position verschlechtert sich um ${Math.abs(difference)} Punkte`;\n    } else {\n      return `Position unverändert`;\n    }\n  }\n\n  /**\n   * Determines if a WDL change is significant enough to show dialog\n   *\n   * @param wdlBefore - WDL before move\n   * @param wdlAfter - WDL after move\n   * @param threshold - Minimum change threshold (default: 1)\n   * @returns True if change is significant\n   */\n  isSignificantWdlChange(\n    wdlBefore: number,\n    wdlAfter: number,\n    threshold: number = 1,\n  ): boolean {\n    return Math.abs(wdlAfter - wdlBefore) >= threshold;\n  }\n\n  /**\n   * Gets user-friendly move quality description\n   *\n   * @param wasOptimal - Whether the move was optimal\n   * @param outcomeChanged - Whether the game outcome changed\n   * @returns German description of move quality\n   */\n  getMoveQualityDescription(\n    wasOptimal: boolean,\n    outcomeChanged: boolean,\n  ): string {\n    if (wasOptimal) {\n      return \"Ausgezeichneter Zug! Dies ist einer der besten Züge in dieser Position.\";\n    } else if (outcomeChanged) {\n      return \"Achtung! Dieser Zug verschlechtert deine Position erheblich.\";\n    } else {\n      return \"Guter Zug, aber nicht optimal. Es gibt bessere Alternativen.\";\n    }\n  }\n}\n"],"names":["MoveDialogManager","showMoveErrorDialog","api","wdlBefore","wdlAfter","bestMove","getLogger","debug","setState","draft","training","moveErrorDialog","isOpen","closeMoveErrorDialog","undefined","showPromotionDialog","from","to","callback","ui","toasts","push","id","Date","now","toString","message","type","chosenPiece","showConfirmationDialog","onConfirm","_onCancel","formatWdlChange","difference","Math","abs","isSignificantWdlChange","threshold","getMoveQualityDescription","wasOptimal","outcomeChanged"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmCC;;;;+BA8EYA;;;eAAAA;;;yBA5Ea;AA4EnB,MAAMA;IACX;;;;;;;GAOC,GACDC,oBACEC,GAAa,EACbC,SAAiB,EACjBC,QAAgB,EAChBC,QAAiB,EACX;QACNC,IAAAA,kBAAS,IAAGC,KAAK,CAAC,2CAA2C;YAC3DJ;YACAC;YACAC;QACF;QAEA,MAAM,EAAEG,QAAQ,EAAE,GAAGN;QAErBM,SAAS,CAACC;YACRA,MAAMC,QAAQ,CAACC,eAAe,GAAG;gBAC/BC,QAAQ;gBACRT;gBACAC;gBACAC;YACF;QACF;IACF;IAEA;;;;GAIC,GACDQ,qBAAqBX,GAAa,EAAQ;QACxCI,IAAAA,kBAAS,IAAGC,KAAK,CAAC;QAElB,MAAM,EAAEC,QAAQ,EAAE,GAAGN;QAErBM,SAAS,CAACC;YACRA,MAAMC,QAAQ,CAACC,eAAe,GAAG;gBAC/BC,QAAQ;gBACRT,WAAW;gBACXC,UAAU;gBACVC,UAAUS;YACZ;QACF;IACF;IAEA;;;;;;;GAOC,GACDC,oBACEb,GAAa,EACbc,IAAY,EACZC,EAAU,EACVC,QAAgD,EAC1C;QACNZ,IAAAA,kBAAS,IAAGC,KAAK,CAAC,0CAA0C;YAAES;YAAMC;QAAG;QAEvE,MAAM,EAAET,QAAQ,EAAE,GAAGN;QAErB,6CAA6C;QAC7C,2DAA2D;QAC3DM,SAAS,CAACC;YACR,0DAA0D;YAC1DA,MAAMU,EAAE,CAACC,MAAM,CAACC,IAAI,CAAC;gBACnBC,IAAIC,KAAKC,GAAG,GAAGC,QAAQ;gBACvBC,SAAS,CAAC,kBAAkB,EAAEV,KAAK,CAAC,EAAEC,IAAI;gBAC1CU,MAAM;YACR;QACF;QAEA,6DAA6D;QAC7D,MAAMC,cAAqC;QAC3CV,SAASU;IACX;IAEA;;;;;;;GAOC,GACDC,uBACE3B,GAAa,EACbwB,OAAe,EACfI,SAAqB,EACrBC,SAAqB,EACf;QACNzB,IAAAA,kBAAS,IAAGC,KAAK,CAAC,6CAA6C;YAAEmB;QAAQ;QAEzE,MAAM,EAAElB,QAAQ,EAAE,GAAGN;QAErB,8DAA8D;QAC9DM,SAAS,CAACC;YACRA,MAAMU,EAAE,CAACC,MAAM,CAACC,IAAI,CAAC;gBACnBC,IAAIC,KAAKC,GAAG,GAAGC,QAAQ;gBACvBC,SAASA;gBACTC,MAAM;YACR;QACF;QAEA,wBAAwB;QACxBG;IACF;IAEA;;;;;;GAMC,GACDE,gBAAgB7B,SAAiB,EAAEC,QAAgB,EAAU;QAC3D,MAAM6B,aAAa7B,WAAWD;QAE9B,IAAI8B,aAAa,GAAG;YAClB,OAAO,CAAC,4BAA4B,EAAEA,WAAW,OAAO,CAAC;QAC3D,OAAO,IAAIA,aAAa,GAAG;YACzB,OAAO,CAAC,gCAAgC,EAAEC,KAAKC,GAAG,CAACF,YAAY,OAAO,CAAC;QACzE,OAAO;YACL,OAAO,CAAC,oBAAoB,CAAC;QAC/B;IACF;IAEA;;;;;;;GAOC,GACDG,uBACEjC,SAAiB,EACjBC,QAAgB,EAChBiC,YAAoB,CAAC,EACZ;QACT,OAAOH,KAAKC,GAAG,CAAC/B,WAAWD,cAAckC;IAC3C;IAEA;;;;;;GAMC,GACDC,0BACEC,UAAmB,EACnBC,cAAuB,EACf;QACR,IAAID,YAAY;YACd,OAAO;QACT,OAAO,IAAIC,gBAAgB;YACzB,OAAO;QACT,OAAO;YACL,OAAO;QACT;IACF;AACF"}