{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/store/slices/progressSlice.test.ts"],"sourcesContent":["/**\n * @file Unit tests for ProgressSlice\n * @description Tests the progress tracking and spaced repetition functionality\n */\n\nimport { create } from 'zustand';\nimport { immer } from 'zustand/middleware/immer';\nimport { createProgressSlice } from '@shared/store/slices/progressSlice';\nimport type { ProgressSlice, CardProgress, UserStats } from '@shared/store/slices/types';\n\n// Mock logger to avoid console noise in tests\njest.mock('@shared/services/logging/Logger', () => ({\n  getLogger: () => ({\n    setContext: jest.fn().mockReturnThis(),\n    debug: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  }),\n}));\n\n// Test store with minimal RootState structure\ninterface TestRootState {\n  progress: ProgressSlice;\n  // Add minimal mocks for other slices to satisfy type requirements\n  game: any;\n  training: any;\n  tablebase: any;\n  ui: any;\n  handlePlayerMove: any;\n  loadTrainingContext: any;\n  reset: any;\n  hydrate: any;\n  _trainingActions: any;\n}\n\n// Helper to create a test store with only the progress slice\nconst createTestStore = () => {\n  return create<TestRootState>()(\n    immer((set, get, api) => {\n      // Create the progress slice\n      const progressSlice = createProgressSlice(set as any, get as any, api as any);\n      \n      // Return minimal root state with progress slice\n      return {\n        progress: progressSlice,\n        // Mock other required properties\n        game: {} as any,\n        training: {} as any,\n        tablebase: {} as any,\n        ui: {} as any,\n        handlePlayerMove: jest.fn(),\n        loadTrainingContext: jest.fn(),\n        reset: jest.fn(),\n        hydrate: jest.fn(),\n        _trainingActions: {} as any,\n      };\n    })\n  );\n};\n\ndescribe('ProgressSlice', () => {\n  let store: ReturnType<typeof createTestStore>;\n\n  beforeEach(() => {\n    store = createTestStore();\n  });\n\n  describe('Initial State', () => {\n    it('should have correct initial state', () => {\n      const state = store.getState().progress;\n      expect(state.userStats).toBeNull();\n      expect(state.sessionProgress).toEqual({\n        positionsCompleted: 0,\n        positionsCorrect: 0,\n        positionsAttempted: 0,\n        timeSpent: 0,\n        hintsUsed: 0,\n        mistakesMade: 0,\n      });\n      expect(state.cardProgress).toEqual({});\n      expect(state.loading).toBe(false);\n      expect(state.syncStatus).toBe('idle');\n      expect(state.lastSync).toBeNull();\n      expect(state.syncError).toBeNull();\n    });\n  });\n\n  describe('Basic State Setters', () => {\n    it('should set user stats', () => {\n      const mockStats: UserStats = {\n        userId: 'test-user',\n        totalPositionsCompleted: 10,\n        overallSuccessRate: 0.75,\n        totalTimeSpent: 3600,\n        totalHintsUsed: 5,\n        lastActive: Date.now(),\n      };\n\n      store.getState().progress.setUserStats(mockStats);\n      expect(store.getState().progress.userStats).toEqual(mockStats);\n    });\n\n    it('should update session progress', () => {\n      store.getState().progress.updateSessionProgress({\n        positionsCompleted: 5,\n        positionsCorrect: 4,\n      });\n\n      const progress = store.getState().progress.sessionProgress;\n      expect(progress.positionsCompleted).toBe(5);\n      expect(progress.positionsCorrect).toBe(4);\n      expect(progress.positionsAttempted).toBe(0); // Other fields unchanged\n    });\n\n    it('should set sync status', () => {\n      store.getState().progress.setSyncStatus('syncing');\n      expect(store.getState().progress.syncStatus).toBe('syncing');\n\n      store.getState().progress.setSyncStatus('error');\n      expect(store.getState().progress.syncStatus).toBe('error');\n    });\n\n    it('should set loading state', () => {\n      store.getState().progress.setLoading(true);\n      expect(store.getState().progress.loading).toBe(true);\n\n      store.getState().progress.setLoading(false);\n      expect(store.getState().progress.loading).toBe(false);\n    });\n  });\n\n  describe('Card Progress Management', () => {\n    it('should initialize cards from array', () => {\n      const cards: CardProgress[] = [\n        {\n          id: 'pos1',\n          nextReviewAt: Date.now() + 86400000,\n          interval: 1,\n          efactor: 2.5,\n          lapses: 0,\n          repetition: 1,\n          lastReviewedAt: Date.now(),\n        },\n        {\n          id: 'pos2',\n          nextReviewAt: Date.now() + 172800000,\n          interval: 2,\n          efactor: 2.3,\n          lapses: 1,\n          repetition: 3,\n          lastReviewedAt: Date.now(),\n        },\n      ];\n\n      store.getState().progress.initializeCards(cards);\n      const cardProgress = store.getState().progress.cardProgress;\n      \n      expect(Object.keys(cardProgress)).toHaveLength(2);\n      expect(cardProgress['pos1']).toBeDefined();\n      expect(cardProgress['pos2']).toBeDefined();\n      expect(cardProgress['pos1'].interval).toBe(1);\n      expect(cardProgress['pos2'].interval).toBe(2);\n    });\n\n    it('should create new card on first attempt', () => {\n      const positionId = 'new-position';\n      store.getState().progress.recordAttempt(positionId, true);\n\n      const card = store.getState().progress.cardProgress[positionId];\n      expect(card).toBeDefined();\n      expect(card.id).toBe(positionId);\n      expect(card.interval).toBe(1);\n      expect(card.efactor).toBe(2.5);\n      expect(card.repetition).toBe(1);\n      expect(card.lapses).toBe(0);\n    });\n\n    it('should update existing card on correct attempt', () => {\n      const positionId = 'test-position';\n      \n      // First attempt - creates card\n      store.getState().progress.recordAttempt(positionId, true);\n      \n      // Second attempt - correct\n      store.getState().progress.recordAttempt(positionId, true);\n      \n      const card = store.getState().progress.cardProgress[positionId];\n      expect(card.repetition).toBe(2);\n      expect(card.interval).toBeGreaterThan(1); // Should increase\n      expect(card.efactor).toBe(2.5); // Capped at 2.5 (already at max)\n      expect(card.lapses).toBe(0);\n    });\n\n    it('should reset interval on incorrect attempt', () => {\n      const positionId = 'test-position';\n      \n      // Create card with some progress\n      store.getState().progress.recordAttempt(positionId, true);\n      store.getState().progress.recordAttempt(positionId, true);\n      \n      const intervalBefore = store.getState().progress.cardProgress[positionId].interval;\n      expect(intervalBefore).toBeGreaterThan(1);\n      \n      // Incorrect attempt\n      store.getState().progress.recordAttempt(positionId, false);\n      \n      const card = store.getState().progress.cardProgress[positionId];\n      expect(card.interval).toBe(1); // Reset to 1\n      expect(card.lapses).toBe(1);\n      expect(card.efactor).toBeLessThan(2.5); // Should decrease\n    });\n\n    it('should validate positionId in recordAttempt', () => {\n      // Invalid IDs should be ignored\n      store.getState().progress.recordAttempt('', true);\n      store.getState().progress.recordAttempt(null as any, true);\n      store.getState().progress.recordAttempt('   ', true);\n      \n      expect(Object.keys(store.getState().progress.cardProgress)).toHaveLength(0);\n      \n      // Valid ID with whitespace should be trimmed\n      store.getState().progress.recordAttempt('  valid-id  ', true);\n      expect(store.getState().progress.cardProgress['valid-id']).toBeDefined();\n    });\n\n    it('should reset card progress to default values', () => {\n      const positionId = 'test-position';\n      \n      // Create and update a card\n      store.getState().progress.recordAttempt(positionId, true);\n      store.getState().progress.recordAttempt(positionId, true); // Make progress\n      \n      const cardBeforeReset = store.getState().progress.cardProgress[positionId];\n      expect(cardBeforeReset.repetition).toBeGreaterThan(0);\n      \n      // Reset the card\n      store.getState().progress.resetCardProgress(positionId);\n      \n      const resetCard = store.getState().progress.cardProgress[positionId];\n      expect(resetCard).toBeDefined();\n      expect(resetCard.id).toBe(positionId);\n      expect(resetCard.interval).toBe(0);\n      expect(resetCard.repetition).toBe(0);\n      expect(resetCard.efactor).toBe(2.5);\n      expect(resetCard.lapses).toBe(0);\n    });\n\n    it('should validate positionId in resetCardProgress', () => {\n      store.getState().progress.recordAttempt('test', true);\n      \n      // Invalid IDs should be ignored\n      store.getState().progress.resetCardProgress('');\n      store.getState().progress.resetCardProgress(null as any);\n      \n      expect(store.getState().progress.cardProgress['test']).toBeDefined();\n    });\n  });\n\n  describe('Batch Operations', () => {\n    it('should batch update multiple fields', () => {\n      const updates = {\n        userStats: {\n          totalPositionsCompleted: 15,\n        },\n        sessionProgress: {\n          positionsCompleted: 3,\n          positionsCorrect: 2,\n        },\n      };\n\n      store.getState().progress.batchUpdateProgress(updates);\n      \n      const state = store.getState().progress;\n      // UserStats should be created from partial\n      expect(state.userStats?.totalPositionsCompleted).toBe(15);\n      // Session progress should be merged\n      expect(state.sessionProgress.positionsCompleted).toBe(3);\n      expect(state.sessionProgress.positionsCorrect).toBe(2);\n    });\n\n    it('should merge cardProgress in batch update', () => {\n      // Set initial cards\n      store.getState().progress.recordAttempt('pos1', true);\n      store.getState().progress.recordAttempt('pos2', true);\n      \n      const newCard: CardProgress = {\n        id: 'pos3',\n        nextReviewAt: Date.now(),\n        interval: 5,\n        efactor: 2.1,\n        lapses: 2,\n        repetition: 10,\n        lastReviewedAt: Date.now(),\n      };\n      \n      store.getState().progress.batchUpdateProgress({\n        cardProgress: { pos3: newCard },\n      });\n      \n      const cardProgress = store.getState().progress.cardProgress;\n      expect(Object.keys(cardProgress)).toHaveLength(3);\n      expect(cardProgress['pos3'].interval).toBe(5);\n    });\n  });\n\n  describe('Reset Functionality', () => {\n    it('should reset all progress state', () => {\n      // Set some state\n      store.getState().progress.setUserStats({\n        userId: 'test',\n        totalPositionsCompleted: 10,\n        overallSuccessRate: 0.8,\n        totalTimeSpent: 1000,\n        totalHintsUsed: 5,\n        lastActive: Date.now(),\n      });\n      store.getState().progress.recordAttempt('pos1', true);\n      store.getState().progress.setSyncStatus('syncing');\n      \n      // Reset\n      store.getState().progress.resetProgress();\n      \n      const state = store.getState().progress;\n      expect(state.userStats).toBeNull();\n      expect(state.cardProgress).toEqual({});\n      expect(state.syncStatus).toBe('idle');\n      expect(state.sessionProgress.positionsCompleted).toBe(0);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle setting invalid card progress', () => {\n      store.getState().progress.setCardProgress('', {} as CardProgress);\n      store.getState().progress.setCardProgress('test', null as any);\n      \n      expect(Object.keys(store.getState().progress.cardProgress)).toHaveLength(0);\n    });\n\n    it('should handle ease factor bounds in SM-2', () => {\n      const positionId = 'test';\n      \n      // Many correct attempts - ease factor should cap at 2.5\n      for (let i = 0; i < 10; i++) {\n        store.getState().progress.recordAttempt(positionId, true);\n      }\n      \n      let card = store.getState().progress.cardProgress[positionId];\n      expect(card.efactor).toBeLessThanOrEqual(2.5);\n      \n      // Many incorrect attempts - ease factor should floor at 1.3\n      for (let i = 0; i < 10; i++) {\n        store.getState().progress.recordAttempt(positionId, false);\n      }\n      \n      card = store.getState().progress.cardProgress[positionId];\n      expect(card.efactor).toBeGreaterThanOrEqual(1.3);\n    });\n  });\n});\n"],"names":["jest","mock","getLogger","setContext","fn","mockReturnThis","debug","warn","error","createTestStore","create","immer","set","get","api","progressSlice","createProgressSlice","progress","game","training","tablebase","ui","handlePlayerMove","loadTrainingContext","reset","hydrate","_trainingActions","describe","store","beforeEach","it","state","getState","expect","userStats","toBeNull","sessionProgress","toEqual","positionsCompleted","positionsCorrect","positionsAttempted","timeSpent","hintsUsed","mistakesMade","cardProgress","loading","toBe","syncStatus","lastSync","syncError","mockStats","userId","totalPositionsCompleted","overallSuccessRate","totalTimeSpent","totalHintsUsed","lastActive","Date","now","setUserStats","updateSessionProgress","setSyncStatus","setLoading","cards","id","nextReviewAt","interval","efactor","lapses","repetition","lastReviewedAt","initializeCards","Object","keys","toHaveLength","toBeDefined","positionId","recordAttempt","card","toBeGreaterThan","intervalBefore","toBeLessThan","cardBeforeReset","resetCardProgress","resetCard","updates","batchUpdateProgress","newCard","pos3","resetProgress","setCardProgress","i","toBeLessThanOrEqual","toBeGreaterThanOrEqual"],"mappings":"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"}