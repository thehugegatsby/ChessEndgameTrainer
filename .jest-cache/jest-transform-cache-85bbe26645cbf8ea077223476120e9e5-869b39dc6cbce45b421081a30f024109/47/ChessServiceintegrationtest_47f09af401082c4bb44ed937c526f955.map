{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/integration/services/ChessService.integration.test.ts"],"sourcesContent":["/**\n * ChessService Integration Tests - Issue #85 Phase 1\n *\n * Focus: Integration testing with real chess.js (30% of total test strategy)\n * Target: Verify real chess rules work correctly with ChessService\n * Strategy: Use real chess.js to test actual chess logic integration\n */\n\nimport { ChessService } from \"@shared/services/ChessService\";\nimport {\n  StandardPositions,\n  EndgamePositions,\n  SpecialPositions,\n} from \"../../fixtures/fenPositions\";\nimport {\n  createMockListener,\n  getLastEmittedEvent,\n  isValidStateUpdateEvent,\n  createTestMove,\n  expectFenToEqual,\n} from \"../../helpers/chessTestHelpers\";\n\n// NO jest.mock('chess.js') here - we want the real chess.js\n\ndescribe(\"ChessService Integration Tests\", () => {\n  let chessService: ChessService;\n\n  beforeEach(() => {\n    chessService = new ChessService(); // Uses real Chess.js\n  });\n\n  describe(\"Real Chess Rules\", () => {\n    it(\"should execute standard opening moves correctly\", () => {\n      const result = chessService.move(createTestMove(\"e2\", \"e4\"));\n\n      expect(result).not.toBeNull();\n      expect(result?.san).toBe(\"e4\");\n      // chess.js correctly returns - for en passant after e4 (no en passant possible)\n      const currentFen = chessService.getFen();\n      expect(currentFen).toContain(\"4P3\"); // Pawn on e4\n      expect(currentFen).toContain(\"b KQkq -\"); // No en passant available\n    });\n\n    it(\"should handle castling moves correctly\", () => {\n      chessService.initialize(StandardPositions.CASTLING_AVAILABLE);\n\n      // Test kingside castling for white\n      const result = chessService.move(createTestMove(\"e1\", \"g1\"));\n\n      expect(result).not.toBeNull();\n      expect(result?.san).toBe(\"O-O\");\n      expect(chessService.getFen()).toContain(\"R4RK1\"); // King on g1, Rook on f1 after castling\n    });\n\n    it(\"should handle en passant captures correctly\", () => {\n      chessService.initialize(StandardPositions.EN_PASSANT);\n\n      const result = chessService.move(createTestMove(\"e5\", \"d6\"));\n\n      expect(result).not.toBeNull();\n      expect(result?.san).toBe(\"exd6\");\n      expect(result?.flags).toContain(\"e\"); // en passant flag\n      // The captured pawn should be gone from d5\n      expect(chessService.getFen()).not.toContain(\"3pP3\");\n    });\n\n    it(\"should handle pawn promotion correctly\", () => {\n      chessService.initialize(SpecialPositions.PROMOTION);\n\n      const result = chessService.move(createTestMove(\"f7\", \"f8\", \"q\"));\n\n      expect(result).not.toBeNull();\n      expect(result?.promotion).toBe(\"q\");\n      expect(chessService.getFen()).toContain(\"Q\"); // Queen on f8\n    });\n\n    it(\"should detect checkmate correctly\", () => {\n      chessService.initialize(SpecialPositions.CHECKMATE);\n\n      expect(chessService.isGameOver()).toBe(true);\n    });\n\n    it(\"should detect stalemate correctly\", () => {\n      chessService.initialize(SpecialPositions.STALEMATE);\n\n      expect(chessService.isGameOver()).toBe(true);\n      // Note: The SpecialPositions.STALEMATE should be a real stalemate position\n    });\n\n    it(\"should reject illegal moves\", () => {\n      chessService.initialize(StandardPositions.STARTING);\n      const initialFen = chessService.getFen();\n\n      const result = chessService.move(createTestMove(\"e2\", \"e5\")); // Illegal pawn jump\n\n      expect(result).toBeNull();\n      expect(chessService.getFen()).toBe(initialFen); // Position unchanged\n    });\n\n    it(\"should handle complex move sequences\", () => {\n      // Play a short opening sequence\n      const moves = [\n        createTestMove(\"e2\", \"e4\"), // 1. e4\n        createTestMove(\"e7\", \"e5\"), // 1... e5\n        createTestMove(\"g1\", \"f3\"), // 2. Nf3\n        createTestMove(\"b8\", \"c6\"), // 2... Nc6\n      ];\n\n      let expectedMoveCount = 0;\n      moves.forEach((move) => {\n        const result = chessService.move(move);\n        expect(result).not.toBeNull();\n        expectedMoveCount++;\n        expect(chessService.getMoveHistory()).toHaveLength(expectedMoveCount);\n      });\n\n      // Final position should be after Italian/Spanish opening setup\n      expect(chessService.getFen()).toContain(\n        \"r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R\",\n      );\n    });\n  });\n\n  describe(\"Move Validation Integration\", () => {\n    it(\"should validate moves without changing state\", () => {\n      chessService.initialize(StandardPositions.STARTING);\n      const initialFen = chessService.getFen();\n      const initialHistory = chessService.getMoveHistory();\n\n      const validGood = chessService.validateMove(createTestMove(\"e2\", \"e4\"));\n      const validBad = chessService.validateMove(createTestMove(\"e2\", \"e5\"));\n\n      expect(validGood).toBe(true);\n      expect(validBad).toBe(false);\n\n      // State should be completely unchanged\n      expect(chessService.getFen()).toBe(initialFen);\n      expect(chessService.getMoveHistory()).toEqual(initialHistory);\n    });\n\n    it(\"should validate promotion moves correctly\", () => {\n      chessService.initialize(SpecialPositions.PROMOTION);\n\n      const validPromotion = chessService.validateMove(\n        createTestMove(\"f7\", \"f8\", \"q\"),\n      );\n      const invalidNoPromotion = chessService.validateMove(\n        createTestMove(\"f7\", \"f8\"),\n      ); // Missing promotion\n\n      expect(validPromotion).toBe(true);\n      expect(invalidNoPromotion).toBe(false);\n    });\n\n    it(\"should validate string moves in SAN notation\", () => {\n      chessService.initialize(StandardPositions.STARTING);\n\n      const validSAN = chessService.validateMove(\"e4\");\n      const invalidSAN = chessService.validateMove(\"e5\"); // Illegal as opening move for white\n\n      expect(validSAN).toBe(true);\n      expect(invalidSAN).toBe(false);\n    });\n  });\n\n  describe(\"Event System Integration\", () => {\n    it(\"should emit correct events for real moves\", () => {\n      const mockListener = createMockListener();\n      chessService.subscribe(mockListener);\n\n      const result = chessService.move(createTestMove(\"e2\", \"e4\"));\n\n      expect(result).not.toBeNull();\n\n      const event = getLastEmittedEvent(mockListener);\n      expect(event).toBeDefined();\n      expect(event!.type).toBe(\"stateUpdate\");\n      expect(isValidStateUpdateEvent(event!)).toBe(true);\n\n      if (event!.type === \"stateUpdate\") {\n        expect(event!.payload.fen).toContain(\"4P3\"); // Pawn on e4\n        expect(event!.payload.moveHistory).toHaveLength(1);\n        expect(event!.payload.currentMoveIndex).toBe(0);\n        expect(event!.payload.pgn).toContain(\"e4\");\n        expect(event!.source).toBe(\"move\");\n      }\n    });\n\n    it(\"should emit error events for invalid moves\", () => {\n      const mockListener = createMockListener();\n      chessService.subscribe(mockListener);\n\n      const result = chessService.move(createTestMove(\"e1\", \"e2\")); // Invalid move - king can't move into own pawn\n\n      expect(result).toBeNull();\n\n      const event = getLastEmittedEvent(mockListener);\n      expect(event?.type).toBe(\"error\");\n\n      if (event?.type === \"error\") {\n        expect(event.payload.message).toBe(\"Fehler beim AusfÃ¼hren des Zuges\"); // ChessService returns this for exceptions\n        expect(event.payload.error).toBeInstanceOf(Error);\n      }\n    });\n\n    it(\"should emit state updates on initialization\", () => {\n      const mockListener = createMockListener();\n      chessService.subscribe(mockListener);\n\n      const result = chessService.initialize(EndgamePositions.KPK_WIN);\n\n      expect(result).toBe(true);\n\n      const event = getLastEmittedEvent(mockListener);\n      expect(event!.type).toBe(\"stateUpdate\");\n\n      if (event!.type === \"stateUpdate\") {\n        expect(event!.source).toBe(\"load\");\n        expect(event!.payload.fen).toBe(EndgamePositions.KPK_WIN);\n        expect(event!.payload.moveHistory).toHaveLength(0);\n        expect(event!.payload.currentMoveIndex).toBe(-1);\n      }\n    });\n  });\n\n  describe(\"Endgame Scenarios\", () => {\n    it(\"should handle KPK (King + Pawn vs King) endgame correctly\", () => {\n      chessService.initialize(EndgamePositions.KPK_WIN);\n\n      // Test a typical winning move in KPK\n      const result = chessService.move(createTestMove(\"a8\", \"b8\")); // King move\n\n      expect(result).not.toBeNull();\n      expect(result?.san).toBe(\"Kb8\");\n      expect(chessService.getFen()).toContain(\"1K6/P7/k7\"); // King moved to b8\n    });\n\n    it(\"should handle KQK (King + Queen vs King) endgame correctly\", () => {\n      chessService.initialize(EndgamePositions.KQK_WIN);\n\n      // Queen should have many legal moves in this position\n      const fenBefore = chessService.getFen();\n      expect(fenBefore).toContain(\"Q\"); // Queen present\n      expect(chessService.isGameOver()).toBe(false); // Not mate yet\n\n      // Make a queen move\n      const result = chessService.move(createTestMove(\"h1\", \"h8\")); // Example queen move\n\n      if (result) {\n        expect(result.piece).toBe(\"q\");\n        expect(chessService.getFen()).toContain(\"Q\"); // Queen still present\n      }\n    });\n\n    it(\"should detect insufficient material correctly\", () => {\n      chessService.initialize(SpecialPositions.INSUFFICIENT_MATERIAL.KK);\n\n      expect(chessService.isGameOver()).toBe(true);\n    });\n  });\n\n  describe(\"Position Validation\", () => {\n    it(\"should accept valid FEN positions\", () => {\n      const validPositions = [\n        StandardPositions.STARTING,\n        StandardPositions.AFTER_E4,\n        EndgamePositions.KPK_WIN,\n        EndgamePositions.KQK_WIN,\n      ];\n\n      validPositions.forEach((fen) => {\n        const result = chessService.initialize(fen);\n        expect(result).toBe(true);\n        // For AFTER_E4, chess.js correctly shows no en passant\n        if (fen === StandardPositions.AFTER_E4) {\n          expect(chessService.getFen()).toContain(\"4P3\");\n          expect(chessService.getFen()).toContain(\"b KQkq -\");\n        } else {\n          expect(chessService.getFen()).toBe(fen);\n        }\n      });\n    });\n\n    it(\"should reject invalid FEN positions\", () => {\n      const mockListener = createMockListener();\n      chessService.subscribe(mockListener);\n\n      const invalidFen = \"invalid-fen-string\";\n      const result = chessService.initialize(invalidFen);\n\n      expect(result).toBe(false);\n\n      const event = getLastEmittedEvent(mockListener);\n      expect(event?.type).toBe(\"error\");\n    });\n  });\n\n  describe(\"Real Chess Logic Edge Cases\", () => {\n    it(\"should handle castling restrictions correctly\", () => {\n      // Start with castling available position\n      chessService.initialize(StandardPositions.CASTLING_AVAILABLE);\n\n      // Move the king first\n      chessService.move(createTestMove(\"e1\", \"f1\")); // King move\n      chessService.move(createTestMove(\"e8\", \"d8\")); // Black king move\n      chessService.move(createTestMove(\"f1\", \"e1\")); // King back\n\n      // Now castling should be invalid (king has moved)\n      const castlingResult = chessService.move(createTestMove(\"e1\", \"g1\"));\n      expect(castlingResult).toBeNull(); // Should be invalid\n    });\n\n    it(\"should handle check restrictions correctly\", () => {\n      // Set up a position where black king is in check from white queen on g5\n      chessService.initialize(SpecialPositions.BLACK_IN_CHECK);\n\n      // Black king is in check from white queen on g5\n      // Should only allow moves that get out of check\n      const illegalMove = chessService.move(createTestMove(\"a7\", \"a6\")); // Doesn't address check\n      expect(illegalMove).toBeNull();\n\n      // Legal move that blocks check\n      const legalMove = chessService.move(createTestMove(\"f7\", \"f6\")); // Block with pawn on f6\n      if (legalMove) {\n        expect(legalMove.san).toBe(\"f6\");\n      }\n    });\n  });\n\n  describe(\"Navigation Integration - Issue #86\", () => {\n    it(\"should handle real navigation with actual chess moves\", () => {\n      // Make a real opening sequence\n      chessService.move({ from: \"e2\", to: \"e4\" });\n      chessService.move({ from: \"e7\", to: \"e5\" });\n      chessService.move({ from: \"g1\", to: \"f3\" });\n\n      expect(chessService.getCurrentMoveIndex()).toBe(2);\n      expect(chessService.getMoveHistory()).toHaveLength(3);\n\n      // Undo to middle of sequence\n      expect(chessService.undo()).toBe(true);\n      expect(chessService.getCurrentMoveIndex()).toBe(1);\n\n      // Make different move (history truncation) - it's white's turn after undoing Nf3\n      const differentMove = chessService.move({ from: \"f1\", to: \"c4\" }); // Bc4 instead of Nf3\n      expect(differentMove).not.toBeNull();\n      expect(chessService.getCurrentMoveIndex()).toBe(2);\n      expect(chessService.getMoveHistory()).toHaveLength(3); // e4, e5, Bc4\n\n      // Navigate to start\n      expect(chessService.goToMove(-1)).toBe(true);\n      expect(chessService.getCurrentMoveIndex()).toBe(-1);\n      expect(chessService.getFen()).toBe(StandardPositions.STARTING);\n\n      // Navigate to middle\n      expect(chessService.goToMove(1)).toBe(true);\n      expect(chessService.getCurrentMoveIndex()).toBe(1);\n      expect(chessService.getFen()).toBe(StandardPositions.AFTER_E4_E5);\n    });\n\n    it(\"should maintain FEN accuracy throughout navigation\", () => {\n      // Create a specific position sequence\n      const moves = [\n        { from: \"e2\", to: \"e4\" },\n        { from: \"e7\", to: \"e5\" },\n        { from: \"g1\", to: \"f3\" },\n        { from: \"b8\", to: \"c6\" },\n      ];\n\n      // Capture FENs at each step\n      const fenHistory: string[] = [chessService.getFen()]; // Starting position\n\n      moves.forEach((move) => {\n        chessService.move(move);\n        fenHistory.push(chessService.getFen());\n      });\n\n      // Navigate backwards and verify each FEN matches\n      for (let i = moves.length - 1; i >= -1; i--) {\n        expect(chessService.goToMove(i)).toBe(true);\n        expect(chessService.getCurrentMoveIndex()).toBe(i);\n        expect(chessService.getFen()).toBe(fenHistory[i + 1]); // +1 because fenHistory includes starting pos\n      }\n\n      // Navigate forwards and verify again\n      for (let i = 0; i < moves.length; i++) {\n        expect(chessService.goToMove(i)).toBe(true);\n        expect(chessService.getCurrentMoveIndex()).toBe(i);\n        expect(chessService.getFen()).toBe(fenHistory[i + 1]);\n      }\n    });\n\n    it(\"should handle reset to custom starting position\", () => {\n      // Initialize with KPK endgame\n      chessService.initialize(EndgamePositions.KPK_WIN);\n      const initialFen = chessService.getFen();\n\n      // Make some moves\n      chessService.move({ from: \"a8\", to: \"b8\" });\n      chessService.move({ from: \"a6\", to: \"a5\" });\n\n      expect(chessService.getCurrentMoveIndex()).toBe(1);\n      expect(chessService.getMoveHistory()).toHaveLength(2);\n\n      // Reset should go back to KPK position, not default starting position\n      chessService.reset();\n\n      expect(chessService.getCurrentMoveIndex()).toBe(-1);\n      expect(chessService.getMoveHistory()).toHaveLength(0);\n      expect(chessService.getFen()).toBe(initialFen);\n    });\n\n    it(\"should handle navigation error boundaries with real positions\", () => {\n      // Make 2 moves\n      chessService.move({ from: \"e2\", to: \"e4\" });\n      chessService.move({ from: \"e7\", to: \"e5\" });\n\n      // Test invalid indices\n      expect(chessService.goToMove(-2)).toBe(false);\n      expect(chessService.goToMove(5)).toBe(false);\n\n      // Valid indices should still work\n      expect(chessService.goToMove(0)).toBe(true);\n      expect(chessService.getCurrentMoveIndex()).toBe(0);\n\n      expect(chessService.goToMove(-1)).toBe(true);\n      expect(chessService.getCurrentMoveIndex()).toBe(-1);\n    });\n  });\n});\n"],"names":["describe","chessService","beforeEach","ChessService","it","result","move","createTestMove","expect","not","toBeNull","san","toBe","currentFen","getFen","toContain","initialize","StandardPositions","CASTLING_AVAILABLE","EN_PASSANT","flags","SpecialPositions","PROMOTION","promotion","CHECKMATE","isGameOver","STALEMATE","STARTING","initialFen","moves","expectedMoveCount","forEach","getMoveHistory","toHaveLength","initialHistory","validGood","validateMove","validBad","toEqual","validPromotion","invalidNoPromotion","validSAN","invalidSAN","mockListener","createMockListener","subscribe","event","getLastEmittedEvent","toBeDefined","type","isValidStateUpdateEvent","payload","fen","moveHistory","currentMoveIndex","pgn","source","message","error","toBeInstanceOf","Error","EndgamePositions","KPK_WIN","KQK_WIN","fenBefore","piece","INSUFFICIENT_MATERIAL","KK","validPositions","AFTER_E4","invalidFen","castlingResult","BLACK_IN_CHECK","illegalMove","legalMove","from","to","getCurrentMoveIndex","undo","differentMove","goToMove","AFTER_E4_E5","fenHistory","push","i","length","reset"],"mappings":"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"}