{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/validation/serviceContainer.test.ts"],"sourcesContent":["/**\n * ServiceContainer Validation Test\n * Simple test to validate core Jest 30 migration functionality\n */\n\nimport { createTestContainer, TestScenarios, TestAssertions } from \"../utils\";\nimport type { IPlatformStorage } from \"@shared/services/platform/types\";\nimport { STORAGE } from \"@shared/constants/index\";\n\ndescribe(\"ServiceContainer Validation - Jest 30 Migration\", () => {\n  describe(\"Basic Container Functionality\", () => {\n    let container: ReturnType<typeof createTestContainer>;\n    let storageService: IPlatformStorage;\n    let mockStorage: Storage;\n\n    beforeEach(() => {\n      container = createTestContainer();\n      storageService = container.resolve(\"platform.storage\");\n      mockStorage = container.resolveCustom<Storage>(\"browser.localStorage\");\n    });\n\n    test(\"should create container with platform services\", () => {\n      expect(container).toBeDefined();\n      expect(storageService).toBeDefined();\n      expect(mockStorage).toBeDefined();\n    });\n\n    test(\"should resolve storage service correctly\", () => {\n      expect(typeof storageService.save).toBe(\"function\");\n      expect(typeof storageService.load).toBe(\"function\");\n      expect(typeof storageService.remove).toBe(\"function\");\n      expect(typeof storageService.clear).toBe(\"function\");\n      expect(typeof storageService.getAllKeys).toBe(\"function\");\n    });\n\n    test(\"should provide working mocks\", () => {\n      expect(jest.isMockFunction(mockStorage.setItem)).toBe(true);\n      expect(jest.isMockFunction(mockStorage.getItem)).toBe(true);\n      expect(jest.isMockFunction(mockStorage.removeItem)).toBe(true);\n    });\n\n    test(\"should save data with proper prefix\", async () => {\n      const testKey = \"validation-key\";\n      const testData = { validation: true, count: 42 };\n\n      await storageService.save(testKey, testData);\n\n      TestAssertions.expectStorageCall(\n        mockStorage,\n        \"setItem\",\n        `${STORAGE.PREFIX}validation-key`,\n        JSON.stringify(testData),\n      );\n    });\n\n    test(\"should load data correctly\", async () => {\n      const testKey = \"load-test\";\n      const testData = { loaded: true };\n\n      // Mock return value\n      (mockStorage.getItem as jest.Mock).mockReturnValue(\n        JSON.stringify(testData),\n      );\n\n      const result = await storageService.load(testKey);\n\n      expect(mockStorage.getItem).toHaveBeenCalledWith(\n        `${STORAGE.PREFIX}load-test`,\n      );\n      expect(result).toEqual(testData);\n    });\n\n    test(\"should handle null values\", async () => {\n      (mockStorage.getItem as jest.Mock).mockReturnValue(null);\n\n      const result = await storageService.load(\"non-existent\");\n      expect(result).toBeNull();\n    });\n\n    test(\"should provide perfect test isolation\", async () => {\n      // Test isolation: fresh container = clean state\n      const container1 = createTestContainer();\n      const storage1 = container1.resolve(\"platform.storage\");\n      await storage1.save(\"isolation-test\", \"data1\");\n\n      const container2 = createTestContainer();\n      const storage2 = container2.resolve(\"platform.storage\");\n      const result = await storage2.load(\"isolation-test\");\n\n      expect(result).toBeNull(); // No data leakage\n    });\n  });\n\n  describe(\"Pre-configured Scenarios\", () => {\n    test(\"should work with offline scenario\", () => {\n      const container = TestScenarios.offline();\n      const deviceService = container.resolve(\"platform.device\");\n\n      const networkStatus = deviceService.getNetworkStatus();\n      expect(networkStatus.isOnline).toBe(false);\n      expect(networkStatus.type).toBe(\"none\");\n    });\n\n    test(\"should work with pre-populated storage\", async () => {\n      const container = TestScenarios.withStorageData({\n        \"chess_trainer_test-key\": JSON.stringify({ preset: \"value\" }),\n      });\n\n      const storageService = container.resolve(\"platform.storage\");\n      const result = await storageService.load(\"test-key\");\n\n      expect(result).toEqual({ preset: \"value\" });\n    });\n\n    test(\"should work with low memory scenario\", () => {\n      const container = TestScenarios.lowMemory();\n      const deviceService = container.resolve(\"platform.device\");\n\n      const memoryInfo = deviceService.getMemoryInfo();\n      expect(memoryInfo.totalMemory).toBeLessThan(4 * 1024 * 1024 * 1024); // Less than 4GB\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    test(\"should handle storage errors gracefully\", async () => {\n      const failingStorage = {\n        setItem: jest.fn().mockImplementation(() => {\n          throw new Error(\"QuotaExceededError\");\n        }),\n        getItem: jest.fn(),\n        removeItem: jest.fn(),\n        clear: jest.fn(),\n        key: jest.fn(),\n        length: 0,\n      } as Storage;\n\n      const container = createTestContainer({ localStorage: failingStorage });\n      const storageService = container.resolve(\"platform.storage\");\n\n      await expect(storageService.save(\"key\", \"data\")).rejects.toThrow(\n        \"Failed to save data\",\n      );\n    });\n\n    test(\"should handle corrupted JSON gracefully\", async () => {\n      const corruptedStorage = {\n        getItem: jest.fn().mockReturnValue(\"invalid-json{\"),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n        clear: jest.fn(),\n        key: jest.fn(),\n        length: 0,\n      } as Storage;\n\n      const container = createTestContainer({ localStorage: corruptedStorage });\n      const storageService = container.resolve(\"platform.storage\");\n\n      const result = await storageService.load(\"corrupted-key\");\n      expect(result).toBeNull();\n    });\n  });\n\n  describe(\"Performance Validation\", () => {\n    test(\"container creation should be fast\", () => {\n      const start = performance.now();\n\n      for (let i = 0; i < 50; i++) {\n        const container = createTestContainer();\n        container.resolve(\"platform.storage\");\n        container.resolve(\"platform.device\");\n      }\n\n      const end = performance.now();\n      const duration = end - start;\n\n      expect(duration).toBeLessThan(500); // 50 containers in <500ms\n    });\n\n    test(\"multiple services should resolve efficiently\", () => {\n      const container = createTestContainer();\n\n      const start = Date.now();\n\n      const storage = container.resolve(\"platform.storage\");\n      const device = container.resolve(\"platform.device\");\n      const notifications = container.resolve(\"platform.notifications\");\n      const performanceService = container.resolve(\"platform.performance\");\n      const clipboard = container.resolve(\"platform.clipboard\");\n      const share = container.resolve(\"platform.share\");\n      const analytics = container.resolve(\"platform.analytics\");\n\n      const end = Date.now();\n      const duration = end - start;\n\n      expect(duration).toBeLessThan(50); // All services in <50ms\n      expect(storage).toBeDefined();\n      expect(device).toBeDefined();\n      expect(notifications).toBeDefined();\n      expect(performanceService).toBeDefined();\n      expect(clipboard).toBeDefined();\n      expect(share).toBeDefined();\n      expect(analytics).toBeDefined();\n    });\n  });\n\n  describe(\"Jest 30 Compatibility Verification\", () => {\n    test(\"should work without global localStorage mocking\", () => {\n      // This test verifies we're not using global mocks\n      const container = createTestContainer();\n      const mockStorage = container.resolveCustom<Storage>(\n        \"browser.localStorage\",\n      );\n\n      // Mock is isolated to container, not global\n      expect(jest.isMockFunction(mockStorage.setItem)).toBe(true);\n\n      // Global localStorage should be unaffected\n      if (typeof window !== \"undefined\" && window.localStorage) {\n        expect(jest.isMockFunction(window.localStorage.setItem)).toBe(false);\n      }\n    });\n\n    test(\"should provide proper mock isolation\", () => {\n      const container1 = createTestContainer();\n      const container2 = createTestContainer();\n\n      const mock1 = container1.resolveCustom<Storage>(\"browser.localStorage\");\n      const mock2 = container2.resolveCustom<Storage>(\"browser.localStorage\");\n\n      // Different containers = different mocks\n      expect(mock1).not.toBe(mock2);\n\n      // Both should be mocks\n      expect(jest.isMockFunction(mock1.setItem)).toBe(true);\n      expect(jest.isMockFunction(mock2.setItem)).toBe(true);\n    });\n\n    test(\"should support async patterns with proper cleanup\", async () => {\n      const container = createTestContainer();\n      const storageService = container.resolve(\"platform.storage\");\n\n      // Multiple async operations should work cleanly\n      await Promise.all([\n        storageService.save(\"async1\", \"data1\"),\n        storageService.save(\"async2\", \"data2\"),\n        storageService.save(\"async3\", \"data3\"),\n      ]);\n\n      const results = await Promise.all([\n        storageService.load(\"async1\"),\n        storageService.load(\"async2\"),\n        storageService.load(\"async3\"),\n      ]);\n\n      // Note: these will be null because mocks don't persist data by default\n      // but the operations should complete successfully\n      expect(results).toHaveLength(3);\n    });\n  });\n});\n"],"names":["describe","container","storageService","mockStorage","beforeEach","createTestContainer","resolve","resolveCustom","test","expect","toBeDefined","save","toBe","load","remove","clear","getAllKeys","jest","isMockFunction","setItem","getItem","removeItem","testKey","testData","validation","count","TestAssertions","expectStorageCall","STORAGE","PREFIX","JSON","stringify","loaded","mockReturnValue","result","toHaveBeenCalledWith","toEqual","toBeNull","container1","storage1","container2","storage2","TestScenarios","offline","deviceService","networkStatus","getNetworkStatus","isOnline","type","withStorageData","preset","lowMemory","memoryInfo","getMemoryInfo","totalMemory","toBeLessThan","failingStorage","fn","mockImplementation","Error","key","length","localStorage","rejects","toThrow","corruptedStorage","start","performance","now","i","end","duration","Date","storage","device","notifications","performanceService","clipboard","share","analytics","window","mock1","mock2","not","Promise","all","results","toHaveLength"],"mappings":"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"}