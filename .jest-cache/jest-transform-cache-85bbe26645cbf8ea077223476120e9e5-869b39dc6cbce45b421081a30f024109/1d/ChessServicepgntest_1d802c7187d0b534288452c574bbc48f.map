{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/services/ChessService.pgn.test.ts"],"sourcesContent":["/**\n * @file ChessService PGN Loading Tests\n * @description Coverage tests for PGN loading and reconstruction (Lines 482-518)\n * Target: loadPgn() method - biggest coverage gain (37 lines)\n */\n\nimport { ChessService } from \"@shared/services/ChessService\";\nimport { Chess } from \"chess.js\";\nimport { createValidatedMove } from \"@shared/types/chess\";\n\n// Mock chess.js following existing pattern\njest.mock(\"chess.js\");\n\nconst MockedChess = Chess as jest.MockedClass<typeof Chess>;\n\ndescribe(\"ChessService PGN Loading Tests\", () => {\n  let chessService: ChessService;\n  let mockChessInstance: jest.Mocked<InstanceType<typeof Chess>>;\n\n  // PGN test fixtures for comprehensive testing\n  const pgnTestFixtures = {\n    valid: \"1. e4 e5 2. Nf3 Nc6 3. Bb5\", // Simple Spanish Opening\n    complex: \"1. e4 e5 2. Nf3 Nc6 3. Bb5 a6 4. Ba4 Nf6 5. O-O Be7 6. Re1 b5 7. Bb3 d6\", // Complex with castling\n    shortGame: \"1. e4 e5 2. Qh5 Nc6 3. Bc4 Nf6 4. Qxf7#\", // Quick checkmate\n    empty: \"\",\n    whitespace: \"   \\n  \\t  \", // Only whitespace\n    invalid: \"1. xx yy zz\", // Malformed moves\n    malformed: \"this is not pgn at all\",\n    partialValid: \"1. e4 e5 2. Nf3 invalid_move\", // Valid start, invalid continuation\n  };\n\n  // Mock move objects for history reconstruction\n  const mockMoves = [\n    { from: \"e2\", to: \"e4\", san: \"e4\", piece: \"p\", color: \"w\" },\n    { from: \"e7\", to: \"e5\", san: \"e5\", piece: \"p\", color: \"b\" },\n    { from: \"g1\", to: \"f3\", san: \"Nf3\", piece: \"n\", color: \"w\" },\n  ];\n\n  beforeEach(() => {\n    MockedChess.mockClear();\n\n    // Create comprehensive mock Chess instance\n    mockChessInstance = {\n      move: jest.fn(),\n      fen: jest.fn().mockReturnValue(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"),\n      pgn: jest.fn().mockReturnValue(\"\"),\n      history: jest.fn().mockReturnValue([]),\n      load: jest.fn(),\n      loadPgn: jest.fn(),\n      isGameOver: jest.fn().mockReturnValue(false),\n      turn: jest.fn().mockReturnValue(\"w\"),\n      moves: jest.fn().mockReturnValue([\"e4\", \"e3\", \"Nf3\"]),\n      isCheck: jest.fn().mockReturnValue(false),\n      isCheckmate: jest.fn().mockReturnValue(false),\n      isStalemate: jest.fn().mockReturnValue(false),\n      isDraw: jest.fn().mockReturnValue(false),\n    } as any;\n\n    MockedChess.mockImplementation(() => mockChessInstance);\n    chessService = new ChessService();\n  });\n\n  describe(\"loadPgn() - Lines 482-518\", () => {\n    it(\"should load valid PGN and reconstruct move history\", () => {\n      // Setup mock for successful PGN loading\n      mockChessInstance.loadPgn.mockImplementation(() => true as any);\n      mockChessInstance.history.mockReturnValue(mockMoves as any);\n      \n      // Mock the chess position reconstruction\n      let fenCounter = 0;\n      const fens = [\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", // Starting\n        \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\", // After 1.e4\n        \"rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2\", // After 1...e5\n        \"rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2\", // After 2.Nf3\n      ];\n\n      mockChessInstance.fen.mockImplementation(() => fens[fenCounter] || fens[0]);\n      mockChessInstance.move.mockImplementation(() => {\n        fenCounter++;\n        return (mockMoves[fenCounter - 1] || null) as any;\n      });\n\n      // Mock event listener to track state updates\n      const mockListener = jest.fn();\n      chessService.subscribe(mockListener);\n\n      // Test PGN loading\n      const result = chessService.loadPgn(pgnTestFixtures.valid);\n\n      // Verify success\n      expect(result).toBe(true);\n      expect(mockChessInstance.loadPgn).toHaveBeenCalledWith(pgnTestFixtures.valid);\n      expect(mockChessInstance.history).toHaveBeenCalledWith({ verbose: true });\n\n      // Verify move history reconstruction\n      const moveHistory = chessService.getMoveHistory();\n      expect(moveHistory).toHaveLength(mockMoves.length);\n\n      // Verify current move index is set correctly\n      expect(chessService.getCurrentMoveIndex()).toBe(mockMoves.length - 1);\n\n      // Verify state update event was emitted\n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"stateUpdate\",\n          source: \"load\",\n          payload: expect.objectContaining({\n            moveHistory: expect.any(Array),\n            currentMoveIndex: mockMoves.length - 1,\n          }),\n        })\n      );\n    });\n\n    it(\"should handle complex PGN with castling\", () => {\n      // Setup more complex move sequence\n      const complexMoves = [\n        { from: \"e2\", to: \"e4\", san: \"e4\", piece: \"p\", color: \"w\" },\n        { from: \"e7\", to: \"e5\", san: \"e5\", piece: \"p\", color: \"b\" },\n        { from: \"g1\", to: \"f3\", san: \"Nf3\", piece: \"n\", color: \"w\" },\n        { from: \"b8\", to: \"c6\", san: \"Nc6\", piece: \"n\", color: \"b\" },\n        { from: \"f1\", to: \"b5\", san: \"Bb5\", piece: \"b\", color: \"w\" },\n        { from: \"e1\", to: \"g1\", san: \"O-O\", piece: \"k\", color: \"w\" }, // Castling\n      ];\n\n      mockChessInstance.loadPgn.mockImplementation(() => true as any);\n      mockChessInstance.history.mockReturnValue(complexMoves as any);\n\n      let moveCounter = 0;\n      mockChessInstance.move.mockImplementation(() => {\n        moveCounter++;\n        return (complexMoves[moveCounter - 1] || null) as any;\n      });\n\n      const result = chessService.loadPgn(pgnTestFixtures.complex);\n\n      expect(result).toBe(true);\n      expect(chessService.getMoveHistory()).toHaveLength(complexMoves.length);\n      expect(chessService.getCurrentMoveIndex()).toBe(complexMoves.length - 1);\n    });\n\n    it(\"should handle empty PGN string\", () => {\n      // Setup for empty PGN\n      mockChessInstance.loadPgn.mockImplementation(() => true as any);\n      mockChessInstance.history.mockReturnValue([] as any);\n\n      const result = chessService.loadPgn(pgnTestFixtures.empty);\n\n      expect(result).toBe(true);\n      expect(mockChessInstance.loadPgn).toHaveBeenCalledWith(\"\");\n      expect(chessService.getMoveHistory()).toHaveLength(0);\n      expect(chessService.getCurrentMoveIndex()).toBe(-1);\n    });\n\n    it(\"should handle whitespace-only PGN\", () => {\n      mockChessInstance.loadPgn.mockImplementation(() => true as any);\n      mockChessInstance.history.mockReturnValue([] as any);\n\n      const result = chessService.loadPgn(pgnTestFixtures.whitespace);\n\n      expect(result).toBe(true);\n      expect(chessService.getMoveHistory()).toHaveLength(0);\n    });\n\n    it(\"should handle invalid PGN and emit error event\", () => {\n      // Setup mock to throw error for invalid PGN\n      const pgnError = new Error(\"Invalid PGN format\");\n      mockChessInstance.loadPgn.mockImplementation(() => {\n        throw pgnError;\n      });\n\n      // Mock event listener to capture error\n      const mockListener = jest.fn();\n      chessService.subscribe(mockListener);\n\n      const result = chessService.loadPgn(pgnTestFixtures.invalid);\n\n      // Verify failure and error handling\n      expect(result).toBe(false);\n      expect(mockChessInstance.loadPgn).toHaveBeenCalledWith(pgnTestFixtures.invalid);\n\n      // Verify error event was emitted\n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"error\",\n          payload: expect.objectContaining({\n            error: expect.any(Error),\n            message: \"Ungültiges PGN-Format\",\n          }),\n        })\n      );\n    });\n\n    it(\"should handle malformed PGN string\", () => {\n      const malformedError = new Error(\"Not a valid PGN\");\n      mockChessInstance.loadPgn.mockImplementation(() => {\n        throw malformedError;\n      });\n\n      const mockListener = jest.fn();\n      chessService.subscribe(mockListener);\n\n      const result = chessService.loadPgn(pgnTestFixtures.malformed);\n\n      expect(result).toBe(false);\n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"error\",\n          payload: expect.objectContaining({\n            message: \"Ungültiges PGN-Format\",\n          }),\n        })\n      );\n    });\n\n    it(\"should handle partially valid PGN\", () => {\n      const partialError = new Error(\"Invalid move in PGN\");\n      mockChessInstance.loadPgn.mockImplementation(() => {\n        throw partialError;\n      });\n\n      const result = chessService.loadPgn(pgnTestFixtures.partialValid);\n\n      expect(result).toBe(false);\n      expect(mockChessInstance.loadPgn).toHaveBeenCalledWith(pgnTestFixtures.partialValid);\n    });\n\n    it(\"should reset chess instance and rebuild from scratch\", () => {\n      // This tests the critical logic in lines 485-496\n      mockChessInstance.loadPgn.mockImplementation(() => true as any);\n      mockChessInstance.history.mockReturnValue(mockMoves as any);\n\n      const initialCallCount = MockedChess.mock.calls.length;\n      \n      chessService.loadPgn(pgnTestFixtures.valid);\n\n      // Verify Chess constructor was called for reset (line 487: this.chess = new Chess())\n      expect(MockedChess.mock.calls.length).toBeGreaterThan(initialCallCount);\n      // Verify moves were replayed (lines 490-496)\n      expect(mockChessInstance.move).toHaveBeenCalledTimes(mockMoves.length);\n    });\n\n    it(\"should preserve validated move structure in history\", () => {\n      mockChessInstance.loadPgn.mockImplementation(() => true as any);\n      mockChessInstance.history.mockReturnValue(mockMoves as any);\n\n      // Mock FEN progression for move validation\n      let fenIndex = 0;\n      const fenProgression = [\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n        \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\",\n        \"rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2\",\n        \"rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2\",\n      ];\n\n      mockChessInstance.fen.mockImplementation(() => fenProgression[fenIndex] || fenProgression[0]);\n      mockChessInstance.move.mockImplementation(() => {\n        const move = mockMoves[fenIndex];\n        fenIndex++;\n        return (move || null) as any;\n      });\n\n      chessService.loadPgn(pgnTestFixtures.valid);\n\n      const moveHistory = chessService.getMoveHistory();\n      \n      // Verify each move in history has required ValidatedMove structure\n      moveHistory.forEach((move, index) => {\n        expect(move).toHaveProperty('from');\n        expect(move).toHaveProperty('to');\n        expect(move).toHaveProperty('san');\n        expect(move).toHaveProperty('fenBefore');\n        expect(move).toHaveProperty('fenAfter');\n      });\n    });\n\n    it(\"should handle error during move reconstruction\", () => {\n      mockChessInstance.loadPgn.mockImplementation(() => true as any);\n      mockChessInstance.history.mockReturnValue(mockMoves as any);\n\n      // Mock move() to throw error during reconstruction\n      mockChessInstance.move.mockImplementation(() => {\n        throw new Error(\"Move reconstruction failed\");\n      });\n\n      const mockListener = jest.fn();\n      chessService.subscribe(mockListener);\n\n      const result = chessService.loadPgn(pgnTestFixtures.valid);\n\n      // Should fail gracefully\n      expect(result).toBe(false);\n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: \"error\",\n        })\n      );\n    });\n  });\n\n  describe(\"PGN Integration with other methods\", () => {\n    it(\"should maintain consistency after PGN load\", () => {\n      mockChessInstance.loadPgn.mockImplementation(() => true as any);\n      mockChessInstance.history.mockReturnValue(mockMoves as any);\n      mockChessInstance.pgn.mockReturnValue(pgnTestFixtures.valid);\n\n      chessService.loadPgn(pgnTestFixtures.valid);\n\n      // Verify consistency with other methods\n      expect(chessService.getCurrentMoveIndex()).toBe(mockMoves.length - 1);\n      expect(chessService.getMoveHistory()).toHaveLength(mockMoves.length);\n      expect(chessService.getPgn()).toBe(pgnTestFixtures.valid);\n    });\n  });\n});"],"names":["jest","mock","MockedChess","Chess","describe","chessService","mockChessInstance","pgnTestFixtures","valid","complex","shortGame","empty","whitespace","invalid","malformed","partialValid","mockMoves","from","to","san","piece","color","beforeEach","mockClear","move","fn","fen","mockReturnValue","pgn","history","load","loadPgn","isGameOver","turn","moves","isCheck","isCheckmate","isStalemate","isDraw","mockImplementation","ChessService","it","fenCounter","fens","mockListener","subscribe","result","expect","toBe","toHaveBeenCalledWith","verbose","moveHistory","getMoveHistory","toHaveLength","length","getCurrentMoveIndex","objectContaining","type","source","payload","any","Array","currentMoveIndex","complexMoves","moveCounter","pgnError","Error","error","message","malformedError","partialError","initialCallCount","calls","toBeGreaterThan","toHaveBeenCalledTimes","fenIndex","fenProgression","forEach","index","toHaveProperty","getPgn"],"mappings":"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"}