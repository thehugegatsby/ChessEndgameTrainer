e09037bbbbcd4453ba6cf4c5a81a1b24
/**
 * @file Title formatting utilities for chess positions
 * @module utils/titleFormatter
 *
 * @description
 * Provides specialized formatting for chess endgame position titles,
 * with custom handling for specific position types like Brückenbau
 * (bridge-building) positions and progress indicators.
 *
 * @remarks
 * Key features:
 * - Special formatting for Brückenbau positions (X/Y numbering)
 * - Title truncation for navigation elements
 * - Progress indicators for training sessions
 * - Category-based formatting rules
 *
 * The module ensures consistent title display across the application
 * while handling edge cases and special position types.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get formatPositionTitle () {
        return formatPositionTitle;
    },
    get getShortTitle () {
        return getShortTitle;
    },
    get getTrainingDisplayTitle () {
        return getTrainingDisplayTitle;
    }
});
function formatPositionTitle(position, totalPositions) {
    const { title, id, category } = position;
    // Handle Brückenbau positions with special formatting
    if (title === "Brückenbau" || title.toLowerCase().includes("brückenbau")) {
        if (totalPositions) {
            return `Brückenbau ${id}/${totalPositions}`;
        }
        // Fallback if no total is provided
        return `Brückenbau ${id}`;
    }
    // Handle other position types that might need special formatting
    if (category === "rook-pawn" && title === "Brückenbau") {
        // Ensure rook-pawn Brückenbau positions get proper numbering
        return totalPositions ? `Brückenbau ${id}/${totalPositions}` : `Brückenbau ${id}`;
    }
    // For all other positions, return the original title
    return title;
}
function getShortTitle(position) {
    const formatted = formatPositionTitle(position);
    // For Brückenbau, keep the full formatted title as it's already concise
    if (formatted.includes("Brückenbau")) {
        return formatted;
    }
    // For other long titles, truncate if needed
    if (formatted.length > 30) {
        return formatted.substring(0, 27) + "...";
    }
    return formatted;
}
function getTrainingDisplayTitle(position, _moveCount, totalPositions) {
    const baseTitle = formatPositionTitle(position, totalPositions);
    // Simply return the base title without move indicators
    return baseTitle;
}

//# sourceMappingURL=data:application/json;base64,