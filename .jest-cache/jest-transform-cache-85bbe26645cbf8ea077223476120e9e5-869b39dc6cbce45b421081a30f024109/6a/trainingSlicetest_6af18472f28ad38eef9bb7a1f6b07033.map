{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/store/slices/trainingSlice.test.ts"],"sourcesContent":["/**\n * @file Tests for TrainingSlice with nested store structure\n * @module tests/unit/store/slices/trainingSlice.nested\n */\n\nimport { useStore } from \"@shared/store/rootStore\";\nimport type { TrainingPosition } from \"@shared/store/slices/trainingSlice\";\n\ndescribe(\"TrainingSlice - Nested Store Structure\", () => {\n  const mockPosition: TrainingPosition = {\n    id: 1,\n    title: \"Test Position\",\n    fen: \"8/8/8/8/8/8/8/8 w - - 0 1\",\n    colorToTrain: \"white\",\n    targetOutcome: \"1-0\",\n    sideToMove: \"white\",\n    difficulty: \"beginner\" as const,\n    category: \"basic\",\n    description: \"Test position for training\",\n  };\n\n  beforeEach(() => {\n    // Reset store to initial state - preserve actions by only updating state properties\n    useStore.setState((state) => {\n      state.training.currentPosition = undefined;\n      state.training.nextPosition = undefined;\n      state.training.previousPosition = undefined;\n      state.training.isLoadingNavigation = false;\n      state.training.navigationError = null;\n      state.training.chapterProgress = null;\n      state.training.isPlayerTurn = true;\n      state.training.isOpponentThinking = false;\n      state.training.isSuccess = false;\n      state.training.sessionStartTime = undefined;\n      state.training.sessionEndTime = undefined;\n      state.training.hintsUsed = 0;\n      state.training.mistakeCount = 0;\n      state.training.moveErrorDialog = null;\n    });\n  });\n\n  describe(\"setPosition\", () => {\n    it(\"should set current position and reset session state\", () => {\n      const store = useStore.getState();\n      const beforeTime = Date.now();\n\n      store.training.setPosition(mockPosition);\n\n      const state = useStore.getState();\n      const afterTime = Date.now();\n\n      expect(state.training.currentPosition).toEqual(mockPosition);\n      expect(state.training.isSuccess).toBe(false);\n      expect(state.training.hintsUsed).toBe(0);\n      expect(state.training.mistakeCount).toBe(0);\n      expect(state.training.sessionStartTime).toBeGreaterThanOrEqual(\n        beforeTime,\n      );\n      expect(state.training.sessionStartTime).toBeLessThanOrEqual(afterTime);\n      expect(state.training.sessionEndTime).toBeUndefined();\n    });\n\n    it(\"should set player turn based on position color\", () => {\n      const store = useStore.getState();\n      const whitePosition = {\n        ...mockPosition,\n        colorToTrain: \"white\" as const,\n        sideToMove: \"white\" as const,\n      };\n      const blackPosition = {\n        ...mockPosition,\n        colorToTrain: \"black\" as const,\n        sideToMove: \"black\" as const,\n      };\n\n      store.training.setPosition(whitePosition);\n      expect(useStore.getState().training.isPlayerTurn).toBe(true);\n\n      store.training.setPosition(blackPosition);\n      expect(useStore.getState().training.isPlayerTurn).toBe(true);\n    });\n  });\n\n  describe(\"setNavigationPositions\", () => {\n    it(\"should set next position\", () => {\n      const store = useStore.getState();\n      const nextPosition = { ...mockPosition, id: 2, title: \"Next Position\" };\n\n      store.training.setNavigationPositions(nextPosition);\n\n      const state = useStore.getState();\n      expect(state.training.nextPosition).toEqual(nextPosition);\n    });\n\n    it(\"should set previous position\", () => {\n      const store = useStore.getState();\n      const prevPosition = {\n        ...mockPosition,\n        id: 0,\n        title: \"Previous Position\",\n      };\n\n      store.training.setNavigationPositions(undefined, prevPosition);\n\n      const state = useStore.getState();\n      expect(state.training.previousPosition).toEqual(prevPosition);\n    });\n\n    it(\"should set both positions\", () => {\n      const store = useStore.getState();\n      const nextPosition = { ...mockPosition, id: 2, title: \"Next Position\" };\n      const prevPosition = {\n        ...mockPosition,\n        id: 0,\n        title: \"Previous Position\",\n      };\n\n      store.training.setNavigationPositions(nextPosition, prevPosition);\n\n      const state = useStore.getState();\n      expect(state.training.nextPosition).toEqual(nextPosition);\n      expect(state.training.previousPosition).toEqual(prevPosition);\n    });\n\n    it(\"should clear navigation with null values\", () => {\n      const store = useStore.getState();\n\n      // First set some positions\n      store.training.setNavigationPositions(mockPosition, mockPosition);\n\n      // Then clear them\n      store.training.setNavigationPositions(null, null);\n\n      const state = useStore.getState();\n      expect(state.training.nextPosition).toBeNull();\n      expect(state.training.previousPosition).toBeNull();\n    });\n  });\n\n  describe(\"setNavigationLoading\", () => {\n    it(\"should set navigation loading to true\", () => {\n      const store = useStore.getState();\n\n      store.training.setNavigationLoading(true);\n\n      const state = useStore.getState();\n      expect(state.training.isLoadingNavigation).toBe(true);\n    });\n\n    it(\"should set navigation loading to false\", () => {\n      const store = useStore.getState();\n\n      store.training.setNavigationLoading(false);\n\n      const state = useStore.getState();\n      expect(state.training.isLoadingNavigation).toBe(false);\n    });\n  });\n\n  describe(\"setNavigationError\", () => {\n    it(\"should set navigation error message\", () => {\n      const store = useStore.getState();\n      const errorMessage = \"Position nicht gefunden\";\n\n      store.training.setNavigationError(errorMessage);\n\n      const state = useStore.getState();\n      expect(state.training.navigationError).toBe(errorMessage);\n    });\n\n    it(\"should clear navigation error\", () => {\n      const store = useStore.getState();\n\n      // First set an error\n      store.training.setNavigationError(\"Some error\");\n\n      // Then clear it\n      store.training.setNavigationError(null);\n\n      const state = useStore.getState();\n      expect(state.training.navigationError).toBeNull();\n    });\n  });\n\n  describe(\"setChapterProgress\", () => {\n    it(\"should set chapter progress\", () => {\n      const store = useStore.getState();\n      const progress = { completed: 3, total: 10 };\n\n      store.training.setChapterProgress(progress);\n\n      const state = useStore.getState();\n      expect(state.training.chapterProgress).toEqual(progress);\n    });\n\n    it(\"should clear chapter progress\", () => {\n      const store = useStore.getState();\n\n      // First set progress\n      store.training.setChapterProgress({ completed: 5, total: 10 });\n\n      // Then clear it\n      store.training.setChapterProgress(null);\n\n      const state = useStore.getState();\n      expect(state.training.chapterProgress).toBeNull();\n    });\n  });\n\n  describe(\"setPlayerTurn\", () => {\n    it(\"should enable player turn\", () => {\n      const store = useStore.getState();\n\n      store.training.setPlayerTurn(true);\n\n      const state = useStore.getState();\n      expect(state.training.isPlayerTurn).toBe(true);\n    });\n\n    it(\"should disable player turn\", () => {\n      const store = useStore.getState();\n\n      store.training.setPlayerTurn(false);\n\n      const state = useStore.getState();\n      expect(state.training.isPlayerTurn).toBe(false);\n    });\n  });\n\n  describe(\"completeTraining\", () => {\n    it(\"should mark training as successful\", () => {\n      const store = useStore.getState();\n      const beforeTime = Date.now();\n\n      store.training.completeTraining(true);\n\n      const state = useStore.getState();\n      const afterTime = Date.now();\n\n      expect(state.training.isSuccess).toBe(true);\n      expect(state.training.sessionEndTime).toBeGreaterThanOrEqual(beforeTime);\n      expect(state.training.sessionEndTime).toBeLessThanOrEqual(afterTime);\n    });\n\n    it(\"should mark training as failed\", () => {\n      const store = useStore.getState();\n\n      store.training.completeTraining(false);\n\n      const state = useStore.getState();\n      expect(state.training.isSuccess).toBe(false);\n      expect(state.training.sessionEndTime).toBeDefined();\n    });\n  });\n\n  describe(\"incrementHint\", () => {\n    it(\"should increment hint counter\", () => {\n      const store = useStore.getState();\n\n      expect(useStore.getState().training.hintsUsed).toBe(0);\n\n      store.training.incrementHint();\n      expect(useStore.getState().training.hintsUsed).toBe(1);\n\n      store.training.incrementHint();\n      expect(useStore.getState().training.hintsUsed).toBe(2);\n    });\n  });\n\n  describe(\"incrementMistake\", () => {\n    it(\"should increment mistake counter\", () => {\n      const store = useStore.getState();\n\n      expect(useStore.getState().training.mistakeCount).toBe(0);\n\n      store.training.incrementMistake();\n      expect(useStore.getState().training.mistakeCount).toBe(1);\n\n      store.training.incrementMistake();\n      expect(useStore.getState().training.mistakeCount).toBe(2);\n    });\n  });\n\n  describe(\"setMoveErrorDialog\", () => {\n    it(\"should show move error dialog\", () => {\n      const store = useStore.getState();\n      const dialog = {\n        isOpen: true,\n        wdlBefore: 1000,\n        wdlAfter: 0,\n        bestMove: \"Qb7\",\n      };\n\n      store.training.setMoveErrorDialog(dialog);\n\n      const state = useStore.getState();\n      expect(state.training.moveErrorDialog).toEqual(dialog);\n    });\n\n    it(\"should close move error dialog\", () => {\n      const store = useStore.getState();\n\n      // First open the dialog\n      store.training.setMoveErrorDialog({\n        isOpen: true,\n        wdlBefore: 1000,\n        wdlAfter: 0,\n      });\n\n      // Then close it\n      store.training.setMoveErrorDialog(null);\n\n      const state = useStore.getState();\n      expect(state.training.moveErrorDialog).toBeNull();\n    });\n  });\n\n  describe(\"resetTraining\", () => {\n    it(\"should reset state to initial values\", () => {\n      const store = useStore.getState();\n\n      // Set various values first\n      store.training.setPosition(mockPosition);\n      store.training.incrementHint();\n      store.training.incrementMistake();\n      store.training.setPlayerTurn(false);\n      store.training.completeTraining(true);\n\n      const stateBefore = useStore.getState();\n      expect(stateBefore.training.currentPosition).toEqual(mockPosition);\n      expect(stateBefore.training.hintsUsed).toBe(1);\n      expect(stateBefore.training.mistakeCount).toBe(1);\n      \n      // Reset training - should now actually reset the state\n      store.training.resetTraining();\n\n      const stateAfter = useStore.getState();\n      \n      // State should be reset to initial values\n      expect(stateAfter.training.currentPosition).toBeUndefined();\n      expect(stateAfter.training.hintsUsed).toBe(0);\n      expect(stateAfter.training.mistakeCount).toBe(0);\n      expect(stateAfter.training.isPlayerTurn).toBe(true);\n      expect(stateAfter.training.isSuccess).toBe(false);\n      \n      // Actions should still be available\n      expect(typeof store.training.setPosition).toBe('function');\n      expect(typeof store.training.incrementHint).toBe('function');\n    });\n  });\n\n  describe(\"Integration with nested structure\", () => {\n    it(\"should work with other slices in the store\", () => {\n      const store = useStore.getState();\n\n      // Verify that other slices exist\n      expect(store.game).toBeDefined();\n      expect(store.tablebase).toBeDefined();\n      expect(store.ui).toBeDefined();\n\n      // Set training data\n      store.training.setPosition(mockPosition);\n\n      // Verify it doesn't affect other slices\n      const state = useStore.getState();\n      expect(state.training.currentPosition).toEqual(mockPosition);\n      expect(state.game.currentFen).toBeDefined();\n      expect(state.tablebase.analysisStatus).toBeDefined();\n    });\n\n    it(\"should maintain proper nesting in state updates\", () => {\n      const store = useStore.getState();\n\n      // Make multiple updates\n      store.training.setPosition(mockPosition);\n      store.training.incrementHint();\n      store.training.setPlayerTurn(false);\n\n      // Check all updates were applied correctly\n      const state = useStore.getState();\n      expect(state.training.currentPosition).toEqual(mockPosition);\n      expect(state.training.hintsUsed).toBe(1);\n      expect(state.training.isPlayerTurn).toBe(false);\n    });\n  });\n});\n"],"names":["describe","mockPosition","id","title","fen","colorToTrain","targetOutcome","sideToMove","difficulty","category","description","beforeEach","useStore","setState","state","training","currentPosition","undefined","nextPosition","previousPosition","isLoadingNavigation","navigationError","chapterProgress","isPlayerTurn","isOpponentThinking","isSuccess","sessionStartTime","sessionEndTime","hintsUsed","mistakeCount","moveErrorDialog","it","store","getState","beforeTime","Date","now","setPosition","afterTime","expect","toEqual","toBe","toBeGreaterThanOrEqual","toBeLessThanOrEqual","toBeUndefined","whitePosition","blackPosition","setNavigationPositions","prevPosition","toBeNull","setNavigationLoading","errorMessage","setNavigationError","progress","completed","total","setChapterProgress","setPlayerTurn","completeTraining","toBeDefined","incrementHint","incrementMistake","dialog","isOpen","wdlBefore","wdlAfter","bestMove","setMoveErrorDialog","stateBefore","resetTraining","stateAfter","game","tablebase","ui","currentFen","analysisStatus"],"mappings":"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"}