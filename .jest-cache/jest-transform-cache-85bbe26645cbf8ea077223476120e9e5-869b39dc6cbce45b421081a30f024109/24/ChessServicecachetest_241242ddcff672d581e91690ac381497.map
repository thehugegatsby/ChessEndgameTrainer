{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/services/ChessService.cache.test.ts"],"sourcesContent":["/**\n * @file ChessService Cache & Performance Tests\n * @description Coverage tests for cache management (Line 528) and performance optimization\n * Target: Complete 100% coverage for ChessService\n */\n\nimport { ChessService } from \"@shared/services/ChessService\";\nimport { Chess } from \"chess.js\";\n\n// Mock chess.js following existing pattern\njest.mock(\"chess.js\");\n\nconst MockedChess = Chess as jest.MockedClass<typeof Chess>;\n\ndescribe(\"ChessService Cache & Performance Tests\", () => {\n  let chessService: ChessService;\n  let mockChessInstance: jest.Mocked<InstanceType<typeof Chess>>;\n\n  beforeEach(() => {\n    MockedChess.mockClear();\n\n    // Create comprehensive mock Chess instance\n    mockChessInstance = {\n      move: jest.fn(),\n      fen: jest.fn().mockReturnValue(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"),\n      pgn: jest.fn().mockReturnValue(\"\"),\n      history: jest.fn().mockReturnValue([]),\n      load: jest.fn(),\n      loadPgn: jest.fn(),\n      isGameOver: jest.fn().mockReturnValue(false),\n      turn: jest.fn().mockReturnValue(\"w\"),\n      moves: jest.fn().mockReturnValue([\"e4\", \"e3\", \"Nf3\"]),\n      isCheck: jest.fn().mockReturnValue(false),\n      isCheckmate: jest.fn().mockReturnValue(false),\n      isStalemate: jest.fn().mockReturnValue(false),\n      isDraw: jest.fn().mockReturnValue(false),\n    } as any;\n\n    MockedChess.mockImplementation(() => mockChessInstance);\n    chessService = new ChessService();\n  });\n\n  describe(\"Cache Key Update - Line 528\", () => {\n    it(\"should delete existing cache key before re-adding (Line 528)\", () => {\n      // Create a scenario where updateCache is called with an existing key\n      // This can happen when the input FEN is different from the normalized FEN from chess.js\n      \n      const inputFen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 5 10\"; // With move counters\n      const normalizedFen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"; // Normalized by chess.js\n      \n      // First initialization - this will populate cache: inputFen -> normalizedFen \n      mockChessInstance.fen.mockReturnValue(normalizedFen);\n      chessService.initialize(inputFen);\n      \n      // Now simulate a case where we need to access the cache internal state\n      // We'll use reflection to manipulate the cache directly to force the condition\n      const cacheAccess = (chessService as any).fenCache;\n      \n      // Manually add an entry that will collide with updateCache\n      const collisionKey = \"collision-test-fen\";\n      cacheAccess.set(collisionKey, normalizedFen);\n      \n      // Now force updateCache to be called with the collision key by making initialize\n      // bypass the cache check through a different path\n      // Mock Chess constructor to simulate what would happen\n      MockedChess.mockImplementationOnce(() => {\n        const mockInstance = {\n          ...mockChessInstance,\n          fen: jest.fn().mockReturnValue(normalizedFen)\n        };\n        return mockInstance as any;\n      });\n      \n      // This should trigger updateCache with a key that already exists (collision-test-fen)\n      // by calling the private updateCache method with an existing key\n      const updateCacheMethod = (chessService as any).updateCache;\n      updateCacheMethod.call(chessService, collisionKey, normalizedFen);\n      \n      // Verify the cache still works after the key deletion and re-addition\n      expect(cacheAccess.has(collisionKey)).toBe(true);\n    });\n\n    it(\"should handle cache key move-to-end behavior correctly\", () => {\n      // Fill cache with multiple positions\n      const fens: string[] = [];\n      for (let i = 0; i < 50; i++) {\n        const fen = `test-${i}-8/8/8/8/8/8/8/k6K w - - 0 1`;\n        fens.push(fen);\n        mockChessInstance.fen.mockReturnValue(fen);\n        chessService.initialize(fen);\n      }\n\n      // Access an early FEN again - should move it to end of cache (Line 528)\n      const earlyFen = fens[5];\n      mockChessInstance.fen.mockReturnValue(earlyFen);\n      chessService.initialize(earlyFen);\n      \n      // Add more FENs to test that the recently accessed one isn't evicted\n      for (let i = 50; i < 80; i++) {\n        const fen = `new-${i}-8/8/8/8/8/8/8/k6K w - - 0 1`;\n        mockChessInstance.fen.mockReturnValue(fen);\n        chessService.initialize(fen);\n      }\n\n      // Should still work without errors\n      expect(() => chessService.initialize(earlyFen)).not.toThrow();\n    });\n\n    it(\"should handle multiple cache key updates in sequence\", () => {\n      const testFens = [\n        \"pos1-8/8/8/8/8/8/8/k6K w - - 0 1\",\n        \"pos2-8/8/8/8/8/8/8/k6K w - - 0 1\", \n        \"pos3-8/8/8/8/8/8/8/k6K w - - 0 1\"\n      ];\n\n      // Initialize each position twice to trigger cache key updates\n      testFens.forEach((fen) => {\n        mockChessInstance.fen.mockReturnValue(fen);\n        chessService.initialize(fen); // First time - add to cache\n        chessService.initialize(fen); // Second time - update cache (Line 528)\n      });\n\n      // All operations should complete successfully\n      testFens.forEach((fen) => {\n        expect(() => chessService.initialize(fen)).not.toThrow();\n      });\n    });\n  });\n\n  describe(\"Performance - Cache Efficiency\", () => {\n    it(\"should minimize Chess instance creations through caching\", () => {\n      const testFen = \"8/8/8/8/8/5k2/8/5K2 w - - 0 1\";\n      mockChessInstance.fen.mockReturnValue(testFen);\n\n      // Clear mock call count\n      MockedChess.mockClear();\n\n      // First call - should create Chess instance\n      chessService.initialize(testFen);\n      const firstCallCount = MockedChess.mock.calls.length;\n\n      // Subsequent calls - should use cached normalized FEN\n      chessService.initialize(testFen);\n      chessService.initialize(testFen);\n      const subsequentCallCount = MockedChess.mock.calls.length;\n\n      // Should create new instances each time but use cached FEN for normalization\n      expect(subsequentCallCount).toBeGreaterThan(firstCallCount);\n    });\n\n    it(\"should handle rapid consecutive initializations efficiently\", () => {\n      const positions: string[] = [\n        \"8/8/8/8/8/8/8/k6K w - - 0 1\",\n        \"8/8/8/8/8/k7/8/6K1 w - - 0 1\",\n        \"8/8/8/8/k7/8/8/6K1 w - - 0 1\"\n      ];\n\n      // Rapid consecutive calls should not throw errors\n      expect(() => {\n        positions.forEach((fen) => {\n          mockChessInstance.fen.mockReturnValue(fen);\n          // Initialize each position multiple times rapidly\n          for (let i = 0; i < 10; i++) {\n            chessService.initialize(fen);\n          }\n        });\n      }).not.toThrow();\n    });\n  });\n});"],"names":["jest","mock","MockedChess","Chess","describe","chessService","mockChessInstance","beforeEach","mockClear","move","fn","fen","mockReturnValue","pgn","history","load","loadPgn","isGameOver","turn","moves","isCheck","isCheckmate","isStalemate","isDraw","mockImplementation","ChessService","it","inputFen","normalizedFen","initialize","cacheAccess","fenCache","collisionKey","set","mockImplementationOnce","mockInstance","updateCacheMethod","updateCache","call","expect","has","toBe","fens","i","push","earlyFen","not","toThrow","testFens","forEach","testFen","firstCallCount","calls","length","subsequentCallCount","toBeGreaterThan","positions"],"mappings":"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"}