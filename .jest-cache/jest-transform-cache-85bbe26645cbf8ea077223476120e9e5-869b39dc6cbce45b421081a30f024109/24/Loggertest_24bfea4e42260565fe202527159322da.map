{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/services/logging/Logger.test.ts"],"sourcesContent":["/**\n * Tests for core Logger functionality\n *\n * Tests cover:\n * - Log level methods (debug, info, warn, error, fatal)\n * - minLevel filtering\n * - Context management (setContext, clearContext)\n * - ConsoleTransport\n * - Log formatting\n * - Configuration management\n * - withFields functionality\n */\n\nimport { createLogger, resetLogger } from \"@shared/services/logging/Logger\";\nimport {\n  LogLevel,\n  LogEntry,\n  ILogTransport,\n} from \"@shared/services/logging/types\";\n\n// Mock transport for testing\nclass MockTransport implements ILogTransport {\n  public logs: LogEntry[] = [];\n\n  /**\n   * Log entry to mock storage\n   * @param entry Log entry to store\n   */\n  log(entry: LogEntry): void {\n    this.logs.push(entry);\n  }\n\n  /**\n   *\n   */\n  async flush(): Promise<void> {\n    // No-op for mock\n  }\n}\n\ndescribe(\"Logger\", () => {\n  let mockTransport: MockTransport;\n  let consoleSpies: {\n    debug: jest.SpyInstance;\n    info: jest.SpyInstance;\n    warn: jest.SpyInstance;\n    error: jest.SpyInstance;\n  };\n\n  beforeEach(() => {\n    // Reset global logger instance\n    resetLogger();\n\n    // Create fresh mock transport\n    mockTransport = new MockTransport();\n\n    // Spy on console methods\n    consoleSpies = {\n      debug: jest.spyOn(console, \"debug\").mockImplementation(),\n      info: jest.spyOn(console, \"info\").mockImplementation(),\n      warn: jest.spyOn(console, \"warn\").mockImplementation(),\n      error: jest.spyOn(console, \"error\").mockImplementation(),\n    };\n  });\n\n  afterEach(() => {\n    // Restore console methods\n    Object.values(consoleSpies).forEach((spy) => spy.mockRestore());\n  });\n\n  describe(\"Method-to-Level Mapping\", () => {\n    it(\"should call transport with DEBUG level for debug()\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      logger.debug(\"Debug message\");\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].level).toBe(LogLevel.DEBUG);\n      expect(mockTransport.logs[0].message).toBe(\"Debug message\");\n    });\n\n    it(\"should call transport with INFO level for info()\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      logger.info(\"Info message\");\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].level).toBe(LogLevel.INFO);\n      expect(mockTransport.logs[0].message).toBe(\"Info message\");\n    });\n\n    it(\"should call transport with WARN level for warn()\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      logger.warn(\"Warning message\");\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].level).toBe(LogLevel.WARN);\n      expect(mockTransport.logs[0].message).toBe(\"Warning message\");\n    });\n\n    it(\"should call transport with ERROR level for error()\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      logger.error(\"Error message\");\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].level).toBe(LogLevel.ERROR);\n      expect(mockTransport.logs[0].message).toBe(\"Error message\");\n    });\n\n    it(\"should call transport with FATAL level for fatal()\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      logger.fatal(\"Fatal message\");\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].level).toBe(LogLevel.FATAL);\n      expect(mockTransport.logs[0].message).toBe(\"Fatal message\");\n    });\n  });\n\n  describe(\"minLevel Filtering\", () => {\n    it(\"should filter out DEBUG messages when minLevel is INFO\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.INFO,\n        transports: [mockTransport],\n      });\n\n      logger.debug(\"Should be ignored\");\n      logger.info(\"Should be logged\");\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].message).toBe(\"Should be logged\");\n    });\n\n    it(\"should filter out DEBUG and INFO messages when minLevel is WARN\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.WARN,\n        transports: [mockTransport],\n      });\n\n      logger.debug(\"Should be ignored\");\n      logger.info(\"Should be ignored\");\n      logger.warn(\"Should be logged\");\n      logger.error(\"Should be logged\");\n\n      expect(mockTransport.logs).toHaveLength(2);\n      expect(mockTransport.logs[0].message).toBe(\"Should be logged\");\n      expect(mockTransport.logs[1].message).toBe(\"Should be logged\");\n    });\n\n    it(\"should log all levels when minLevel is DEBUG\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      logger.debug(\"Debug\");\n      logger.info(\"Info\");\n      logger.warn(\"Warn\");\n      logger.error(\"Error\");\n      logger.fatal(\"Fatal\");\n\n      expect(mockTransport.logs).toHaveLength(5);\n    });\n  });\n\n  describe(\"Context Management\", () => {\n    it(\"should add context to log entries with setContext()\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      const contextLogger = logger.setContext(\"UserService\");\n      contextLogger.info(\"User action\");\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].context).toBe(\"UserService\");\n    });\n\n    it(\"should clear context with clearContext()\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      const contextLogger = logger.setContext(\"UserService\");\n      contextLogger.info(\"With context\");\n\n      contextLogger.clearContext();\n      contextLogger.info(\"Without context\");\n\n      expect(mockTransport.logs).toHaveLength(2);\n      expect(mockTransport.logs[0].context).toBe(\"UserService\");\n      expect(mockTransport.logs[1].context).toBeUndefined();\n    });\n\n    it(\"should preserve context across multiple log calls\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      const contextLogger = logger.setContext(\"PaymentService\");\n      contextLogger.info(\"Processing payment\");\n      contextLogger.warn(\"Payment delayed\");\n      contextLogger.error(\"Payment failed\");\n\n      expect(mockTransport.logs).toHaveLength(3);\n      expect(\n        mockTransport.logs.every((log) => log.context === \"PaymentService\"),\n      ).toBe(true);\n    });\n  });\n\n  describe(\"Data and Error Handling\", () => {\n    it(\"should include data object in log entry\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      const data = { userId: 123, action: \"login\" };\n      logger.info(\"User logged in\", data);\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].data).toEqual(data);\n    });\n\n    it(\"should include error details in log entry\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      const error = new Error(\"Connection failed\");\n      logger.error(\"Database error\", error);\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].error).toEqual(error);\n      expect(mockTransport.logs[0].stack).toBeDefined();\n    });\n\n    it(\"should handle error passed as data\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      const error = new Error(\"Connection failed\");\n      logger.error(\"Database error\", error, { retries: 3 });\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].error).toEqual(error);\n      expect(mockTransport.logs[0].data).toEqual({ retries: 3 });\n    });\n  });\n\n  describe(\"ConsoleTransport\", () => {\n    it(\"should log to console.info for INFO level\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.INFO,\n        enableConsole: true,\n        enableRemote: false,\n      });\n\n      logger.info(\"Console info message\");\n\n      expect(consoleSpies.info).toHaveBeenCalled();\n      const call = consoleSpies.info.mock.calls[0];\n      expect(call[0]).toContain(\"INFO\");\n      expect(call[0]).toContain(\"Console info message\");\n    });\n\n    it(\"should log to console.debug for DEBUG level\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        enableConsole: true,\n        enableRemote: false,\n      });\n\n      logger.debug(\"Console debug message\");\n\n      expect(consoleSpies.debug).toHaveBeenCalled();\n      const call = consoleSpies.debug.mock.calls[0];\n      expect(call[0]).toContain(\"DEBUG\");\n      expect(call[0]).toContain(\"Console debug message\");\n    });\n\n    it(\"should log to console.warn for WARN level\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        enableConsole: true,\n        enableRemote: false,\n      });\n\n      logger.warn(\"Console warning\");\n\n      expect(consoleSpies.warn).toHaveBeenCalled();\n      const call = consoleSpies.warn.mock.calls[0];\n      expect(call[0]).toContain(\"WARN\");\n      expect(call[0]).toContain(\"Console warning\");\n    });\n\n    it(\"should log to console.error for ERROR and FATAL levels\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        enableConsole: true,\n        enableRemote: false,\n      });\n\n      logger.error(\"Console error\");\n      logger.fatal(\"Console fatal\");\n\n      expect(consoleSpies.error).toHaveBeenCalledTimes(2);\n      expect(consoleSpies.error.mock.calls[0][0]).toContain(\"ERROR\");\n      expect(consoleSpies.error.mock.calls[1][0]).toContain(\"FATAL\");\n    });\n\n    it(\"should include context in console output\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        enableConsole: true,\n        enableRemote: false,\n      });\n\n      const contextLogger = logger.setContext(\"TestContext\");\n      contextLogger.info(\"Message with context\");\n\n      expect(consoleSpies.info).toHaveBeenCalled();\n      const call = consoleSpies.info.mock.calls[0];\n      expect(call[0]).toContain(\"[TestContext]\");\n    });\n  });\n\n  describe(\"Configuration\", () => {\n    it(\"should return current configuration with getConfig()\", () => {\n      const config = {\n        minLevel: LogLevel.WARN,\n        enableConsole: false,\n        enableRemote: true,\n        remoteEndpoint: \"https://logs.example.com\",\n      };\n\n      const logger = createLogger(config);\n      const returnedConfig = logger.getConfig();\n\n      expect(returnedConfig.minLevel).toBe(config.minLevel);\n      expect(returnedConfig.enableConsole).toBe(config.enableConsole);\n      expect(returnedConfig.enableRemote).toBe(config.enableRemote);\n    });\n\n    it(\"should update configuration with updateConfig()\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.INFO,\n        transports: [mockTransport],\n      });\n\n      // Log should be filtered\n      logger.debug(\"Should be filtered\");\n      expect(mockTransport.logs).toHaveLength(0);\n\n      // Update config to allow DEBUG and keep the same transport\n      logger.updateConfig({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      // Now debug should work\n      logger.debug(\"Should be logged\");\n      expect(mockTransport.logs).toHaveLength(1);\n    });\n  });\n\n  describe(\"withFields\", () => {\n    it(\"should create a child logger with additional fields\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      const childLogger = logger.withFields({ requestId: \"abc123\" });\n      childLogger.info(\"Request processed\");\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].data).toEqual({ requestId: \"abc123\" });\n    });\n\n    it(\"should merge fields with log-specific data\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      const childLogger = logger.withFields({ service: \"api\" });\n      childLogger.info(\"Request received\", { path: \"/users\" });\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].data).toEqual({\n        service: \"api\",\n        path: \"/users\",\n      });\n    });\n  });\n\n  describe(\"Log Storage\", () => {\n    it(\"should store logs in memory\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      logger.info(\"First log\");\n      logger.warn(\"Second log\");\n\n      const logs = logger.getLogs();\n      expect(logs).toHaveLength(2);\n      expect(logs[0].message).toBe(\"First log\");\n      expect(logs[1].message).toBe(\"Second log\");\n    });\n\n    it(\"should respect maxLogSize configuration\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        maxLogSize: 2,\n        transports: [mockTransport],\n      });\n\n      logger.info(\"Log 1\");\n      logger.info(\"Log 2\");\n      logger.info(\"Log 3\");\n\n      const logs = logger.getLogs();\n      expect(logs).toHaveLength(2);\n      expect(logs[0].message).toBe(\"Log 2\");\n      expect(logs[1].message).toBe(\"Log 3\");\n    });\n\n    it(\"should filter logs with getLogs(filter)\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      logger.debug(\"Debug message\");\n      logger.info(\"Info message\");\n      logger.error(\"Error message\");\n\n      const errorLogs = logger.getLogs({ minLevel: LogLevel.ERROR });\n      expect(errorLogs).toHaveLength(1);\n      expect(errorLogs[0].message).toBe(\"Error message\");\n    });\n\n    it(\"should clear logs with clearLogs()\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      logger.info(\"Test log\");\n      expect(logger.getLogs()).toHaveLength(1);\n\n      logger.clearLogs();\n      expect(logger.getLogs()).toHaveLength(0);\n    });\n  });\n\n  describe(\"Performance Timing\", () => {\n    it(\"should measure time with time() and timeEnd()\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      logger.time(\"operation\");\n\n      // Simulate some delay\n      const start = Date.now();\n      while (Date.now() - start < 10) {\n        // Wait\n      }\n\n      logger.timeEnd(\"operation\");\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].level).toBe(LogLevel.DEBUG);\n      expect(mockTransport.logs[0].message).toContain(\"operation:\");\n      expect(mockTransport.logs[0].data.duration).toBeGreaterThan(0);\n    });\n\n    it(\"should warn if timer does not exist\", () => {\n      const logger = createLogger({\n        minLevel: LogLevel.DEBUG,\n        transports: [mockTransport],\n      });\n\n      logger.timeEnd(\"nonexistent\");\n\n      expect(mockTransport.logs).toHaveLength(1);\n      expect(mockTransport.logs[0].level).toBe(LogLevel.WARN);\n      expect(mockTransport.logs[0].message).toContain(\n        \"Timer 'nonexistent' does not exist\",\n      );\n    });\n  });\n});\n"],"names":["MockTransport","log","entry","logs","push","flush","describe","mockTransport","consoleSpies","beforeEach","resetLogger","debug","jest","spyOn","console","mockImplementation","info","warn","error","afterEach","Object","values","forEach","spy","mockRestore","it","logger","createLogger","minLevel","LogLevel","DEBUG","transports","expect","toHaveLength","level","toBe","message","INFO","WARN","ERROR","fatal","FATAL","contextLogger","setContext","context","clearContext","toBeUndefined","every","data","userId","action","toEqual","Error","stack","toBeDefined","retries","enableConsole","enableRemote","toHaveBeenCalled","call","mock","calls","toContain","toHaveBeenCalledTimes","config","remoteEndpoint","returnedConfig","getConfig","updateConfig","childLogger","withFields","requestId","service","path","getLogs","maxLogSize","errorLogs","clearLogs","time","start","Date","now","timeEnd","duration","toBeGreaterThan"],"mappings":"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"}