{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/orchestrators/handlePlayerMove/PawnPromotionHandler.ts"],"sourcesContent":["/**\n * @file Pawn promotion handler module\n * @module store/orchestrators/handlePlayerMove/PawnPromotionHandler\n *\n * @description\n * Comprehensive pawn promotion management for chess endgame training.\n * Handles detection, evaluation, auto-win scenarios, and future UI integration\n * with sophisticated tablebase analysis for optimal training feedback.\n *\n * @remarks\n * **Core Functionality:**\n * - Detects pawn promotion moves using chess.js flags and properties\n * - Evaluates promotion outcomes using tablebase analysis\n * - Identifies auto-win scenarios for immediate training completion\n * - Provides foundation for future promotion choice UI\n *\n * **Tablebase Integration:**\n * - WDL perspective conversion for accurate player evaluation\n * - Category analysis (mate, win) for auto-win detection\n * - Error resilient evaluation with graceful fallbacks\n *\n * **Training Flow Integration:**\n * - Seamless integration with move orchestration\n * - Automatic training completion for winning promotions\n * - User feedback through German localized messages\n *\n * **Future Extensibility:**\n * - Designed for promotion choice UI implementation\n * - Supports all promotion pieces (Q, R, N, B)\n * - Modular architecture for easy UI integration\n *\n * @example\n * ```typescript\n * const promotionHandler = new PawnPromotionHandler();\n *\n * // Check if move involves promotion\n * const promotionInfo = promotionHandler.checkPromotion(validatedMove);\n * if (promotionInfo.isPromotion) {\n *   // Evaluate if promotion leads to auto-win\n *   const isAutoWin = await promotionHandler.evaluatePromotionOutcome(\n *     fenAfter,\n *     validatedMove.color\n *   );\n *\n *   if (isAutoWin) {\n *     await promotionHandler.handleAutoWin(api, { ...promotionInfo, isAutoWin: true });\n *   }\n * }\n * ```\n */\n\nimport type { ValidatedMove } from \"@shared/types/chess\";\nimport { chessService } from \"@shared/services/ChessService\";\nimport { tablebaseService } from \"@shared/services/TablebaseService\";\nimport { getLogger } from \"@shared/services/logging\";\nimport type { StoreApi } from \"../types\";\nimport { handleTrainingCompletion } from \"./move.completion\";\n\n/**\n * Information about a pawn promotion move\n * @interface PromotionInfo\n */\nexport interface PromotionInfo {\n  /** Whether the move involves pawn promotion */\n  isPromotion: boolean;\n  /** The piece the pawn was promoted to */\n  promotionPiece?: \"q\" | \"r\" | \"n\" | \"b\";\n  /** Source square of the promoting pawn */\n  from?: string;\n  /** Target square where promotion occurs */\n  to?: string;\n  /** Whether promotion leads to immediate win */\n  isAutoWin?: boolean;\n  /** Move description for display purposes */\n  moveDescription?: string;\n}\n\n/**\n * Available promotion choice with German localization\n * @interface PromotionChoice\n */\nexport interface PromotionChoice {\n  /** Single character piece identifier */\n  piece: \"q\" | \"r\" | \"n\" | \"b\";\n  /** German label for the piece */\n  label: string;\n  /** German description of piece capabilities */\n  description: string;\n}\n\n/**\n * Complete set of promotion pieces with German localization\n * @constant PROMOTION_CHOICES\n * @description Provides user-friendly German labels and descriptions for all promotion pieces\n */\nexport const PROMOTION_CHOICES: PromotionChoice[] = [\n  {\n    piece: \"q\",\n    label: \"Dame\",\n    description: \"Stärkste Figur - kann in alle Richtungen ziehen\",\n  },\n  { piece: \"r\", label: \"Turm\", description: \"Zieht horizontal und vertikal\" },\n  {\n    piece: \"n\",\n    label: \"Springer\",\n    description: \"Zieht in L-Form, kann über Figuren springen\",\n  },\n  { piece: \"b\", label: \"Läufer\", description: \"Zieht diagonal\" },\n];\n\n/**\n * Advanced pawn promotion handler with tablebase integration\n * @class PawnPromotionHandler\n *\n * @description\n * Manages all aspects of pawn promotion in chess endgame training:\n *\n * **Detection & Analysis:**\n * - Identifies promotion moves using chess.js move flags\n * - Validates promotion piece types\n * - Extracts move coordinates for UI display\n *\n * **Outcome Evaluation:**\n * - Uses tablebase analysis to evaluate promotion results\n * - Converts WDL values to player perspective for accurate assessment\n * - Detects auto-win scenarios (forced mate, winning positions)\n * - Handles immediate checkmate detection\n *\n * **Training Integration:**\n * - Triggers automatic training completion for winning promotions\n * - Provides user feedback through localized messages\n * - Integrates seamlessly with move orchestration flow\n *\n * **Future UI Support:**\n * - Foundation for promotion choice dialog implementation\n * - Supports all promotion pieces with German localization\n * - Modular architecture for easy UI component integration\n *\n * @remarks\n * The handler uses sophisticated WDL (Win/Draw/Loss) perspective conversion:\n * - Tablebase returns WDL from white's perspective\n * - Values are converted to promoting player's perspective\n * - Auto-win detection considers both WDL values and result categories\n *\n * @example\n * ```typescript\n * const handler = new PawnPromotionHandler();\n *\n * // Complete promotion workflow\n * const promotionInfo = handler.checkPromotion(move);\n * if (promotionInfo.isPromotion) {\n *   const isAutoWin = await handler.evaluatePromotionOutcome(fen, 'w');\n *   if (isAutoWin) {\n *     await handler.handleAutoWin(api, { ...promotionInfo, isAutoWin: true });\n *   }\n * }\n *\n * // Get piece label for UI\n * const label = handler.getPromotionPieceLabel('q'); // Returns: \"Dame\"\n * ```\n */\nexport class PawnPromotionHandler {\n  /**\n   * Checks if a move involves pawn promotion\n   *\n   * @param move - The validated move that was executed\n   * @returns Promotion information\n   */\n  checkPromotion(move: ValidatedMove): PromotionInfo {\n    // chess.js sets the 'promotion' property in the move object\n    // and flags contain 'p' for promotion\n    const isPromotion = move.flags && move.flags.includes(\"p\");\n\n    if (!isPromotion) {\n      return { isPromotion: false };\n    }\n\n    getLogger().debug(\"[PawnPromotion] Promotion detected:\", {\n      from: move.from,\n      to: move.to,\n      piece: move.piece,\n      promotion: move.promotion,\n      flags: move.flags,\n    });\n\n    // Validate promotion piece type\n    const promotionPiece = this.isValidPromotionPiece(move.promotion)\n      ? move.promotion\n      : undefined;\n\n    return {\n      isPromotion: true,\n      promotionPiece,\n      from: move.from,\n      to: move.to,\n      isAutoWin: false, // Will be determined by evaluatePromotionOutcome\n      moveDescription: move.san, // Include SAN notation for display\n    };\n  }\n\n  /**\n   * Evaluates if a promotion leads to an immediate win\n   *\n   * @param currentFen - FEN position after promotion\n   * @param promotingColor - Color of the player who promoted ('w' or 'b')\n   * @returns Promise<boolean> - True if promotion leads to auto-win\n   */\n  async evaluatePromotionOutcome(\n    currentFen: string,\n    promotingColor: \"w\" | \"b\",\n  ): Promise<boolean> {\n    try {\n      // Basic FEN validation\n      if (!currentFen || !currentFen.includes(\" \")) {\n        getLogger().warn(\"[PawnPromotion] Invalid FEN format:\", currentFen);\n        return false;\n      }\n      // Check if game is immediately over after promotion\n      if (chessService.isGameOver()) {\n        const isCheckmate = chessService.isCheckmate();\n        getLogger().debug(\"[PawnPromotion] Game over after promotion:\", {\n          isCheckmate,\n          fen: currentFen.split(\" \")[0],\n        });\n        return isCheckmate; // Checkmate = auto-win\n      }\n\n      // Use tablebase to evaluate the resulting position\n      const evaluation = await tablebaseService\n        .getEvaluation(currentFen)\n        .catch(() => ({ isAvailable: false }));\n\n      if (\n        evaluation.isAvailable &&\n        \"result\" in evaluation &&\n        evaluation.result &&\n        \"wdl\" in evaluation.result &&\n        typeof evaluation.result.wdl === \"number\"\n      ) {\n        // Check if promotion created a winning position from promoting player's perspective\n        // WDL is from white's perspective: positive = good for white, negative = good for black\n        const wdlFromPromotingPlayerPerspective =\n          promotingColor === \"w\"\n            ? evaluation.result.wdl\n            : -evaluation.result.wdl;\n        const isWinning = wdlFromPromotingPlayerPerspective > 0;\n\n        getLogger().debug(\"[PawnPromotion] Tablebase evaluation:\", {\n          wdl: evaluation.result.wdl,\n          wdlFromPromotingPlayerPerspective,\n          promotingColor,\n          category: evaluation.result.category,\n          isWinning,\n          fen: currentFen.split(\" \")[0],\n        });\n\n        // Consider it an auto-win if it's a forced mate or other winning category\n        // Categories like 'mate', 'win', etc. indicate definitive winning scenarios\n        const category = evaluation.result.category;\n        const isAutoWinCategory = !!(\n          category &&\n          typeof category === \"string\" &&\n          (category.includes(\"mate\") || category.includes(\"win\"))\n        );\n        return isWinning && isAutoWinCategory;\n      }\n\n      return false;\n    } catch (error) {\n      getLogger().error(\n        \"[PawnPromotion] Error evaluating promotion outcome:\",\n        error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Handles auto-win scenario after promotion\n   *\n   * @param api - Store API for state updates\n   * @param promotionInfo - Information about the promotion\n   */\n  async handleAutoWin(\n    api: StoreApi,\n    promotionInfo: PromotionInfo,\n  ): Promise<void> {\n    getLogger().info(\n      \"[PawnPromotion] Auto-win detected - completing training session\",\n    );\n\n    const { setState } = api;\n\n    // Show celebration dialog instead of toast\n    const promotionPieceLabel = promotionInfo.promotionPiece\n      ? this.getPromotionPieceLabel(promotionInfo.promotionPiece)\n      : \"Dame\"; // Default to queen if undefined\n    setState((draft) => {\n      draft.training.moveSuccessDialog = {\n        isOpen: true,\n        promotionPiece: promotionPieceLabel,\n        moveDescription: promotionInfo.moveDescription,\n      };\n    });\n\n    // Complete training session as won\n    await handleTrainingCompletion(api, true);\n  }\n\n  /**\n   * Shows promotion choice dialog (for future UI implementation)\n   *\n   * @param api - Store API for state updates\n   * @param from - Source square (e.g., \"e7\")\n   * @param to - Target square (e.g., \"e8\")\n   * @param callback - Callback to execute with chosen piece\n   */\n  showPromotionDialog(\n    api: StoreApi,\n    from: string,\n    to: string,\n    callback: (piece: \"q\" | \"r\" | \"n\" | \"b\") => void,\n  ): void {\n    getLogger().debug(\"[PawnPromotion] Showing promotion dialog:\", {\n      from,\n      to,\n    });\n\n    const { setState } = api;\n\n    // For now, just auto-promote to queen and call callback\n    // TODO: Implement actual promotion choice UI\n    const chosenPiece: \"q\" | \"r\" | \"n\" | \"b\" = \"q\";\n\n    setState((draft) => {\n      draft.ui.toasts.push({\n        id: Date.now().toString(),\n        message: `Bauernumwandlung: ${from}-${to} → Dame`,\n        type: \"info\",\n      });\n    });\n\n    callback(chosenPiece);\n  }\n\n  /**\n   * Validates promotion piece choice\n   *\n   * @param piece - Promotion piece character (can be undefined)\n   * @returns True if valid promotion piece\n   */\n  isValidPromotionPiece(\n    piece: string | undefined,\n  ): piece is \"q\" | \"r\" | \"n\" | \"b\" {\n    return typeof piece === \"string\" && [\"q\", \"r\", \"n\", \"b\"].includes(piece);\n  }\n\n  /**\n   * Gets promotion piece label for UI display\n   *\n   * @param piece - Promotion piece character\n   * @returns German label for the piece\n   */\n  getPromotionPieceLabel(piece: \"q\" | \"r\" | \"n\" | \"b\"): string {\n    const choice = PROMOTION_CHOICES.find((c) => c.piece === piece);\n    return choice?.label || piece.toUpperCase();\n  }\n}\n"],"names":["PROMOTION_CHOICES","PawnPromotionHandler","piece","label","description","checkPromotion","move","isPromotion","flags","includes","getLogger","debug","from","to","promotion","promotionPiece","isValidPromotionPiece","undefined","isAutoWin","moveDescription","san","evaluatePromotionOutcome","currentFen","promotingColor","warn","chessService","isGameOver","isCheckmate","fen","split","evaluation","tablebaseService","getEvaluation","catch","isAvailable","result","wdl","wdlFromPromotingPlayerPerspective","isWinning","category","isAutoWinCategory","error","handleAutoWin","api","promotionInfo","info","setState","promotionPieceLabel","getPromotionPieceLabel","draft","training","moveSuccessDialog","isOpen","handleTrainingCompletion","showPromotionDialog","callback","chosenPiece","ui","toasts","push","id","Date","now","toString","message","type","choice","find","c","toUpperCase"],"mappings":"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"}