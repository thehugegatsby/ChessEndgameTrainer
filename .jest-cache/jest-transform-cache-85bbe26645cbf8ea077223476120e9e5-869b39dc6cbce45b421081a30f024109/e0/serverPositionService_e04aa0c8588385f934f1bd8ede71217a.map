{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/database/serverPositionService.ts"],"sourcesContent":["/**\n * Server-side Position Service Factory\n * Creates PositionService instances for use in getStaticProps/getServerSideProps\n * where React hooks are not available\n */\n\nimport { PositionService } from \"./PositionService\";\nimport { IPositionService } from \"./IPositionService\";\nimport { FirebasePositionRepository } from \"@shared/repositories/implementations/FirebasePositionRepository\";\nimport { db } from \"@shared/lib/firebase\";\nimport {\n  shouldUseMockService,\n  createMockPositionService,\n} from \"@shared/testing/MockPositionServiceFactory\";\nimport { CACHE } from \"@shared/constants\";\nimport { getLogger } from \"@shared/services/logging\";\n\nconst logger = getLogger().setContext(\"ServerPositionService\");\n\n/**\n * Creates a PositionService instance for server-side usage\n * This is needed for Next.js getStaticProps/getServerSideProps\n * where React Context/hooks are not available\n */\nexport function createServerPositionService(): IPositionService {\n  // Use mock service for E2E tests (server-side)\n  if (shouldUseMockService()) {\n    logger.info(\"Creating MockPositionService for server-side E2E testing\");\n    return createMockPositionService();\n  }\n\n  // Use Firebase for production/development\n  const repository = new FirebasePositionRepository(db, {\n    enableCache: true,\n    cacheSize: CACHE.POSITION_CACHE_SIZE,\n    cacheTTL: CACHE.ANALYSIS_CACHE_TTL,\n  });\n\n  return new PositionService(repository, {\n    cacheEnabled: true,\n    cacheSize: CACHE.POSITION_CACHE_SIZE,\n    cacheTTL: CACHE.ANALYSIS_CACHE_TTL,\n  });\n}\n\n// Create a singleton instance for server-side usage\nlet serverPositionService: IPositionService | null = null;\n\n/**\n * Get or create the server-side position service singleton\n * This ensures we reuse the same service instance across server-side renders\n */\nexport function getServerPositionService(): IPositionService {\n  if (!serverPositionService) {\n    serverPositionService = createServerPositionService();\n  }\n  return serverPositionService;\n}\n\n/**\n * Reset server position service singleton (useful for testing)\n */\nexport function resetServerPositionService(): void {\n  serverPositionService = null;\n}\n"],"names":["createServerPositionService","getServerPositionService","resetServerPositionService","logger","getLogger","setContext","shouldUseMockService","info","createMockPositionService","repository","FirebasePositionRepository","db","enableCache","cacheSize","CACHE","POSITION_CACHE_SIZE","cacheTTL","ANALYSIS_CACHE_TTL","PositionService","cacheEnabled","serverPositionService"],"mappings":"AAAA;;;;CAIC;;;;;;;;;;;QAoBeA;eAAAA;;QA4BAC;eAAAA;;QAUAC;eAAAA;;;iCAxDgB;4CAEW;0BACxB;4CAIZ;2BACe;yBACI;AAE1B,MAAMC,SAASC,IAAAA,kBAAS,IAAGC,UAAU,CAAC;AAO/B,SAASL;IACd,+CAA+C;IAC/C,IAAIM,IAAAA,gDAAoB,KAAI;QAC1BH,OAAOI,IAAI,CAAC;QACZ,OAAOC,IAAAA,qDAAyB;IAClC;IAEA,0CAA0C;IAC1C,MAAMC,aAAa,IAAIC,sDAA0B,CAACC,YAAE,EAAE;QACpDC,aAAa;QACbC,WAAWC,gBAAK,CAACC,mBAAmB;QACpCC,UAAUF,gBAAK,CAACG,kBAAkB;IACpC;IAEA,OAAO,IAAIC,gCAAe,CAACT,YAAY;QACrCU,cAAc;QACdN,WAAWC,gBAAK,CAACC,mBAAmB;QACpCC,UAAUF,gBAAK,CAACG,kBAAkB;IACpC;AACF;AAEA,oDAAoD;AACpD,IAAIG,wBAAiD;AAM9C,SAASnB;IACd,IAAI,CAACmB,uBAAuB;QAC1BA,wBAAwBpB;IAC1B;IACA,OAAOoB;AACT;AAKO,SAASlB;IACdkB,wBAAwB;AAC1B"}