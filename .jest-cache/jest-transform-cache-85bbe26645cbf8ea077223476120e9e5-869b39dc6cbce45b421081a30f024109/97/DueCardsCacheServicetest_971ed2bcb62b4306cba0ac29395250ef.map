{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/services/DueCardsCacheService.test.ts"],"sourcesContent":["/**\n * @file Unit tests for DueCardsCacheService\n * @description Comprehensive tests for localStorage cache with TTL, LRU, and midnight invalidation\n */\n\nimport { DueCardsCacheService, createInputHash } from '@shared/services/DueCardsCacheService';\nimport { filterDueCards, type DueCard, type DueCardsStats } from '@shared/types/progress';\nimport type { CardProgress } from '@shared/store/slices/types';\n\n// Mock localStorage for testing\nclass MockLocalStorage {\n  private store: Record<string, string> = {};\n\n  getItem(key: string): string | null {\n    return this.store[key] || null;\n  }\n\n  setItem(key: string, value: string): void {\n    this.store[key] = value;\n  }\n\n  removeItem(key: string): void {\n    delete this.store[key];\n  }\n\n  clear(): void {\n    this.store = {};\n  }\n\n  get length(): number {\n    return Object.keys(this.store).length;\n  }\n\n  key(index: number): string | null {\n    const keys = Object.keys(this.store);\n    return keys[index] || null;\n  }\n}\n\n// Test helpers\nconst createTestCard = (id: string, nextReviewAt: number): CardProgress => ({\n  id,\n  nextReviewAt,\n  lastReviewedAt: Date.now() - 86400000, // 24 hours ago\n  interval: 1,\n  repetition: 1,\n  efactor: 2.5,\n  lapses: 0\n});\n\nconst createDueTestCards = (count: number): DueCard[] => {\n  const cards = Array.from({ length: count }, (_, i) => \n    createTestCard(`test-${i}`, Date.now() - 1000) // Due 1 second ago\n  );\n  return filterDueCards(cards);\n};\n\nconst createTestStats = (dueCount: number): DueCardsStats => ({\n  totalCards: dueCount + 5,\n  dueCount,\n  duePercentage: Math.round((dueCount / (dueCount + 5)) * 100),\n  nextDueAt: Date.now() + 3600000, // 1 hour from now\n  averageInterval: 2.5\n});\n\n// Mock Date.now for TTL testing\nconst originalDateNow = Date.now;\nconst mockDateNow = (timestamp: number) => {\n  Date.now = jest.fn(() => timestamp);\n};\n\nconst restoreDateNow = () => {\n  Date.now = originalDateNow;\n};\n\ndescribe('DueCardsCacheService', () => {\n  let mockLocalStorage: MockLocalStorage;\n  let cacheService: DueCardsCacheService;\n\n  beforeEach(() => {\n    // Setup mock localStorage\n    mockLocalStorage = new MockLocalStorage();\n    Object.defineProperty(global, 'localStorage', {\n      value: mockLocalStorage,\n      writable: true\n    });\n\n    // Clear any existing instance\n    (DueCardsCacheService as any).instance = null;\n    \n    // Create fresh instance\n    cacheService = DueCardsCacheService.getInstance();\n    \n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    restoreDateNow();\n    cacheService.destroy();\n    mockLocalStorage.clear();\n  });\n\n  describe('getInstance', () => {\n    it('should return singleton instance', () => {\n      const instance1 = DueCardsCacheService.getInstance();\n      const instance2 = DueCardsCacheService.getInstance();\n      \n      expect(instance1).toBe(instance2);\n    });\n  });\n\n  describe('setDueCards and getDueCards', () => {\n    const userId = 'test-user-1';\n    const inputHash = 'test-hash-123';\n\n    it('should cache and retrieve due cards successfully', () => {\n      const dueCards = createDueTestCards(5);\n      const stats = createTestStats(5);\n\n      // Cache the data\n      cacheService.setDueCards(userId, dueCards, stats, inputHash);\n\n      // Retrieve the data\n      const cached = cacheService.getDueCards(userId, inputHash);\n\n      expect(cached).toBeTruthy();\n      expect(cached?.dueCards).toHaveLength(5);\n      expect(cached?.dueCards[0].id).toBe('test-0');\n      expect(cached?.stats.dueCount).toBe(5);\n      expect(cached?.inputHash).toBe(inputHash);\n    });\n\n    it('should return null for cache miss', () => {\n      const cached = cacheService.getDueCards('nonexistent-user', inputHash);\n      expect(cached).toBeNull();\n    });\n\n    it('should invalidate cache when input hash changes', () => {\n      const dueCards = createDueTestCards(3);\n      const stats = createTestStats(3);\n\n      // Cache with original hash\n      cacheService.setDueCards(userId, dueCards, stats, inputHash);\n\n      // Try to retrieve with different hash\n      const cached = cacheService.getDueCards(userId, 'different-hash');\n      expect(cached).toBeNull();\n      \n      // Original hash should still work initially\n      const original = cacheService.getDueCards(userId, inputHash);\n      expect(original).toBeNull(); // Should be cleared due to hash mismatch above\n    });\n\n    it('should handle invalid cache entry structure gracefully', () => {\n      // Manually insert invalid cache entry\n      mockLocalStorage.setItem(\n        'endgame_due_cards_test-user-1',\n        JSON.stringify({ invalid: 'data' })\n      );\n\n      const cached = cacheService.getDueCards(userId, inputHash);\n      expect(cached).toBeNull();\n    });\n\n    it('should handle localStorage errors gracefully', () => {\n      // Mock localStorage to throw errors\n      jest.spyOn(mockLocalStorage, 'getItem').mockImplementation(() => {\n        throw new Error('LocalStorage error');\n      });\n\n      const cached = cacheService.getDueCards(userId, inputHash);\n      expect(cached).toBeNull();\n    });\n  });\n\n  describe('TTL expiration', () => {\n    const userId = 'ttl-test-user';\n    const inputHash = 'ttl-hash';\n\n    it('should expire cache after 24 hours', () => {\n      const dueCards = createDueTestCards(2);\n      const stats = createTestStats(2);\n      \n      const now = 1640000000000; // Fixed timestamp\n      mockDateNow(now);\n\n      // Cache the data\n      cacheService.setDueCards(userId, dueCards, stats, inputHash);\n\n      // Fast forward 25 hours\n      mockDateNow(now + 25 * 60 * 60 * 1000);\n\n      // Should be expired\n      const cached = cacheService.getDueCards(userId, inputHash);\n      expect(cached).toBeNull();\n    });\n\n    it('should not expire cache before 24 hours', () => {\n      const dueCards = createDueTestCards(2);\n      const stats = createTestStats(2);\n      \n      // Use a timestamp at 10:00 AM UTC so adding 23 hours doesn't cross midnight\n      const now = new Date('2024-01-15T10:00:00.000Z').getTime();\n      mockDateNow(now);\n\n      // Cache the data\n      cacheService.setDueCards(userId, dueCards, stats, inputHash);\n\n      // Fast forward 10 hours (should be 8:00 PM same UTC day)\n      mockDateNow(now + 10 * 60 * 60 * 1000);\n\n      // Should still be valid\n      const cached = cacheService.getDueCards(userId, inputHash);\n      expect(cached).toBeTruthy();\n      expect(cached?.dueCards).toHaveLength(2);\n    });\n  });\n\n  describe('midnight invalidation', () => {\n    const userId = 'midnight-test-user';\n    const inputHash = 'midnight-hash';\n\n    it('should invalidate cache after midnight UTC', () => {\n      const dueCards = createDueTestCards(3);\n      const stats = createTestStats(3);\n\n      // Set time to just before midnight UTC (23:59 UTC)\n      const beforeMidnight = new Date('2024-01-15T23:59:00.000Z').getTime();\n      mockDateNow(beforeMidnight);\n\n      // Cache the data\n      cacheService.setDueCards(userId, dueCards, stats, inputHash);\n\n      // Move to just after midnight UTC (00:01 next day)\n      const afterMidnight = new Date('2024-01-16T00:01:00.000Z').getTime();\n      mockDateNow(afterMidnight);\n\n      // Should be invalidated due to midnight rollover\n      const cached = cacheService.getDueCards(userId, inputHash);\n      expect(cached).toBeNull();\n    });\n\n    it('should not invalidate cache on same UTC day', () => {\n      const dueCards = createDueTestCards(3);\n      const stats = createTestStats(3);\n\n      // Set time to morning UTC (8:00 AM)\n      const morning = new Date('2024-01-15T08:00:00.000Z').getTime();\n      mockDateNow(morning);\n\n      // Cache the data\n      cacheService.setDueCards(userId, dueCards, stats, inputHash);\n\n      // Move to later same day UTC (6:00 PM same day)\n      const evening = new Date('2024-01-15T18:00:00.000Z').getTime();\n      mockDateNow(evening);\n\n      // Should still be valid (same UTC day)\n      const cached = cacheService.getDueCards(userId, inputHash);\n      expect(cached).toBeTruthy();\n      expect(cached?.dueCards).toHaveLength(3);\n    });\n  });\n\n  describe('LRU cache management', () => {\n    const inputHash = 'lru-hash';\n\n    it('should track last accessed time', () => {\n      const dueCards = createDueTestCards(1);\n      const stats = createTestStats(1);\n      \n      const initialTime = 1640000000000;\n      mockDateNow(initialTime);\n\n      // Cache the data\n      cacheService.setDueCards('user1', dueCards, stats, inputHash);\n\n      // Access later\n      const laterTime = initialTime + 60000; // 1 minute later\n      mockDateNow(laterTime);\n\n      const cached = cacheService.getDueCards('user1', inputHash);\n      expect(cached?.lastAccessedAt).toBe(laterTime);\n    });\n\n    it('should handle large collections with performance warning', () => {\n      // Mock console.warn to capture performance warnings\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\n\n      const dueCards = createDueTestCards(600); // Over threshold\n      const stats = createTestStats(600);\n\n      cacheService.setDueCards('large-user', dueCards, stats, inputHash);\n\n      // Check that warning was logged (through logger)\n      // Note: The actual warning goes through logger.warn, not console.warn directly\n      expect(dueCards.length).toBeGreaterThan(500);\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('clearUserCache', () => {\n    it('should clear cache for specific user', () => {\n      const dueCards1 = createDueTestCards(2);\n      const dueCards2 = createDueTestCards(3);\n      const stats1 = createTestStats(2);\n      const stats2 = createTestStats(3);\n\n      // Cache for two users\n      cacheService.setDueCards('user1', dueCards1, stats1, 'hash1');\n      cacheService.setDueCards('user2', dueCards2, stats2, 'hash2');\n\n      // Clear user1 cache\n      cacheService.clearUserCache('user1');\n\n      // user1 cache should be gone\n      expect(cacheService.getDueCards('user1', 'hash1')).toBeNull();\n      \n      // user2 cache should still exist\n      expect(cacheService.getDueCards('user2', 'hash2')).toBeTruthy();\n    });\n\n    it('should handle clearing nonexistent user cache', () => {\n      // Should not throw error\n      expect(() => {\n        cacheService.clearUserCache('nonexistent-user');\n      }).not.toThrow();\n    });\n  });\n\n  describe('clearAllCache', () => {\n    it('should clear all cache entries', () => {\n      const dueCards = createDueTestCards(2);\n      const stats = createTestStats(2);\n\n      // Cache for multiple users\n      cacheService.setDueCards('user1', dueCards, stats, 'hash1');\n      cacheService.setDueCards('user2', dueCards, stats, 'hash2');\n      cacheService.setDueCards('user3', dueCards, stats, 'hash3');\n\n      // Clear all\n      cacheService.clearAllCache();\n\n      // All caches should be gone\n      expect(cacheService.getDueCards('user1', 'hash1')).toBeNull();\n      expect(cacheService.getDueCards('user2', 'hash2')).toBeNull();\n      expect(cacheService.getDueCards('user3', 'hash3')).toBeNull();\n    });\n  });\n\n  describe('getCacheStats', () => {\n    it('should return cache statistics', () => {\n      const dueCards = createDueTestCards(5);\n      const stats = createTestStats(5);\n\n      // Initially empty\n      let cacheStats = cacheService.getCacheStats();\n      expect(cacheStats.available).toBe(true);\n      expect(cacheStats.totalEntries).toBe(0);\n\n      // Cache some data\n      cacheService.setDueCards('stats-user', dueCards, stats, 'stats-hash');\n\n      cacheStats = cacheService.getCacheStats();\n      expect(cacheStats.totalEntries).toBe(1);\n      expect(cacheStats.estimatedSize).toBeGreaterThan(0);\n    });\n\n    it('should handle unavailable localStorage', () => {\n      // Mock localStorage as unavailable\n      Object.defineProperty(global, 'localStorage', {\n        value: {\n          setItem: () => { throw new Error('Not available'); },\n          getItem: () => { throw new Error('Not available'); },\n        },\n        writable: true\n      });\n\n      // Create new instance with unavailable localStorage\n      (DueCardsCacheService as any).instance = null;\n      const newService = DueCardsCacheService.getInstance();\n\n      const stats = newService.getCacheStats();\n      expect(stats.available).toBe(false);\n      expect(stats.totalEntries).toBe(0);\n\n      newService.destroy();\n    });\n  });\n\n  describe('forceCleanup', () => {\n    it('should perform cleanup when called', () => {\n      const dueCards = createDueTestCards(2);\n      const stats = createTestStats(2);\n      \n      const pastTime = Date.now() - 25 * 60 * 60 * 1000; // 25 hours ago\n      mockDateNow(pastTime);\n\n      // Cache expired data\n      cacheService.setDueCards('cleanup-user', dueCards, stats, 'cleanup-hash');\n\n      // Return to present\n      restoreDateNow();\n\n      // Force cleanup\n      cacheService.forceCleanup();\n\n      // Expired entry should be removed\n      expect(cacheService.getDueCards('cleanup-user', 'cleanup-hash')).toBeNull();\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle JSON parse errors gracefully', () => {\n      // Manually insert invalid JSON\n      mockLocalStorage.setItem('endgame_due_cards_error-user', 'invalid-json');\n\n      const cached = cacheService.getDueCards('error-user', 'error-hash');\n      expect(cached).toBeNull();\n    });\n\n    it('should handle localStorage quota exceeded', () => {\n      // Mock setItem to throw quota exceeded error\n      jest.spyOn(mockLocalStorage, 'setItem').mockImplementation(() => {\n        throw new Error('QuotaExceededError');\n      });\n\n      const dueCards = createDueTestCards(1);\n      const stats = createTestStats(1);\n\n      // Should not throw error\n      expect(() => {\n        cacheService.setDueCards('quota-user', dueCards, stats, 'quota-hash');\n      }).not.toThrow();\n    });\n  });\n});\n\ndescribe('createInputHash', () => {\n  it('should create consistent hash for same input', () => {\n    const input = { userId: 'test', cards: ['a', 'b', 'c'] };\n    \n    const hash1 = createInputHash(input);\n    const hash2 = createInputHash(input);\n    \n    expect(hash1).toBe(hash2);\n    expect(typeof hash1).toBe('string');\n    expect(hash1.length).toBeGreaterThan(0);\n  });\n\n  it('should create different hashes for different inputs', () => {\n    const input1 = { userId: 'test1', cards: ['a', 'b'] };\n    const input2 = { userId: 'test2', cards: ['a', 'b'] };\n    \n    const hash1 = createInputHash(input1);\n    const hash2 = createInputHash(input2);\n    \n    expect(hash1).not.toBe(hash2);\n  });\n\n  it('should handle string input', () => {\n    const hash = createInputHash('test-string');\n    expect(typeof hash).toBe('string');\n    expect(hash.length).toBeGreaterThan(0);\n  });\n\n  it('should handle empty input', () => {\n    const hash = createInputHash('');\n    expect(typeof hash).toBe('string');\n  });\n\n  it('should handle complex nested objects', () => {\n    const complex = {\n      user: { id: 'test', profile: { name: 'Test User' } },\n      cards: [{ id: 'card1', data: { score: 100 } }],\n      meta: { timestamp: 123456789 }\n    };\n    \n    const hash = createInputHash(complex);\n    expect(typeof hash).toBe('string');\n    expect(hash.length).toBeGreaterThan(0);\n  });\n});"],"names":["MockLocalStorage","getItem","key","store","setItem","value","removeItem","clear","length","Object","keys","index","createTestCard","id","nextReviewAt","lastReviewedAt","Date","now","interval","repetition","efactor","lapses","createDueTestCards","count","cards","Array","from","_","i","filterDueCards","createTestStats","dueCount","totalCards","duePercentage","Math","round","nextDueAt","averageInterval","originalDateNow","mockDateNow","timestamp","jest","fn","restoreDateNow","describe","mockLocalStorage","cacheService","beforeEach","defineProperty","global","writable","DueCardsCacheService","instance","getInstance","clearAllMocks","afterEach","destroy","it","instance1","instance2","expect","toBe","userId","inputHash","dueCards","stats","setDueCards","cached","getDueCards","toBeTruthy","toHaveLength","toBeNull","original","JSON","stringify","invalid","spyOn","mockImplementation","Error","getTime","beforeMidnight","afterMidnight","morning","evening","initialTime","laterTime","lastAccessedAt","consoleSpy","console","toBeGreaterThan","mockRestore","dueCards1","dueCards2","stats1","stats2","clearUserCache","not","toThrow","clearAllCache","cacheStats","getCacheStats","available","totalEntries","estimatedSize","newService","pastTime","forceCleanup","input","hash1","createInputHash","hash2","input1","input2","hash","complex","user","profile","name","data","score","meta"],"mappings":"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"}