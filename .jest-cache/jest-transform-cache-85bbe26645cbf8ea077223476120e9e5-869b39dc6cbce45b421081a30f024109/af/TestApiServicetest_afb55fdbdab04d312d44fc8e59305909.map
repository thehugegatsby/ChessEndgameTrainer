{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/services/test/TestApiService.test.ts"],"sourcesContent":["/**\n * @file Tests for TestApiService - Clean Store-Based Architecture\n * @description Test coverage for E2E test API service with store interactions only\n */\n\n// Mock the logging module BEFORE imports\njest.mock(\"../../../../shared/services/logging\", () => ({\n  getLogger: jest.fn().mockReturnValue({\n    setContext: jest.fn().mockReturnThis(),\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n  }),\n}));\n\n// Mock chess.js\njest.mock(\"chess.js\", () => {\n  return {\n    Chess: jest.fn().mockImplementation(function (fen?: string) {\n      return {\n        fen: jest.fn(\n          () =>\n            fen || \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n        ),\n        turn: jest.fn(() => \"w\"),\n        pgn: jest.fn(() => \"1. e4 e5\"),\n        isGameOver: jest.fn(() => false),\n        isCheck: jest.fn(() => false),\n        isCheckmate: jest.fn(() => false),\n        isDraw: jest.fn(() => false),\n        isStalemate: jest.fn(() => false),\n        isThreefoldRepetition: jest.fn(() => false),\n        isInsufficientMaterial: jest.fn(() => false),\n        move: jest.fn((_move) => ({ from: \"e2\", to: \"e4\", san: \"e4\" })),\n      };\n    }),\n  };\n});\n\nimport {\n  TestApiService,\n  TestTablebaseConfig,\n  getTestApi,\n} from \"../../../../shared/services/test/TestApiService\";\nimport { getLogger } from \"../../../../shared/services/logging\";\n\ndescribe(\"TestApiService - Store-Based Architecture\", () => {\n  let service: TestApiService;\n  let mockStoreAccess: any;\n  let consoleLogSpy: jest.SpyInstance;\n  let consoleErrorSpy: jest.SpyInstance;\n  let consoleWarnSpy: jest.SpyInstance;\n  let mockLogger: any;\n\n  beforeEach(() => {\n    // Get the mocked logger instance and clear all mocks\n    mockLogger = getLogger();\n    jest.clearAllMocks();\n\n    // Reset singleton\n    TestApiService[\"instance\"] = null;\n    service = TestApiService.getInstance();\n\n    // Mock store access - the ONLY dependency\n    mockStoreAccess = {\n      getState: jest.fn(() => ({\n        game: {\n          currentFen:\n            \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n        },\n        tablebase: {\n          analysisStatus: \"idle\",\n        },\n        training: {\n          currentFen:\n            \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n          moveHistory: [],\n          currentEvaluation: { evaluation: 0.2 },\n          analysisStatus: \"idle\",\n        },\n        fen: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n        history: [],\n        evaluation: { tablebaseEvaluation: { value: 0.1 } },\n        analysisStatus: \"idle\",\n      })),\n      subscribe: jest.fn(() => jest.fn()),\n      makeMove: jest.fn(),\n      _internalApplyMove: jest.fn(),\n      resetPosition: jest.fn(),\n      setPosition: jest.fn(),\n      goToMove: jest.fn(),\n      setAnalysisStatus: jest.fn(),\n    };\n\n    // Mock console methods\n    consoleLogSpy = jest.spyOn(console, \"log\").mockImplementation();\n    consoleErrorSpy = jest.spyOn(console, \"error\").mockImplementation();\n    consoleWarnSpy = jest.spyOn(console, \"warn\").mockImplementation();\n  });\n\n  afterEach(() => {\n    service.cleanup();\n    jest.clearAllMocks();\n    consoleLogSpy.mockRestore();\n    consoleErrorSpy.mockRestore();\n    consoleWarnSpy.mockRestore();\n  });\n\n  describe(\"Singleton Pattern\", () => {\n    it(\"should return the same instance\", () => {\n      const instance1 = TestApiService.getInstance();\n      const instance2 = TestApiService.getInstance();\n      expect(instance1).toBe(instance2);\n    });\n\n    it(\"should provide convenience getter\", () => {\n      const instance = getTestApi();\n      expect(instance).toBe(TestApiService.getInstance());\n    });\n  });\n\n  describe(\"Initialization\", () => {\n    it(\"should initialize with store access\", () => {\n      const eventHandler = jest.fn();\n      service.on(\"test:initialized\", eventHandler);\n\n      service.initialize(mockStoreAccess);\n\n      // Verify logger was called\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        \"âœ… TestApiService: Successfully initialized with store actions\",\n      );\n      expect(eventHandler).toHaveBeenCalledWith(\n        expect.objectContaining({\n          config: { deterministic: false },\n        }),\n      );\n      expect(service.isInitialized).toBe(true);\n    });\n\n    it(\"should initialize with custom config\", () => {\n      const customConfig: TestTablebaseConfig = {\n        deterministic: true,\n      };\n\n      service.initialize(mockStoreAccess, customConfig);\n\n      // Can't access private property directly, but we can verify it was set\n      expect(service.isInitialized).toBe(true);\n    });\n\n    it(\"should fail initialization if required actions are missing\", () => {\n      const invalidStoreAccess = {\n        getState: jest.fn(),\n        subscribe: jest.fn(),\n        // Missing required actions: makeMove, resetPosition\n      };\n\n      service.initialize(invalidStoreAccess as any);\n\n      // Verify logger error was called\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        \"Required store actions not available\",\n      );\n      expect(service.isInitialized).toBe(false);\n    });\n  });\n\n  describe(\"makeMove\", () => {\n    beforeEach(() => {\n      service.initialize(mockStoreAccess);\n    });\n\n    it(\"should make move with dash notation\", async () => {\n      const eventHandler = jest.fn();\n      service.on(\"test:move\", eventHandler);\n\n      const result = await service.makeMove(\"e2-e4\");\n\n      expect(mockStoreAccess._internalApplyMove).toHaveBeenCalledWith(\n        expect.objectContaining({\n          from: \"e2\",\n          to: \"e4\",\n        }),\n      );\n      expect(result.success).toBe(true);\n      expect(result.resultingFen).toBeDefined();\n      expect(eventHandler).toHaveBeenCalled();\n    });\n\n    it(\"should make move with SAN notation\", async () => {\n      const result = await service.makeMove(\"e4\");\n\n      expect(mockStoreAccess._internalApplyMove).toHaveBeenCalledWith(\"e4\");\n      expect(result.success).toBe(true);\n    });\n\n    it(\"should handle errors gracefully\", async () => {\n      mockStoreAccess._internalApplyMove.mockImplementation(() => {\n        throw new Error(\"Invalid move\");\n      });\n\n      const result = await service.makeMove(\"invalid\");\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe(\"Invalid move\");\n    });\n  });\n\n  describe(\"getGameState\", () => {\n    beforeEach(() => {\n      service.initialize(mockStoreAccess);\n    });\n\n    it(\"should return current game state\", () => {\n      const state = service.getGameState();\n\n      expect(state).toEqual(\n        expect.objectContaining({\n          fen: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n          pgn: \"1. e4 e5\",\n          turn: \"w\",\n          moveCount: 0,\n          isGameOver: false,\n          isCheck: false,\n          isCheckmate: false,\n          isDraw: false,\n        }),\n      );\n    });\n  });\n\n  describe(\"resetGame\", () => {\n    beforeEach(() => {\n      service.initialize(mockStoreAccess);\n    });\n\n    it(\"should reset game position\", async () => {\n      const eventHandler = jest.fn();\n      service.on(\"test:reset\", eventHandler);\n\n      await service.resetGame();\n\n      expect(mockStoreAccess.resetPosition).toHaveBeenCalled();\n      expect(eventHandler).toHaveBeenCalledWith({});\n    });\n  });\n\n  describe(\"triggerTablebaseAnalysis\", () => {\n    beforeEach(() => {\n      service.initialize(mockStoreAccess);\n    });\n\n    it(\"should trigger tablebase analysis\", async () => {\n      const eventHandler = jest.fn();\n      service.on(\"test:tablebaseAnalysisComplete\", eventHandler);\n\n      const result = await service.triggerTablebaseAnalysis(2000);\n\n      expect(mockStoreAccess.getState).toHaveBeenCalled();\n      expect(result).toBe(true);\n      expect(eventHandler).toHaveBeenCalledWith({\n        fen: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n      });\n    });\n\n    it(\"should handle timeout\", async () => {\n      // Mock tablebase status as always loading\n      mockStoreAccess.getState.mockReturnValue({\n        tablebase: { analysisStatus: \"loading\" },\n        game: {\n          currentFen:\n            \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n        },\n      });\n\n      const result = await service.triggerTablebaseAnalysis(100);\n\n      expect(result).toBe(false);\n      expect(mockLogger.warn).toHaveBeenCalledWith(\n        \"Tablebase analysis timeout after\",\n        { timeoutMs: 100 },\n      );\n    });\n\n    it(\"should handle errors\", async () => {\n      mockStoreAccess.getState.mockImplementation(() => {\n        throw new Error(\"Store error\");\n      });\n\n      const result = await service.triggerTablebaseAnalysis(1000);\n\n      expect(result).toBe(false);\n      expect(mockLogger.error).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"cleanup\", () => {\n    it(\"should clean up all state\", () => {\n      service.initialize(mockStoreAccess);\n      const unsubscribe = jest.fn();\n      mockStoreAccess.subscribe.mockReturnValue(unsubscribe);\n\n      service.cleanup();\n\n      expect(service.isInitialized).toBe(false);\n    });\n  });\n});\n"],"names":["jest","mock","getLogger","fn","mockReturnValue","setContext","mockReturnThis","info","error","warn","debug","Chess","mockImplementation","fen","turn","pgn","isGameOver","isCheck","isCheckmate","isDraw","isStalemate","isThreefoldRepetition","isInsufficientMaterial","move","_move","from","to","san","describe","service","mockStoreAccess","consoleLogSpy","consoleErrorSpy","consoleWarnSpy","mockLogger","beforeEach","clearAllMocks","TestApiService","getInstance","getState","game","currentFen","tablebase","analysisStatus","training","moveHistory","currentEvaluation","evaluation","history","tablebaseEvaluation","value","subscribe","makeMove","_internalApplyMove","resetPosition","setPosition","goToMove","setAnalysisStatus","spyOn","console","afterEach","cleanup","mockRestore","it","instance1","instance2","expect","toBe","instance","getTestApi","eventHandler","on","initialize","toHaveBeenCalledWith","objectContaining","config","deterministic","isInitialized","customConfig","invalidStoreAccess","result","success","resultingFen","toBeDefined","toHaveBeenCalled","Error","state","getGameState","toEqual","moveCount","resetGame","triggerTablebaseAnalysis","timeoutMs","unsubscribe"],"mappings":"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"}