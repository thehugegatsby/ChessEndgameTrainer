{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/services/TablebaseService.test.ts"],"sourcesContent":["/**\n * @jest-environment node\n *\n * Comprehensive test suite for optimized TablebaseService\n *\n * @remarks\n * Tests the single API call architecture and caching behavior\n * of the optimized TablebaseService implementation.\n */\n\nimport { tablebaseService } from \"../../shared/services/TablebaseService\";\nimport { TEST_FENS } from \"../../shared/testing/TestFixtures\";\nimport {\n  EndgamePositions,\n  SpecialPositions,\n  StandardPositions,\n} from \"../fixtures/fenPositions\";\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\ndescribe(\"TablebaseService\", () => {\n  const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    tablebaseService.clearCache();\n  });\n\n  /**\n   * Helper to create a standard tablebase response\n   * @param config\n   * @param config.category\n   * @param config.dtz\n   * @param config.dtm\n   * @param config.moves\n   */\n  function createTablebaseResponse(config: {\n    category?: string;\n    dtz?: number | null;\n    dtm?: number | null;\n    moves?: Array<{\n      uci: string;\n      san: string;\n      category: string;\n      dtz: number | null;\n      dtm: number | null;\n    }>;\n  }) {\n    return {\n      ok: true,\n      /**\n       *\n       */\n      json: async () => ({\n        category: config.category || \"draw\",\n        dtz: config.dtz ?? 0,\n        dtm: config.dtm ?? null,\n        checkmate: false,\n        stalemate: false,\n        variant_win: false,\n        variant_loss: false,\n        insufficient_material: false,\n        moves: config.moves || [],\n      }),\n    } as Response;\n  }\n\n  describe(\"Core Functionality\", () => {\n    it(\"should fetch and return evaluation for a position\", async () => {\n      const fen = EndgamePositions.KQK_WIN;\n\n      mockFetch.mockResolvedValueOnce(\n        createTablebaseResponse({\n          category: \"win\",\n          dtz: 13,\n          dtm: 13,\n          moves: [\n            {\n              uci: \"h1b7\",\n              san: \"Qb7+\",\n              category: \"loss\",\n              dtz: -12,\n              dtm: -12,\n            },\n          ],\n        }),\n      );\n\n      const result = await tablebaseService.getEvaluation(fen);\n\n      expect(result.isAvailable).toBe(true);\n      expect(result.result).toEqual({\n        wdl: 2,\n        dtz: 13,\n        dtm: 13,\n        category: \"win\",\n        precise: false,\n        evaluation: \"Gewinn in 13 ZÃ¼gen\",\n      });\n      expect(mockFetch).toHaveBeenCalledTimes(1);\n    });\n\n    it(\"should return top moves with correct perspective\", async () => {\n      const fen = EndgamePositions.KQK_WIN;\n\n      mockFetch.mockResolvedValueOnce(\n        createTablebaseResponse({\n          category: \"win\",\n          dtz: 13,\n          dtm: 13,\n          moves: [\n            {\n              uci: \"h1b7\",\n              san: \"Qb7+\",\n              category: \"loss\", // API returns opponent's perspective\n              dtz: -12,\n              dtm: -12,\n            },\n            {\n              uci: \"h1h7\",\n              san: \"Qh7\",\n              category: \"loss\",\n              dtz: -14,\n              dtm: -14,\n            },\n          ],\n        }),\n      );\n\n      const result = await tablebaseService.getTopMoves(fen, 5);\n\n      expect(result.isAvailable).toBe(true);\n      expect(result.moves).toHaveLength(2);\n      // All returned moves should be best moves (same WDL)\n      expect(result.moves![0].category).toBe(\"win\");\n      expect(result.moves![0].wdl).toBe(2);\n      expect(result.moves![1].wdl).toBe(2); // Same WDL as first move\n\n      // Should contain both best moves (order may vary due to sorting)\n      const moveUcis = result.moves!.map((m) => m.uci).sort();\n      expect(moveUcis).toEqual([\"h1b7\", \"h1h7\"]);\n    });\n  });\n\n  describe(\"Single API Call Architecture\", () => {\n    it(\"should use cached data for subsequent requests\", async () => {\n      const fen = EndgamePositions.KQK_WIN;\n\n      mockFetch.mockResolvedValueOnce(\n        createTablebaseResponse({\n          category: \"win\",\n          dtz: 13,\n          dtm: 13,\n          moves: [\n            {\n              uci: \"h1b7\",\n              san: \"Qb7+\",\n              category: \"loss\",\n              dtz: -12,\n              dtm: -12,\n            },\n          ],\n        }),\n      );\n\n      // First call - makes API request\n      const eval1 = await tablebaseService.getEvaluation(fen);\n      expect(eval1.isAvailable).toBe(true);\n      expect(mockFetch).toHaveBeenCalledTimes(1);\n\n      // Second call - uses cache\n      const eval2 = await tablebaseService.getEvaluation(fen);\n      expect(eval2.isAvailable).toBe(true);\n      expect(mockFetch).toHaveBeenCalledTimes(1); // No additional call\n\n      // Get moves - also uses cache\n      const moves = await tablebaseService.getTopMoves(fen, 5);\n      expect(moves.isAvailable).toBe(true);\n      expect(mockFetch).toHaveBeenCalledTimes(1); // Still no additional call\n    });\n\n    it(\"should normalize FEN for better cache efficiency\", async () => {\n      mockFetch.mockResolvedValueOnce(\n        createTablebaseResponse({\n          category: \"draw\",\n          dtz: 0,\n        }),\n      );\n\n      // Different halfmove/fullmove counters but same position\n      const fen1 = EndgamePositions.KQK_WIN;\n      const fen2 = EndgamePositions.KQK_WIN.replace(\"0 1\", \"15 42\"); // Same position, different counters\n\n      await tablebaseService.getEvaluation(fen1);\n      await tablebaseService.getEvaluation(fen2);\n\n      // Should only make one API call due to FEN normalization\n      expect(mockFetch).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"should handle invalid FEN gracefully\", async () => {\n      const invalidFen = \"invalid fen string\";\n\n      // The service returns an error instead of throwing\n      const result = await tablebaseService.getEvaluation(invalidFen);\n\n      expect(result.isAvailable).toBe(false);\n      expect(result.error).toContain(\"Invalid FEN\");\n      expect(mockFetch).not.toHaveBeenCalled();\n    });\n\n    it(\"should handle positions with too many pieces\", async () => {\n      const startingPosition = TEST_FENS.STARTING_POSITION;\n\n      const result = await tablebaseService.getEvaluation(startingPosition);\n\n      expect(result.isAvailable).toBe(false);\n      expect(mockFetch).not.toHaveBeenCalled();\n    });\n\n    it(\"should handle 404 responses gracefully\", async () => {\n      const fen = EndgamePositions.KNK_DRAW; // Valid but rare position\n\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 404,\n      } as Response);\n\n      const result = await tablebaseService.getEvaluation(fen);\n\n      expect(result.isAvailable).toBe(false);\n      expect(mockFetch).toHaveBeenCalledTimes(1);\n\n      // Second call should use cached \"not found\" result\n      const result2 = await tablebaseService.getEvaluation(fen);\n      expect(result2.isAvailable).toBe(false);\n      expect(mockFetch).toHaveBeenCalledTimes(1); // No additional call\n    });\n\n    it(\"should retry on rate limiting\", async () => {\n      const fen = EndgamePositions.KQK_WIN;\n\n      // First call fails with 429, second succeeds\n      mockFetch\n        .mockResolvedValueOnce({ ok: false, status: 429 } as Response)\n        .mockResolvedValueOnce(\n          createTablebaseResponse({\n            category: \"win\",\n            dtz: 13,\n          }),\n        );\n\n      const result = await tablebaseService.getEvaluation(fen);\n\n      expect(result.isAvailable).toBe(true);\n      expect(mockFetch).toHaveBeenCalledTimes(2);\n    }, 10000);\n  });\n\n  describe(\"Black Perspective Handling\", () => {\n    it(\"should handle Black to move positions correctly\", async () => {\n      const fen = EndgamePositions.KQK_BLACK_TO_MOVE; // Black to move\n\n      mockFetch.mockResolvedValueOnce(\n        createTablebaseResponse({\n          category: \"loss\", // Black is losing\n          dtz: -13,\n          dtm: -13,\n          moves: [\n            {\n              uci: \"e8d7\",\n              san: \"Kd7\",\n              category: \"win\", // Win for White after Black's move\n              dtz: 12,\n              dtm: 12,\n            },\n          ],\n        }),\n      );\n\n      const result = await tablebaseService.getTopMoves(fen, 1);\n\n      expect(result.isAvailable).toBe(true);\n      expect(result.moves![0].category).toBe(\"loss\"); // Inverted\n      // Note: WDL is from the move's perspective, not the side to move\n      // The move leads to a loss for Black, so it's positive (good for White)\n      expect(result.moves![0].wdl).toBe(2);\n    });\n  });\n\n  describe(\"Category to WDL Conversion\", () => {\n    it(\"should convert all category types correctly\", async () => {\n      const testCases = [\n        { category: \"win\", expectedWdl: 2 },\n        { category: \"cursed-win\", expectedWdl: 1 },\n        { category: \"draw\", expectedWdl: 0 },\n        { category: \"blessed-loss\", expectedWdl: -1 },\n        { category: \"loss\", expectedWdl: -2 },\n        { category: \"unknown\", expectedWdl: 0 }, // Default case\n      ];\n\n      for (const { category, expectedWdl } of testCases) {\n        tablebaseService.clearCache();\n\n        const fen = `8/8/8/8/8/8/k7/K7 w - - 0 1`;\n        mockFetch.mockResolvedValueOnce(\n          createTablebaseResponse({\n            category,\n            dtz: 0,\n          }),\n        );\n\n        const result = await tablebaseService.getEvaluation(fen);\n\n        expect(result.isAvailable).toBe(true);\n        expect(result.result?.wdl).toBe(expectedWdl);\n        expect(result.result?.category).toBe(category);\n      }\n    });\n  });\n\n  describe(\"Request Deduplication\", () => {\n    it(\"should handle concurrent requests for same position\", async () => {\n      const fen = EndgamePositions.KQK_WIN;\n\n      // Delay the response to ensure requests are concurrent\n      mockFetch.mockImplementationOnce(\n        () =>\n          new Promise((resolve) =>\n            setTimeout(\n              () =>\n                resolve(\n                  createTablebaseResponse({\n                    category: \"win\",\n                    dtz: 13,\n                  }),\n                ),\n              100,\n            ),\n          ),\n      );\n\n      // Make multiple concurrent requests\n      const promises = Array(5)\n        .fill(null)\n        .map(() => tablebaseService.getEvaluation(fen));\n\n      const results = await Promise.all(promises);\n\n      // All should succeed with same result\n      results.forEach((result) => {\n        expect(result.isAvailable).toBe(true);\n        expect(result.result?.category).toBe(\"win\");\n      });\n\n      // But only one API call should be made\n      expect(mockFetch).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe(\"Move Limiting\", () => {\n    it(\"should respect move limit parameter\", async () => {\n      const fen = EndgamePositions.KQK_WIN;\n\n      mockFetch.mockResolvedValueOnce(\n        createTablebaseResponse({\n          category: \"win\",\n          moves: Array(10)\n            .fill(null)\n            .map((_, i) => ({\n              uci: `move${i}`,\n              san: `Move${i}`,\n              category: \"loss\",\n              dtz: -(10 + i),\n              dtm: -(10 + i),\n            })),\n        }),\n      );\n\n      // Request only 3 moves\n      const result = await tablebaseService.getTopMoves(fen, 3);\n\n      expect(result.isAvailable).toBe(true);\n      expect(result.moves).toHaveLength(3);\n\n      // Request all moves - should use cache\n      const allMoves = await tablebaseService.getTopMoves(fen, 100);\n      expect(allMoves.moves).toHaveLength(10);\n      expect(mockFetch).toHaveBeenCalledTimes(1); // No additional call\n    });\n  });\n\n  describe(\"Empty Moves Handling\", () => {\n    it(\"should handle positions with no legal moves\", async () => {\n      const fen = EndgamePositions.KQK_WIN;\n\n      mockFetch.mockResolvedValueOnce(\n        createTablebaseResponse({\n          category: \"win\",\n          dtz: 1,\n          dtm: 1,\n          moves: [], // No legal moves (e.g., checkmate)\n        }),\n      );\n\n      const evalResult = await tablebaseService.getEvaluation(fen);\n      expect(evalResult.isAvailable).toBe(true);\n\n      const movesResult = await tablebaseService.getTopMoves(fen, 5);\n      expect(movesResult.isAvailable).toBe(false);\n      expect(movesResult.error).toContain(\"No moves available\");\n    });\n  });\n\n  describe(\"Metrics Tracking\", () => {\n    it(\"should track cache hits and API calls\", async () => {\n      const fen = EndgamePositions.KQK_WIN;\n\n      mockFetch.mockResolvedValue(\n        createTablebaseResponse({\n          category: \"win\",\n          dtz: 13,\n        }),\n      );\n\n      // Clear cache and get initial metrics\n      tablebaseService.clearCache();\n      const initialMetrics = tablebaseService.getMetrics();\n      const initialApiCalls = initialMetrics.totalApiCalls;\n\n      // First call - cache miss\n      await tablebaseService.getEvaluation(fen);\n\n      // Second call - cache hit\n      await tablebaseService.getEvaluation(fen);\n\n      const finalMetrics = tablebaseService.getMetrics();\n      // Should have made exactly one more API call\n      expect(finalMetrics.totalApiCalls).toBe(initialApiCalls + 1);\n      expect(finalMetrics.cacheHitRate).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Edge Cases - En Passant Preservation\", () => {\n    it(\"should treat positions with different en passant squares as different\", async () => {\n      // Use valid endgame positions with â¤7 pieces\n      const fenWithEp = StandardPositions.EN_PASSANT_COMPLEX; // En passant possible\n      const fenWithoutEp = StandardPositions.EN_PASSANT_COMPLEX.replace(\n        \"c6\",\n        \"-\",\n      ); // No en passant\n\n      mockFetch\n        .mockResolvedValueOnce(\n          createTablebaseResponse({\n            category: \"draw\",\n            dtz: 0,\n          }),\n        )\n        .mockResolvedValueOnce(\n          createTablebaseResponse({\n            category: \"draw\",\n            dtz: 0,\n          }),\n        );\n\n      await tablebaseService.getEvaluation(fenWithEp);\n      await tablebaseService.getEvaluation(fenWithoutEp);\n\n      // Should make two API calls since en passant is essential state\n      expect(mockFetch).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe(\"Edge Cases - Partial API Responses\", () => {\n    it(\"should handle 200 OK with incomplete response gracefully\", async () => {\n      const fen = EndgamePositions.KQK_WIN;\n\n      // Mock 200 OK but with empty/incomplete response\n      // Service will retry 3 times, so mock all attempts\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          /**\n           *\n           */\n          json: async () => ({}), // Missing required fields\n        } as Response)\n        .mockResolvedValueOnce({\n          ok: true,\n          /**\n           *\n           */\n          json: async () => ({}), // Missing required fields\n        } as Response)\n        .mockResolvedValueOnce({\n          ok: true,\n          /**\n           *\n           */\n          json: async () => ({}), // Missing required fields\n        } as Response);\n\n      const result = await tablebaseService.getEvaluation(fen);\n\n      expect(result.isAvailable).toBe(false);\n      expect(result.error).toContain(\"Malformed API response\");\n\n      // Verify it didn't cache the bad response\n      mockFetch.mockResolvedValueOnce(\n        createTablebaseResponse({\n          category: \"win\",\n          dtz: 13,\n        }),\n      );\n\n      const result2 = await tablebaseService.getEvaluation(fen);\n      expect(result2.isAvailable).toBe(true);\n      expect(mockFetch).toHaveBeenCalledTimes(4); // 3 failed + 1 success\n    });\n\n    it(\"should handle 200 OK with null moves array\", async () => {\n      const fen = EndgamePositions.KQK_WIN;\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        /**\n         *\n         */\n        json: async () => ({\n          category: \"win\",\n          dtz: 13,\n          dtm: 13,\n          moves: null, // Invalid: should be array\n        }),\n      } as Response);\n\n      const movesResult = await tablebaseService.getTopMoves(fen, 5);\n\n      expect(movesResult.isAvailable).toBe(false);\n      expect(movesResult.error).toBeDefined();\n    });\n  });\n\n  describe(\"Edge Cases - Concurrent Failure Handling\", () => {\n    it(\"should properly handle concurrent requests with retry logic\", async () => {\n      const fen = EndgamePositions.KQK_WIN;\n\n      let callCount = 0;\n      mockFetch.mockImplementation(() => {\n        callCount++;\n        if (callCount === 1) {\n          // First call fails (will trigger retry)\n          return Promise.reject(new Error(\"Network error\"));\n        } else {\n          // Retry succeeds\n          return Promise.resolve(\n            createTablebaseResponse({\n              category: \"win\",\n              dtz: 13,\n            }),\n          );\n        }\n      });\n\n      // Clear cache to ensure clean test\n      tablebaseService.clearCache();\n\n      // Make two concurrent requests - they will share the same promise due to deduplication\n      const promise1 = tablebaseService.getEvaluation(fen);\n      const promise2 = tablebaseService.getEvaluation(fen);\n\n      const [result1, result2] = await Promise.allSettled([promise1, promise2]);\n\n      // Both should succeed after retry (service retries on network error)\n      expect(result1.status).toBe(\"fulfilled\");\n      if (result1.status === \"fulfilled\") {\n        expect(result1.value.isAvailable).toBe(true);\n        expect(result1.value.result?.category).toBe(\"win\");\n      }\n\n      expect(result2.status).toBe(\"fulfilled\");\n      if (result2.status === \"fulfilled\") {\n        expect(result2.value.isAvailable).toBe(true);\n        expect(result2.value.result?.category).toBe(\"win\");\n      }\n\n      // Verify deduplication worked - only 2 API calls (1 fail + 1 retry)\n      expect(mockFetch).toHaveBeenCalledTimes(2);\n\n      // A third call should use cache\n      const result3 = await tablebaseService.getEvaluation(fen);\n      expect(result3.isAvailable).toBe(true);\n      expect(mockFetch).toHaveBeenCalledTimes(2); // No additional call\n    });\n  });\n\n  describe(\"Issue #59 - DTM Sorting with Negative Values\", () => {\n    it(\"should correctly sort moves with negative DTM values (pawn promotion bug)\", async () => {\n      // This was a real bug where e7 (DTM=-12) was incorrectly sorted after Ke8 (DTM=-20)\n      const mockResponse = {\n        checkmate: false,\n        stalemate: false,\n        variant_win: false,\n        variant_loss: false,\n        insufficient_material: false,\n        dtz: 1,\n        precise_dtz: 1,\n        dtm: 13,\n        category: \"win\",\n        moves: [\n          {\n            uci: \"e6e7\",\n            san: \"e7\",\n            zeroing: true,\n            dtz: -2,\n            precise_dtz: -2,\n            dtm: -12,\n            category: \"loss\",\n          },\n          {\n            uci: \"d7e8\",\n            san: \"Ke8\",\n            zeroing: false,\n            dtz: -2,\n            precise_dtz: -2,\n            dtm: -20,\n            category: \"loss\",\n          },\n          {\n            uci: \"d7d8\",\n            san: \"Kd8\",\n            zeroing: false,\n            dtz: -2,\n            precise_dtz: -2,\n            dtm: -16,\n            category: \"loss\",\n          },\n        ],\n      };\n\n      mockFetch.mockResolvedValueOnce(createTablebaseResponse(mockResponse));\n\n      const fen = \"6k1/3K4/4P3/8/8/8/8/8 w - - 3 4\";\n      const result = await tablebaseService.getTopMoves(fen, 5);\n\n      expect(result.isAvailable).toBe(true);\n      expect(result.moves).toBeDefined();\n      expect(result.moves!.length).toBeGreaterThan(0);\n\n      // e7 should be first (best DTM of -12)\n      expect(result.moves![0].san).toBe(\"e7\");\n      expect(result.moves![0].dtm).toBe(-12);\n\n      // Verify correct order: e7 (-12), Kd8 (-16), Ke8 (-20)\n      if (result.moves!.length >= 3) {\n        expect(result.moves![1].san).toBe(\"Kd8\");\n        expect(result.moves![2].san).toBe(\"Ke8\");\n      }\n    });\n  });\n\n  describe(\"Edge Cases - Terminal States\", () => {\n    it(\"should handle checkmate positions correctly\", async () => {\n      // K+Q vs K checkmate position (Black is checkmated)\n      const checkmatedFen = SpecialPositions.CHECKMATE;\n\n      mockFetch.mockResolvedValueOnce(\n        createTablebaseResponse({\n          category: \"loss\", // Black has lost (is checkmated)\n          dtz: 0,\n          dtm: 0,\n          moves: [], // No legal moves (checkmate)\n        }),\n      );\n\n      const result = await tablebaseService.getEvaluation(checkmatedFen);\n\n      expect(result.isAvailable).toBe(true);\n      expect(result.result?.category).toBe(\"loss\"); // Black is checkmated\n      expect(result.result?.wdl).toBe(-2);\n      expect(result.result?.dtz).toBe(0);\n    });\n\n    it(\"should handle stalemate positions correctly\", async () => {\n      // K vs K+pawn stalemate position\n      const stalemateFen = SpecialPositions.STALEMATE;\n\n      mockFetch.mockResolvedValueOnce(\n        createTablebaseResponse({\n          category: \"draw\", // Stalemate is always a draw\n          dtz: 0,\n          dtm: null,\n          moves: [], // No legal moves (stalemate)\n        }),\n      );\n\n      const result = await tablebaseService.getEvaluation(stalemateFen);\n\n      expect(result.isAvailable).toBe(true);\n      expect(result.result?.category).toBe(\"draw\");\n      expect(result.result?.wdl).toBe(0);\n\n      // Verify moves endpoint handles stalemate correctly\n      const movesResult = await tablebaseService.getTopMoves(stalemateFen, 5);\n      expect(movesResult.isAvailable).toBe(false);\n      expect(movesResult.error).toContain(\"No moves available\");\n    });\n  });\n});\n"],"names":["global","fetch","jest","fn","describe","mockFetch","beforeEach","clearAllMocks","tablebaseService","clearCache","createTablebaseResponse","config","ok","json","category","dtz","dtm","checkmate","stalemate","variant_win","variant_loss","insufficient_material","moves","it","fen","EndgamePositions","KQK_WIN","mockResolvedValueOnce","uci","san","result","getEvaluation","expect","isAvailable","toBe","toEqual","wdl","precise","evaluation","toHaveBeenCalledTimes","getTopMoves","toHaveLength","moveUcis","map","m","sort","eval1","eval2","fen1","fen2","replace","invalidFen","error","toContain","not","toHaveBeenCalled","startingPosition","TEST_FENS","STARTING_POSITION","KNK_DRAW","status","result2","KQK_BLACK_TO_MOVE","testCases","expectedWdl","mockImplementationOnce","Promise","resolve","setTimeout","promises","Array","fill","results","all","forEach","_","i","allMoves","evalResult","movesResult","mockResolvedValue","initialMetrics","getMetrics","initialApiCalls","totalApiCalls","finalMetrics","cacheHitRate","toBeGreaterThan","fenWithEp","StandardPositions","EN_PASSANT_COMPLEX","fenWithoutEp","toBeDefined","callCount","mockImplementation","reject","Error","promise1","promise2","result1","allSettled","value","result3","mockResponse","precise_dtz","zeroing","length","checkmatedFen","SpecialPositions","CHECKMATE","stalemateFen","STALEMATE"],"mappings":"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"}