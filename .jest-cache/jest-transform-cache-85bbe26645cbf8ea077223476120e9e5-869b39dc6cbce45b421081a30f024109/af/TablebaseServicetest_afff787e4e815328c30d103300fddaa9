3968e37e61167a03d6b74f7cb198c62c
/**
 * @jest-environment node
 *
 * Comprehensive test suite for optimized TablebaseService
 *
 * @remarks
 * Tests the single API call architecture and caching behavior
 * of the optimized TablebaseService implementation.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _TablebaseService = require("../../shared/services/TablebaseService");
const _TestFixtures = require("../../shared/testing/TestFixtures");
const _fenPositions = require("../fixtures/fenPositions");
// Mock fetch globally
global.fetch = jest.fn();
describe("TablebaseService", ()=>{
    const mockFetch = global.fetch;
    beforeEach(()=>{
        jest.clearAllMocks();
        _TablebaseService.tablebaseService.clearCache();
    });
    /**
   * Helper to create a standard tablebase response
   * @param config
   * @param config.category
   * @param config.dtz
   * @param config.dtm
   * @param config.moves
   */ function createTablebaseResponse(config) {
        return {
            ok: true,
            /**
       *
       */ json: async ()=>{
                var _config_dtz, _config_dtm;
                return {
                    category: config.category || "draw",
                    dtz: (_config_dtz = config.dtz) !== null && _config_dtz !== void 0 ? _config_dtz : 0,
                    dtm: (_config_dtm = config.dtm) !== null && _config_dtm !== void 0 ? _config_dtm : null,
                    checkmate: false,
                    stalemate: false,
                    variant_win: false,
                    variant_loss: false,
                    insufficient_material: false,
                    moves: config.moves || []
                };
            }
        };
    }
    describe("Core Functionality", ()=>{
        it("should fetch and return evaluation for a position", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_WIN;
            mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                category: "win",
                dtz: 13,
                dtm: 13,
                moves: [
                    {
                        uci: "h1b7",
                        san: "Qb7+",
                        category: "loss",
                        dtz: -12,
                        dtm: -12
                    }
                ]
            }));
            const result = await _TablebaseService.tablebaseService.getEvaluation(fen);
            expect(result.isAvailable).toBe(true);
            expect(result.result).toEqual({
                wdl: 2,
                dtz: 13,
                dtm: 13,
                category: "win",
                precise: false,
                evaluation: "Gewinn in 13 ZÃ¼gen"
            });
            expect(mockFetch).toHaveBeenCalledTimes(1);
        });
        it("should return top moves with correct perspective", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_WIN;
            mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                category: "win",
                dtz: 13,
                dtm: 13,
                moves: [
                    {
                        uci: "h1b7",
                        san: "Qb7+",
                        category: "loss",
                        dtz: -12,
                        dtm: -12
                    },
                    {
                        uci: "h1h7",
                        san: "Qh7",
                        category: "loss",
                        dtz: -14,
                        dtm: -14
                    }
                ]
            }));
            const result = await _TablebaseService.tablebaseService.getTopMoves(fen, 5);
            expect(result.isAvailable).toBe(true);
            expect(result.moves).toHaveLength(2);
            // All returned moves should be best moves (same WDL)
            expect(result.moves[0].category).toBe("win");
            expect(result.moves[0].wdl).toBe(2);
            expect(result.moves[1].wdl).toBe(2); // Same WDL as first move
            // Should contain both best moves (order may vary due to sorting)
            const moveUcis = result.moves.map((m)=>m.uci).sort();
            expect(moveUcis).toEqual([
                "h1b7",
                "h1h7"
            ]);
        });
    });
    describe("Single API Call Architecture", ()=>{
        it("should use cached data for subsequent requests", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_WIN;
            mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                category: "win",
                dtz: 13,
                dtm: 13,
                moves: [
                    {
                        uci: "h1b7",
                        san: "Qb7+",
                        category: "loss",
                        dtz: -12,
                        dtm: -12
                    }
                ]
            }));
            // First call - makes API request
            const eval1 = await _TablebaseService.tablebaseService.getEvaluation(fen);
            expect(eval1.isAvailable).toBe(true);
            expect(mockFetch).toHaveBeenCalledTimes(1);
            // Second call - uses cache
            const eval2 = await _TablebaseService.tablebaseService.getEvaluation(fen);
            expect(eval2.isAvailable).toBe(true);
            expect(mockFetch).toHaveBeenCalledTimes(1); // No additional call
            // Get moves - also uses cache
            const moves = await _TablebaseService.tablebaseService.getTopMoves(fen, 5);
            expect(moves.isAvailable).toBe(true);
            expect(mockFetch).toHaveBeenCalledTimes(1); // Still no additional call
        });
        it("should normalize FEN for better cache efficiency", async ()=>{
            mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                category: "draw",
                dtz: 0
            }));
            // Different halfmove/fullmove counters but same position
            const fen1 = _fenPositions.EndgamePositions.KQK_WIN;
            const fen2 = _fenPositions.EndgamePositions.KQK_WIN.replace("0 1", "15 42"); // Same position, different counters
            await _TablebaseService.tablebaseService.getEvaluation(fen1);
            await _TablebaseService.tablebaseService.getEvaluation(fen2);
            // Should only make one API call due to FEN normalization
            expect(mockFetch).toHaveBeenCalledTimes(1);
        });
    });
    describe("Error Handling", ()=>{
        it("should handle invalid FEN gracefully", async ()=>{
            const invalidFen = "invalid fen string";
            // The service returns an error instead of throwing
            const result = await _TablebaseService.tablebaseService.getEvaluation(invalidFen);
            expect(result.isAvailable).toBe(false);
            expect(result.error).toContain("Invalid FEN");
            expect(mockFetch).not.toHaveBeenCalled();
        });
        it("should handle positions with too many pieces", async ()=>{
            const startingPosition = _TestFixtures.TEST_FENS.STARTING_POSITION;
            const result = await _TablebaseService.tablebaseService.getEvaluation(startingPosition);
            expect(result.isAvailable).toBe(false);
            expect(mockFetch).not.toHaveBeenCalled();
        });
        it("should handle 404 responses gracefully", async ()=>{
            const fen = _fenPositions.EndgamePositions.KNK_DRAW; // Valid but rare position
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 404
            });
            const result = await _TablebaseService.tablebaseService.getEvaluation(fen);
            expect(result.isAvailable).toBe(false);
            expect(mockFetch).toHaveBeenCalledTimes(1);
            // Second call should use cached "not found" result
            const result2 = await _TablebaseService.tablebaseService.getEvaluation(fen);
            expect(result2.isAvailable).toBe(false);
            expect(mockFetch).toHaveBeenCalledTimes(1); // No additional call
        });
        it("should retry on rate limiting", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_WIN;
            // First call fails with 429, second succeeds
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 429
            }).mockResolvedValueOnce(createTablebaseResponse({
                category: "win",
                dtz: 13
            }));
            const result = await _TablebaseService.tablebaseService.getEvaluation(fen);
            expect(result.isAvailable).toBe(true);
            expect(mockFetch).toHaveBeenCalledTimes(2);
        }, 10000);
    });
    describe("Black Perspective Handling", ()=>{
        it("should handle Black to move positions correctly", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_BLACK_TO_MOVE; // Black to move
            mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                category: "loss",
                dtz: -13,
                dtm: -13,
                moves: [
                    {
                        uci: "e8d7",
                        san: "Kd7",
                        category: "win",
                        dtz: 12,
                        dtm: 12
                    }
                ]
            }));
            const result = await _TablebaseService.tablebaseService.getTopMoves(fen, 1);
            expect(result.isAvailable).toBe(true);
            expect(result.moves[0].category).toBe("loss"); // Inverted
            // Note: WDL is from the move's perspective, not the side to move
            // The move leads to a loss for Black, so it's positive (good for White)
            expect(result.moves[0].wdl).toBe(2);
        });
    });
    describe("Category to WDL Conversion", ()=>{
        it("should convert all category types correctly", async ()=>{
            const testCases = [
                {
                    category: "win",
                    expectedWdl: 2
                },
                {
                    category: "cursed-win",
                    expectedWdl: 1
                },
                {
                    category: "draw",
                    expectedWdl: 0
                },
                {
                    category: "blessed-loss",
                    expectedWdl: -1
                },
                {
                    category: "loss",
                    expectedWdl: -2
                },
                {
                    category: "unknown",
                    expectedWdl: 0
                }
            ];
            for (const { category, expectedWdl } of testCases){
                var _result_result, _result_result1;
                _TablebaseService.tablebaseService.clearCache();
                const fen = `8/8/8/8/8/8/k7/K7 w - - 0 1`;
                mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                    category,
                    dtz: 0
                }));
                const result = await _TablebaseService.tablebaseService.getEvaluation(fen);
                expect(result.isAvailable).toBe(true);
                expect((_result_result = result.result) === null || _result_result === void 0 ? void 0 : _result_result.wdl).toBe(expectedWdl);
                expect((_result_result1 = result.result) === null || _result_result1 === void 0 ? void 0 : _result_result1.category).toBe(category);
            }
        });
    });
    describe("Request Deduplication", ()=>{
        it("should handle concurrent requests for same position", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_WIN;
            // Delay the response to ensure requests are concurrent
            mockFetch.mockImplementationOnce(()=>new Promise((resolve)=>setTimeout(()=>resolve(createTablebaseResponse({
                            category: "win",
                            dtz: 13
                        })), 100)));
            // Make multiple concurrent requests
            const promises = Array(5).fill(null).map(()=>_TablebaseService.tablebaseService.getEvaluation(fen));
            const results = await Promise.all(promises);
            // All should succeed with same result
            results.forEach((result)=>{
                var _result_result;
                expect(result.isAvailable).toBe(true);
                expect((_result_result = result.result) === null || _result_result === void 0 ? void 0 : _result_result.category).toBe("win");
            });
            // But only one API call should be made
            expect(mockFetch).toHaveBeenCalledTimes(1);
        });
    });
    describe("Move Limiting", ()=>{
        it("should respect move limit parameter", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_WIN;
            mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                category: "win",
                moves: Array(10).fill(null).map((_, i)=>({
                        uci: `move${i}`,
                        san: `Move${i}`,
                        category: "loss",
                        dtz: -(10 + i),
                        dtm: -(10 + i)
                    }))
            }));
            // Request only 3 moves
            const result = await _TablebaseService.tablebaseService.getTopMoves(fen, 3);
            expect(result.isAvailable).toBe(true);
            expect(result.moves).toHaveLength(3);
            // Request all moves - should use cache
            const allMoves = await _TablebaseService.tablebaseService.getTopMoves(fen, 100);
            expect(allMoves.moves).toHaveLength(10);
            expect(mockFetch).toHaveBeenCalledTimes(1); // No additional call
        });
    });
    describe("Empty Moves Handling", ()=>{
        it("should handle positions with no legal moves", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_WIN;
            mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                category: "win",
                dtz: 1,
                dtm: 1,
                moves: []
            }));
            const evalResult = await _TablebaseService.tablebaseService.getEvaluation(fen);
            expect(evalResult.isAvailable).toBe(true);
            const movesResult = await _TablebaseService.tablebaseService.getTopMoves(fen, 5);
            expect(movesResult.isAvailable).toBe(false);
            expect(movesResult.error).toContain("No moves available");
        });
    });
    describe("Metrics Tracking", ()=>{
        it("should track cache hits and API calls", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_WIN;
            mockFetch.mockResolvedValue(createTablebaseResponse({
                category: "win",
                dtz: 13
            }));
            // Clear cache and get initial metrics
            _TablebaseService.tablebaseService.clearCache();
            const initialMetrics = _TablebaseService.tablebaseService.getMetrics();
            const initialApiCalls = initialMetrics.totalApiCalls;
            // First call - cache miss
            await _TablebaseService.tablebaseService.getEvaluation(fen);
            // Second call - cache hit
            await _TablebaseService.tablebaseService.getEvaluation(fen);
            const finalMetrics = _TablebaseService.tablebaseService.getMetrics();
            // Should have made exactly one more API call
            expect(finalMetrics.totalApiCalls).toBe(initialApiCalls + 1);
            expect(finalMetrics.cacheHitRate).toBeGreaterThan(0);
        });
    });
    describe("Edge Cases - En Passant Preservation", ()=>{
        it("should treat positions with different en passant squares as different", async ()=>{
            // Use valid endgame positions with â¤7 pieces
            const fenWithEp = _fenPositions.StandardPositions.EN_PASSANT_COMPLEX; // En passant possible
            const fenWithoutEp = _fenPositions.StandardPositions.EN_PASSANT_COMPLEX.replace("c6", "-"); // No en passant
            mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                category: "draw",
                dtz: 0
            })).mockResolvedValueOnce(createTablebaseResponse({
                category: "draw",
                dtz: 0
            }));
            await _TablebaseService.tablebaseService.getEvaluation(fenWithEp);
            await _TablebaseService.tablebaseService.getEvaluation(fenWithoutEp);
            // Should make two API calls since en passant is essential state
            expect(mockFetch).toHaveBeenCalledTimes(2);
        });
    });
    describe("Edge Cases - Partial API Responses", ()=>{
        it("should handle 200 OK with incomplete response gracefully", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_WIN;
            // Mock 200 OK but with empty/incomplete response
            // Service will retry 3 times, so mock all attempts
            mockFetch.mockResolvedValueOnce({
                ok: true,
                /**
           *
           */ json: async ()=>({})
            }).mockResolvedValueOnce({
                ok: true,
                /**
           *
           */ json: async ()=>({})
            }).mockResolvedValueOnce({
                ok: true,
                /**
           *
           */ json: async ()=>({})
            });
            const result = await _TablebaseService.tablebaseService.getEvaluation(fen);
            expect(result.isAvailable).toBe(false);
            expect(result.error).toContain("Malformed API response");
            // Verify it didn't cache the bad response
            mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                category: "win",
                dtz: 13
            }));
            const result2 = await _TablebaseService.tablebaseService.getEvaluation(fen);
            expect(result2.isAvailable).toBe(true);
            expect(mockFetch).toHaveBeenCalledTimes(4); // 3 failed + 1 success
        });
        it("should handle 200 OK with null moves array", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_WIN;
            mockFetch.mockResolvedValueOnce({
                ok: true,
                /**
         *
         */ json: async ()=>({
                        category: "win",
                        dtz: 13,
                        dtm: 13,
                        moves: null
                    })
            });
            const movesResult = await _TablebaseService.tablebaseService.getTopMoves(fen, 5);
            expect(movesResult.isAvailable).toBe(false);
            expect(movesResult.error).toBeDefined();
        });
    });
    describe("Edge Cases - Concurrent Failure Handling", ()=>{
        it("should properly handle concurrent requests with retry logic", async ()=>{
            const fen = _fenPositions.EndgamePositions.KQK_WIN;
            let callCount = 0;
            mockFetch.mockImplementation(()=>{
                callCount++;
                if (callCount === 1) {
                    // First call fails (will trigger retry)
                    return Promise.reject(new Error("Network error"));
                } else {
                    // Retry succeeds
                    return Promise.resolve(createTablebaseResponse({
                        category: "win",
                        dtz: 13
                    }));
                }
            });
            // Clear cache to ensure clean test
            _TablebaseService.tablebaseService.clearCache();
            // Make two concurrent requests - they will share the same promise due to deduplication
            const promise1 = _TablebaseService.tablebaseService.getEvaluation(fen);
            const promise2 = _TablebaseService.tablebaseService.getEvaluation(fen);
            const [result1, result2] = await Promise.allSettled([
                promise1,
                promise2
            ]);
            // Both should succeed after retry (service retries on network error)
            expect(result1.status).toBe("fulfilled");
            if (result1.status === "fulfilled") {
                var _result1_value_result;
                expect(result1.value.isAvailable).toBe(true);
                expect((_result1_value_result = result1.value.result) === null || _result1_value_result === void 0 ? void 0 : _result1_value_result.category).toBe("win");
            }
            expect(result2.status).toBe("fulfilled");
            if (result2.status === "fulfilled") {
                var _result2_value_result;
                expect(result2.value.isAvailable).toBe(true);
                expect((_result2_value_result = result2.value.result) === null || _result2_value_result === void 0 ? void 0 : _result2_value_result.category).toBe("win");
            }
            // Verify deduplication worked - only 2 API calls (1 fail + 1 retry)
            expect(mockFetch).toHaveBeenCalledTimes(2);
            // A third call should use cache
            const result3 = await _TablebaseService.tablebaseService.getEvaluation(fen);
            expect(result3.isAvailable).toBe(true);
            expect(mockFetch).toHaveBeenCalledTimes(2); // No additional call
        });
    });
    describe("Issue #59 - DTM Sorting with Negative Values", ()=>{
        it("should correctly sort moves with negative DTM values (pawn promotion bug)", async ()=>{
            // This was a real bug where e7 (DTM=-12) was incorrectly sorted after Ke8 (DTM=-20)
            const mockResponse = {
                checkmate: false,
                stalemate: false,
                variant_win: false,
                variant_loss: false,
                insufficient_material: false,
                dtz: 1,
                precise_dtz: 1,
                dtm: 13,
                category: "win",
                moves: [
                    {
                        uci: "e6e7",
                        san: "e7",
                        zeroing: true,
                        dtz: -2,
                        precise_dtz: -2,
                        dtm: -12,
                        category: "loss"
                    },
                    {
                        uci: "d7e8",
                        san: "Ke8",
                        zeroing: false,
                        dtz: -2,
                        precise_dtz: -2,
                        dtm: -20,
                        category: "loss"
                    },
                    {
                        uci: "d7d8",
                        san: "Kd8",
                        zeroing: false,
                        dtz: -2,
                        precise_dtz: -2,
                        dtm: -16,
                        category: "loss"
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce(createTablebaseResponse(mockResponse));
            const fen = "6k1/3K4/4P3/8/8/8/8/8 w - - 3 4";
            const result = await _TablebaseService.tablebaseService.getTopMoves(fen, 5);
            expect(result.isAvailable).toBe(true);
            expect(result.moves).toBeDefined();
            expect(result.moves.length).toBeGreaterThan(0);
            // e7 should be first (best DTM of -12)
            expect(result.moves[0].san).toBe("e7");
            expect(result.moves[0].dtm).toBe(-12);
            // Verify correct order: e7 (-12), Kd8 (-16), Ke8 (-20)
            if (result.moves.length >= 3) {
                expect(result.moves[1].san).toBe("Kd8");
                expect(result.moves[2].san).toBe("Ke8");
            }
        });
    });
    describe("Edge Cases - Terminal States", ()=>{
        it("should handle checkmate positions correctly", async ()=>{
            var _result_result, _result_result1, _result_result2;
            // K+Q vs K checkmate position (Black is checkmated)
            const checkmatedFen = _fenPositions.SpecialPositions.CHECKMATE;
            mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                category: "loss",
                dtz: 0,
                dtm: 0,
                moves: []
            }));
            const result = await _TablebaseService.tablebaseService.getEvaluation(checkmatedFen);
            expect(result.isAvailable).toBe(true);
            expect((_result_result = result.result) === null || _result_result === void 0 ? void 0 : _result_result.category).toBe("loss"); // Black is checkmated
            expect((_result_result1 = result.result) === null || _result_result1 === void 0 ? void 0 : _result_result1.wdl).toBe(-2);
            expect((_result_result2 = result.result) === null || _result_result2 === void 0 ? void 0 : _result_result2.dtz).toBe(0);
        });
        it("should handle stalemate positions correctly", async ()=>{
            var _result_result, _result_result1;
            // K vs K+pawn stalemate position
            const stalemateFen = _fenPositions.SpecialPositions.STALEMATE;
            mockFetch.mockResolvedValueOnce(createTablebaseResponse({
                category: "draw",
                dtz: 0,
                dtm: null,
                moves: []
            }));
            const result = await _TablebaseService.tablebaseService.getEvaluation(stalemateFen);
            expect(result.isAvailable).toBe(true);
            expect((_result_result = result.result) === null || _result_result === void 0 ? void 0 : _result_result.category).toBe("draw");
            expect((_result_result1 = result.result) === null || _result_result1 === void 0 ? void 0 : _result_result1.wdl).toBe(0);
            // Verify moves endpoint handles stalemate correctly
            const movesResult = await _TablebaseService.tablebaseService.getTopMoves(stalemateFen, 5);
            expect(movesResult.isAvailable).toBe(false);
            expect(movesResult.error).toContain("No moves available");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,