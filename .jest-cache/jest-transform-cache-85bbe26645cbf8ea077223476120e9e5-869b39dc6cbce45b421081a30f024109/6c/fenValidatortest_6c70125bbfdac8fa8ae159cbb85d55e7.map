{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/utils/fenValidator.test.ts"],"sourcesContent":["import { validateAndSanitizeFen } from \"@shared/utils/fenValidator\";\n\ndescribe(\"FEN Validator\", () => {\n  describe(\"validateAndSanitizeFen\", () => {\n    it(\"should validate correct FEN strings\", () => {\n      const validFens = [\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n        \"8/8/8/8/8/8/1K1k4/8 w - - 0 1\",\n        \"r3k2r/8/8/8/8/8/8/R3K2R w KQkq - 0 1\",\n        \"8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1\",\n      ];\n\n      validFens.forEach((fen) => {\n        const result = validateAndSanitizeFen(fen);\n        expect(result.isValid).toBe(true);\n        expect(result.sanitized).toBe(fen);\n        expect(result.errors).toHaveLength(0);\n      });\n    });\n\n    it(\"should normalize FEN strings\", () => {\n      // chess.js normalizes FENs - e.g., it might add explicit move counters\n      const fenWithSpaces =\n        \"  rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1  \";\n      const result = validateAndSanitizeFen(fenWithSpaces);\n      expect(result.isValid).toBe(true);\n      expect(result.sanitized).toBe(\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n      );\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it(\"should reject invalid FEN strings with chess.js error messages\", () => {\n      const invalidFens = [\n        { fen: \"\", error: \"FEN must be a valid string\" },\n        { fen: \"invalid\", error: \"Invalid FEN\" }, // chess.js generic error\n        {\n          fen: \"8/8/8/8/8/8/8/8\",\n          error: \"Invalid FEN: must contain six space-delimited fields\",\n        },\n        { fen: \"9/8/8/8/8/8/8/8 w - - 0 1\", error: \"Invalid FEN\" }, // chess.js will catch invalid board\n        { fen: \"8/8/8/8/8/8/8/7 w - - 0 1\", error: \"Invalid FEN\" }, // chess.js will catch wrong rank size\n        {\n          fen: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR x KQkq - 0 1\",\n          error: \"Invalid FEN: side-to-move is invalid\",\n        },\n        {\n          fen: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkqz - 0 1\",\n          error: \"Invalid FEN: castling availability is invalid\",\n        },\n        {\n          fen: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq e9 0 1\",\n          error: \"Invalid FEN: en-passant square is invalid\",\n        },\n      ];\n\n      invalidFens.forEach(({ fen }) => {\n        const result = validateAndSanitizeFen(fen);\n        expect(result.isValid).toBe(false);\n        // chess.js error messages might vary, so check if error contains key parts\n        expect(result.errors.length).toBeGreaterThan(0);\n        const errorString = result.errors[0];\n        expect(errorString).toBeTruthy();\n      });\n    });\n\n    it(\"should handle null and undefined inputs\", () => {\n      // @ts-ignore - testing runtime behavior\n      const nullResult = validateAndSanitizeFen(null);\n      expect(nullResult.isValid).toBe(false);\n      expect(nullResult.errors[0]).toBe(\"FEN must be a valid string\");\n\n      // @ts-ignore - testing runtime behavior\n      const undefinedResult = validateAndSanitizeFen(undefined);\n      expect(undefinedResult.isValid).toBe(false);\n      expect(undefinedResult.errors[0]).toBe(\"FEN must be a valid string\");\n    });\n\n    it(\"should reject positions with too many pieces\", () => {\n      // Too many white pawns (9 pawns)\n      const tooManyPawns =\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n      const result = validateAndSanitizeFen(tooManyPawns);\n      expect(result.isValid).toBe(false);\n    });\n\n    it(\"should validate en passant squares correctly\", () => {\n      // chess.js validates en passant based on actual position\n      // Valid case: pawn on 5th rank, en passant possible\n      const validEnPassantWhite =\n        \"rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 2\";\n      expect(validateAndSanitizeFen(validEnPassantWhite).isValid).toBe(true);\n\n      // Valid case: pawn on 4th rank, en passant possible for black\n      const validEnPassantBlack =\n        \"rnbqkbnr/pppp1ppp/8/8/3Pp3/8/PPP1PPPP/RNBQKBNR b KQkq d3 0 2\";\n      expect(validateAndSanitizeFen(validEnPassantBlack).isValid).toBe(true);\n\n      // Invalid en passant squares (not on rank 3 or 6)\n      const invalidEnPassant = [\"a1\", \"e9\", \"j3\"];\n\n      invalidEnPassant.forEach((square) => {\n        const fen = `rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq ${square} 0 1`;\n        const result = validateAndSanitizeFen(fen);\n        expect(result.isValid).toBe(false);\n      });\n    });\n\n    it(\"should validate move counters\", () => {\n      // Valid move counters\n      const validFen =\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n      expect(validateAndSanitizeFen(validFen).isValid).toBe(true);\n\n      // Invalid halfmove counter (not a number)\n      const invalidHalfmove =\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - abc 1\";\n      expect(validateAndSanitizeFen(invalidHalfmove).isValid).toBe(false);\n\n      // Invalid fullmove counter (must be at least 1)\n      const invalidFullmove =\n        \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 0\";\n      expect(validateAndSanitizeFen(invalidFullmove).isValid).toBe(false);\n    });\n  });\n});\n"],"names":["describe","it","validFens","forEach","fen","result","validateAndSanitizeFen","expect","isValid","toBe","sanitized","errors","toHaveLength","fenWithSpaces","invalidFens","error","length","toBeGreaterThan","errorString","toBeTruthy","nullResult","undefinedResult","undefined","tooManyPawns","validEnPassantWhite","validEnPassantBlack","invalidEnPassant","square","validFen","invalidHalfmove","invalidFullmove"],"mappings":"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"}