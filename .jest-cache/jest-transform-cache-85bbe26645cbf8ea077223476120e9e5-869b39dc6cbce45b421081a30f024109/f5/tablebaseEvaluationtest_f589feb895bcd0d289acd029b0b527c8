8c6053b053502b111012f7dc43eb3f47
/**
 * @file Unit tests for tablebase-based move quality evaluation
 * @description Tests getMoveQualityDisplay function with various evaluations
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _evaluation = require("../../../shared/utils/chess/evaluation");
(0, _globals.describe)("Tablebase Evaluation - Move Quality Display", ()=>{
    (0, _globals.describe)("Mate Evaluations", ()=>{
        (0, _globals.test)("should_display_mate_in_1_as_excellent", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(0, 1, true);
            (0, _globals.expect)(result.text).toBe("#1");
            (0, _globals.expect)(result.className).toBe("eval-excellent");
            (0, _globals.expect)(result.color).toBe("#10b981");
            (0, _globals.expect)(result.bgColor).toBe("#065f46");
        });
        (0, _globals.test)("should_display_mate_in_3_as_excellent", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(0, 3, true);
            (0, _globals.expect)(result.text).toBe("#3");
            (0, _globals.expect)(result.className).toBe("eval-excellent");
        });
        (0, _globals.test)("should_display_mate_in_15_as_excellent", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(0, 15, true);
            (0, _globals.expect)(result.text).toBe("#15");
            (0, _globals.expect)(result.className).toBe("eval-excellent");
        });
        (0, _globals.test)("should_display_being_mated_as_neutral", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(0, -5, true);
            (0, _globals.expect)(result.text).toBe("#5");
            (0, _globals.expect)(result.className).toBe("eval-neutral");
            (0, _globals.expect)(result.color).toBe("var(--text-secondary)");
            (0, _globals.expect)(result.bgColor).toBe("var(--bg-accent)");
        });
        (0, _globals.test)("should_use_absolute_value_for_negative_mate", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(0, -1, true);
            (0, _globals.expect)(result.text).toBe("#1");
            (0, _globals.expect)(result.className).toBe("eval-neutral");
        });
    });
    (0, _globals.describe)("Positional Evaluations", ()=>{
        (0, _globals.test)("should_display_dominating_position_with_star", ()=>{
            // >= 5.0 pawns advantage
            const result = (0, _evaluation.getMoveQualityDisplay)(5.5, undefined, true);
            (0, _globals.expect)(result.text).toBe("⭐");
            (0, _globals.expect)(result.className).toBe("eval-excellent");
            (0, _globals.expect)(result.color).toBe("#10b981");
            (0, _globals.expect)(result.bgColor).toBe("#065f46");
        });
        (0, _globals.test)("should_display_excellent_position_with_sparkles", ()=>{
            // >= 2.0 pawns advantage
            const result = (0, _evaluation.getMoveQualityDisplay)(3.0, undefined, true);
            (0, _globals.expect)(result.text).toBe("✨");
            (0, _globals.expect)(result.className).toBe("eval-excellent");
        });
        (0, _globals.test)("should_display_good_position_with_ok_hand", ()=>{
            // >= 0.5 pawns advantage
            const result = (0, _evaluation.getMoveQualityDisplay)(1.0, undefined, true);
            (0, _globals.expect)(result.text).toBe("👌");
            (0, _globals.expect)(result.className).toBe("eval-good");
            (0, _globals.expect)(result.color).toBe("#3b82f6");
            (0, _globals.expect)(result.bgColor).toBe("#1e40af");
        });
        (0, _globals.test)("should_display_neutral_position_with_circle", ()=>{
            // Near 0 evaluation
            const result = (0, _evaluation.getMoveQualityDisplay)(0.1, undefined, true);
            (0, _globals.expect)(result.text).toBe("⚪");
            (0, _globals.expect)(result.className).toBe("eval-neutral");
            (0, _globals.expect)(result.color).toBe("var(--text-secondary)");
            (0, _globals.expect)(result.bgColor).toBe("var(--bg-accent)");
        });
    });
    (0, _globals.describe)("Threshold Tests", ()=>{
        (0, _globals.test)("should_handle_exact_5_0_threshold", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(5.0, undefined, true);
            (0, _globals.expect)(result.text).toBe("⭐");
        });
        (0, _globals.test)("should_handle_just_below_5_0_threshold", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(4.99, undefined, true);
            (0, _globals.expect)(result.text).toBe("✨");
        });
        (0, _globals.test)("should_handle_exact_2_0_threshold", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(2.0, undefined, true);
            (0, _globals.expect)(result.text).toBe("✨");
        });
        (0, _globals.test)("should_handle_just_below_2_0_threshold", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(1.99, undefined, true);
            (0, _globals.expect)(result.text).toBe("👌");
        });
        (0, _globals.test)("should_handle_exact_0_5_threshold", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(0.5, undefined, true);
            (0, _globals.expect)(result.text).toBe("👌");
        });
        (0, _globals.test)("should_handle_just_below_0_5_threshold", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(0.49, undefined, true);
            (0, _globals.expect)(result.text).toBe("⚪");
        });
    });
    (0, _globals.describe)("Absolute Value Handling", ()=>{
        (0, _globals.test)("should_use_absolute_value_for_negative_evaluations", ()=>{
            const negativeResult = (0, _evaluation.getMoveQualityDisplay)(-3.0, undefined, true);
            const positiveResult = (0, _evaluation.getMoveQualityDisplay)(3.0, undefined, true);
            (0, _globals.expect)(negativeResult.text).toBe(positiveResult.text);
            (0, _globals.expect)(negativeResult.className).toBe(positiveResult.className);
        });
        (0, _globals.test)("should_treat_minus_5_same_as_plus_5", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(-5.0, undefined, true);
            (0, _globals.expect)(result.text).toBe("⭐");
            (0, _globals.expect)(result.className).toBe("eval-excellent");
        });
        (0, _globals.test)("should_treat_minus_1_same_as_plus_1", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(-1.0, undefined, true);
            (0, _globals.expect)(result.text).toBe("👌");
            (0, _globals.expect)(result.className).toBe("eval-good");
        });
    });
    (0, _globals.describe)("Edge Cases", ()=>{
        (0, _globals.test)("should_handle_very_large_evaluations", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(100.0, undefined, true);
            (0, _globals.expect)(result.text).toBe("⭐");
            (0, _globals.expect)(result.className).toBe("eval-excellent");
        });
        (0, _globals.test)("should_handle_very_small_evaluations", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(0.01, undefined, true);
            (0, _globals.expect)(result.text).toBe("⚪");
            (0, _globals.expect)(result.className).toBe("eval-neutral");
        });
        (0, _globals.test)("should_handle_zero_evaluation", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(0.0, undefined, true);
            (0, _globals.expect)(result.text).toBe("⚪");
            (0, _globals.expect)(result.className).toBe("eval-neutral");
        });
        (0, _globals.test)("should_handle_zero_mate_as_normal_evaluation", ()=>{
            // Zero mate is undefined behavior, falls through to evaluation
            const result = (0, _evaluation.getMoveQualityDisplay)(1.0, 0, true);
            (0, _globals.expect)(result.text).toBe("👌");
            (0, _globals.expect)(result.className).toBe("eval-good");
        });
        (0, _globals.test)("should_handle_NaN_gracefully", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(NaN, undefined, true);
            // NaN >= checks will be false, so it falls through to default
            (0, _globals.expect)(result.text).toBe("⚪");
            (0, _globals.expect)(result.className).toBe("eval-neutral");
        });
        (0, _globals.test)("should_handle_Infinity", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(Infinity, undefined, true);
            (0, _globals.expect)(result.text).toBe("⭐");
            (0, _globals.expect)(result.className).toBe("eval-excellent");
        });
        (0, _globals.test)("should_handle_negative_Infinity", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(-Infinity, undefined, true);
            (0, _globals.expect)(result.text).toBe("⭐");
            (0, _globals.expect)(result.className).toBe("eval-excellent");
        });
    });
    (0, _globals.describe)("Legacy Parameter", ()=>{
        (0, _globals.test)("should_ignore_isPlayerMove_parameter", ()=>{
            const withTrue = (0, _evaluation.getMoveQualityDisplay)(3.0, undefined, true);
            const withFalse = (0, _evaluation.getMoveQualityDisplay)(3.0, undefined, false);
            (0, _globals.expect)(withTrue).toEqual(withFalse);
        });
    });
    (0, _globals.describe)("Complete Display Object", ()=>{
        (0, _globals.test)("should_return_all_required_properties", ()=>{
            const result = (0, _evaluation.getMoveQualityDisplay)(1.0, undefined, true);
            (0, _globals.expect)(result).toHaveProperty("text");
            (0, _globals.expect)(result).toHaveProperty("className");
            (0, _globals.expect)(result).toHaveProperty("color");
            (0, _globals.expect)(result).toHaveProperty("bgColor");
            (0, _globals.expect)(typeof result.text).toBe("string");
            (0, _globals.expect)(typeof result.className).toBe("string");
            (0, _globals.expect)(typeof result.color).toBe("string");
            (0, _globals.expect)(typeof result.bgColor).toBe("string");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,