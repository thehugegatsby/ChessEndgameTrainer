101afa9088093826fec2af611912cc85
/**
 * @file UI state slice for Zustand store
 * @module store/slices/uiSlice
 * @description Manages all UI-related state including modals, toasts, loading states, and sidebar visibility.
 * This slice is responsible for transient UI state that doesn't need to be persisted.
 *
 * @example
 * ```typescript
 * // Using the UI slice in a component
 * import { useStore } from '@/store';
 * import { uiSelectors } from '@/store/slices/uiSlice';
 *
 * function MyComponent() {
 *   const toasts = useStore(uiSelectors.selectToasts);
 *   const showToast = useStore(state => state.showToast);
 *
 *   const handleSuccess = () => {
 *     showToast('Operation successful!', 'success');
 *   };
 * }
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createInitialUIState () {
        return createInitialUIState;
    },
    get createUISlice () {
        return createUISlice;
    },
    get initialUIState () {
        return initialUIState;
    },
    get uiSelectors () {
        return uiSelectors;
    }
});
const _nanoid = require("nanoid");
const initialUIState = {
    isSidebarOpen: true,
    currentModal: null,
    toasts: [],
    loading: {
        global: false,
        tablebase: false,
        position: false,
        analysis: false
    },
    analysisPanel: {
        isOpen: false,
        activeTab: "moves",
        showTablebase: true
    }
};
const createInitialUIState = ()=>({
        ...initialUIState
    });
const createUISlice = (set, get)=>({
        // Initial state - use fresh arrays for each instance
        isSidebarOpen: false,
        currentModal: null,
        toasts: [],
        lastError: null,
        loading: {
            global: false,
            position: false,
            tablebase: false,
            analysis: false
        },
        analysisPanel: {
            isOpen: false,
            activeTab: "moves",
            showTablebase: true
        },
        // Actions
        /**
   * Toggles the sidebar visibility state
   *
   * @fires stateChange - When sidebar state changes
   *
   * @example
   * ```typescript
   * // Toggle sidebar from open to closed or vice versa
   * store.getState().toggleSidebar();
   * ```
   */ toggleSidebar: ()=>set((state)=>{
                state.ui.isSidebarOpen = !state.ui.isSidebarOpen;
            }),
        /**
   * Sets the sidebar visibility state explicitly
   *
   * @param {boolean} isOpen - Whether the sidebar should be open
   * @fires stateChange - When sidebar state changes
   *
   * @example
   * ```typescript
   * // Open sidebar
   * store.getState().setIsSidebarOpen(true);
   *
   * // Close sidebar
   * store.getState().setIsSidebarOpen(false);
   * ```
   */ setIsSidebarOpen: (isOpen)=>set((state)=>{
                state.ui.isSidebarOpen = isOpen;
            }),
        /**
   * Opens a modal by type, closing any currently open modal
   *
   * @param {ModalType} type - The type of modal to open
   * @fires stateChange - When modal state changes
   *
   * @remarks
   * Only one modal can be open at a time. Opening a new modal will close
   * any currently open modal.
   *
   * @example
   * ```typescript
   * // Open settings modal
   * store.getState().openModal('settings');
   *
   * // Open achievements modal
   * store.getState().openModal('achievements');
   * ```
   */ openModal: (type)=>set((state)=>{
                state.ui.currentModal = type;
            }),
        /**
   * Closes the currently open modal
   *
   * @fires stateChange - When modal is closed
   *
   * @example
   * ```typescript
   * // Close any open modal
   * store.getState().closeModal();
   * ```
   */ closeModal: ()=>set((state)=>{
                state.ui.currentModal = null;
            }),
        /**
   * Shows a toast notification with auto-removal
   *
   * @param {string} message - The message to display in the toast
   * @param {Toast["type"]} type - Toast type determining appearance and icon
   * @param {number} [duration=3000] - Duration in milliseconds before auto-removal (0 = no auto-removal)
   * @returns {void}
   *
   * @fires stateChange - When toast is added
   * @fires stateChange - When toast is auto-removed after duration
   *
   * @remarks
   * - Each toast gets a unique ID using nanoid
   * - Toasts are automatically removed after the specified duration
   * - Set duration to 0 or negative to disable auto-removal
   * - Multiple toasts can be shown simultaneously
   *
   * @example
   * ```typescript
   * // Show success toast (auto-removes after 3 seconds)
   * store.getState().showToast('File saved successfully!', 'success');
   *
   * // Show error toast with custom duration
   * store.getState().showToast('Network error occurred', 'error', 5000);
   *
   * // Show permanent toast (no auto-removal)
   * store.getState().showToast('Important message', 'info', 0);
   * ```
   */ showToast: (message, type, duration = 3000)=>{
            const id = (0, _nanoid.nanoid)();
            const toast = {
                id,
                message,
                type,
                duration
            };
            set((state)=>{
                state.ui.toasts.push(toast);
            });
            // Auto-remove toast after duration
            if (duration && duration > 0) {
                setTimeout(()=>{
                    get().ui.removeToast(id);
                }, duration);
            }
        },
        /**
   * Removes a specific toast notification by ID
   *
   * @param {string} id - The unique ID of the toast to remove
   * @fires stateChange - When toast is removed
   *
   * @remarks
   * This is typically called automatically by the showToast timer,
   * but can be called manually for user-dismissible toasts.
   *
   * @example
   * ```typescript
   * // Remove a specific toast
   * store.getState().removeToast('toast-id-123');
   *
   * // Remove all toasts
   * const state = store.getState();
   * state.toasts.forEach(toast => state.removeToast(toast.id));
   * ```
   */ removeToast: (id)=>set((state)=>{
                state.ui.toasts = state.ui.toasts.filter((toast)=>toast.id !== id);
            }),
        /**
   * Sets the loading state for a specific operation
   *
   * @param {keyof LoadingState} key - The loading state key to update
   * @param {boolean} value - The loading state value (true = loading, false = not loading)
   * @fires stateChange - When loading state changes
   *
   * @remarks
   * Loading states are used to show spinners or disable UI elements
   * during async operations. Each key represents a different operation type.
   *
   * @example
   * ```typescript
   * // Start global loading
   * store.getState().setLoading('global', true);
   *
   * // Start tablebase loading
   * store.getState().setLoading('tablebase', true);
   *
   * // Stop position loading
   * store.getState().setLoading('position', false);
   * ```
   */ setLoading: (key, value)=>set((state)=>{
                state.ui.loading[key] = value;
            }),
        /**
   * Updates the analysis panel configuration
   *
   * @param {Partial<AnalysisPanelState>} update - Partial update to merge with current state
   * @fires stateChange - When analysis panel state changes
   *
   * @remarks
   * This method performs a shallow merge of the update object with
   * the current analysis panel state. Use this to update one or more
   * properties without affecting others.
   *
   * @example
   * ```typescript
   * // Open analysis panel
   * store.getState().updateAnalysisPanel({ isOpen: true });
   *
   * // Change active tab
   * store.getState().updateAnalysisPanel({ activeTab: 'evaluation' });
   *
   * // Update multiple properties
   * store.getState().updateAnalysisPanel({
   *   isOpen: true,
   *   activeTab: 'variations',
   *   showTablebase: false
   * });
   * ```
   */ updateAnalysisPanel: (update)=>set((state)=>{
                Object.assign(state.ui.analysisPanel, update);
            })
    });
const uiSelectors = {
    /**
   * Selects the sidebar open state
   * @param {UISlice} state - The UI slice of the store
   * @returns {boolean} Whether the sidebar is open
   */ selectSidebarOpen: (state)=>state.isSidebarOpen,
    /**
   * Selects the currently open modal type
   * @param {UISlice} state - The UI slice of the store
   * @returns {ModalType | null} The open modal type or null if no modal is open
   */ selectCurrentModal: (state)=>state.currentModal,
    /**
   * Selects all active toasts
   * @param {UISlice} state - The UI slice of the store
   * @returns {Toast[]} Array of active toast notifications
   */ selectToasts: (state)=>state.toasts,
    /**
   * Selects the entire loading state object
   * @param {UISlice} state - The UI slice of the store
   * @returns {LoadingState} Object containing all loading states
   */ selectLoading: (state)=>state.loading,
    /**
   * Selects the global loading state
   * @param {UISlice} state - The UI slice of the store
   * @returns {boolean} Whether global loading is active
   */ selectGlobalLoading: (state)=>state.loading.global,
    /**
   * Selects the tablebase loading state
   * @param {UISlice} state - The UI slice of the store
   * @returns {boolean} Whether tablebase loading is active
   */ selectTablebaseLoading: (state)=>state.loading.tablebase,
    /**
   * Selects the analysis panel state
   * @param {UISlice} state - The UI slice of the store
   * @returns {AnalysisPanelState} The analysis panel configuration
   */ selectAnalysisPanel: (state)=>state.analysisPanel,
    /**
   * Creates a selector to check if a specific modal is open
   * @param {ModalType} type - The modal type to check
   * @returns {Function} Selector function that returns true if the specified modal is open
   *
   * @example
   * ```typescript
   * const isSettingsOpen = useStore(uiSelectors.selectIsModalOpen('settings'));
   * ```
   */ selectIsModalOpen: (type)=>(state)=>state.currentModal === type
};

//# sourceMappingURL=data:application/json;base64,