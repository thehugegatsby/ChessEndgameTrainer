6f1c833c5876c7a5ee8c8bd709628b55
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get getEvaluationDisplay () {
        return getEvaluationDisplay;
    },
    get getMoveQualityDisplay () {
        return getMoveQualityDisplay;
    }
});
const _constants = require("../../../constants");
/**
 *
 */ const getMoveQualityDisplay = (evaluation, mate, _isPlayerMove = true)=>{
    // For move quality, we want to show how good the move was
    // regardless of who played it
    // Matt-Bewertungen sind immer excellent wenn man Matt setzt
    if (mate !== undefined) {
        if (mate > 0) {
            return {
                text: `#${mate}`,
                className: "eval-excellent",
                color: _constants.UI.EVALUATION_COLORS.EXCELLENT.text,
                bgColor: _constants.UI.EVALUATION_COLORS.EXCELLENT.background
            };
        }
        if (mate < 0) {
            // Even when getting mated, if it's the best defense, show it neutrally
            return {
                text: `#${Math.abs(mate)}`,
                className: "eval-neutral",
                color: _constants.UI.EVALUATION_COLORS.NEUTRAL.text,
                bgColor: _constants.UI.EVALUATION_COLORS.NEUTRAL.background
            };
        }
    }
    // Für Zugqualität verwenden wir den absoluten Wert
    // Ein starker Zug ist stark, egal für welche Seite
    const absEval = Math.abs(evaluation);
    // Sehr starke Züge (leading to winning positions)
    if (absEval >= _constants.EVALUATION.COLOR_THRESHOLDS.DOMINATING) {
        return {
            text: "⭐",
            className: "eval-excellent",
            color: _constants.UI.EVALUATION_COLORS.EXCELLENT.text,
            bgColor: _constants.UI.EVALUATION_COLORS.EXCELLENT.background
        };
    }
    if (absEval >= _constants.EVALUATION.COLOR_THRESHOLDS.EXCELLENT) {
        return {
            text: "✨",
            className: "eval-excellent",
            color: _constants.UI.EVALUATION_COLORS.EXCELLENT.text,
            bgColor: _constants.UI.EVALUATION_COLORS.EXCELLENT.background
        };
    }
    if (absEval >= _constants.EVALUATION.COLOR_THRESHOLDS.GOOD) {
        return {
            text: "👌",
            className: "eval-good",
            color: _constants.UI.EVALUATION_COLORS.GOOD.text,
            bgColor: _constants.UI.EVALUATION_COLORS.GOOD.background
        };
    }
    if (absEval >= Math.abs(_constants.EVALUATION.COLOR_THRESHOLDS.NEUTRAL_LOWER)) {
        return {
            text: "⚪",
            className: "eval-neutral",
            color: _constants.UI.EVALUATION_COLORS.NEUTRAL.text,
            bgColor: _constants.UI.EVALUATION_COLORS.NEUTRAL.background
        };
    }
    // This shouldn't happen in move quality evaluation,
    // but keeping for safety
    return {
        text: "⚪",
        className: "eval-neutral",
        color: _constants.UI.EVALUATION_COLORS.NEUTRAL.text,
        bgColor: _constants.UI.EVALUATION_COLORS.NEUTRAL.background
    };
};
/**
 *
 */ const getEvaluationDisplay = (evaluation, mate)=>{
    // Matt-Bewertungen mit Zuganzahl
    if (mate !== undefined) {
        if (mate > 0) {
            return {
                text: `#${mate}`,
                className: "eval-excellent",
                color: _constants.UI.EVALUATION_COLORS.EXCELLENT.text,
                bgColor: _constants.UI.EVALUATION_COLORS.EXCELLENT.background
            };
        }
        if (mate < 0) {
            return {
                text: `#${Math.abs(mate)}`,
                className: "eval-blunder",
                color: _constants.UI.EVALUATION_COLORS.BLUNDER.text,
                bgColor: _constants.UI.EVALUATION_COLORS.BLUNDER.background
            };
        }
    }
    // Normale Bewertungen mit Symbolen
    if (evaluation >= _constants.EVALUATION.COLOR_THRESHOLDS.DOMINATING) {
        return {
            text: "⭐",
            className: "eval-excellent",
            color: _constants.UI.EVALUATION_COLORS.EXCELLENT.text,
            bgColor: _constants.UI.EVALUATION_COLORS.EXCELLENT.background
        };
    }
    if (evaluation >= _constants.EVALUATION.COLOR_THRESHOLDS.EXCELLENT) {
        return {
            text: "✨",
            className: "eval-excellent",
            color: _constants.UI.EVALUATION_COLORS.EXCELLENT.text,
            bgColor: _constants.UI.EVALUATION_COLORS.EXCELLENT.background
        };
    }
    if (evaluation >= _constants.EVALUATION.COLOR_THRESHOLDS.GOOD) {
        return {
            text: "👌",
            className: "eval-good",
            color: _constants.UI.EVALUATION_COLORS.GOOD.text,
            bgColor: _constants.UI.EVALUATION_COLORS.GOOD.background
        };
    }
    if (evaluation >= _constants.EVALUATION.COLOR_THRESHOLDS.NEUTRAL_LOWER) {
        return {
            text: "⚪",
            className: "eval-neutral",
            color: _constants.UI.EVALUATION_COLORS.NEUTRAL.text,
            bgColor: _constants.UI.EVALUATION_COLORS.NEUTRAL.background
        };
    }
    if (evaluation >= _constants.EVALUATION.COLOR_THRESHOLDS.INACCURATE) {
        return {
            text: "⚠️",
            className: "eval-inaccurate",
            color: _constants.UI.EVALUATION_COLORS.INACCURATE.text,
            bgColor: _constants.UI.EVALUATION_COLORS.INACCURATE.background
        };
    }
    if (evaluation >= _constants.EVALUATION.COLOR_THRESHOLDS.MISTAKE) {
        return {
            text: "🔶",
            className: "eval-mistake",
            color: _constants.UI.EVALUATION_COLORS.MISTAKE.text,
            bgColor: _constants.UI.EVALUATION_COLORS.MISTAKE.background
        };
    }
    return {
        text: "🔴",
        className: "eval-blunder",
        color: _constants.UI.EVALUATION_COLORS.BLUNDER.text,
        bgColor: _constants.UI.EVALUATION_COLORS.BLUNDER.background
    };
};

//# sourceMappingURL=data:application/json;base64,