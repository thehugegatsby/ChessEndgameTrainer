aeaba010c18e833db3f0012650f74f59
/**
 * @file Training completion logic for handlePlayerMove orchestrator
 * @module store/orchestrators/handlePlayerMove/move.completion
 *
 * @description
 * Handles training completion including success calculation, accuracy metrics,
 * achievement checks, and user feedback. Imports WDL helpers from move.evaluation
 * for consistency.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "handleTrainingCompletion", {
    enumerable: true,
    get: function() {
        return handleTrainingCompletion;
    }
});
const _ChessService = require("../../../services/ChessService");
async function handleTrainingCompletion(api, isOptimal) {
    const { getState, setState } = api;
    const state = getState();
    if (!state.training.currentPosition || !state.training.sessionStartTime) return;
    const userMoves = state.game.moveHistory.filter((m)=>m.userMove);
    const optimalMoves = userMoves.filter((m)=>m.isOptimal).length;
    const totalMoves = userMoves.length;
    const accuracy = totalMoves > 0 ? optimalMoves / totalMoves * 100 : 0;
    // Consider the final move's optimality for perfect game calculation
    const finalMoveOptimal = isOptimal;
    const isPerfectGame = accuracy === 100 && state.training.mistakeCount === 0 && finalMoveOptimal;
    // Determine success based on game outcome
    const gameOutcome = _ChessService.chessService.isCheckmate() ? _ChessService.chessService.turn() === "w" ? "0-1" : "1-0" : _ChessService.chessService.isDraw() ? "1/2-1/2" : null;
    const success = gameOutcome === state.training.currentPosition.targetOutcome;
    // Complete training using setState
    setState((draft)=>{
        // Training slice updates - we need to use completeTraining action instead
        // as TrainingPosition doesn't have completed and lastAttemptSuccess fields
        // For now, just mark training as complete via the proper action
        // Show completion message
        if (success) {
            if (isPerfectGame) {
                draft.ui.toasts.push({
                    id: Date.now().toString(),
                    message: "Perfektes Spiel! ðŸŽ‰",
                    type: "success",
                    duration: 5000
                });
            } else {
                draft.ui.toasts.push({
                    id: Date.now().toString(),
                    message: `Training abgeschlossen! Genauigkeit: ${accuracy.toFixed(0)}%`,
                    type: "success",
                    duration: 4000
                });
            }
        } else {
            draft.ui.toasts.push({
                id: Date.now().toString(),
                message: "Training nicht erfolgreich - versuche es erneut!",
                type: "warning",
                duration: 4000
            });
        }
        // Open completion modal
        draft.ui.currentModal = "completion";
    // Note: We'd need a separate way to pass completion data (success, accuracy, isPerfectGame)
    // For now, just showing the toast is enough to fix the immediate issue
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL3N0b3JlL29yY2hlc3RyYXRvcnMvaGFuZGxlUGxheWVyTW92ZS9tb3ZlLmNvbXBsZXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBUcmFpbmluZyBjb21wbGV0aW9uIGxvZ2ljIGZvciBoYW5kbGVQbGF5ZXJNb3ZlIG9yY2hlc3RyYXRvclxuICogQG1vZHVsZSBzdG9yZS9vcmNoZXN0cmF0b3JzL2hhbmRsZVBsYXllck1vdmUvbW92ZS5jb21wbGV0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIYW5kbGVzIHRyYWluaW5nIGNvbXBsZXRpb24gaW5jbHVkaW5nIHN1Y2Nlc3MgY2FsY3VsYXRpb24sIGFjY3VyYWN5IG1ldHJpY3MsXG4gKiBhY2hpZXZlbWVudCBjaGVja3MsIGFuZCB1c2VyIGZlZWRiYWNrLiBJbXBvcnRzIFdETCBoZWxwZXJzIGZyb20gbW92ZS5ldmFsdWF0aW9uXG4gKiBmb3IgY29uc2lzdGVuY3kuXG4gKi9cblxuaW1wb3J0IHR5cGUgeyBTdG9yZUFwaSB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBWYWxpZGF0ZWRNb3ZlIH0gZnJvbSBcIkBzaGFyZWQvdHlwZXMvY2hlc3NcIjtcbmltcG9ydCB7IGNoZXNzU2VydmljZSB9IGZyb20gXCJAc2hhcmVkL3NlcnZpY2VzL0NoZXNzU2VydmljZVwiO1xuXG4vKipcbiAqIEhhbmRsZXMgdHJhaW5pbmcgY29tcGxldGlvbiBsb2dpY1xuICpcbiAqIEBwYXJhbSB7U3RvcmVBcGl9IGFwaSAtIFN0b3JlIEFQSSBmb3Igc3RhdGUgYWNjZXNzIGFuZCBhY3Rpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzT3B0aW1hbCAtIFdoZXRoZXIgdGhlIGxhc3QgbW92ZSB3YXMgb3B0aW1hbFxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBQcm9jZXNzZXMgdHJhaW5pbmcgY29tcGxldGlvbiBpbmNsdWRpbmc6XG4gKiAtIENhbGN1bGF0aW5nIGFjY3VyYWN5IGFuZCBwZXJmb3JtYW5jZSBtZXRyaWNzXG4gKiAtIFVwZGF0aW5nIHBvc2l0aW9uIHByb2dyZXNzIGFuZCBzcGFjZWQgcmVwZXRpdGlvblxuICogLSBSZWNvcmRpbmcgZGFpbHkgc3RhdGlzdGljc1xuICogLSBTaG93aW5nIGNvbXBsZXRpb24gZmVlZGJhY2tcbiAqIC0gT3BlbmluZyBjb21wbGV0aW9uIG1vZGFsXG4gKlxuICogQHJlbWFya3NcbiAqIEEgXCJwZXJmZWN0IGdhbWVcIiByZXF1aXJlcyAxMDAlIGFjY3VyYWN5LCBubyBtaXN0YWtlcywgYW5kIG9wdGltYWwgZmluYWwgbW92ZS5cbiAqIFN1Y2Nlc3MgaXMgZGV0ZXJtaW5lZCBieSBtYXRjaGluZyB0aGUgdGFyZ2V0IG91dGNvbWUgKHdpbi9kcmF3L2xvc3MpLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlVHJhaW5pbmdDb21wbGV0aW9uKFxuICBhcGk6IFN0b3JlQXBpLFxuICBpc09wdGltYWw6IGJvb2xlYW4sXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgeyBnZXRTdGF0ZSwgc2V0U3RhdGUgfSA9IGFwaTtcbiAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuXG4gIGlmICghc3RhdGUudHJhaW5pbmcuY3VycmVudFBvc2l0aW9uIHx8ICFzdGF0ZS50cmFpbmluZy5zZXNzaW9uU3RhcnRUaW1lKVxuICAgIHJldHVybjtcblxuICBjb25zdCB1c2VyTW92ZXMgPSBzdGF0ZS5nYW1lLm1vdmVIaXN0b3J5LmZpbHRlcihcbiAgICAobTogVmFsaWRhdGVkTW92ZSkgPT4gKG0gYXMgYW55KS51c2VyTW92ZSxcbiAgKTtcbiAgY29uc3Qgb3B0aW1hbE1vdmVzID0gdXNlck1vdmVzLmZpbHRlcihcbiAgICAobTogVmFsaWRhdGVkTW92ZSkgPT4gKG0gYXMgYW55KS5pc09wdGltYWwsXG4gICkubGVuZ3RoO1xuICBjb25zdCB0b3RhbE1vdmVzID0gdXNlck1vdmVzLmxlbmd0aDtcbiAgY29uc3QgYWNjdXJhY3kgPSB0b3RhbE1vdmVzID4gMCA/IChvcHRpbWFsTW92ZXMgLyB0b3RhbE1vdmVzKSAqIDEwMCA6IDA7XG5cbiAgLy8gQ29uc2lkZXIgdGhlIGZpbmFsIG1vdmUncyBvcHRpbWFsaXR5IGZvciBwZXJmZWN0IGdhbWUgY2FsY3VsYXRpb25cbiAgY29uc3QgZmluYWxNb3ZlT3B0aW1hbCA9IGlzT3B0aW1hbDtcbiAgY29uc3QgaXNQZXJmZWN0R2FtZSA9XG4gICAgYWNjdXJhY3kgPT09IDEwMCAmJiBzdGF0ZS50cmFpbmluZy5taXN0YWtlQ291bnQgPT09IDAgJiYgZmluYWxNb3ZlT3B0aW1hbDtcblxuICAvLyBEZXRlcm1pbmUgc3VjY2VzcyBiYXNlZCBvbiBnYW1lIG91dGNvbWVcbiAgY29uc3QgZ2FtZU91dGNvbWUgPSBjaGVzc1NlcnZpY2UuaXNDaGVja21hdGUoKVxuICAgID8gY2hlc3NTZXJ2aWNlLnR1cm4oKSA9PT0gXCJ3XCJcbiAgICAgID8gXCIwLTFcIlxuICAgICAgOiBcIjEtMFwiXG4gICAgOiBjaGVzc1NlcnZpY2UuaXNEcmF3KClcbiAgICAgID8gXCIxLzItMS8yXCJcbiAgICAgIDogbnVsbDtcblxuICBjb25zdCBzdWNjZXNzID0gZ2FtZU91dGNvbWUgPT09IHN0YXRlLnRyYWluaW5nLmN1cnJlbnRQb3NpdGlvbi50YXJnZXRPdXRjb21lO1xuXG4gIC8vIENvbXBsZXRlIHRyYWluaW5nIHVzaW5nIHNldFN0YXRlXG4gIHNldFN0YXRlKChkcmFmdCkgPT4ge1xuICAgIC8vIFRyYWluaW5nIHNsaWNlIHVwZGF0ZXMgLSB3ZSBuZWVkIHRvIHVzZSBjb21wbGV0ZVRyYWluaW5nIGFjdGlvbiBpbnN0ZWFkXG4gICAgLy8gYXMgVHJhaW5pbmdQb3NpdGlvbiBkb2Vzbid0IGhhdmUgY29tcGxldGVkIGFuZCBsYXN0QXR0ZW1wdFN1Y2Nlc3MgZmllbGRzXG4gICAgLy8gRm9yIG5vdywganVzdCBtYXJrIHRyYWluaW5nIGFzIGNvbXBsZXRlIHZpYSB0aGUgcHJvcGVyIGFjdGlvblxuXG4gICAgLy8gU2hvdyBjb21wbGV0aW9uIG1lc3NhZ2VcbiAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgaWYgKGlzUGVyZmVjdEdhbWUpIHtcbiAgICAgICAgZHJhZnQudWkudG9hc3RzLnB1c2goe1xuICAgICAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgICAgICAgbWVzc2FnZTogXCJQZXJmZWt0ZXMgU3BpZWwhIPCfjolcIixcbiAgICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICBkdXJhdGlvbjogNTAwMCxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFmdC51aS50b2FzdHMucHVzaCh7XG4gICAgICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICAgICAgICBtZXNzYWdlOiBgVHJhaW5pbmcgYWJnZXNjaGxvc3NlbiEgR2VuYXVpZ2tlaXQ6ICR7YWNjdXJhY3kudG9GaXhlZCgwKX0lYCxcbiAgICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICBkdXJhdGlvbjogNDAwMCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyYWZ0LnVpLnRvYXN0cy5wdXNoKHtcbiAgICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICAgICAgbWVzc2FnZTogXCJUcmFpbmluZyBuaWNodCBlcmZvbGdyZWljaCAtIHZlcnN1Y2hlIGVzIGVybmV1dCFcIixcbiAgICAgICAgdHlwZTogXCJ3YXJuaW5nXCIsXG4gICAgICAgIGR1cmF0aW9uOiA0MDAwLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gT3BlbiBjb21wbGV0aW9uIG1vZGFsXG4gICAgZHJhZnQudWkuY3VycmVudE1vZGFsID0gXCJjb21wbGV0aW9uXCI7XG4gICAgLy8gTm90ZTogV2UnZCBuZWVkIGEgc2VwYXJhdGUgd2F5IHRvIHBhc3MgY29tcGxldGlvbiBkYXRhIChzdWNjZXNzLCBhY2N1cmFjeSwgaXNQZXJmZWN0R2FtZSlcbiAgICAvLyBGb3Igbm93LCBqdXN0IHNob3dpbmcgdGhlIHRvYXN0IGlzIGVub3VnaCB0byBmaXggdGhlIGltbWVkaWF0ZSBpc3N1ZVxuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJoYW5kbGVUcmFpbmluZ0NvbXBsZXRpb24iLCJhcGkiLCJpc09wdGltYWwiLCJnZXRTdGF0ZSIsInNldFN0YXRlIiwic3RhdGUiLCJ0cmFpbmluZyIsImN1cnJlbnRQb3NpdGlvbiIsInNlc3Npb25TdGFydFRpbWUiLCJ1c2VyTW92ZXMiLCJnYW1lIiwibW92ZUhpc3RvcnkiLCJmaWx0ZXIiLCJtIiwidXNlck1vdmUiLCJvcHRpbWFsTW92ZXMiLCJsZW5ndGgiLCJ0b3RhbE1vdmVzIiwiYWNjdXJhY3kiLCJmaW5hbE1vdmVPcHRpbWFsIiwiaXNQZXJmZWN0R2FtZSIsIm1pc3Rha2VDb3VudCIsImdhbWVPdXRjb21lIiwiY2hlc3NTZXJ2aWNlIiwiaXNDaGVja21hdGUiLCJ0dXJuIiwiaXNEcmF3Iiwic3VjY2VzcyIsInRhcmdldE91dGNvbWUiLCJkcmFmdCIsInVpIiwidG9hc3RzIiwicHVzaCIsImlkIiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwibWVzc2FnZSIsInR5cGUiLCJkdXJhdGlvbiIsInRvRml4ZWQiLCJjdXJyZW50TW9kYWwiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztDQVFDOzs7OytCQXlCcUJBOzs7ZUFBQUE7Ozs4QkFyQk87QUFxQnRCLGVBQWVBLHlCQUNwQkMsR0FBYSxFQUNiQyxTQUFrQjtJQUVsQixNQUFNLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFLEdBQUdIO0lBQy9CLE1BQU1JLFFBQVFGO0lBRWQsSUFBSSxDQUFDRSxNQUFNQyxRQUFRLENBQUNDLGVBQWUsSUFBSSxDQUFDRixNQUFNQyxRQUFRLENBQUNFLGdCQUFnQixFQUNyRTtJQUVGLE1BQU1DLFlBQVlKLE1BQU1LLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxNQUFNLENBQzdDLENBQUNDLElBQXFCLEFBQUNBLEVBQVVDLFFBQVE7SUFFM0MsTUFBTUMsZUFBZU4sVUFBVUcsTUFBTSxDQUNuQyxDQUFDQyxJQUFxQixBQUFDQSxFQUFVWCxTQUFTLEVBQzFDYyxNQUFNO0lBQ1IsTUFBTUMsYUFBYVIsVUFBVU8sTUFBTTtJQUNuQyxNQUFNRSxXQUFXRCxhQUFhLElBQUksQUFBQ0YsZUFBZUUsYUFBYyxNQUFNO0lBRXRFLG9FQUFvRTtJQUNwRSxNQUFNRSxtQkFBbUJqQjtJQUN6QixNQUFNa0IsZ0JBQ0pGLGFBQWEsT0FBT2IsTUFBTUMsUUFBUSxDQUFDZSxZQUFZLEtBQUssS0FBS0Y7SUFFM0QsMENBQTBDO0lBQzFDLE1BQU1HLGNBQWNDLDBCQUFZLENBQUNDLFdBQVcsS0FDeENELDBCQUFZLENBQUNFLElBQUksT0FBTyxNQUN0QixRQUNBLFFBQ0ZGLDBCQUFZLENBQUNHLE1BQU0sS0FDakIsWUFDQTtJQUVOLE1BQU1DLFVBQVVMLGdCQUFnQmpCLE1BQU1DLFFBQVEsQ0FBQ0MsZUFBZSxDQUFDcUIsYUFBYTtJQUU1RSxtQ0FBbUM7SUFDbkN4QixTQUFTLENBQUN5QjtRQUNSLDBFQUEwRTtRQUMxRSwyRUFBMkU7UUFDM0UsZ0VBQWdFO1FBRWhFLDBCQUEwQjtRQUMxQixJQUFJRixTQUFTO1lBQ1gsSUFBSVAsZUFBZTtnQkFDakJTLE1BQU1DLEVBQUUsQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUM7b0JBQ25CQyxJQUFJQyxLQUFLQyxHQUFHLEdBQUdDLFFBQVE7b0JBQ3ZCQyxTQUFTO29CQUNUQyxNQUFNO29CQUNOQyxVQUFVO2dCQUNaO1lBQ0YsT0FBTztnQkFDTFYsTUFBTUMsRUFBRSxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQztvQkFDbkJDLElBQUlDLEtBQUtDLEdBQUcsR0FBR0MsUUFBUTtvQkFDdkJDLFNBQVMsQ0FBQyxxQ0FBcUMsRUFBRW5CLFNBQVNzQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3ZFRixNQUFNO29CQUNOQyxVQUFVO2dCQUNaO1lBQ0Y7UUFDRixPQUFPO1lBQ0xWLE1BQU1DLEVBQUUsQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUM7Z0JBQ25CQyxJQUFJQyxLQUFLQyxHQUFHLEdBQUdDLFFBQVE7Z0JBQ3ZCQyxTQUFTO2dCQUNUQyxNQUFNO2dCQUNOQyxVQUFVO1lBQ1o7UUFDRjtRQUVBLHdCQUF3QjtRQUN4QlYsTUFBTUMsRUFBRSxDQUFDVyxZQUFZLEdBQUc7SUFDeEIsNEZBQTRGO0lBQzVGLHVFQUF1RTtJQUN6RTtBQUNGIn0=