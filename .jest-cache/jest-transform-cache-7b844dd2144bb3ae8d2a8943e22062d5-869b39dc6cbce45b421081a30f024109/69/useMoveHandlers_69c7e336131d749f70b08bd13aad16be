257c923939c047f041572381370fa7ba
/**
 * @file Move handlers hook for chess training board
 * @module hooks/useMoveHandlers
 * 
 * @description
 * Custom hook that encapsulates all move handling logic for chess training.
 * Extracted from TrainingBoard to separate business logic from UI rendering.
 * Handles drag-and-drop, click-to-move, and core move validation logic.
 * 
 * @remarks
 * Key responsibilities:
 * - Chess move validation and execution
 * - Drag-and-drop event handling with promotion detection
 * - Click-to-move functionality with selection state
 * - Position readiness validation
 * - Comprehensive logging and error handling
 * 
 * This hook maintains all the complex business logic while providing
 * a clean interface for chess board components.
 * 
 * @example
 * ```tsx
 * const { onDrop, onSquareClick, selectedSquare } = useMoveHandlers({
 *   currentFen,
 *   isGameFinished,
 *   isPositionReady,
 *   trainingState,
 *   onMove: makeMove
 * });
 * 
 * <Chessboard
 *   fen={currentFen}
 *   onPieceDrop={onDrop}
 *   onSquareClick={onSquareClick}
 *   arePiecesDraggable={!isGameFinished}
 * />
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useMoveHandlers", {
    enumerable: true,
    get: function() {
        return useMoveHandlers;
    }
});
const _react = require("react");
const _chess = require("chess.js");
const _Logger = require("../services/logging/Logger");
const _hooks = require("../store/hooks");
const useMoveHandlers = ({ currentFen, isGameFinished, isPositionReady, trainingState, onMove })=>{
    const [, uiActions] = (0, _hooks.useUIStore)();
    // Click-to-move state management
    const [selectedSquare, setSelectedSquare] = (0, _react.useState)(null);
    /**
   * Clear the current square selection
   */ const clearSelection = (0, _react.useCallback)(()=>{
        setSelectedSquare(null);
    }, []);
    /**
   * Handles chess move execution and validation
   *
   * @param {Object} move - Move object with from/to squares
   * @param {string} move.from - Starting square (e.g., "e2")
   * @param {string} move.to - Target square (e.g., "e4")
   * @param {string} [move.promotion] - Promotion piece if applicable
   * @returns {Promise<any>} Move result or null if invalid
   *
   * @description
   * Core move handler that:
   * 1. Validates move legality using chess.js
   * 2. Executes the move on the game instance
   * 3. Triggers tablebase analysis for opponent response
   * 4. Updates all relevant state slices
   * 5. Handles errors with user feedback
   *
   * @remarks
   * This function coordinates between multiple services:
   * - Chess.js for move validation
   * - TrainingSession hook for game state
   * - Tablebase orchestrator for opponent moves
   * - UI actions for user feedback
   *
   * Invalid moves increment the mistake counter and show
   * a warning toast without modifying game state.
   *
   * @example
   * ```typescript
   * // User drags piece
   * await handleMove({ from: "e2", to: "e4" });
   *
   * // With promotion
   * await handleMove({ from: "e7", to: "e8", promotion: "q" });
   * ```
   */ const handleMove = (0, _react.useCallback)(async (move)=>{
        const logger = (0, _Logger.getLogger)().setContext("useMoveHandlers-handleMove");
        logger.debug("üöÄ handleMove called", {
            move,
            isGameFinished,
            isPositionReady,
            hasCurrentPosition: !!trainingState.currentPosition,
            currentFen
        });
        // CRITICAL: Block moves if position is not ready
        if (!isPositionReady) {
            var _trainingState_currentPosition, _trainingState_currentPosition1;
            logger.warn("‚õî Position not ready, blocking move", {
                hasCurrentPosition: !!trainingState.currentPosition,
                currentPositionId: (_trainingState_currentPosition = trainingState.currentPosition) === null || _trainingState_currentPosition === void 0 ? void 0 : _trainingState_currentPosition.id,
                currentPositionFen: (_trainingState_currentPosition1 = trainingState.currentPosition) === null || _trainingState_currentPosition1 === void 0 ? void 0 : _trainingState_currentPosition1.fen
            });
            return false;
        }
        // Add these critical debug logs
        const moveLogger = (0, _Logger.getLogger)().setContext("useMoveHandlers-handleMove");
        moveLogger.debug("handleMove called", {
            move
        });
        moveLogger.debug("Current FEN", {
            fen: currentFen
        });
        if (isGameFinished) {
            logger.warn("handleMove early return", {
                isGameFinished
            });
            return false;
        }
        // Check if piece was dropped on same square (no move)
        if (move.from === move.to) {
            logger.debug("Piece dropped on same square, ignoring", {
                square: move.from
            });
            return false;
        }
        try {
            // Debug: Log game state before validation
            logger.debug("Game state before move validation", {
                hasGame: false,
                currentFen: currentFen
            });
            // Move validation is handled by ChessService in makeMove
            // We don't need to validate here anymore
            logger.debug("Move validation delegated to ChessService", {
                move,
                currentFen
            });
            // First make the move on the local game instance
            logger.debug("Calling onMove callback", {
                move
            });
            const result = await onMove(move);
            logger.debug("onMove result", {
                result
            });
            // The orchestrator now handles the entire workflow including:
            // - Move validation
            // - Error dialog for suboptimal moves
            // - Opponent turn (only if move was optimal)
            // TrainingBoard should NOT call handleOpponentTurn directly
            return result;
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : "Move failed";
            uiActions.showToast(errorMessage, "error");
            return false;
        }
    }, [
        isGameFinished,
        onMove,
        trainingState,
        uiActions,
        currentFen,
        isPositionReady,
        trainingState.currentPosition
    ]);
    /**
   * Handles piece drop events from the chessboard
   *
   * @param {string} sourceSquare - Square where piece was picked up
   * @param {string} targetSquare - Square where piece was dropped
   * @param {string} piece - Piece type (required by interface)
   * @returns {boolean} Whether the drop was accepted
   *
   * @description
   * Converts drag-and-drop events into move objects and delegates
   * to the main move handler. Always promotes to queen by default.
   *
   * @remarks
   * This is the primary user interaction handler for the chess board.
   * Returns false if game is finished to prevent further moves.
   * The actual move validation happens in handleMove.
   *
   * @example
   * ```typescript
   * // User drags pawn from e2 to e4
   * onDrop("e2", "e4", "wP") // returns true if valid
   * ```
   */ const onDrop = (0, _react.useCallback)((sourceSquare, targetSquare, piece)=>{
        const logger = (0, _Logger.getLogger)().setContext("useMoveHandlers-onDrop");
        logger.debug("üéØ onDrop called", {
            sourceSquare,
            targetSquare,
            piece,
            isPositionReady,
            isGameFinished,
            hasCurrentPosition: !!trainingState.currentPosition,
            currentFen
        });
        // Block drops if position is not ready or game is finished
        if (!isPositionReady || isGameFinished) {
            logger.warn("‚õî onDrop blocked", {
                isPositionReady,
                isGameFinished,
                reason: !isPositionReady ? "position not ready" : "game finished"
            });
            return false;
        }
        // Check if this is a pawn promotion
        const isPawn = piece.toLowerCase().endsWith("p");
        const targetRank = targetSquare[1];
        const isPromotionRank = targetRank === "8" || targetRank === "1";
        const move = {
            from: sourceSquare,
            to: targetSquare
        };
        // Add promotion if pawn reaches last rank
        if (isPawn && isPromotionRank) {
            move.promotion = "q"; // Default to queen promotion
        }
        logger.debug("‚úÖ onDrop calling handleMove", {
            move
        });
        handleMove(move);
        return true;
    }, [
        handleMove,
        isGameFinished,
        isPositionReady,
        trainingState.currentPosition,
        currentFen
    ]);
    /**
   * Handles square click events for click-to-move functionality
   * 
   * @param {object} args - Arguments from react-chessboard
   * @param {any} args.piece - Piece on the clicked square (can be null)
   * @param {string} args.square - Square that was clicked
   * @returns {void}
   * 
   * @description
   * Implements click-to-move interaction pattern for accessibility and E2E testing:
   * - First click selects piece (if valid piece on square)
   * - Second click attempts move to target square
   * - Click on same square deselects piece
   */ const onSquareClick = (0, _react.useCallback)(({ piece, square })=>{
        const logger = (0, _Logger.getLogger)().setContext("useMoveHandlers-onSquareClick");
        logger.debug("üñ±Ô∏è onSquareClick called", {
            square,
            selectedSquare,
            isPositionReady,
            isGameFinished
        });
        // Block clicks if position is not ready or game is finished
        if (!isPositionReady || isGameFinished) {
            logger.warn("‚õî onSquareClick blocked", {
                isPositionReady,
                isGameFinished,
                reason: !isPositionReady ? "position not ready" : "game finished"
            });
            return;
        }
        // If no square is selected, select this square if it has a piece
        if (!selectedSquare) {
            if (piece) {
                // Check if it's the right color's turn
                try {
                    var _piece_pieceType;
                    const chess = new _chess.Chess(currentFen);
                    const currentTurn = chess.turn();
                    const pieceColor = (_piece_pieceType = piece.pieceType) === null || _piece_pieceType === void 0 ? void 0 : _piece_pieceType[0]; // 'w' or 'b'
                    if (pieceColor === currentTurn) {
                        setSelectedSquare(square);
                        logger.debug("‚úÖ Square selected", {
                            square,
                            piece
                        });
                    } else {
                        logger.debug("‚ùå Wrong color piece", {
                            square,
                            piece,
                            currentTurn
                        });
                    }
                } catch (error) {
                    logger.error("Failed to validate piece color", error);
                }
            } else {
                logger.debug("‚ùå No piece on square", {
                    square
                });
            }
            return;
        }
        // If same square clicked, deselect
        if (selectedSquare === square) {
            setSelectedSquare(null);
            logger.debug("üîÑ Square deselected", {
                square
            });
            return;
        }
        // Try to make move from selected square to clicked square
        const result = onDrop(selectedSquare, square, ""); // Piece type not needed
        if (result) {
            setSelectedSquare(null); // Clear selection after successful move
            logger.debug("‚úÖ Move completed via click", {
                from: selectedSquare,
                to: square
            });
        } else {
            logger.debug("‚ùå Move failed via click", {
                from: selectedSquare,
                to: square
            });
        }
    }, [
        selectedSquare,
        isPositionReady,
        isGameFinished,
        currentFen,
        onDrop
    ]);
    return {
        onDrop,
        onSquareClick,
        selectedSquare,
        clearSelection
    };
};

//# sourceMappingURL=data:application/json;base64,