c43a0bb1f56427b4e0a291c709a0cf37
/**
 * Test helper factory for creating Move objects compatible with chess.js
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get TEST_MOVES () {
        return TEST_MOVES;
    },
    get createTestMove () {
        return createTestMove;
    }
});
const createTestMove = (options)=>{
    const { from, to, color = "w", piece = "p", captured, promotion, san, before = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1", after = "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1" } = options;
    // Generate flags based on move type
    let flags = "";
    if (captured) flags += "c";
    if (promotion) flags += "p";
    if (from === "e1" && to === "g1" && piece === "k") flags += "k"; // kingside castle
    if (from === "e1" && to === "c1" && piece === "k") flags += "q"; // queenside castle
    if (piece === "p" && Math.abs(from.charCodeAt(1) - to.charCodeAt(1)) === 2) flags += "b"; // big pawn
    if (!flags) flags = "n"; // normal move
    const move = {
        color,
        from: from,
        to: to,
        piece,
        captured,
        promotion,
        flags,
        san: san || generateSan(from, to, piece, captured),
        lan: `${from}${to}${promotion || ""}`,
        fenBefore: before,
        fenAfter: after,
        // Helper methods
        isCapture: ()=>!!captured,
        isPromotion: ()=>!!promotion,
        isEnPassant: ()=>flags.includes("e"),
        isKingsideCastle: ()=>flags.includes("k"),
        isQueensideCastle: ()=>flags.includes("q"),
        isBigPawn: ()=>flags.includes("b")
    };
    return move;
};
/**
 * Simple SAN generation for testing
 */ function generateSan(from, to, piece, captured) {
    if (piece === "p") {
        if (captured) {
            return `${from[0]}x${to}`;
        }
        return to;
    }
    const pieceSymbol = piece.toUpperCase();
    if (captured) {
        return `${pieceSymbol}x${to}`;
    }
    return `${pieceSymbol}${to}`;
}
const TEST_MOVES = {
    E2E4: createTestMove({
        from: "e2",
        to: "e4",
        piece: "p",
        san: "e4"
    }),
    E2_E4: createTestMove({
        from: "e2",
        to: "e4",
        piece: "p",
        san: "e4"
    }),
    E7_E5: createTestMove({
        from: "e7",
        to: "e5",
        piece: "p",
        color: "b",
        san: "e5"
    }),
    NG1_F3: createTestMove({
        from: "g1",
        to: "f3",
        piece: "n",
        san: "Nf3"
    }),
    KINGSIDE_CASTLE: createTestMove({
        from: "e1",
        to: "g1",
        piece: "k",
        san: "O-O"
    }),
    CAPTURE: createTestMove({
        from: "e4",
        to: "d5",
        piece: "p",
        captured: "p",
        san: "exd5"
    }),
    PROMOTION: createTestMove({
        from: "e7",
        to: "e8",
        piece: "p",
        promotion: "q",
        san: "e8=Q"
    }),
    PROMOTION_QUEEN: createTestMove({
        from: "e7",
        to: "e8",
        piece: "p",
        promotion: "q",
        san: "e8=Q"
    }),
    ILLEGAL_MOVE: createTestMove({
        from: "a1",
        to: "h8",
        piece: "p",
        san: "illegal"
    })
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvdGVzdHMvaGVscGVycy9tb3ZlRmFjdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3QgaGVscGVyIGZhY3RvcnkgZm9yIGNyZWF0aW5nIE1vdmUgb2JqZWN0cyBjb21wYXRpYmxlIHdpdGggY2hlc3MuanNcbiAqL1xuXG5pbXBvcnQgeyBNb3ZlLCBDb2xvciwgUGllY2VTeW1ib2wgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3R5cGVzL2NoZXNzXCI7XG5pbXBvcnQgdHlwZSB7IFNxdWFyZSBhcyBDaGVzc0pzU3F1YXJlIH0gZnJvbSBcImNoZXNzLmpzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlTW92ZU9wdGlvbnMge1xuICBmcm9tOiBzdHJpbmc7XG4gIHRvOiBzdHJpbmc7XG4gIGNvbG9yPzogQ29sb3I7XG4gIHBpZWNlPzogUGllY2VTeW1ib2w7XG4gIGNhcHR1cmVkPzogUGllY2VTeW1ib2w7XG4gIHByb21vdGlvbj86IFwicVwiIHwgXCJyXCIgfCBcImJcIiB8IFwiblwiO1xuICBzYW4/OiBzdHJpbmc7XG4gIGJlZm9yZT86IHN0cmluZztcbiAgYWZ0ZXI/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNvbXBsZXRlIE1vdmUgb2JqZWN0IGZvciB0ZXN0aW5nXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVUZXN0TW92ZSA9IChvcHRpb25zOiBDcmVhdGVNb3ZlT3B0aW9ucyk6IE1vdmUgPT4ge1xuICBjb25zdCB7XG4gICAgZnJvbSxcbiAgICB0byxcbiAgICBjb2xvciA9IFwid1wiLFxuICAgIHBpZWNlID0gXCJwXCIsXG4gICAgY2FwdHVyZWQsXG4gICAgcHJvbW90aW9uLFxuICAgIHNhbixcbiAgICBiZWZvcmUgPSBcInJuYnFrYm5yL3BwcHBwcHBwLzgvOC84LzgvUFBQUFBQUFAvUk5CUUtCTlIgdyBLUWtxIC0gMCAxXCIsXG4gICAgYWZ0ZXIgPSBcInJuYnFrYm5yL3BwcHBwcHBwLzgvOC80UDMvOC9QUFBQMVBQUC9STkJRS0JOUiBiIEtRa3EgZTMgMCAxXCIsXG4gIH0gPSBvcHRpb25zO1xuXG4gIC8vIEdlbmVyYXRlIGZsYWdzIGJhc2VkIG9uIG1vdmUgdHlwZVxuICBsZXQgZmxhZ3MgPSBcIlwiO1xuICBpZiAoY2FwdHVyZWQpIGZsYWdzICs9IFwiY1wiO1xuICBpZiAocHJvbW90aW9uKSBmbGFncyArPSBcInBcIjtcbiAgaWYgKGZyb20gPT09IFwiZTFcIiAmJiB0byA9PT0gXCJnMVwiICYmIHBpZWNlID09PSBcImtcIikgZmxhZ3MgKz0gXCJrXCI7IC8vIGtpbmdzaWRlIGNhc3RsZVxuICBpZiAoZnJvbSA9PT0gXCJlMVwiICYmIHRvID09PSBcImMxXCIgJiYgcGllY2UgPT09IFwia1wiKSBmbGFncyArPSBcInFcIjsgLy8gcXVlZW5zaWRlIGNhc3RsZVxuICBpZiAocGllY2UgPT09IFwicFwiICYmIE1hdGguYWJzKGZyb20uY2hhckNvZGVBdCgxKSAtIHRvLmNoYXJDb2RlQXQoMSkpID09PSAyKVxuICAgIGZsYWdzICs9IFwiYlwiOyAvLyBiaWcgcGF3blxuICBpZiAoIWZsYWdzKSBmbGFncyA9IFwiblwiOyAvLyBub3JtYWwgbW92ZVxuXG4gIGNvbnN0IG1vdmU6IE1vdmUgPSB7XG4gICAgY29sb3IsXG4gICAgZnJvbTogZnJvbSBhcyBDaGVzc0pzU3F1YXJlLFxuICAgIHRvOiB0byBhcyBDaGVzc0pzU3F1YXJlLFxuICAgIHBpZWNlLFxuICAgIGNhcHR1cmVkLFxuICAgIHByb21vdGlvbixcbiAgICBmbGFncyxcbiAgICBzYW46IHNhbiB8fCBnZW5lcmF0ZVNhbihmcm9tLCB0bywgcGllY2UsIGNhcHR1cmVkKSxcbiAgICBsYW46IGAke2Zyb219JHt0b30ke3Byb21vdGlvbiB8fCBcIlwifWAsXG4gICAgZmVuQmVmb3JlOiBiZWZvcmUsXG4gICAgZmVuQWZ0ZXI6IGFmdGVyLFxuICAgIC8vIEhlbHBlciBtZXRob2RzXG4gICAgaXNDYXB0dXJlOiAoKSA9PiAhIWNhcHR1cmVkLFxuICAgIGlzUHJvbW90aW9uOiAoKSA9PiAhIXByb21vdGlvbixcbiAgICBpc0VuUGFzc2FudDogKCkgPT4gZmxhZ3MuaW5jbHVkZXMoXCJlXCIpLFxuICAgIGlzS2luZ3NpZGVDYXN0bGU6ICgpID0+IGZsYWdzLmluY2x1ZGVzKFwia1wiKSxcbiAgICBpc1F1ZWVuc2lkZUNhc3RsZTogKCkgPT4gZmxhZ3MuaW5jbHVkZXMoXCJxXCIpLFxuICAgIGlzQmlnUGF3bjogKCkgPT4gZmxhZ3MuaW5jbHVkZXMoXCJiXCIpLFxuICB9O1xuXG4gIHJldHVybiBtb3ZlO1xufTtcblxuLyoqXG4gKiBTaW1wbGUgU0FOIGdlbmVyYXRpb24gZm9yIHRlc3RpbmdcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVTYW4oXG4gIGZyb206IHN0cmluZyxcbiAgdG86IHN0cmluZyxcbiAgcGllY2U6IFBpZWNlU3ltYm9sLFxuICBjYXB0dXJlZD86IFBpZWNlU3ltYm9sLFxuKTogc3RyaW5nIHtcbiAgaWYgKHBpZWNlID09PSBcInBcIikge1xuICAgIGlmIChjYXB0dXJlZCkge1xuICAgICAgcmV0dXJuIGAke2Zyb21bMF19eCR7dG99YDtcbiAgICB9XG4gICAgcmV0dXJuIHRvO1xuICB9XG5cbiAgY29uc3QgcGllY2VTeW1ib2wgPSBwaWVjZS50b1VwcGVyQ2FzZSgpO1xuICBpZiAoY2FwdHVyZWQpIHtcbiAgICByZXR1cm4gYCR7cGllY2VTeW1ib2x9eCR7dG99YDtcbiAgfVxuICByZXR1cm4gYCR7cGllY2VTeW1ib2x9JHt0b31gO1xufVxuXG4vKipcbiAqIENvbW1vbiB0ZXN0IG1vdmVzXG4gKi9cbmV4cG9ydCBjb25zdCBURVNUX01PVkVTID0ge1xuICBFMkU0OiBjcmVhdGVUZXN0TW92ZSh7IGZyb206IFwiZTJcIiwgdG86IFwiZTRcIiwgcGllY2U6IFwicFwiLCBzYW46IFwiZTRcIiB9KSxcbiAgRTJfRTQ6IGNyZWF0ZVRlc3RNb3ZlKHsgZnJvbTogXCJlMlwiLCB0bzogXCJlNFwiLCBwaWVjZTogXCJwXCIsIHNhbjogXCJlNFwiIH0pLFxuICBFN19FNTogY3JlYXRlVGVzdE1vdmUoe1xuICAgIGZyb206IFwiZTdcIixcbiAgICB0bzogXCJlNVwiLFxuICAgIHBpZWNlOiBcInBcIixcbiAgICBjb2xvcjogXCJiXCIsXG4gICAgc2FuOiBcImU1XCIsXG4gIH0pLFxuICBORzFfRjM6IGNyZWF0ZVRlc3RNb3ZlKHsgZnJvbTogXCJnMVwiLCB0bzogXCJmM1wiLCBwaWVjZTogXCJuXCIsIHNhbjogXCJOZjNcIiB9KSxcbiAgS0lOR1NJREVfQ0FTVExFOiBjcmVhdGVUZXN0TW92ZSh7XG4gICAgZnJvbTogXCJlMVwiLFxuICAgIHRvOiBcImcxXCIsXG4gICAgcGllY2U6IFwia1wiLFxuICAgIHNhbjogXCJPLU9cIixcbiAgfSksXG4gIENBUFRVUkU6IGNyZWF0ZVRlc3RNb3ZlKHtcbiAgICBmcm9tOiBcImU0XCIsXG4gICAgdG86IFwiZDVcIixcbiAgICBwaWVjZTogXCJwXCIsXG4gICAgY2FwdHVyZWQ6IFwicFwiLFxuICAgIHNhbjogXCJleGQ1XCIsXG4gIH0pLFxuICBQUk9NT1RJT046IGNyZWF0ZVRlc3RNb3ZlKHtcbiAgICBmcm9tOiBcImU3XCIsXG4gICAgdG86IFwiZThcIixcbiAgICBwaWVjZTogXCJwXCIsXG4gICAgcHJvbW90aW9uOiBcInFcIixcbiAgICBzYW46IFwiZTg9UVwiLFxuICB9KSxcbiAgUFJPTU9USU9OX1FVRUVOOiBjcmVhdGVUZXN0TW92ZSh7XG4gICAgZnJvbTogXCJlN1wiLFxuICAgIHRvOiBcImU4XCIsXG4gICAgcGllY2U6IFwicFwiLFxuICAgIHByb21vdGlvbjogXCJxXCIsXG4gICAgc2FuOiBcImU4PVFcIixcbiAgfSksXG4gIElMTEVHQUxfTU9WRTogY3JlYXRlVGVzdE1vdmUoe1xuICAgIGZyb206IFwiYTFcIixcbiAgICB0bzogXCJoOFwiLFxuICAgIHBpZWNlOiBcInBcIixcbiAgICBzYW46IFwiaWxsZWdhbFwiLFxuICB9KSxcbn07XG4iXSwibmFtZXMiOlsiVEVTVF9NT1ZFUyIsImNyZWF0ZVRlc3RNb3ZlIiwib3B0aW9ucyIsImZyb20iLCJ0byIsImNvbG9yIiwicGllY2UiLCJjYXB0dXJlZCIsInByb21vdGlvbiIsInNhbiIsImJlZm9yZSIsImFmdGVyIiwiZmxhZ3MiLCJNYXRoIiwiYWJzIiwiY2hhckNvZGVBdCIsIm1vdmUiLCJnZW5lcmF0ZVNhbiIsImxhbiIsImZlbkJlZm9yZSIsImZlbkFmdGVyIiwiaXNDYXB0dXJlIiwiaXNQcm9tb3Rpb24iLCJpc0VuUGFzc2FudCIsImluY2x1ZGVzIiwiaXNLaW5nc2lkZUNhc3RsZSIsImlzUXVlZW5zaWRlQ2FzdGxlIiwiaXNCaWdQYXduIiwicGllY2VTeW1ib2wiLCJ0b1VwcGVyQ2FzZSIsIkUyRTQiLCJFMl9FNCIsIkU3X0U1IiwiTkcxX0YzIiwiS0lOR1NJREVfQ0FTVExFIiwiQ0FQVFVSRSIsIlBST01PVElPTiIsIlBST01PVElPTl9RVUVFTiIsIklMTEVHQUxfTU9WRSJdLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUM7Ozs7Ozs7Ozs7O1FBNkZZQTtlQUFBQTs7UUF6RUFDO2VBQUFBOzs7QUFBTixNQUFNQSxpQkFBaUIsQ0FBQ0M7SUFDN0IsTUFBTSxFQUNKQyxJQUFJLEVBQ0pDLEVBQUUsRUFDRkMsUUFBUSxHQUFHLEVBQ1hDLFFBQVEsR0FBRyxFQUNYQyxRQUFRLEVBQ1JDLFNBQVMsRUFDVEMsR0FBRyxFQUNIQyxTQUFTLDBEQUEwRCxFQUNuRUMsUUFBUSw2REFBNkQsRUFDdEUsR0FBR1Q7SUFFSixvQ0FBb0M7SUFDcEMsSUFBSVUsUUFBUTtJQUNaLElBQUlMLFVBQVVLLFNBQVM7SUFDdkIsSUFBSUosV0FBV0ksU0FBUztJQUN4QixJQUFJVCxTQUFTLFFBQVFDLE9BQU8sUUFBUUUsVUFBVSxLQUFLTSxTQUFTLEtBQUssa0JBQWtCO0lBQ25GLElBQUlULFNBQVMsUUFBUUMsT0FBTyxRQUFRRSxVQUFVLEtBQUtNLFNBQVMs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