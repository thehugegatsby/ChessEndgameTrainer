{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/helpers/moveFactory.ts"],"sourcesContent":["/**\n * Test helper factory for creating Move objects compatible with chess.js\n */\n\nimport { Move, Color, PieceSymbol } from \"../../shared/types/chess\";\nimport type { Square as ChessJsSquare } from \"chess.js\";\n\nexport interface CreateMoveOptions {\n  from: string;\n  to: string;\n  color?: Color;\n  piece?: PieceSymbol;\n  captured?: PieceSymbol;\n  promotion?: \"q\" | \"r\" | \"b\" | \"n\";\n  san?: string;\n  before?: string;\n  after?: string;\n}\n\n/**\n * Creates a complete Move object for testing\n */\nexport const createTestMove = (options: CreateMoveOptions): Move => {\n  const {\n    from,\n    to,\n    color = \"w\",\n    piece = \"p\",\n    captured,\n    promotion,\n    san,\n    before = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n    after = \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\",\n  } = options;\n\n  // Generate flags based on move type\n  let flags = \"\";\n  if (captured) flags += \"c\";\n  if (promotion) flags += \"p\";\n  if (from === \"e1\" && to === \"g1\" && piece === \"k\") flags += \"k\"; // kingside castle\n  if (from === \"e1\" && to === \"c1\" && piece === \"k\") flags += \"q\"; // queenside castle\n  if (piece === \"p\" && Math.abs(from.charCodeAt(1) - to.charCodeAt(1)) === 2)\n    flags += \"b\"; // big pawn\n  if (!flags) flags = \"n\"; // normal move\n\n  const move: Move = {\n    color,\n    from: from as ChessJsSquare,\n    to: to as ChessJsSquare,\n    piece,\n    captured,\n    promotion,\n    flags,\n    san: san || generateSan(from, to, piece, captured),\n    lan: `${from}${to}${promotion || \"\"}`,\n    fenBefore: before,\n    fenAfter: after,\n    // Helper methods\n    isCapture: () => !!captured,\n    isPromotion: () => !!promotion,\n    isEnPassant: () => flags.includes(\"e\"),\n    isKingsideCastle: () => flags.includes(\"k\"),\n    isQueensideCastle: () => flags.includes(\"q\"),\n    isBigPawn: () => flags.includes(\"b\"),\n  };\n\n  return move;\n};\n\n/**\n * Simple SAN generation for testing\n */\nfunction generateSan(\n  from: string,\n  to: string,\n  piece: PieceSymbol,\n  captured?: PieceSymbol,\n): string {\n  if (piece === \"p\") {\n    if (captured) {\n      return `${from[0]}x${to}`;\n    }\n    return to;\n  }\n\n  const pieceSymbol = piece.toUpperCase();\n  if (captured) {\n    return `${pieceSymbol}x${to}`;\n  }\n  return `${pieceSymbol}${to}`;\n}\n\n/**\n * Common test moves\n */\nexport const TEST_MOVES = {\n  E2E4: createTestMove({ from: \"e2\", to: \"e4\", piece: \"p\", san: \"e4\" }),\n  E2_E4: createTestMove({ from: \"e2\", to: \"e4\", piece: \"p\", san: \"e4\" }),\n  E7_E5: createTestMove({\n    from: \"e7\",\n    to: \"e5\",\n    piece: \"p\",\n    color: \"b\",\n    san: \"e5\",\n  }),\n  NG1_F3: createTestMove({ from: \"g1\", to: \"f3\", piece: \"n\", san: \"Nf3\" }),\n  KINGSIDE_CASTLE: createTestMove({\n    from: \"e1\",\n    to: \"g1\",\n    piece: \"k\",\n    san: \"O-O\",\n  }),\n  CAPTURE: createTestMove({\n    from: \"e4\",\n    to: \"d5\",\n    piece: \"p\",\n    captured: \"p\",\n    san: \"exd5\",\n  }),\n  PROMOTION: createTestMove({\n    from: \"e7\",\n    to: \"e8\",\n    piece: \"p\",\n    promotion: \"q\",\n    san: \"e8=Q\",\n  }),\n  PROMOTION_QUEEN: createTestMove({\n    from: \"e7\",\n    to: \"e8\",\n    piece: \"p\",\n    promotion: \"q\",\n    san: \"e8=Q\",\n  }),\n  ILLEGAL_MOVE: createTestMove({\n    from: \"a1\",\n    to: \"h8\",\n    piece: \"p\",\n    san: \"illegal\",\n  }),\n};\n"],"names":["TEST_MOVES","createTestMove","options","from","to","color","piece","captured","promotion","san","before","after","flags","Math","abs","charCodeAt","move","generateSan","lan","fenBefore","fenAfter","isCapture","isPromotion","isEnPassant","includes","isKingsideCastle","isQueensideCastle","isBigPawn","pieceSymbol","toUpperCase","E2E4","E2_E4","E7_E5","NG1_F3","KINGSIDE_CASTLE","CAPTURE","PROMOTION","PROMOTION_QUEEN","ILLEGAL_MOVE"],"mappings":"AAAA;;CAEC;;;;;;;;;;;QA6FYA;eAAAA;;QAzEAC;eAAAA;;;AAAN,MAAMA,iBAAiB,CAACC;IAC7B,MAAM,EACJC,IAAI,EACJC,EAAE,EACFC,QAAQ,GAAG,EACXC,QAAQ,GAAG,EACXC,QAAQ,EACRC,SAAS,EACTC,GAAG,EACHC,SAAS,0DAA0D,EACnEC,QAAQ,6DAA6D,EACtE,GAAGT;IAEJ,oCAAoC;IACpC,IAAIU,QAAQ;IACZ,IAAIL,UAAUK,SAAS;IACvB,IAAIJ,WAAWI,SAAS;IACxB,IAAIT,SAAS,QAAQC,OAAO,QAAQE,UAAU,KAAKM,SAAS,KAAK,kBAAkB;IACnF,IAAIT,SAAS,QAAQC,OAAO,QAAQE,UAAU,KAAKM,SAAS,KAAK,mBAAmB;IACpF,IAAIN,UAAU,OAAOO,KAAKC,GAAG,CAACX,KAAKY,UAAU,CAAC,KAAKX,GAAGW,UAAU,CAAC,QAAQ,GACvEH,SAAS,KAAK,WAAW;IAC3B,IAAI,CAACA,OAAOA,QAAQ,KAAK,cAAc;IAEvC,MAAMI,OAAa;QACjBX;QACAF,MAAMA;QACNC,IAAIA;QACJE;QACAC;QACAC;QACAI;QACAH,KAAKA,OAAOQ,YAAYd,MAAMC,IAAIE,OAAOC;QACzCW,KAAK,GAAGf,OAAOC,KAAKI,aAAa,IAAI;QACrCW,WAAWT;QACXU,UAAUT;QACV,iBAAiB;QACjBU,WAAW,IAAM,CAAC,CAACd;QACnBe,aAAa,IAAM,CAAC,CAACd;QACrBe,aAAa,IAAMX,MAAMY,QAAQ,CAAC;QAClCC,kBAAkB,IAAMb,MAAMY,QAAQ,CAAC;QACvCE,mBAAmB,IAAMd,MAAMY,QAAQ,CAAC;QACxCG,WAAW,IAAMf,MAAMY,QAAQ,CAAC;IAClC;IAEA,OAAOR;AACT;AAEA;;CAEC,GACD,SAASC,YACPd,IAAY,EACZC,EAAU,EACVE,KAAkB,EAClBC,QAAsB;IAEtB,IAAID,UAAU,KAAK;QACjB,IAAIC,UAAU;YACZ,OAAO,GAAGJ,IAAI,CAAC,EAAE,CAAC,CAAC,EAAEC,IAAI;QAC3B;QACA,OAAOA;IACT;IAEA,MAAMwB,cAActB,MAAMuB,WAAW;IACrC,IAAItB,UAAU;QACZ,OAAO,GAAGqB,YAAY,CAAC,EAAExB,IAAI;IAC/B;IACA,OAAO,GAAGwB,cAAcxB,IAAI;AAC9B;AAKO,MAAMJ,aAAa;IACxB8B,MAAM7B,eAAe;QAAEE,MAAM;QAAMC,IAAI;QAAME,OAAO;QAAKG,KAAK;IAAK;IACnEsB,OAAO9B,eAAe;QAAEE,MAAM;QAAMC,IAAI;QAAME,OAAO;QAAKG,KAAK;IAAK;IACpEuB,OAAO/B,eAAe;QACpBE,MAAM;QACNC,IAAI;QACJE,OAAO;QACPD,OAAO;QACPI,KAAK;IACP;IACAwB,QAAQhC,eAAe;QAAEE,MAAM;QAAMC,IAAI;QAAME,OAAO;QAAKG,KAAK;IAAM;IACtEyB,iBAAiBjC,eAAe;QAC9BE,MAAM;QACNC,IAAI;QACJE,OAAO;QACPG,KAAK;IACP;IACA0B,SAASlC,eAAe;QACtBE,MAAM;QACNC,IAAI;QACJE,OAAO;QACPC,UAAU;QACVE,KAAK;IACP;IACA2B,WAAWnC,eAAe;QACxBE,MAAM;QACNC,IAAI;QACJE,OAAO;QACPE,WAAW;QACXC,KAAK;IACP;IACA4B,iBAAiBpC,eAAe;QAC9BE,MAAM;QACNC,IAAI;QACJE,OAAO;QACPE,WAAW;QACXC,KAAK;IACP;IACA6B,cAAcrC,eAAe;QAC3BE,MAAM;QACNC,IAAI;QACJE,OAAO;QACPG,KAAK;IACP;AACF"}