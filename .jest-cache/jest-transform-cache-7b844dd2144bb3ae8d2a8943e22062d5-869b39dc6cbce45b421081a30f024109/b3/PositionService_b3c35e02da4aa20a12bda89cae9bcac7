0249f618db3d235c81a7c32f92b4230a
/**
 * @file Position service implementation
 * @module services/database/PositionService
 *
 * @description
 * Business logic layer for managing chess endgame positions.
 * Handles position-related operations with caching and business rules,
 * completely decoupled from data access implementation through repository pattern.
 *
 * @remarks
 * Key features:
 * - Repository pattern for data abstraction
 * - LRU caching for performance optimization
 * - Comprehensive error handling with logging
 * - Support for CRUD operations
 * - Category and difficulty filtering
 * - Position navigation (next/previous)
 * - Full-text search capabilities
 *
 * The service acts as an intermediary between the UI layer and data layer,
 * enforcing business rules and providing caching for frequently accessed positions.
 *
 * @example
 * ```typescript
 * // Create service with repository
 * const repository = new SQLitePositionRepository();
 * const service = new PositionService(repository, {
 *   cacheEnabled: true,
 *   cacheSize: 100
 * });
 *
 * // Use service
 * const position = await service.getPosition(1);
 * const positions = await service.getPositionsByCategory('basic-checkmates');
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PositionService", {
    enumerable: true,
    get: function() {
        return PositionService;
    }
});
const _logging = require("../logging");
const _LRUCache = require("../../lib/cache/LRUCache");
const _errors = require("./errors");
const _constants = require("../../constants");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
const logger = (0, _logging.getLogger)().setContext("PositionService");
class PositionService {
    /**
   * Get a single position by ID
   *
   * @param {number} id - Position identifier
   * @returns {Promise<EndgamePosition | null>} Position if found, null otherwise
   * @throws {RepositoryError} If repository operation fails
   *
   * @description
   * Retrieves a position by ID with cache-first strategy.
   * If found in cache, returns immediately. Otherwise fetches
   * from repository and caches the result.
   *
   * @example
   * ```typescript
   * const position = await service.getPosition(1);
   * if (position) {
   *   console.log(position.title);
   * }
   * ```
   */ async getPosition(id) {
        var _this_cache;
        // Check cache first
        const cacheKey = id.toString();
        if ((_this_cache = this.cache) === null || _this_cache === void 0 ? void 0 : _this_cache.has(cacheKey)) {
            logger.debug("Cache hit for position", {
                id
            });
            return this.cache.get(cacheKey);
        }
        try {
            const position = await this.repository.getPosition(id);
            if (position && this.cache) {
                this.cache.set(cacheKey, position);
            }
            return position;
        } catch (error) {
            logger.error("Failed to get position", {
                id,
                error
            });
            throw new _errors.RepositoryError("getPosition", error);
        }
    }
    /**
   * Get all positions
   *
   * @returns {Promise<EndgamePosition[]>} Array of all positions
   * @throws {RepositoryError} If repository operation fails
   *
   * @description
   * Retrieves all positions from the repository and caches
   * each position individually for future single-position lookups.
   *
   * @remarks
   * Use with caution on large datasets as this loads all positions
   * into memory. Consider using pagination or filtering for better
   * performance with large position databases.
   *
   * @example
   * ```typescript
   * const allPositions = await service.getAllPositions();
   * console.log(`Total positions: ${allPositions.length}`);
   * ```
   */ async getAllPositions() {
        try {
            const positions = await this.repository.getAllPositions();
            // Cache individual positions
            if (this.cache) {
                positions.forEach((position)=>{
                    this.cache.set(position.id.toString(), position);
                });
            }
            return positions;
        } catch (error) {
            logger.error("Failed to get all positions", {
                error
            });
            throw new _errors.RepositoryError("getAllPositions", error);
        }
    }
    /**
   * Get positions by category
   *
   * @param {string} category - Category identifier (e.g., 'basic-checkmates')
   * @returns {Promise<EndgamePosition[]>} Positions in the category
   *
   * @description
   * Retrieves all positions belonging to a specific category.
   * Results are cached individually for improved performance
   * on subsequent single-position lookups.
   *
   * @example
   * ```typescript
   * const checkmates = await service.getPositionsByCategory('basic-checkmates');
   * const rookEndgames = await service.getPositionsByCategory('rook-endgames');
   * ```
   */ async getPositionsByCategory(category) {
        try {
            const positions = await this.repository.getPositionsByCategory(category);
            // Cache individual positions
            if (this.cache) {
                positions.forEach((position)=>{
                    this.cache.set(position.id.toString(), position);
                });
            }
            return positions;
        } catch (error) {
            logger.error("Failed to get positions by category", {
                category,
                error
            });
            return [];
        }
    }
    /**
   * Get positions by difficulty
   * @param difficulty
   */ async getPositionsByDifficulty(difficulty) {
        try {
            const positions = await this.repository.getPositionsByDifficulty(difficulty);
            // Cache individual positions
            if (this.cache) {
                positions.forEach((position)=>{
                    this.cache.set(position.id.toString(), position);
                });
            }
            return positions;
        } catch (error) {
            logger.error("Failed to get positions by difficulty", {
                difficulty,
                error
            });
            return [];
        }
    }
    /**
   * Search positions by title or description
   *
   * @param {string} searchTerm - Search query
   * @returns {Promise<EndgamePosition[]>} Matching positions
   *
   * @description
   * Performs full-text search across position titles and descriptions.
   * Empty or whitespace-only search terms return empty results.
   * Search is delegated to the repository implementation.
   *
   * @example
   * ```typescript
   * const results = await service.searchPositions('rook checkmate');
   * const queenEndgames = await service.searchPositions('queen vs pawn');
   * ```
   */ async searchPositions(searchTerm) {
        if (!searchTerm.trim()) {
            return [];
        }
        try {
            const positions = await this.repository.searchPositions(searchTerm);
            // Cache individual positions
            if (this.cache) {
                positions.forEach((position)=>{
                    this.cache.set(position.id.toString(), position);
                });
            }
            return positions;
        } catch (error) {
            logger.error("Failed to search positions", {
                searchTerm,
                error
            });
            return [];
        }
    }
    /**
   * Clear the cache
   *
   * @description
   * Removes all cached positions from memory.
   * Useful for testing or when positions are updated externally.
   *
   * @example
   * ```typescript
   * service.clearCache();
   * console.log('Cache cleared');
   * ```
   */ clearCache() {
        var _this_cache;
        (_this_cache = this.cache) === null || _this_cache === void 0 ? void 0 : _this_cache.clear();
        logger.info("Position cache cleared");
    }
    /**
   * Get cache statistics
   *
   * @returns {Object} Cache statistics
   * @returns {number} returns.size - Number of cached items
   * @returns {number[]} returns.keys - Array of cached position IDs
   * @returns {boolean} returns.enabled - Whether caching is enabled
   *
   * @description
   * Provides insight into cache usage for monitoring and debugging.
   *
   * @example
   * ```typescript
   * const stats = service.getCacheStats();
   * console.log(`Cached positions: ${stats.size}`);
   * console.log(`Cache enabled: ${stats.enabled}`);
   * ```
   */ getCacheStats() {
        if (!this.cache) {
            return {
                size: 0,
                keys: [],
                enabled: false
            };
        }
        const stats = this.cache.getStats();
        const keys = this.cache.keys().map((key)=>parseInt(key, 10));
        return {
            size: stats.size,
            keys: keys,
            enabled: true
        };
    }
    /**
   * Get all categories
   */ async getCategories() {
        try {
            return await this.repository.getCategories();
        } catch (error) {
            logger.error("Failed to get categories", {
                error
            });
            return [];
        }
    }
    /**
   * Get all chapters
   */ async getChapters() {
        try {
            return await this.repository.getChapters();
        } catch (error) {
            logger.error("Failed to get chapters", {
                error
            });
            return [];
        }
    }
    /**
   * Get chapters by category
   * @param categoryId
   */ async getChaptersByCategory(categoryId) {
        try {
            return await this.repository.getChaptersByCategory(categoryId);
        } catch (error) {
            logger.error("Failed to get chapters by category", {
                categoryId,
                error
            });
            return [];
        }
    }
    /**
   * Get next position in sequence (for navigation)
   *
   * @param {number} currentId - Current position ID
   * @param {string} [categoryId] - Optional category constraint
   * @returns {Promise<EndgamePosition | null>} Next position or null
   *
   * @description
   * Retrieves the next position in sequence, optionally within
   * the same category. Used for navigation between positions.
   *
   * @example
   * ```typescript
   * // Get next position in any category
   * const next = await service.getNextPosition(5);
   *
   * // Get next position in same category
   * const nextInCategory = await service.getNextPosition(5, 'rook-endgames');
   * ```
   */ async getNextPosition(currentId, categoryId) {
        try {
            const position = await this.repository.getNextPosition(currentId, categoryId);
            if (position && this.cache) {
                this.cache.set(position.id.toString(), position);
            }
            return position;
        } catch (error) {
            logger.error("Failed to get next position", {
                currentId,
                categoryId,
                error
            });
            return null;
        }
    }
    /**
   * Get previous position in sequence (for navigation)
   * @param currentId
   * @param categoryId
   */ async getPreviousPosition(currentId, categoryId) {
        try {
            const position = await this.repository.getPreviousPosition(currentId, categoryId);
            if (position && this.cache) {
                this.cache.set(position.id.toString(), position);
            }
            return position;
        } catch (error) {
            logger.error("Failed to get previous position", {
                currentId,
                categoryId,
                error
            });
            return null;
        }
    }
    /**
   * Get total position count
   */ async getTotalPositionCount() {
        try {
            return await this.repository.getTotalPositionCount();
        } catch (error) {
            logger.error("Failed to get position count", {
                error
            });
            return 0;
        }
    }
    /**
   * Get position count by category
   * @param categoryId
   */ async getPositionCountByCategory(categoryId) {
        try {
            return await this.repository.getPositionCountByCategory(categoryId);
        } catch (error) {
            logger.error("Failed to get position count by category", {
                categoryId,
                error
            });
            return 0;
        }
    }
    /**
   * Create a new position (admin functionality)
   *
   * @param {Omit<EndgamePosition, 'id'>} position - Position data without ID
   * @returns {Promise<EndgamePosition | null>} Created position or null on failure
   *
   * @description
   * Creates a new position in the repository. The ID is auto-generated
   * by the storage backend. Created position is automatically cached.
   *
   * @remarks
   * This is an administrative function that may require special
   * permissions in production environments.
   *
   * @example
   * ```typescript
   * const newPosition = await service.createPosition({
   *   title: 'Queen vs Rook',
   *   fen: '8/8/8/8/3Q4/8/8/3rk3 w - - 0 1',
   *   category: 'queen-endgames',
   *   difficulty: 'advanced'
   * });
   * ```
   */ async createPosition(position) {
        try {
            const created = await this.repository.createPosition(position);
            if (this.cache) {
                this.cache.set(created.id.toString(), created);
            }
            logger.info("Position created", {
                id: created.id
            });
            return created;
        } catch (error) {
            logger.error("Failed to create position", {
                error
            });
            return null;
        }
    }
    /**
   * Update a position (admin functionality)
   * @param id
   * @param updates
   */ async updatePosition(id, updates) {
        try {
            const updated = await this.repository.updatePosition(id, updates);
            if (updated && this.cache) {
                this.cache.set(id.toString(), updated);
            }
            logger.info("Position updated", {
                id
            });
            return updated;
        } catch (error) {
            logger.error("Failed to update position", {
                id,
                error
            });
            return null;
        }
    }
    /**
   * Delete a position (admin functionality)
   * @param id
   */ async deletePosition(id) {
        try {
            const deleted = await this.repository.deletePosition(id);
            if (deleted && this.cache) {
                this.cache.delete(id.toString());
            }
            logger.info("Position deleted", {
                id
            });
            return deleted;
        } catch (error) {
            logger.error("Failed to delete position", {
                id,
                error
            });
            return false;
        }
    }
    /**
   * Creates a new PositionService instance
   *
   * @param {IPositionRepository} repository - Data access repository
   * @param {IPositionServiceConfig} [config={}] - Service configuration
   *
   * @example
   * ```typescript
   * const service = new PositionService(repository, {
   *   cacheEnabled: true,
   *   cacheSize: 100
   * });
   * ```
   */ constructor(repository, config = {}){
        _define_property(this, "repository", void 0);
        _define_property(this, "cache", void 0);
        _define_property(this, "config", void 0);
        this.repository = repository;
        this.config = {
            cacheEnabled: true,
            cacheSize: _constants.CACHE.POSITION_CACHE_SIZE,
            cacheTTL: _constants.CACHE.ANALYSIS_CACHE_TTL,
            ...config
        };
        if (this.config.cacheEnabled) {
            this.cache = new _LRUCache.LRUCache(this.config.cacheSize);
        }
        logger.info("PositionService initialized", {
            config: this.config
        });
    }
}

//# sourceMappingURL=data:application/json;base64,