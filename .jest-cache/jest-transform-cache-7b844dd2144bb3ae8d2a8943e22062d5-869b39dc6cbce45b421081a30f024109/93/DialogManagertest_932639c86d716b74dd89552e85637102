2cb22dda072a06bf5eaadb23f45d3a7a
/**
 * @file Tests for DialogManager component
 * @module tests/unit/components/training/DialogManager
 * 
 * @description
 * Comprehensive tests for the DialogManager component that handles
 * move error and success dialogs in the chess training interface.
 * 
 * Tests cover:
 * - Dialog rendering based on state props
 * - Callback delegation to parent handlers
 * - Proper dialog component integration
 * - Accessibility and interaction patterns
 */ "use strict";
// Mock the dialog components
jest.mock('@shared/components/ui/MoveErrorDialog', ()=>({
        MoveErrorDialog: ({ isOpen, onClose, onTakeBack, onRestart, onShowBestMove, wdlBefore, wdlAfter, bestMove })=>isOpen ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "move-error-dialog",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onClose,
                        "data-testid": "error-close",
                        children: "Close"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onTakeBack,
                        "data-testid": "error-takeback",
                        children: "Take Back"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onRestart,
                        "data-testid": "error-restart",
                        children: "Restart"
                    }),
                    onShowBestMove && /*#__PURE__*/ (0, _jsxruntime.jsxs)("button", {
                        onClick: onShowBestMove,
                        "data-testid": "error-show-best",
                        children: [
                            "Show Best: ",
                            bestMove
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        "data-testid": "wdl-before",
                        children: wdlBefore
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        "data-testid": "wdl-after",
                        children: wdlAfter
                    })
                ]
            }) : null
    }));
jest.mock('@shared/components/ui/MoveSuccessDialog', ()=>({
        MoveSuccessDialog: ({ isOpen, onClose, onContinue, promotionPiece, moveDescription })=>isOpen ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "move-success-dialog",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onClose,
                        "data-testid": "success-close",
                        children: "Close"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onContinue,
                        "data-testid": "success-continue",
                        children: "Continue"
                    }),
                    promotionPiece && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        "data-testid": "promotion-piece",
                        children: promotionPiece
                    }),
                    moveDescription && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        "data-testid": "move-description",
                        children: moveDescription
                    })
                ]
            }) : null
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _DialogManager = require("../../../../shared/components/training/DialogManager");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('DialogManager', ()=>{
    const mockHandlers = {
        onErrorTakeBack: jest.fn(),
        onErrorRestart: jest.fn(),
        onErrorContinue: jest.fn(),
        onErrorShowBestMove: jest.fn(),
        onSuccessClose: jest.fn(),
        onSuccessContinue: jest.fn()
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Error Dialog Handling', ()=>{
        it('renders error dialog when errorDialog.isOpen is true', ()=>{
            const errorDialog = {
                isOpen: true,
                wdlBefore: 1,
                wdlAfter: -1,
                bestMove: 'Kh1'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: null,
                ...mockHandlers
            }));
            expect(_react1.screen.getByTestId('move-error-dialog')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('wdl-before')).toHaveTextContent('1');
            expect(_react1.screen.getByTestId('wdl-after')).toHaveTextContent('-1');
        });
        it('does not render error dialog when errorDialog is null', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: null,
                successDialog: null,
                ...mockHandlers
            }));
            expect(_react1.screen.queryByTestId('move-error-dialog')).not.toBeInTheDocument();
        });
        it('does not render error dialog when errorDialog.isOpen is false', ()=>{
            const errorDialog = {
                isOpen: false,
                wdlBefore: 1,
                wdlAfter: -1
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: null,
                ...mockHandlers
            }));
            expect(_react1.screen.queryByTestId('move-error-dialog')).not.toBeInTheDocument();
        });
        it('calls onErrorTakeBack when take back button is clicked', async ()=>{
            const user = _userevent.default.setup();
            const errorDialog = {
                isOpen: true,
                wdlBefore: 1,
                wdlAfter: -1
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: null,
                ...mockHandlers
            }));
            await user.click(_react1.screen.getByTestId('error-takeback'));
            expect(mockHandlers.onErrorTakeBack).toHaveBeenCalledTimes(1);
        });
        it('calls onErrorRestart when restart button is clicked', async ()=>{
            const user = _userevent.default.setup();
            const errorDialog = {
                isOpen: true,
                wdlBefore: 1,
                wdlAfter: -1
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: null,
                ...mockHandlers
            }));
            await user.click(_react1.screen.getByTestId('error-restart'));
            expect(mockHandlers.onErrorRestart).toHaveBeenCalledTimes(1);
        });
        it('calls onErrorContinue when close button is clicked', async ()=>{
            const user = _userevent.default.setup();
            const errorDialog = {
                isOpen: true,
                wdlBefore: 1,
                wdlAfter: -1
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: null,
                ...mockHandlers
            }));
            await user.click(_react1.screen.getByTestId('error-close'));
            expect(mockHandlers.onErrorContinue).toHaveBeenCalledTimes(1);
        });
        it('shows and calls show best move handler when bestMove is provided', async ()=>{
            const user = _userevent.default.setup();
            const errorDialog = {
                isOpen: true,
                wdlBefore: 1,
                wdlAfter: -1,
                bestMove: 'Qh8+'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: null,
                ...mockHandlers
            }));
            const showBestButton = _react1.screen.getByTestId('error-show-best');
            expect(showBestButton).toBeInTheDocument();
            expect(showBestButton).toHaveTextContent('Show Best: Qh8+');
            await user.click(showBestButton);
            expect(mockHandlers.onErrorShowBestMove).toHaveBeenCalledTimes(1);
        });
        it('does not show best move button when bestMove is not provided', ()=>{
            const errorDialog = {
                isOpen: true,
                wdlBefore: 1,
                wdlAfter: -1
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: null,
                ...mockHandlers
            }));
            expect(_react1.screen.queryByTestId('error-show-best')).not.toBeInTheDocument();
        });
        it('provides default wdl values when not specified', ()=>{
            const errorDialog = {
                isOpen: true
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: null,
                ...mockHandlers
            }));
            expect(_react1.screen.getByTestId('wdl-before')).toHaveTextContent('0');
            expect(_react1.screen.getByTestId('wdl-after')).toHaveTextContent('0');
        });
    });
    describe('Success Dialog Handling', ()=>{
        it('renders success dialog when successDialog.isOpen is true', ()=>{
            const successDialog = {
                isOpen: true,
                promotionPiece: 'Q',
                moveDescription: 'Excellent move!'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: null,
                successDialog: successDialog,
                ...mockHandlers
            }));
            expect(_react1.screen.getByTestId('move-success-dialog')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('promotion-piece')).toHaveTextContent('Q');
            expect(_react1.screen.getByTestId('move-description')).toHaveTextContent('Excellent move!');
        });
        it('does not render success dialog when successDialog is null', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: null,
                successDialog: null,
                ...mockHandlers
            }));
            expect(_react1.screen.queryByTestId('move-success-dialog')).not.toBeInTheDocument();
        });
        it('does not render success dialog when successDialog.isOpen is false', ()=>{
            const successDialog = {
                isOpen: false,
                promotionPiece: 'Q'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: null,
                successDialog: successDialog,
                ...mockHandlers
            }));
            expect(_react1.screen.queryByTestId('move-success-dialog')).not.toBeInTheDocument();
        });
        it('calls onSuccessClose when close button is clicked', async ()=>{
            const user = _userevent.default.setup();
            const successDialog = {
                isOpen: true,
                moveDescription: 'Great job!'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: null,
                successDialog: successDialog,
                ...mockHandlers
            }));
            await user.click(_react1.screen.getByTestId('success-close'));
            expect(mockHandlers.onSuccessClose).toHaveBeenCalledTimes(1);
        });
        it('calls onSuccessContinue when continue button is clicked', async ()=>{
            const user = _userevent.default.setup();
            const successDialog = {
                isOpen: true,
                moveDescription: 'Perfect!'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: null,
                successDialog: successDialog,
                ...mockHandlers
            }));
            await user.click(_react1.screen.getByTestId('success-continue'));
            expect(mockHandlers.onSuccessContinue).toHaveBeenCalledTimes(1);
        });
        it('handles success dialog without optional props', ()=>{
            const successDialog = {
                isOpen: true
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: null,
                successDialog: successDialog,
                ...mockHandlers
            }));
            expect(_react1.screen.getByTestId('move-success-dialog')).toBeInTheDocument();
            expect(_react1.screen.queryByTestId('promotion-piece')).not.toBeInTheDocument();
            expect(_react1.screen.queryByTestId('move-description')).not.toBeInTheDocument();
        });
    });
    describe('Multiple Dialog States', ()=>{
        it('can render both dialogs simultaneously if both are open', ()=>{
            const errorDialog = {
                isOpen: true,
                wdlBefore: 1,
                wdlAfter: -1
            };
            const successDialog = {
                isOpen: true,
                moveDescription: 'Well done!'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: successDialog,
                ...mockHandlers
            }));
            expect(_react1.screen.getByTestId('move-error-dialog')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('move-success-dialog')).toBeInTheDocument();
        });
        it('renders nothing when both dialogs are closed', ()=>{
            const errorDialog = {
                isOpen: false,
                wdlBefore: 1,
                wdlAfter: -1
            };
            const successDialog = {
                isOpen: false,
                moveDescription: 'Test'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: successDialog,
                ...mockHandlers
            }));
            expect(_react1.screen.queryByTestId('move-error-dialog')).not.toBeInTheDocument();
            expect(_react1.screen.queryByTestId('move-success-dialog')).not.toBeInTheDocument();
        });
    });
    describe('Component Props Validation', ()=>{
        it('passes all required props to error dialog component', ()=>{
            const errorDialog = {
                isOpen: true,
                wdlBefore: 2,
                wdlAfter: 0,
                bestMove: 'Rxd7'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: null,
                ...mockHandlers
            }));
            const dialog = _react1.screen.getByTestId('move-error-dialog');
            expect(dialog).toBeInTheDocument();
            // Verify all buttons are present
            expect(_react1.screen.getByTestId('error-close')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('error-takeback')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('error-restart')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('error-show-best')).toBeInTheDocument();
        });
        it('passes all required props to success dialog component', ()=>{
            const successDialog = {
                isOpen: true,
                promotionPiece: 'R',
                moveDescription: 'Brilliant sacrifice!'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: null,
                successDialog: successDialog,
                ...mockHandlers
            }));
            const dialog = _react1.screen.getByTestId('move-success-dialog');
            expect(dialog).toBeInTheDocument();
            // Verify all buttons are present
            expect(_react1.screen.getByTestId('success-close')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('success-continue')).toBeInTheDocument();
        });
    });
    describe('Component Integration', ()=>{
        it('maintains proper component display name', ()=>{
            expect(_DialogManager.DialogManager.displayName).toBe('DialogManager');
        });
        it('handles undefined callback gracefully for optional show best move', ()=>{
            const errorDialog = {
                isOpen: true,
                wdlBefore: 1,
                wdlAfter: -1,
                bestMove: 'Kg7'
            };
            const handlersWithoutShowBest = {
                ...mockHandlers,
                onErrorShowBestMove: undefined
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: errorDialog,
                successDialog: null,
                ...handlersWithoutShowBest
            }));
            // Should not render show best move button when callback is undefined
            expect(_react1.screen.queryByTestId('error-show-best')).not.toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,