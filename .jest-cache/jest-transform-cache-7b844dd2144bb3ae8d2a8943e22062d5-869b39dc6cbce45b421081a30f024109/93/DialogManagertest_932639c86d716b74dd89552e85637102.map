{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/components/training/DialogManager.test.tsx"],"sourcesContent":["/**\n * @file Tests for DialogManager component\n * @module tests/unit/components/training/DialogManager\n * \n * @description\n * Comprehensive tests for the DialogManager component that handles\n * move error and success dialogs in the chess training interface.\n * \n * Tests cover:\n * - Dialog rendering based on state props\n * - Callback delegation to parent handlers\n * - Proper dialog component integration\n * - Accessibility and interaction patterns\n */\n\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { DialogManager } from '@shared/components/training/DialogManager';\n\n// Mock the dialog components\njest.mock('@shared/components/ui/MoveErrorDialog', () => ({\n  MoveErrorDialog: ({ \n    isOpen, \n    onClose, \n    onTakeBack, \n    onRestart, \n    onShowBestMove,\n    wdlBefore,\n    wdlAfter,\n    bestMove \n  }: any) => (\n    isOpen ? (\n      <div data-testid=\"move-error-dialog\">\n        <button onClick={onClose} data-testid=\"error-close\">Close</button>\n        <button onClick={onTakeBack} data-testid=\"error-takeback\">Take Back</button>\n        <button onClick={onRestart} data-testid=\"error-restart\">Restart</button>\n        {onShowBestMove && (\n          <button onClick={onShowBestMove} data-testid=\"error-show-best\">\n            Show Best: {bestMove}\n          </button>\n        )}\n        <span data-testid=\"wdl-before\">{wdlBefore}</span>\n        <span data-testid=\"wdl-after\">{wdlAfter}</span>\n      </div>\n    ) : null\n  )\n}));\n\njest.mock('@shared/components/ui/MoveSuccessDialog', () => ({\n  MoveSuccessDialog: ({ \n    isOpen, \n    onClose, \n    onContinue, \n    promotionPiece, \n    moveDescription \n  }: any) => (\n    isOpen ? (\n      <div data-testid=\"move-success-dialog\">\n        <button onClick={onClose} data-testid=\"success-close\">Close</button>\n        <button onClick={onContinue} data-testid=\"success-continue\">Continue</button>\n        {promotionPiece && <span data-testid=\"promotion-piece\">{promotionPiece}</span>}\n        {moveDescription && <span data-testid=\"move-description\">{moveDescription}</span>}\n      </div>\n    ) : null\n  )\n}));\n\ndescribe('DialogManager', () => {\n  const mockHandlers = {\n    onErrorTakeBack: jest.fn(),\n    onErrorRestart: jest.fn(),\n    onErrorContinue: jest.fn(),\n    onErrorShowBestMove: jest.fn(),\n    onSuccessClose: jest.fn(),\n    onSuccessContinue: jest.fn(),\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Error Dialog Handling', () => {\n    it('renders error dialog when errorDialog.isOpen is true', () => {\n      const errorDialog = {\n        isOpen: true,\n        wdlBefore: 1,\n        wdlAfter: -1,\n        bestMove: 'Kh1',\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={null}\n          {...mockHandlers}\n        />\n      );\n\n      expect(screen.getByTestId('move-error-dialog')).toBeInTheDocument();\n      expect(screen.getByTestId('wdl-before')).toHaveTextContent('1');\n      expect(screen.getByTestId('wdl-after')).toHaveTextContent('-1');\n    });\n\n    it('does not render error dialog when errorDialog is null', () => {\n      render(\n        <DialogManager\n          errorDialog={null}\n          successDialog={null}\n          {...mockHandlers}\n        />\n      );\n\n      expect(screen.queryByTestId('move-error-dialog')).not.toBeInTheDocument();\n    });\n\n    it('does not render error dialog when errorDialog.isOpen is false', () => {\n      const errorDialog = {\n        isOpen: false,\n        wdlBefore: 1,\n        wdlAfter: -1,\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={null}\n          {...mockHandlers}\n        />\n      );\n\n      expect(screen.queryByTestId('move-error-dialog')).not.toBeInTheDocument();\n    });\n\n    it('calls onErrorTakeBack when take back button is clicked', async () => {\n      const user = userEvent.setup();\n      const errorDialog = {\n        isOpen: true,\n        wdlBefore: 1,\n        wdlAfter: -1,\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={null}\n          {...mockHandlers}\n        />\n      );\n\n      await user.click(screen.getByTestId('error-takeback'));\n      expect(mockHandlers.onErrorTakeBack).toHaveBeenCalledTimes(1);\n    });\n\n    it('calls onErrorRestart when restart button is clicked', async () => {\n      const user = userEvent.setup();\n      const errorDialog = {\n        isOpen: true,\n        wdlBefore: 1,\n        wdlAfter: -1,\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={null}\n          {...mockHandlers}\n        />\n      );\n\n      await user.click(screen.getByTestId('error-restart'));\n      expect(mockHandlers.onErrorRestart).toHaveBeenCalledTimes(1);\n    });\n\n    it('calls onErrorContinue when close button is clicked', async () => {\n      const user = userEvent.setup();\n      const errorDialog = {\n        isOpen: true,\n        wdlBefore: 1,\n        wdlAfter: -1,\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={null}\n          {...mockHandlers}\n        />\n      );\n\n      await user.click(screen.getByTestId('error-close'));\n      expect(mockHandlers.onErrorContinue).toHaveBeenCalledTimes(1);\n    });\n\n    it('shows and calls show best move handler when bestMove is provided', async () => {\n      const user = userEvent.setup();\n      const errorDialog = {\n        isOpen: true,\n        wdlBefore: 1,\n        wdlAfter: -1,\n        bestMove: 'Qh8+',\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={null}\n          {...mockHandlers}\n        />\n      );\n\n      const showBestButton = screen.getByTestId('error-show-best');\n      expect(showBestButton).toBeInTheDocument();\n      expect(showBestButton).toHaveTextContent('Show Best: Qh8+');\n\n      await user.click(showBestButton);\n      expect(mockHandlers.onErrorShowBestMove).toHaveBeenCalledTimes(1);\n    });\n\n    it('does not show best move button when bestMove is not provided', () => {\n      const errorDialog = {\n        isOpen: true,\n        wdlBefore: 1,\n        wdlAfter: -1,\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={null}\n          {...mockHandlers}\n        />\n      );\n\n      expect(screen.queryByTestId('error-show-best')).not.toBeInTheDocument();\n    });\n\n    it('provides default wdl values when not specified', () => {\n      const errorDialog = {\n        isOpen: true,\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={null}\n          {...mockHandlers}\n        />\n      );\n\n      expect(screen.getByTestId('wdl-before')).toHaveTextContent('0');\n      expect(screen.getByTestId('wdl-after')).toHaveTextContent('0');\n    });\n  });\n\n  describe('Success Dialog Handling', () => {\n    it('renders success dialog when successDialog.isOpen is true', () => {\n      const successDialog = {\n        isOpen: true,\n        promotionPiece: 'Q',\n        moveDescription: 'Excellent move!',\n      };\n\n      render(\n        <DialogManager\n          errorDialog={null}\n          successDialog={successDialog}\n          {...mockHandlers}\n        />\n      );\n\n      expect(screen.getByTestId('move-success-dialog')).toBeInTheDocument();\n      expect(screen.getByTestId('promotion-piece')).toHaveTextContent('Q');\n      expect(screen.getByTestId('move-description')).toHaveTextContent('Excellent move!');\n    });\n\n    it('does not render success dialog when successDialog is null', () => {\n      render(\n        <DialogManager\n          errorDialog={null}\n          successDialog={null}\n          {...mockHandlers}\n        />\n      );\n\n      expect(screen.queryByTestId('move-success-dialog')).not.toBeInTheDocument();\n    });\n\n    it('does not render success dialog when successDialog.isOpen is false', () => {\n      const successDialog = {\n        isOpen: false,\n        promotionPiece: 'Q',\n      };\n\n      render(\n        <DialogManager\n          errorDialog={null}\n          successDialog={successDialog}\n          {...mockHandlers}\n        />\n      );\n\n      expect(screen.queryByTestId('move-success-dialog')).not.toBeInTheDocument();\n    });\n\n    it('calls onSuccessClose when close button is clicked', async () => {\n      const user = userEvent.setup();\n      const successDialog = {\n        isOpen: true,\n        moveDescription: 'Great job!',\n      };\n\n      render(\n        <DialogManager\n          errorDialog={null}\n          successDialog={successDialog}\n          {...mockHandlers}\n        />\n      );\n\n      await user.click(screen.getByTestId('success-close'));\n      expect(mockHandlers.onSuccessClose).toHaveBeenCalledTimes(1);\n    });\n\n    it('calls onSuccessContinue when continue button is clicked', async () => {\n      const user = userEvent.setup();\n      const successDialog = {\n        isOpen: true,\n        moveDescription: 'Perfect!',\n      };\n\n      render(\n        <DialogManager\n          errorDialog={null}\n          successDialog={successDialog}\n          {...mockHandlers}\n        />\n      );\n\n      await user.click(screen.getByTestId('success-continue'));\n      expect(mockHandlers.onSuccessContinue).toHaveBeenCalledTimes(1);\n    });\n\n    it('handles success dialog without optional props', () => {\n      const successDialog = {\n        isOpen: true,\n      };\n\n      render(\n        <DialogManager\n          errorDialog={null}\n          successDialog={successDialog}\n          {...mockHandlers}\n        />\n      );\n\n      expect(screen.getByTestId('move-success-dialog')).toBeInTheDocument();\n      expect(screen.queryByTestId('promotion-piece')).not.toBeInTheDocument();\n      expect(screen.queryByTestId('move-description')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Multiple Dialog States', () => {\n    it('can render both dialogs simultaneously if both are open', () => {\n      const errorDialog = {\n        isOpen: true,\n        wdlBefore: 1,\n        wdlAfter: -1,\n      };\n\n      const successDialog = {\n        isOpen: true,\n        moveDescription: 'Well done!',\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={successDialog}\n          {...mockHandlers}\n        />\n      );\n\n      expect(screen.getByTestId('move-error-dialog')).toBeInTheDocument();\n      expect(screen.getByTestId('move-success-dialog')).toBeInTheDocument();\n    });\n\n    it('renders nothing when both dialogs are closed', () => {\n      const errorDialog = {\n        isOpen: false,\n        wdlBefore: 1,\n        wdlAfter: -1,\n      };\n\n      const successDialog = {\n        isOpen: false,\n        moveDescription: 'Test',\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={successDialog}\n          {...mockHandlers}\n        />\n      );\n\n      expect(screen.queryByTestId('move-error-dialog')).not.toBeInTheDocument();\n      expect(screen.queryByTestId('move-success-dialog')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Component Props Validation', () => {\n    it('passes all required props to error dialog component', () => {\n      const errorDialog = {\n        isOpen: true,\n        wdlBefore: 2,\n        wdlAfter: 0,\n        bestMove: 'Rxd7',\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={null}\n          {...mockHandlers}\n        />\n      );\n\n      const dialog = screen.getByTestId('move-error-dialog');\n      expect(dialog).toBeInTheDocument();\n      \n      // Verify all buttons are present\n      expect(screen.getByTestId('error-close')).toBeInTheDocument();\n      expect(screen.getByTestId('error-takeback')).toBeInTheDocument();\n      expect(screen.getByTestId('error-restart')).toBeInTheDocument();\n      expect(screen.getByTestId('error-show-best')).toBeInTheDocument();\n    });\n\n    it('passes all required props to success dialog component', () => {\n      const successDialog = {\n        isOpen: true,\n        promotionPiece: 'R',\n        moveDescription: 'Brilliant sacrifice!',\n      };\n\n      render(\n        <DialogManager\n          errorDialog={null}\n          successDialog={successDialog}\n          {...mockHandlers}\n        />\n      );\n\n      const dialog = screen.getByTestId('move-success-dialog');\n      expect(dialog).toBeInTheDocument();\n      \n      // Verify all buttons are present\n      expect(screen.getByTestId('success-close')).toBeInTheDocument();\n      expect(screen.getByTestId('success-continue')).toBeInTheDocument();\n    });\n  });\n\n  describe('Component Integration', () => {\n    it('maintains proper component display name', () => {\n      expect(DialogManager.displayName).toBe('DialogManager');\n    });\n\n    it('handles undefined callback gracefully for optional show best move', () => {\n      const errorDialog = {\n        isOpen: true,\n        wdlBefore: 1,\n        wdlAfter: -1,\n        bestMove: 'Kg7',\n      };\n\n      const handlersWithoutShowBest = {\n        ...mockHandlers,\n        onErrorShowBestMove: undefined,\n      };\n\n      render(\n        <DialogManager\n          errorDialog={errorDialog}\n          successDialog={null}\n          {...handlersWithoutShowBest}\n        />\n      );\n\n      // Should not render show best move button when callback is undefined\n      expect(screen.queryByTestId('error-show-best')).not.toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","MoveErrorDialog","isOpen","onClose","onTakeBack","onRestart","onShowBestMove","wdlBefore","wdlAfter","bestMove","div","data-testid","button","onClick","span","MoveSuccessDialog","onContinue","promotionPiece","moveDescription","describe","mockHandlers","onErrorTakeBack","fn","onErrorRestart","onErrorContinue","onErrorShowBestMove","onSuccessClose","onSuccessContinue","beforeEach","clearAllMocks","it","errorDialog","render","DialogManager","successDialog","expect","screen","getByTestId","toBeInTheDocument","toHaveTextContent","queryByTestId","not","user","userEvent","setup","click","toHaveBeenCalledTimes","showBestButton","dialog","displayName","toBe","handlersWithoutShowBest","undefined"],"mappings":"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"}