6e338464b8e166286f56209f18b185c3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useToast", {
    enumerable: true,
    get: function() {
        return useToast;
    }
});
const _react = require("react");
const useToast = ()=>{
    const [toasts, setToasts] = (0, _react.useState)([]);
    const removeToast = (0, _react.useCallback)((id)=>{
        setToasts((prev)=>prev.filter((toast)=>toast.id !== id));
    }, []);
    const addToast = (0, _react.useCallback)((message, type = "info", duration)=>{
        const id = Math.random().toString(36).substr(2, 9);
        const newToast = {
            id,
            message,
            type,
            duration
        };
        setToasts((prev)=>[
                ...prev,
                newToast
            ]);
        // Auto-dismiss if duration is provided
        if (duration) {
            setTimeout(()=>{
                removeToast(id);
            }, duration);
        }
    }, [
        removeToast
    ]);
    const showSuccess = (0, _react.useCallback)((message, duration)=>{
        addToast(message, "success", duration);
    }, [
        addToast
    ]);
    const showError = (0, _react.useCallback)((message, duration)=>{
        addToast(message, "error", duration);
    }, [
        addToast
    ]);
    const showInfo = (0, _react.useCallback)((message, duration)=>{
        addToast(message, "info", duration);
    }, [
        addToast
    ]);
    const showWarning = (0, _react.useCallback)((message, duration)=>{
        addToast(message, "warning", duration);
    }, [
        addToast
    ]);
    const clearAllToasts = (0, _react.useCallback)(()=>{
        setToasts([]);
    }, []);
    return {
        toasts,
        addToast,
        removeToast,
        showSuccess,
        showError,
        showInfo,
        showWarning,
        clearAllToasts,
        // Aliases for backward compatibility with tests
        dismissToast: removeToast,
        clearToasts: clearAllToasts
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL2hvb2tzL3VzZVRvYXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuXG4vKipcbiAqIFRvYXN0IG5vdGlmaWNhdGlvbiBvYmplY3RcbiAqIEBpbnRlcmZhY2UgVG9hc3RcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZCAtIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgdG9hc3RcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtZXNzYWdlIC0gTWVzc2FnZSB0byBkaXNwbGF5XG4gKiBAcHJvcGVydHkgeydzdWNjZXNzJyB8ICdlcnJvcicgfCAnaW5mbycgfCAnd2FybmluZyd9IHR5cGUgLSBUb2FzdCB0eXBlIGZvciBzdHlsaW5nXG4gKiBAcHJvcGVydHkge251bWJlcn0gW2R1cmF0aW9uXSAtIEF1dG8tZGlzbWlzcyBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHNcbiAqL1xuaW50ZXJmYWNlIFRvYXN0IHtcbiAgaWQ6IHN0cmluZztcbiAgbWVzc2FnZTogc3RyaW5nO1xuICB0eXBlOiBcInN1Y2Nlc3NcIiB8IFwiZXJyb3JcIiB8IFwiaW5mb1wiIHwgXCJ3YXJuaW5nXCI7XG4gIGR1cmF0aW9uPzogbnVtYmVyO1xufVxuXG4vKipcbiAqIEhvb2sgZm9yIG1hbmFnaW5nIHRvYXN0IG5vdGlmaWNhdGlvbnNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFByb3ZpZGVzIGEgY2VudHJhbGl6ZWQgd2F5IHRvIGRpc3BsYXkgdG9hc3Qgbm90aWZpY2F0aW9ucyB0aHJvdWdob3V0IHRoZSBhcHBsaWNhdGlvbi5cbiAqIFN1cHBvcnRzIG11bHRpcGxlIHRvYXN0IHR5cGVzIChzdWNjZXNzLCBlcnJvciwgaW5mbywgd2FybmluZykgd2l0aCBvcHRpb25hbCBhdXRvLWRpc21pc3MuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogY29uc3QgeyB0b2FzdHMsIHNob3dTdWNjZXNzLCBzaG93RXJyb3IsIHJlbW92ZVRvYXN0IH0gPSB1c2VUb2FzdCgpO1xuICpcbiAqIC8vIFNob3cgYSBzdWNjZXNzIHRvYXN0IHRoYXQgYXV0by1kaXNtaXNzZXMgYWZ0ZXIgMyBzZWNvbmRzXG4gKiBzaG93U3VjY2VzcygnT3BlcmF0aW9uIGNvbXBsZXRlZCEnLCAzMDAwKTtcbiAqXG4gKiAvLyBTaG93IGFuIGVycm9yIHRvYXN0IHRoYXQgc3RheXMgdW50aWwgbWFudWFsbHkgZGlzbWlzc2VkXG4gKiBzaG93RXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nJyk7XG4gKlxuICogLy8gUmVuZGVyIHRvYXN0c1xuICoge3RvYXN0cy5tYXAodG9hc3QgPT4gKFxuICogICA8VG9hc3Qga2V5PXt0b2FzdC5pZH0gey4uLnRvYXN0fSBvbkNsb3NlPXsoKSA9PiByZW1vdmVUb2FzdCh0b2FzdC5pZCl9IC8+XG4gKiApKX1cbiAqIGBgYFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRvYXN0IG1hbmFnZW1lbnQgZnVuY3Rpb25zIGFuZCBzdGF0ZVxuICogQHJldHVybnMge1RvYXN0W119IHJldHVybnMudG9hc3RzIC0gQXJyYXkgb2YgYWN0aXZlIHRvYXN0IG5vdGlmaWNhdGlvbnNcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gcmV0dXJucy5hZGRUb2FzdCAtIEFkZCBhIGN1c3RvbSB0b2FzdFxuICogQHJldHVybnMge0Z1bmN0aW9ufSByZXR1cm5zLnJlbW92ZVRvYXN0IC0gUmVtb3ZlIGEgc3BlY2lmaWMgdG9hc3QgYnkgSURcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gcmV0dXJucy5zaG93U3VjY2VzcyAtIFNob3cgYSBzdWNjZXNzIHRvYXN0XG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IHJldHVybnMuc2hvd0Vycm9yIC0gU2hvdyBhbiBlcnJvciB0b2FzdFxuICogQHJldHVybnMge0Z1bmN0aW9ufSByZXR1cm5zLnNob3dJbmZvIC0gU2hvdyBhbiBpbmZvIHRvYXN0XG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IHJldHVybnMuc2hvd1dhcm5pbmcgLSBTaG93IGEgd2FybmluZyB0b2FzdFxuICogQHJldHVybnMge0Z1bmN0aW9ufSByZXR1cm5zLmNsZWFyQWxsVG9hc3RzIC0gUmVtb3ZlIGFsbCBhY3RpdmUgdG9hc3RzXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IHJldHVybnMuZGlzbWlzc1RvYXN0IC0gQWxpYXMgZm9yIHJlbW92ZVRvYXN0IChiYWNrd2FyZCBjb21wYXRpYmlsaXR5KVxuICogQHJldHVybnMge0Z1bmN0aW9ufSByZXR1cm5zLmNsZWFyVG9hc3RzIC0gQWxpYXMgZm9yIGNsZWFyQWxsVG9hc3RzIChiYWNrd2FyZCBjb21wYXRpYmlsaXR5KVxuICovXG5leHBvcnQgY29uc3QgdXNlVG9hc3QgPSAoKSA9PiB7XG4gIGNvbnN0IFt0b2FzdHMsIHNldFRvYXN0c10gPSB1c2VTdGF0ZTxUb2FzdFtdPihbXSk7XG5cbiAgY29uc3QgcmVtb3ZlVG9hc3QgPSB1c2VDYWxsYmFjaygoaWQ6IHN0cmluZykgPT4ge1xuICAgIHNldFRvYXN0cygocHJldikgPT4gcHJldi5maWx0ZXIoKHRvYXN0KSA9PiB0b2FzdC5pZCAhPT0gaWQpKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGFkZFRvYXN0ID0gdXNlQ2FsbGJhY2soXG4gICAgKFxuICAgICAgbWVzc2FnZTogc3RyaW5nLFxuICAgICAgdHlwZTogXCJzdWNjZXNzXCIgfCBcImVycm9yXCIgfCBcImluZm9cIiB8IFwid2FybmluZ1wiID0gXCJpbmZvXCIsXG4gICAgICBkdXJhdGlvbj86IG51bWJlcixcbiAgICApID0+IHtcbiAgICAgIGNvbnN0IGlkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpO1xuICAgICAgY29uc3QgbmV3VG9hc3Q6IFRvYXN0ID0ge1xuICAgICAgICBpZCxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICB9O1xuXG4gICAgICBzZXRUb2FzdHMoKHByZXYpID0+IFsuLi5wcmV2LCBuZXdUb2FzdF0pO1xuXG4gICAgICAvLyBBdXRvLWRpc21pc3MgaWYgZHVyYXRpb24gaXMgcHJvdmlkZWRcbiAgICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICByZW1vdmVUb2FzdChpZCk7XG4gICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtyZW1vdmVUb2FzdF0sXG4gICk7XG5cbiAgY29uc3Qgc2hvd1N1Y2Nlc3MgPSB1c2VDYWxsYmFjayhcbiAgICAobWVzc2FnZTogc3RyaW5nLCBkdXJhdGlvbj86IG51bWJlcikgPT4ge1xuICAgICAgYWRkVG9hc3QobWVzc2FnZSwgXCJzdWNjZXNzXCIsIGR1cmF0aW9uKTtcbiAgICB9LFxuICAgIFthZGRUb2FzdF0sXG4gICk7XG5cbiAgY29uc3Qgc2hvd0Vycm9yID0gdXNlQ2FsbGJhY2soXG4gICAgKG1lc3NhZ2U6IHN0cmluZywgZHVyYXRpb24/OiBudW1iZXIpID0+IHtcbiAgICAgIGFkZFRvYXN0KG1lc3NhZ2UsIFwiZXJyb3JcIiwgZHVyYXRpb24pO1xuICAgIH0sXG4gICAgW2FkZFRvYXN0XSxcbiAgKTtcblxuICBjb25zdCBzaG93SW5mbyA9IHVzZUNhbGxiYWNrKFxuICAgIChtZXNzYWdlOiBzdHJpbmcsIGR1cmF0aW9uPzogbnVtYmVyKSA9PiB7XG4gICAgICBhZGRUb2FzdChtZXNzYWdlLCBcImluZm9cIiwgZHVyYXRpb24pO1xuICAgIH0sXG4gICAgW2FkZFRvYXN0XSxcbiAgKTtcblxuICBjb25zdCBzaG93V2FybmluZyA9IHVzZUNhbGxiYWNrKFxuICAgIChtZXNzYWdlOiBzdHJpbmcsIGR1cmF0aW9uPzogbnVtYmVyKSA9PiB7XG4gICAgICBhZGRUb2FzdChtZXNzYWdlLCBcIndhcm5pbmdcIiwgZHVyYXRpb24pO1xuICAgIH0sXG4gICAgW2FkZFRvYXN0XSxcbiAgKTtcblxuICBjb25zdCBjbGVhckFsbFRvYXN0cyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRUb2FzdHMoW10pO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIHtcbiAgICB0b2FzdHMsXG4gICAgYWRkVG9hc3QsXG4gICAgcmVtb3ZlVG9hc3QsXG4gICAgc2hvd1N1Y2Nlc3MsXG4gICAgc2hvd0Vycm9yLFxuICAgIHNob3dJbmZvLFxuICAgIHNob3dXYXJuaW5nLFxuICAgIGNsZWFyQWxsVG9hc3RzLFxuICAgIC8vIEFsaWFzZXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCB0ZXN0c1xuICAgIGRpc21pc3NUb2FzdDogcmVtb3ZlVG9hc3QsXG4gICAgY2xlYXJUb2FzdHM6IGNsZWFyQWxsVG9hc3RzLFxuICB9O1xufTtcbiJdLCJuYW1lcyI6WyJ1c2VUb2FzdCIsInRvYXN0cyIsInNldFRvYXN0cyIsInVzZVN0YXRlIiwicmVtb3ZlVG9hc3QiLCJ1c2VDYWxsYmFjayIsImlkIiwicHJldiIsImZpbHRlciIsInRvYXN0IiwiYWRkVG9hc3QiLCJtZXNzYWdlIiwidHlwZSIsImR1cmF0aW9uIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwibmV3VG9hc3QiLCJzZXRUaW1lb3V0Iiwic2hvd1N1Y2Nlc3MiLCJzaG93RXJyb3IiLCJzaG93SW5mbyIsInNob3dXYXJuaW5nIiwiY2xlYXJBbGxUb2FzdHMiLCJkaXNtaXNzVG9hc3QiLCJjbGVhclRvYXN0cyJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFvRGFBOzs7ZUFBQUE7Ozt1QkFwRHlCO0FBb0QvQixNQUFNQSxXQUFXO0lBQ3RCLE1BQU0sQ0FBQ0MsUUFBUUMsVUFBVSxHQUFHQyxJQUFBQSxlQUFRLEVBQVUsRUFBRTtJQUVoRCxNQUFNQyxjQUFjQyxJQUFBQSxrQkFBVyxFQUFDLENBQUNDO1FBQy9CSixVQUFVLENBQUNLLE9BQVNBLEtBQUtDLE1BQU0sQ0FBQyxDQUFDQyxRQUFVQSxNQUFNSCxFQUFFLEtBQUtBO0lBQzFELEdBQUcsRUFBRTtJQUVMLE1BQU1JLFdBQVdMLElBQUFBLGtCQUFXLEVBQzFCLENBQ0VNLFNBQ0FDLE9BQWlELE1BQU0sRUFDdkRDO1FBRUEsTUFBTVAsS0FBS1EsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsTUFBTSxDQUFDLEdBQUc7UUFDaEQsTUFBTUMsV0FBa0I7WUFDdEJaO1lBQ0FLO1lBQ0FDO1lBQ0FDO1FBQ0Y7UUFFQVgsVUFBVSxDQUFDSyxPQUFTO21CQUFJQTtnQkFBTVc7YUFBUztRQUV2Qyx1Q0FBdUM7UUFDdkMsSUFBSUwsVUFBVTtZQUNaTSxXQUFXO2dCQUNUZixZQUFZRTtZQUNkLEdBQUdPO1FBQ0w7SUFDRixHQUNBO1FBQUNUO0tBQVk7SUFHZixNQUFNZ0IsY0FBY2YsSUFBQUEsa0JBQVcsRUFDN0IsQ0FBQ00sU0FBaUJFO1FBQ2hCSCxTQUFTQyxTQUFTLFdBQVdFO0lBQy9CLEdBQ0E7UUFBQ0g7S0FBUztJQUdaLE1BQU1XLFlBQVloQixJQUFBQSxrQkFBVyxFQUMzQixDQUFDTSxTQUFpQkU7UUFDaEJILFNBQVNDLFNBQVMsU0FBU0U7SUFDN0IsR0FDQTtRQUFDSDtLQUFTO0lBR1osTUFBTVksV0FBV2pCLElBQUFBLGtCQUFXLEVBQzFCLENBQUNNLFNBQWlCRTtRQUNoQkgsU0FBU0MsU0FBUyxRQUFRRTtJQUM1QixHQUNBO1FBQUNIO0tBQVM7SUFHWixNQUFNYSxjQUFjbEIsSUFBQUEsa0JBQVcsRUFDN0IsQ0FBQ00sU0FBaUJFO1FBQ2hCSCxTQUFTQyxTQUFTLFdBQVdFO0lBQy9CLEdBQ0E7UUFBQ0g7S0FBUztJQUdaLE1BQU1jLGlCQUFpQm5CLElBQUFBLGtCQUFXLEVBQUM7UUFDakNILFVBQVUsRUFBRTtJQUNkLEdBQUcsRUFBRTtJQUVMLE9BQU87UUFDTEQ7UUFDQVM7UUFDQU47UUFDQWdCO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0EsZ0RBQWdEO1FBQ2hEQyxjQUFjckI7UUFDZHNCLGFBQWFGO0lBQ2Y7QUFDRiJ9