{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/hooks/useToast.ts"],"sourcesContent":["import { useState, useCallback } from \"react\";\n\n/**\n * Toast notification object\n * @interface Toast\n * @property {string} id - Unique identifier for the toast\n * @property {string} message - Message to display\n * @property {'success' | 'error' | 'info' | 'warning'} type - Toast type for styling\n * @property {number} [duration] - Auto-dismiss duration in milliseconds\n */\ninterface Toast {\n  id: string;\n  message: string;\n  type: \"success\" | \"error\" | \"info\" | \"warning\";\n  duration?: number;\n}\n\n/**\n * Hook for managing toast notifications\n *\n * @description\n * Provides a centralized way to display toast notifications throughout the application.\n * Supports multiple toast types (success, error, info, warning) with optional auto-dismiss.\n *\n * @example\n * ```tsx\n * const { toasts, showSuccess, showError, removeToast } = useToast();\n *\n * // Show a success toast that auto-dismisses after 3 seconds\n * showSuccess('Operation completed!', 3000);\n *\n * // Show an error toast that stays until manually dismissed\n * showError('Something went wrong');\n *\n * // Render toasts\n * {toasts.map(toast => (\n *   <Toast key={toast.id} {...toast} onClose={() => removeToast(toast.id)} />\n * ))}\n * ```\n *\n * @returns {Object} Toast management functions and state\n * @returns {Toast[]} returns.toasts - Array of active toast notifications\n * @returns {Function} returns.addToast - Add a custom toast\n * @returns {Function} returns.removeToast - Remove a specific toast by ID\n * @returns {Function} returns.showSuccess - Show a success toast\n * @returns {Function} returns.showError - Show an error toast\n * @returns {Function} returns.showInfo - Show an info toast\n * @returns {Function} returns.showWarning - Show a warning toast\n * @returns {Function} returns.clearAllToasts - Remove all active toasts\n * @returns {Function} returns.dismissToast - Alias for removeToast (backward compatibility)\n * @returns {Function} returns.clearToasts - Alias for clearAllToasts (backward compatibility)\n */\nexport const useToast = () => {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts((prev) => prev.filter((toast) => toast.id !== id));\n  }, []);\n\n  const addToast = useCallback(\n    (\n      message: string,\n      type: \"success\" | \"error\" | \"info\" | \"warning\" = \"info\",\n      duration?: number,\n    ) => {\n      const id = Math.random().toString(36).substr(2, 9);\n      const newToast: Toast = {\n        id,\n        message,\n        type,\n        duration,\n      };\n\n      setToasts((prev) => [...prev, newToast]);\n\n      // Auto-dismiss if duration is provided\n      if (duration) {\n        setTimeout(() => {\n          removeToast(id);\n        }, duration);\n      }\n    },\n    [removeToast],\n  );\n\n  const showSuccess = useCallback(\n    (message: string, duration?: number) => {\n      addToast(message, \"success\", duration);\n    },\n    [addToast],\n  );\n\n  const showError = useCallback(\n    (message: string, duration?: number) => {\n      addToast(message, \"error\", duration);\n    },\n    [addToast],\n  );\n\n  const showInfo = useCallback(\n    (message: string, duration?: number) => {\n      addToast(message, \"info\", duration);\n    },\n    [addToast],\n  );\n\n  const showWarning = useCallback(\n    (message: string, duration?: number) => {\n      addToast(message, \"warning\", duration);\n    },\n    [addToast],\n  );\n\n  const clearAllToasts = useCallback(() => {\n    setToasts([]);\n  }, []);\n\n  return {\n    toasts,\n    addToast,\n    removeToast,\n    showSuccess,\n    showError,\n    showInfo,\n    showWarning,\n    clearAllToasts,\n    // Aliases for backward compatibility with tests\n    dismissToast: removeToast,\n    clearToasts: clearAllToasts,\n  };\n};\n"],"names":["useToast","toasts","setToasts","useState","removeToast","useCallback","id","prev","filter","toast","addToast","message","type","duration","Math","random","toString","substr","newToast","setTimeout","showSuccess","showError","showInfo","showWarning","clearAllToasts","dismissToast","clearToasts"],"mappings":";;;;+BAoDaA;;;eAAAA;;;uBApDyB;AAoD/B,MAAMA,WAAW;IACtB,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,eAAQ,EAAU,EAAE;IAEhD,MAAMC,cAAcC,IAAAA,kBAAW,EAAC,CAACC;QAC/BJ,UAAU,CAACK,OAASA,KAAKC,MAAM,CAAC,CAACC,QAAUA,MAAMH,EAAE,KAAKA;IAC1D,GAAG,EAAE;IAEL,MAAMI,WAAWL,IAAAA,kBAAW,EAC1B,CACEM,SACAC,OAAiD,MAAM,EACvDC;QAEA,MAAMP,KAAKQ,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG;QAChD,MAAMC,WAAkB;YACtBZ;YACAK;YACAC;YACAC;QACF;QAEAX,UAAU,CAACK,OAAS;mBAAIA;gBAAMW;aAAS;QAEvC,uCAAuC;QACvC,IAAIL,UAAU;YACZM,WAAW;gBACTf,YAAYE;YACd,GAAGO;QACL;IACF,GACA;QAACT;KAAY;IAGf,MAAMgB,cAAcf,IAAAA,kBAAW,EAC7B,CAACM,SAAiBE;QAChBH,SAASC,SAAS,WAAWE;IAC/B,GACA;QAACH;KAAS;IAGZ,MAAMW,YAAYhB,IAAAA,kBAAW,EAC3B,CAACM,SAAiBE;QAChBH,SAASC,SAAS,SAASE;IAC7B,GACA;QAACH;KAAS;IAGZ,MAAMY,WAAWjB,IAAAA,kBAAW,EAC1B,CAACM,SAAiBE;QAChBH,SAASC,SAAS,QAAQE;IAC5B,GACA;QAACH;KAAS;IAGZ,MAAMa,cAAclB,IAAAA,kBAAW,EAC7B,CAACM,SAAiBE;QAChBH,SAASC,SAAS,WAAWE;IAC/B,GACA;QAACH;KAAS;IAGZ,MAAMc,iBAAiBnB,IAAAA,kBAAW,EAAC;QACjCH,UAAU,EAAE;IACd,GAAG,EAAE;IAEL,OAAO;QACLD;QACAS;QACAN;QACAgB;QACAC;QACAC;QACAC;QACAC;QACA,gDAAgD;QAChDC,cAAcrB;QACdsB,aAAaF;IACf;AACF"}