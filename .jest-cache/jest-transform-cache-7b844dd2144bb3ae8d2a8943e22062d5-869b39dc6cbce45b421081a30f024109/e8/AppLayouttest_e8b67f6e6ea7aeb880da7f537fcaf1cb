1ce7739c476d07b0cbad22c3d2c44ef6
/**
 * @fileoverview Unit tests for AppLayout component
 * @description Tests main layout component with header, menu, and navigation
 */ "use strict";
// Mock Next.js Link component
jest.mock("next/link", ()=>{
    return function MockLink({ children, href }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
            href: href,
            children: children
        });
    };
});
// Mock child components
jest.mock("@shared/components/layout/Header", ()=>({
        Header: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "mock-header",
                children: "Header Component"
            })
    }));
jest.mock("@shared/components/navigation/AdvancedEndgameMenu", ()=>({
        AdvancedEndgameMenu: ({ isOpen, onClose, currentPositionId })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "mock-menu",
                "data-is-open": isOpen,
                "data-position-id": currentPositionId,
                children: [
                    "Menu Component",
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onClose,
                        children: "Close Menu"
                    })
                ]
            })
    }));
jest.mock("@shared/components/ui/DarkModeToggle", ()=>({
        DarkModeToggle: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "mock-dark-toggle",
                children: "Dark Mode Toggle"
            })
    }));
jest.mock("@shared/components/ui/SettingsIcon", ()=>({
        SettingsIcon: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "mock-settings",
                children: "Settings Icon"
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _AppLayout = require("../../../../shared/components/layout/AppLayout");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("AppLayout Component", ()=>{
    const mockChildren = /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "test-content",
        children: "Test Content"
    });
    const defaultProps = {
        children: mockChildren
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe("Basic Rendering", ()=>{
        it("should render main layout structure", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            expect(_react1.screen.getByTestId("test-content")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("mock-menu")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("mock-settings")).toBeInTheDocument();
        });
        it("should render header section", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText("Endgame Training")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("mock-settings")).toBeInTheDocument();
        });
        it("should pass currentPositionId to menu", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps,
                currentPositionId: 42
            }));
            const menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-position-id", "42");
        });
        it("should render children in main content area", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const mainContent = _react1.screen.getByRole("main");
            expect(mainContent).toBeInTheDocument();
            expect(mainContent).toContainElement(_react1.screen.getByTestId("test-content"));
        });
    });
    describe("Menu State Management", ()=>{
        it("should start with menu open by default", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-is-open", "true");
        });
        it("should close menu when close button clicked", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const closeButton = _react1.screen.getByText("Close Menu");
            _react1.fireEvent.click(closeButton);
            const menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-is-open", "false");
        });
        it("should toggle menu with mobile toggle button", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            // Initially open
            let menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-is-open", "true");
            // Find and click mobile toggle button
            const toggleButton = _react1.screen.getByText("‚ùå Men√º schlie√üen");
            _react1.fireEvent.click(toggleButton);
            menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-is-open", "false");
            // Should change button text when closed
            expect(_react1.screen.getByText("üìñ Navigation")).toBeInTheDocument();
            // Click again to open
            _react1.fireEvent.click(_react1.screen.getByText("üìñ Navigation"));
            menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-is-open", "true");
        });
    });
    describe("Header Structure", ()=>{
        it("should have fixed header with correct styling", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const header = container.querySelector("header");
            expect(header === null || header === void 0 ? void 0 : header.className).toContain("fixed");
            expect(header === null || header === void 0 ? void 0 : header.className).toContain("top-0");
            expect(header === null || header === void 0 ? void 0 : header.className).toContain("left-0");
            expect(header === null || header === void 0 ? void 0 : header.className).toContain("right-0");
            expect(header === null || header === void 0 ? void 0 : header.className).toContain("z-50");
            expect(header === null || header === void 0 ? void 0 : header.className).toContain("bg-gray-900");
            expect(header === null || header === void 0 ? void 0 : header.className).toContain("border-b");
            expect(header === null || header === void 0 ? void 0 : header.className).toContain("border-gray-700");
        });
        it("should have proper header content layout", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const title = _react1.screen.getByText("Endgame Training");
            expect(title.className).toContain("text-xl");
            expect(title.className).toContain("font-bold");
            expect(title.className).toContain("text-white");
        });
    });
    describe("Main Content Layout", ()=>{
        it("should have proper main layout structure", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const mainLayout = container.querySelector(".flex.pt-14");
            expect(mainLayout).toBeInTheDocument();
            const flexContent = container.querySelector(".flex-1");
            expect(flexContent).toBeInTheDocument();
        });
        it("should have container with proper styling", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const mainContainer = container.querySelector(".container.mx-auto.p-4");
            expect(mainContainer).toBeInTheDocument();
        });
        it("should apply background color from CSS variables", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const rootDiv = container.firstChild;
            // CSS variables are not evaluated in jsdom
            expect(rootDiv).toHaveClass("min-h-screen");
        });
    });
    describe("Mobile Navigation", ()=>{
        it("should show mobile toggle button", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const mobileToggle = _react1.screen.getByText("‚ùå Men√º schlie√üen");
            // Check parent container has responsive class
            expect(mobileToggle.parentElement).toHaveClass("lg:hidden");
        });
        it("should have responsive classes for mobile toggle", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const toggleButton = _react1.screen.getByText("‚ùå Men√º schlie√üen");
            expect(toggleButton.className).toContain("px-4");
            expect(toggleButton.className).toContain("py-2");
            expect(toggleButton.className).toContain("bg-blue-600");
            expect(toggleButton.className).toContain("text-white");
            expect(toggleButton.className).toContain("rounded-lg");
            expect(toggleButton.className).toContain("hover:bg-blue-700");
        });
    });
    describe("Desktop Floating Actions", ()=>{
        it("should render desktop floating action buttons", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const dashboardLink = _react1.screen.getByText("üìä");
            expect(dashboardLink).toHaveAttribute("href", "/dashboard");
            expect(dashboardLink).toHaveTextContent("üìä");
        });
        it("should render dark mode toggle in floating actions", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const darkToggle = _react1.screen.getAllByTestId("mock-dark-toggle")[0]; // Desktop version
            expect(darkToggle).toBeInTheDocument();
        });
        it("should have proper styling for floating actions", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const floatingContainer = container.querySelector(".fixed.bottom-6.right-6");
            expect(floatingContainer).toBeInTheDocument();
            expect(floatingContainer === null || floatingContainer === void 0 ? void 0 : floatingContainer.className).toContain("hidden");
            expect(floatingContainer === null || floatingContainer === void 0 ? void 0 : floatingContainer.className).toContain("lg:flex");
        });
    });
    describe("Mobile Bottom Navigation", ()=>{
        it("should render mobile bottom navigation by default", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const bottomNav = _react1.screen.getByText("üìä Dashboard");
            expect(bottomNav).toBeInTheDocument();
            expect(bottomNav.closest("a")).toHaveAttribute("href", "/dashboard");
        });
        it("should render home link in bottom navigation", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const homeLink = _react1.screen.getByText("üè† Home");
            expect(homeLink.closest("a")).toHaveAttribute("href", "/");
        });
        it("should hide bottom navigation when showMobileBottomNav is false", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps,
                showMobileBottomNav: false
            }));
            expect(_react1.screen.queryByText("üìä Dashboard")).not.toBeInTheDocument();
            expect(_react1.screen.queryByText("üè† Home")).not.toBeInTheDocument();
        });
        it("should have proper bottom navigation styling", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const bottomNav = container.querySelector(".lg\\:hidden.fixed.bottom-0");
            expect(bottomNav).toBeInTheDocument();
            expect(bottomNav === null || bottomNav === void 0 ? void 0 : bottomNav.className).toContain("dark-card-elevated");
            expect(bottomNav === null || bottomNav === void 0 ? void 0 : bottomNav.className).toContain("border-t");
        });
        it("should include dark mode toggle in bottom navigation", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            // Should have dark mode toggle in bottom nav (second instance)
            const darkToggles = _react1.screen.getAllByTestId("mock-dark-toggle");
            expect(darkToggles.length).toBeGreaterThan(1);
        });
    });
    describe("Responsive Behavior", ()=>{
        it("should have responsive classes for different screen sizes", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            // Mobile toggle should be hidden on large screens
            const mobileSection = container.querySelector(".lg\\:hidden.p-4");
            expect(mobileSection).toBeInTheDocument();
            // Floating actions should be hidden on mobile
            const desktopActions = container.querySelector(".hidden.lg\\:flex");
            expect(desktopActions).toBeInTheDocument();
        });
        it("should handle window resize gracefully", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            // Should not break with different viewport sizes
            expect(_react1.screen.getByTestId("test-content")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("mock-menu")).toBeInTheDocument();
        });
    });
    describe("Link Navigation", ()=>{
        it("should render dashboard links correctly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const dashboardLinks = _react1.screen.getAllByText(/Dashboard/);
            dashboardLinks.forEach((link)=>{
                expect(link.closest("a")).toHaveAttribute("href", "/dashboard");
            });
        });
        it("should render home link correctly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const homeLink = _react1.screen.getByText("üè† Home");
            expect(homeLink.closest("a")).toHaveAttribute("href", "/");
        });
        it("should have proper button styling for navigation links", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const dashboardButton = _react1.screen.getByText("üìä Dashboard");
            // Button styling is handled by Link component
            expect(dashboardButton).toBeInTheDocument();
        });
    });
    describe("CSS Layout Classes", ()=>{
        it("should apply minimum height to main container", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const mainContainer = container.firstChild;
            expect(mainContainer.className).toContain("min-h-screen");
        });
        it("should have flex layout for main content", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const flexContainer = container.querySelector(".flex.pt-14");
            expect(flexContainer).toBeInTheDocument();
        });
        it("should have proper spacing and padding", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const headerPadding = container.querySelector(".px-4.py-3");
            const contentPadding = container.querySelector(".container.mx-auto.p-4");
            expect(headerPadding).toBeInTheDocument();
            expect(contentPadding).toBeInTheDocument();
        });
    });
    describe("Component Integration", ()=>{
        it("should integrate properly with menu component", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps,
                currentPositionId: 123
            }));
            const menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-position-id", "123");
            expect(menu).toHaveAttribute("data-is-open", "true");
        });
        it("should handle menu close callback", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-is-open", "true");
            const closeButton = _react1.screen.getByText("Close Menu");
            _react1.fireEvent.click(closeButton);
            expect(menu).toHaveAttribute("data-is-open", "false");
        });
    });
    describe("Edge Cases", ()=>{
        it("should handle missing children gracefully", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                children: undefined
            }));
            const mainContent = _react1.screen.getByRole("main");
            expect(mainContent).toBeInTheDocument();
        });
        it("should handle undefined currentPositionId", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps,
                currentPositionId: undefined
            }));
            const menu = _react1.screen.getByTestId("mock-menu");
            // Check menu exists, data attributes are optional
            expect(menu).toBeInTheDocument();
        });
        it("should handle rapid menu toggle clicks", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            const toggleButton = _react1.screen.getByText("‚ùå Men√º schlie√üen");
            // Rapid clicks
            for(let i = 0; i < 10; i++){
                _react1.fireEvent.click(toggleButton);
            }
            // Final state depends on implementation
            const menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toBeInTheDocument();
        });
        it("should handle complex children content", ()=>{
            const complexChildren = /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                        children: "Complex Content"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                children: "Nested content"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                children: "Action Button"
                            })
                        ]
                    })
                ]
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                children: complexChildren
            }));
            expect(_react1.screen.getByText("Complex Content")).toBeInTheDocument();
            expect(_react1.screen.getByText("Nested content")).toBeInTheDocument();
            expect(_react1.screen.getByText("Action Button")).toBeInTheDocument();
        });
    });
    describe("Performance", ()=>{
        it("should not cause memory leaks on unmount", ()=>{
            const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            expect(()=>unmount()).not.toThrow();
        });
        it("should handle frequent prop changes efficiently", ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps,
                currentPositionId: 1
            }));
            // Frequent position changes
            for(let i = 2; i <= 20; i++){
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                    ...defaultProps,
                    currentPositionId: i
                }));
            }
            expect(_react1.screen.getByTestId("test-content")).toBeInTheDocument();
            const menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-position-id", "20");
        });
    });
    describe("State Management", ()=>{
        it("should maintain menu state across re-renders", ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            // Close menu
            const closeButton = _react1.screen.getByText("Close Menu");
            _react1.fireEvent.click(closeButton);
            let menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-is-open", "false");
            // Re-render with different props
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps,
                currentPositionId: 42
            }));
            // Menu should still be closed
            menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-is-open", "false");
        });
        it("should initialize with correct default state", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppLayout.AppLayout, {
                ...defaultProps
            }));
            // Menu should start open
            const menu = _react1.screen.getByTestId("mock-menu");
            expect(menu).toHaveAttribute("data-is-open", "true");
            // Mobile bottom nav should be shown by default
            expect(_react1.screen.getByText("üìä Dashboard")).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,