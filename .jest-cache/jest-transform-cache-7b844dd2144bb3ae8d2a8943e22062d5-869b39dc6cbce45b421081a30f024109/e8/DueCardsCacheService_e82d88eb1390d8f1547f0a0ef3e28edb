6e14072d94b665200d77264062c12a0b
/**
 * @file DueCardsCacheService
 * @description High-performance localStorage cache for Due Cards with TTL and LRU
 * 
 * This service provides intelligent caching for due cards calculation with:
 * - 24h TTL with midnight invalidation (UTC-based)
 * - LRU-based memory management for large collections
 * - Graceful fallback on cache corruption or localStorage issues
 * - Performance optimization for collections >500 cards
 * 
 * @example
 * ```typescript
 * const cacheService = DueCardsCacheService.getInstance();
 * 
 * // Get cached due cards (returns null if cache miss/expired)
 * const cachedResult = cacheService.getDueCards(userId);
 * 
 * // Cache new calculation result
 * cacheService.setDueCards(userId, { dueCards, timestamp, stats });
 * 
 * // Clear cache on user logout
 * cacheService.clearUserCache(userId);
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DueCardsCacheService () {
        return DueCardsCacheService;
    },
    get createInputHash () {
        return createInputHash;
    },
    get dueCardsCacheService () {
        return dueCardsCacheService;
    }
});
const _Logger = require("./logging/Logger");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
const logger = (0, _Logger.getLogger)().setContext('DueCardsCacheService');
/**
 * Cache configuration constants
 */ const CACHE_CONFIG = {
    /** Cache key prefix in localStorage */ KEY_PREFIX: 'endgame_due_cards_',
    /** Metadata key in localStorage */ METADATA_KEY: 'endgame_cache_metadata',
    /** Current cache version */ VERSION: 1,
    /** TTL in milliseconds (24 hours) */ TTL_MS: 24 * 60 * 60 * 1000,
    /** Maximum entries before LRU cleanup */ MAX_ENTRIES: 50,
    /** Maximum estimated size in bytes (5MB) */ MAX_SIZE_BYTES: 5 * 1024 * 1024,
    /** Cleanup interval in milliseconds (1 hour) */ CLEANUP_INTERVAL_MS: 60 * 60 * 1000,
    /** Large collection threshold for performance warnings */ LARGE_COLLECTION_THRESHOLD: 500
};
class DueCardsCacheService {
    /**
   * Get singleton instance
   * 
   * @returns DueCardsCacheService instance
   */ static getInstance() {
        if (!DueCardsCacheService.instance) {
            DueCardsCacheService.instance = new DueCardsCacheService();
        }
        return DueCardsCacheService.instance;
    }
    /**
   * Get cached due cards for a user
   * 
   * @param userId - User identifier
   * @param inputHash - Hash of input data for validation
   * @returns Cached result or null if cache miss/expired
   */ getDueCards(userId, inputHash) {
        if (!this.isLocalStorageAvailable()) {
            return null;
        }
        try {
            const cacheKey = this.getCacheKey(userId);
            const cached = localStorage.getItem(cacheKey);
            if (!cached) {
                logger.debug('Cache miss for user', {
                    userId
                });
                return null;
            }
            const entry = JSON.parse(cached);
            // Validate cache entry structure
            if (!this.isValidCacheEntry(entry)) {
                logger.warn('Invalid cache entry structure, removing', {
                    userId
                });
                this.clearUserCache(userId);
                return null;
            }
            // Check TTL expiration
            if (this.isExpired(entry)) {
                logger.debug('Cache expired for user', {
                    userId,
                    age: Date.now() - entry.createdAt
                });
                this.clearUserCache(userId);
                return null;
            }
            // Check midnight invalidation (UTC)
            if (this.isAfterMidnight(entry.createdAt)) {
                logger.debug('Cache invalid due to midnight rollover', {
                    userId
                });
                this.clearUserCache(userId);
                return null;
            }
            // Validate input hash for cache invalidation
            if (entry.inputHash !== inputHash) {
                logger.debug('Cache invalid due to input change', {
                    userId
                });
                this.clearUserCache(userId);
                return null;
            }
            // Update last accessed timestamp for LRU
            const updatedEntry = {
                ...entry,
                lastAccessedAt: Date.now()
            };
            localStorage.setItem(cacheKey, JSON.stringify(updatedEntry));
            logger.debug('Cache hit for user', {
                userId,
                dueCount: entry.dueCards.length,
                age: Date.now() - entry.createdAt
            });
            return updatedEntry;
        } catch (error) {
            logger.error('Error reading from cache', {
                userId,
                error: error.message
            });
            this.clearUserCache(userId);
            return null;
        }
    }
    /**
   * Cache due cards calculation result
   * 
   * @param userId - User identifier
   * @param dueCards - Calculated due cards
   * @param stats - Calculation statistics
   * @param inputHash - Hash of input data
   */ setDueCards(userId, dueCards, stats, inputHash) {
        if (!this.isLocalStorageAvailable()) {
            return;
        }
        try {
            // Performance warning for large collections
            if (dueCards.length > CACHE_CONFIG.LARGE_COLLECTION_THRESHOLD) {
                logger.warn('Caching large collection', {
                    userId,
                    count: dueCards.length
                });
            }
            const now = Date.now();
            const entry = {
                dueCards,
                calculatedAt: now,
                stats,
                inputHash,
                createdAt: now,
                lastAccessedAt: now
            };
            const cacheKey = this.getCacheKey(userId);
            const serialized = JSON.stringify(entry);
            // Check if we need to make space
            this.ensureSpaceAvailable(serialized.length);
            localStorage.setItem(cacheKey, serialized);
            this.updateMetadata(1, serialized.length);
            logger.debug('Cached due cards for user', {
                userId,
                dueCount: dueCards.length,
                size: serialized.length
            });
        } catch (error) {
            logger.error('Error writing to cache', {
                userId,
                error: error.message
            });
        }
    }
    /**
   * Clear cache for specific user
   * 
   * @param userId - User identifier
   */ clearUserCache(userId) {
        if (!this.isLocalStorageAvailable()) {
            return;
        }
        try {
            const cacheKey = this.getCacheKey(userId);
            const existing = localStorage.getItem(cacheKey);
            if (existing) {
                localStorage.removeItem(cacheKey);
                this.updateMetadata(-1, -existing.length);
                logger.debug('Cleared cache for user', {
                    userId
                });
            }
        } catch (error) {
            logger.error('Error clearing user cache', {
                userId,
                error: error.message
            });
        }
    }
    /**
   * Clear all cache entries
   */ clearAllCache() {
        if (!this.isLocalStorageAvailable()) {
            return;
        }
        try {
            const keysToRemove = [];
            // Find all cache keys
            for(let i = 0; i < localStorage.length; i++){
                const key = localStorage.key(i);
                if (key === null || key === void 0 ? void 0 : key.startsWith(CACHE_CONFIG.KEY_PREFIX)) {
                    keysToRemove.push(key);
                }
            }
            // Remove all cache entries
            keysToRemove.forEach((key)=>localStorage.removeItem(key));
            // Reset metadata
            localStorage.removeItem(CACHE_CONFIG.METADATA_KEY);
            logger.info('Cleared all cache entries', {
                removedKeys: keysToRemove.length
            });
        } catch (error) {
            logger.error('Error clearing all cache', {
                error: error.message
            });
        }
    }
    /**
   * Get cache statistics
   * 
   * @returns Cache statistics
   */ getCacheStats() {
        if (!this.isLocalStorageAvailable()) {
            return {
                available: false,
                totalEntries: 0,
                estimatedSize: 0,
                lastCleanup: null
            };
        }
        const metadata = this.getMetadata();
        return {
            available: true,
            totalEntries: metadata.totalEntries,
            estimatedSize: metadata.estimatedSize,
            lastCleanup: metadata.lastCleanup ? new Date(metadata.lastCleanup) : null,
            maxEntries: CACHE_CONFIG.MAX_ENTRIES,
            maxSize: CACHE_CONFIG.MAX_SIZE_BYTES
        };
    }
    /**
   * Force cleanup of expired and least recently used entries
   */ forceCleanup() {
        this.performCleanup();
    }
    /**
   * Destroy service and cleanup resources
   */ destroy() {
        if (this.cleanupTimeoutId) {
            clearTimeout(this.cleanupTimeoutId);
            this.cleanupTimeoutId = null;
        }
        DueCardsCacheService.instance = null;
        logger.debug('DueCardsCacheService destroyed');
    }
    // Private helper methods
    /**
   * Generate cache key for user
   */ getCacheKey(userId) {
        return `${CACHE_CONFIG.KEY_PREFIX}${userId}`;
    }
    /**
   * Check if localStorage is available
   */ isLocalStorageAvailable() {
        try {
            const testKey = '__localStorage_test__';
            localStorage.setItem(testKey, 'test');
            localStorage.removeItem(testKey);
            return true;
        } catch  {
            return false;
        }
    }
    /**
   * Validate cache entry structure
   */ isValidCacheEntry(entry) {
        return typeof entry === 'object' && entry !== null && Array.isArray(entry.dueCards) && typeof entry.calculatedAt === 'number' && typeof entry.stats === 'object' && typeof entry.inputHash === 'string' && typeof entry.createdAt === 'number' && typeof entry.lastAccessedAt === 'number';
    }
    /**
   * Check if cache entry is expired
   */ isExpired(entry) {
        return Date.now() - entry.createdAt > CACHE_CONFIG.TTL_MS;
    }
    /**
   * Check if entry was created before last midnight (UTC)
   */ isAfterMidnight(createdAt) {
        const now = Date.now();
        const nowDate = new Date(now);
        const todayMidnightUTC = new Date(Date.UTC(nowDate.getUTCFullYear(), nowDate.getUTCMonth(), nowDate.getUTCDate(), 0, 0, 0, 0)).getTime();
        return createdAt < todayMidnightUTC;
    }
    /**
   * Get cache metadata
   */ getMetadata() {
        try {
            const stored = localStorage.getItem(CACHE_CONFIG.METADATA_KEY);
            if (stored) {
                const metadata = JSON.parse(stored);
                if (metadata.version === CACHE_CONFIG.VERSION) {
                    return metadata;
                }
            }
        } catch  {
        // Fall through to default
        }
        return {
            totalEntries: 0,
            estimatedSize: 0,
            lastCleanup: 0,
            version: CACHE_CONFIG.VERSION
        };
    }
    /**
   * Update cache metadata
   */ updateMetadata(entriesDelta, sizeDelta) {
        try {
            const metadata = this.getMetadata();
            metadata.totalEntries = Math.max(0, metadata.totalEntries + entriesDelta);
            metadata.estimatedSize = Math.max(0, metadata.estimatedSize + sizeDelta);
            localStorage.setItem(CACHE_CONFIG.METADATA_KEY, JSON.stringify(metadata));
        } catch (error) {
            logger.warn('Failed to update cache metadata', {
                error: error.message
            });
        }
    }
    /**
   * Ensure space is available for new entry
   */ ensureSpaceAvailable(newEntrySize) {
        const metadata = this.getMetadata();
        // Check if cleanup is needed
        const needsCleanup = metadata.totalEntries >= CACHE_CONFIG.MAX_ENTRIES || metadata.estimatedSize + newEntrySize > CACHE_CONFIG.MAX_SIZE_BYTES;
        if (needsCleanup) {
            logger.debug('Cache space cleanup needed', {
                totalEntries: metadata.totalEntries,
                estimatedSize: metadata.estimatedSize,
                newEntrySize
            });
            this.performCleanup();
        }
    }
    /**
   * Perform cache cleanup (expired entries and LRU eviction)
   */ performCleanup() {
        if (!this.isLocalStorageAvailable()) {
            return;
        }
        try {
            const entries = [];
            const now = Date.now();
            // Collect all cache entries
            for(let i = 0; i < localStorage.length; i++){
                const key = localStorage.key(i);
                if (key === null || key === void 0 ? void 0 : key.startsWith(CACHE_CONFIG.KEY_PREFIX)) {
                    try {
                        const stored = localStorage.getItem(key);
                        if (stored) {
                            const entry = JSON.parse(stored);
                            if (this.isValidCacheEntry(entry)) {
                                entries.push({
                                    key,
                                    entry
                                });
                            } else {
                                // Remove invalid entry
                                localStorage.removeItem(key);
                            }
                        }
                    } catch  {
                        // Remove corrupted entry
                        localStorage.removeItem(key);
                    }
                }
            }
            let removedCount = 0;
            let removedSize = 0;
            // Remove expired entries
            entries.forEach(({ key, entry })=>{
                if (this.isExpired(entry) || this.isAfterMidnight(entry.createdAt)) {
                    const serialized = JSON.stringify(entry);
                    localStorage.removeItem(key);
                    removedCount++;
                    removedSize += serialized.length;
                }
            });
            // Remove LRU entries if still over limit
            const remaining = entries.filter(({ key })=>{
                return localStorage.getItem(key) !== null;
            });
            if (remaining.length > CACHE_CONFIG.MAX_ENTRIES) {
                // Sort by last accessed (LRU first)
                remaining.sort((a, b)=>a.entry.lastAccessedAt - b.entry.lastAccessedAt);
                const toRemove = remaining.length - CACHE_CONFIG.MAX_ENTRIES;
                for(let i = 0; i < toRemove; i++){
                    const { key, entry } = remaining[i];
                    const serialized = JSON.stringify(entry);
                    localStorage.removeItem(key);
                    removedCount++;
                    removedSize += serialized.length;
                }
            }
            // Update metadata
            if (removedCount > 0) {
                this.updateMetadata(-removedCount, -removedSize);
                const metadata = this.getMetadata();
                metadata.lastCleanup = now;
                localStorage.setItem(CACHE_CONFIG.METADATA_KEY, JSON.stringify(metadata));
                logger.info('Cache cleanup completed', {
                    removedEntries: removedCount,
                    removedSize,
                    remainingEntries: metadata.totalEntries
                });
            }
        } catch (error) {
            logger.error('Cache cleanup failed', {
                error: error.message
            });
        }
    }
    /**
   * Schedule periodic cleanup
   */ scheduleCleanup() {
        if (this.cleanupTimeoutId) {
            clearTimeout(this.cleanupTimeoutId);
        }
        this.cleanupTimeoutId = setTimeout(()=>{
            this.performCleanup();
            this.scheduleCleanup(); // Reschedule
        }, CACHE_CONFIG.CLEANUP_INTERVAL_MS);
    }
    /**
   * Private constructor for singleton pattern
   */ constructor(){
        _define_property(this, "cleanupTimeoutId", null);
        this.scheduleCleanup();
        logger.debug('DueCardsCacheService initialized');
    }
}
_define_property(DueCardsCacheService, "instance", null);
function createInputHash(input) {
    const str = typeof input === 'string' ? input : JSON.stringify(input);
    let hash = 0;
    for(let i = 0; i < str.length; i++){
        const char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash; // Convert to 32-bit integer
    }
    return Math.abs(hash).toString(36);
}
const dueCardsCacheService = DueCardsCacheService.getInstance();

//# sourceMappingURL=data:application/json;base64,