{"version":3,"names":["cov_1plqmjngkb","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","useDialogHandlers","undoMove","resetGame","clearEvaluations","trainingActions","gameActions","uiActions","trainingState","storeApi","trainingUIState","handleReset","_react","useCallback","clearEvaluationBaseline","handleMoveErrorTakeBack","logger","_Logger","getLogger","setContext","info","_handlePlayerMove","cancelScheduledOpponentTurn","undoResult","debug","isPlayerTurn","isOpponentThinking","setPlayerTurn","clearOpponentThinking","error","setMoveErrorDialog","handleMoveErrorRestart","handleMoveErrorContinue","_currentState_training_currentPosition","_currentState_training_currentPosition_colorToTrain","_currentState_training_currentPosition1","currentState","getState","training","currentFen","_ChessService","chessService","getFen","currentTurn","turn","colorToTrain","currentPosition","moveCount","game","moveHistory","length","trainingColor","charAt","scheduleOpponentTurn","onOpponentMoveComplete","currentEval","_TablebaseService","tablebaseService","getEvaluation","isAvailable","result","setEvaluationBaseline","wdl","newBaseline","fen","warn","stateAfter","handleShowBestMove","_trainingState_moveErrorDialog","moveErrorDialog","bestMove","showToast","handleMoveSuccessClose","setMoveSuccessDialog","handleMoveSuccessContinue"],"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/hooks/useDialogHandlers.ts"],"sourcesContent":["/**\n * @file Dialog handlers hook for chess training board\n * @module hooks/useDialogHandlers\n * \n * @description\n * Custom hook that encapsulates all dialog handling logic for chess training.\n * Extracted from TrainingBoard to separate dialog business logic from UI coordination.\n * Handles error dialogs, success dialogs, and training workflow actions.\n * \n * @remarks\n * Key responsibilities:\n * - Move error dialog actions (take back, restart, continue, show best move)\n * - Move success dialog actions (close, continue)\n * - Training session reset coordination\n * - Complex opponent turn scheduling and cancellation\n * - Comprehensive logging and state coordination\n * \n * This hook maintains all the complex business logic while providing\n * a clean interface for dialog action coordination.\n * \n * @example\n * ```tsx\n * const dialogHandlers = useDialogHandlers({\n *   undoMove,\n *   resetGame,\n *   clearEvaluations,\n *   trainingActions,\n *   gameActions,\n *   uiActions,\n *   trainingState,\n *   storeApi,\n *   trainingUIState,\n * });\n * \n * <DialogManager\n *   errorDialog={trainingState.moveErrorDialog}\n *   successDialog={trainingState.moveSuccessDialog}\n *   onErrorTakeBack={dialogHandlers.handleMoveErrorTakeBack}\n *   onErrorRestart={dialogHandlers.handleMoveErrorRestart}\n *   onErrorContinue={dialogHandlers.handleMoveErrorContinue}\n *   onErrorShowBestMove={dialogHandlers.handleShowBestMove}\n *   onSuccessClose={dialogHandlers.handleMoveSuccessClose}\n *   onSuccessContinue={dialogHandlers.handleMoveSuccessContinue}\n * />\n * ```\n */\n\nimport { useCallback } from 'react';\nimport { getLogger } from '@shared/services/logging/Logger';\nimport {\n  cancelScheduledOpponentTurn,\n  scheduleOpponentTurn,\n} from '@shared/store/orchestrators/handlePlayerMove';\nimport { chessService } from '@shared/services/ChessService';\nimport { tablebaseService } from '@shared/services/TablebaseService';\nimport type { StoreApi } from '@shared/store/StoreContext';\n\n/**\n * Training actions interface (subset needed for dialog handling)\n */\ninterface TrainingActionsSubset {\n  setPlayerTurn: (isPlayerTurn: boolean) => void;\n  clearOpponentThinking: () => void;\n  setMoveErrorDialog: (dialog: any) => void;\n  setMoveSuccessDialog: (dialog: any) => void;\n  setEvaluationBaseline: (wdl: number, fen: string) => void;\n  clearEvaluationBaseline: () => void;\n}\n\n/**\n * Game actions interface (subset needed for dialog handling)\n */\ninterface GameActionsSubset {\n  resetGame: () => void;\n}\n\n/**\n * UI actions interface (subset needed for dialog handling)\n */\ninterface UIActionsSubset {\n  showToast: (message: string, type: string) => void;\n}\n\n/**\n * Training state interface (subset needed for dialog handling)\n */\ninterface TrainingStateSubset {\n  isPlayerTurn: boolean;\n  isOpponentThinking: boolean;\n  currentPosition?: {\n    id: number;\n    colorToTrain?: string;\n  } | null;\n  moveErrorDialog?: {\n    bestMove?: string;\n  } | null;\n}\n\n\n/**\n * Training UI state interface (subset needed for dialog handling)\n */\ninterface TrainingUIStateSubset {\n  handleReset: () => void;\n}\n\n/**\n * Props for useDialogHandlers hook\n */\ninterface UseDialogHandlersProps {\n  /** Training session function to undo moves */\n  undoMove: () => boolean;\n  /** Training session function to reset game */\n  resetGame: () => void;\n  /** Training session function to clear evaluations */\n  clearEvaluations: () => void;\n  \n  /** Training store actions */\n  trainingActions: TrainingActionsSubset;\n  /** Game store actions */\n  gameActions: GameActionsSubset;\n  /** UI store actions */\n  uiActions: UIActionsSubset;\n  \n  /** Training state */\n  trainingState: TrainingStateSubset;\n  \n  /** Store API for direct state access */\n  storeApi: StoreApi;\n  \n  /** Training UI state management */\n  trainingUIState: TrainingUIStateSubset;\n}\n\n/**\n * Return value from useDialogHandlers hook\n */\ninterface UseDialogHandlersReturn {\n  /** Handler for move error dialog - take back move (undo) */\n  handleMoveErrorTakeBack: () => void;\n  /** Handler for move error dialog - restart game */\n  handleMoveErrorRestart: () => void;\n  /** Handler for move error dialog - continue playing */\n  handleMoveErrorContinue: () => void;\n  /** Handler for move error dialog - show best move */\n  handleShowBestMove: () => void;\n  \n  /** Handler for move success dialog - close dialog */\n  handleMoveSuccessClose: () => void;\n  /** Handler for move success dialog - continue to next */\n  handleMoveSuccessContinue: () => void;\n  \n  /** Handler for general game reset */\n  handleReset: () => void;\n}\n\n/**\n * Custom hook for chess dialog handling logic\n * \n * @description\n * Encapsulates all dialog handling logic including:\n * - Move error dialog actions with complex undo and opponent turn logic\n * - Move success dialog actions for training flow continuation\n * - Training session reset coordination across multiple services\n * - State management for opponent turns and player interactions\n * - Comprehensive logging and error handling\n * \n * @remarks\n * This hook maintains all the complex business logic that was previously\n * embedded in TrainingBoard. It coordinates between multiple services:\n * - TrainingSession hooks for game state management\n * - Store actions for state updates\n * - Opponent turn orchestrators for training flow\n * - Logging service for debugging and monitoring\n * \n * The hook preserves all original functionality while providing a clean\n * interface that separates concerns between dialog actions and UI coordination.\n * \n * @param props Configuration object with session functions, store actions, and state\n * @returns Object with all dialog handler functions\n */\nexport const useDialogHandlers = ({\n  undoMove,\n  resetGame,\n  clearEvaluations,\n  trainingActions,\n  gameActions,\n  uiActions,\n  trainingState,\n  storeApi,\n  trainingUIState,\n}: UseDialogHandlersProps): UseDialogHandlersReturn => {\n\n  /**\n   * Resets the training board to initial state\n   *\n   * @description\n   * Performs comprehensive cleanup including:\n   * - Resetting chess game to starting position\n   * - Clearing all position evaluations\n   * - Resetting UI state and dialogs\n   * - Clearing training session data\n   *\n   * @remarks\n   * This handler is called when:\n   * - User clicks reset button\n   * - Training session needs restart\n   * - Parent component triggers reset\n   */\n  const handleReset = useCallback(() => {\n    resetGame();\n    clearEvaluations();\n    trainingUIState.handleReset();\n    gameActions.resetGame();\n    // Clear evaluation baseline when resetting\n    trainingActions.clearEvaluationBaseline();\n  }, [resetGame, clearEvaluations, gameActions, trainingUIState, trainingActions]);\n\n  /**\n   * Handles move error dialog dismissal with undo\n   *\n   * @description\n   * Closes the move error dialog and undoes the suboptimal move,\n   * allowing the user to try a different move.\n   *\n   * @remarks\n   * When a suboptimal move is detected, it has already been executed\n   * on the board and added to the move history. This function removes\n   * the move from history and reverts the board position.\n   */\n  const handleMoveErrorTakeBack = useCallback(() => {\n    const logger = getLogger().setContext(\"useDialogHandlers-MoveError\");\n    logger.info(\"Undoing suboptimal move using useTrainingSession undoMove\");\n\n    // CRITICAL: Cancel any scheduled opponent turn BEFORE undoing\n    // This prevents the opponent from playing after we undo\n    cancelScheduledOpponentTurn();\n    logger.info(\"Cancelled any scheduled opponent turn\");\n\n    // Use the undoMove function from useTrainingSession which properly handles ChessService\n    const undoResult = undoMove();\n\n    if (undoResult) {\n      logger.info(\"Move successfully undone\");\n\n      // CRITICAL: Set player turn to true after undoing a suboptimal move\n      // This prevents the opponent from playing immediately after undo\n      logger.debug(\"Before setPlayerTurn - current state\", {\n        isPlayerTurn: trainingState.isPlayerTurn,\n        isOpponentThinking: trainingState.isOpponentThinking,\n      });\n      trainingActions.setPlayerTurn(true);\n      trainingActions.clearOpponentThinking(); // Clear opponent thinking flag\n      trainingActions.clearEvaluationBaseline(); // Clear baseline since we're back to original position\n      logger.info(\n        \"Set player turn to true, cleared opponent thinking, and cleared evaluation baseline\",\n      );\n      logger.debug(\"After setPlayerTurn call\");\n    } else {\n      logger.error(\"Failed to undo move - no moves in history\");\n    }\n\n    // Close the dialog using the trainingActions hook which properly accesses the action\n    // The hook extracts the action from the slice creator, not from the nested store state\n    if (trainingActions && trainingActions.setMoveErrorDialog) {\n      trainingActions.setMoveErrorDialog(null);\n      logger.info(\n        \"Successfully closed move error dialog via trainingActions hook\",\n      );\n    } else {\n      logger.error(\"setMoveErrorDialog not available in trainingActions\");\n    }\n  }, [undoMove, trainingActions, trainingState]);\n\n  /**\n   * Restarts the entire training session after move error\n   *\n   * @description\n   * Completely resets the game and closes the error dialog when\n   * the user chooses to restart after making a critical mistake.\n   *\n   * @remarks\n   * This is typically used when the user has made a game-losing\n   * mistake and wants to start the position from the beginning.\n   */\n  const handleMoveErrorRestart = useCallback(() => {\n    const logger = getLogger().setContext(\"useDialogHandlers-MoveError\");\n    logger.info(\"Restarting game due to move error\");\n    handleReset();\n    trainingActions.setMoveErrorDialog(null);\n  }, [handleReset, trainingActions]);\n\n  /**\n   * Handles \"Weiterspielen\" (continue playing) action from error dialog\n   *\n   * @description\n   * Closes the error dialog and schedules the opponent's turn.\n   * This allows the game to continue even after a suboptimal move,\n   * letting the opponent respond to the player's move.\n   *\n   * @remarks\n   * This provides a smoother training experience by allowing players\n   * to continue playing and learning from their mistakes rather than\n   * always having to take back moves.\n   */\n  const handleMoveErrorContinue = useCallback(() => {\n    const logger = getLogger().setContext(\"useDialogHandlers-MoveError\");\n    \n    // Get current state for debugging\n    const currentState = storeApi.getState();\n    logger.info(\n      \"🎯 WEITERSPIELEN clicked - Current state BEFORE action:\",\n      {\n        isPlayerTurn: currentState.training.isPlayerTurn,\n        isOpponentThinking: currentState.training.isOpponentThinking,\n        currentFen: chessService.getFen(),\n        currentTurn: chessService.turn(),\n        colorToTrain: currentState.training.currentPosition?.colorToTrain,\n        moveCount: currentState.game.moveHistory.length,\n      }\n    );\n\n    // CRITICAL FIX: Set turn state before scheduling opponent turn\n    // This ensures the opponent can actually execute their move\n    const currentTurn = chessService.turn();\n    const trainingColor = currentState.training.currentPosition?.colorToTrain?.charAt(0);\n    \n    if (currentTurn !== trainingColor) {\n      logger.info(\"🔧 FIXING BUG: Setting isPlayerTurn=false for opponent to move\");\n      trainingActions.setPlayerTurn(false);\n    }\n\n    // Close the error dialog\n    trainingActions.setMoveErrorDialog(null);\n    logger.info(\"✅ Error dialog closed\");\n\n    // Schedule opponent turn to respond to player's move\n    logger.info(\"📅 Calling scheduleOpponentTurn with evaluation baseline callback...\");\n    scheduleOpponentTurn(storeApi, 500, {\n      onOpponentMoveComplete: async () => {\n        logger.info(\"🎯 Opponent move completed - updating evaluation baseline\");\n        \n        try {\n          // Get current position evaluation\n          const currentFen = chessService.getFen();\n          const currentEval = await tablebaseService.getEvaluation(currentFen);\n          \n          if (currentEval.isAvailable && currentEval.result) {\n            // Update baseline to current position's evaluation using the actions provided to this hook\n            trainingActions.setEvaluationBaseline(currentEval.result.wdl, currentFen);\n            logger.info(\"✅ Evaluation baseline updated successfully\", {\n              newBaseline: currentEval.result.wdl,\n              fen: currentFen,\n            });\n          } else {\n            logger.warn(\"⚠️ Could not get evaluation for baseline update - tablebase unavailable\");\n          }\n        } catch (error) {\n          logger.error(\"❌ Failed to update evaluation baseline:\", error);\n        }\n      }\n    });\n\n    // Check state after scheduling\n    const stateAfter = storeApi.getState();\n    logger.info(\"📊 State AFTER scheduling opponent turn:\", {\n      isPlayerTurn: stateAfter.training.isPlayerTurn,\n      isOpponentThinking: stateAfter.training.isOpponentThinking,\n    });\n  }, [trainingActions, storeApi]);\n\n  /**\n   * Displays the best move as a toast notification\n   *\n   * @description\n   * Shows the optimal move in a toast message when the user\n   * requests to see the best move after making a mistake.\n   *\n   * @remarks\n   * The best move is determined by tablebase analysis and\n   * represents the objectively best continuation from the\n   * position before the user's suboptimal move.\n   */\n  const handleShowBestMove = useCallback(() => {\n    if (trainingState.moveErrorDialog?.bestMove) {\n      const logger = getLogger().setContext(\"useDialogHandlers-MoveError\");\n      logger.info(\"Showing best move\", { bestMove: trainingState.moveErrorDialog.bestMove });\n      uiActions.showToast(\n        `Der beste Zug war: ${trainingState.moveErrorDialog.bestMove}`,\n        \"info\",\n      );\n    }\n    trainingActions.setMoveErrorDialog(null);\n  }, [trainingState.moveErrorDialog, uiActions, trainingActions]);\n\n  /**\n   * Handles success dialog close\n   *\n   * @description\n   * Closes the move success dialog when user dismisses it.\n   */\n  const handleMoveSuccessClose = useCallback(() => {\n    trainingActions.setMoveSuccessDialog(null);\n  }, [trainingActions]);\n\n  /**\n   * Handles continuing to next position after success\n   *\n   * @description\n   * Closes the success dialog and allows training to continue.\n   * Training completion logic is handled elsewhere in the system.\n   */\n  const handleMoveSuccessContinue = useCallback(() => {\n    trainingActions.setMoveSuccessDialog(null);\n    // Training completion logic is already handled by PawnPromotionHandler\n  }, [trainingActions]);\n\n  return {\n    handleMoveErrorTakeBack,\n    handleMoveErrorRestart,\n    handleMoveErrorContinue,\n    handleShowBestMove,\n    handleMoveSuccessClose,\n    handleMoveSuccessContinue,\n    handleReset,\n  };\n};"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6CC;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC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","ignoreList":[]}