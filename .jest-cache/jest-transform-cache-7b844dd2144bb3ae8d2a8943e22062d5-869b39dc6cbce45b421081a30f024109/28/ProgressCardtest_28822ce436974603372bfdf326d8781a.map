{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/ui/components/ProgressCard.test.tsx"],"sourcesContent":["/**\n * @file Unit tests for ProgressCard component\n * @module tests/unit/ui/components/ProgressCard.test\n * \n * @description\n * Comprehensive test suite for the ProgressCard component which displays\n * training progress with statistics, difficulty indicators, and category icons.\n * Tests cover rendering, interaction, accessibility, and edge cases.\n * \n * @see {@link ProgressCard} - Component being tested\n */\n\nimport React from \"react\";\nimport { render, screen, fireEvent } from \"@testing-library/react\";\nimport { ProgressCard } from \"@shared/components/ui/ProgressCard\";\n\n/**\n * Mock progress statistics for testing\n * @constant\n */\nconst mockProgressStats = {\n  total: 20,\n  completed: 12,\n  successRate: 0.75,\n  dueToday: 3,\n  streak: 5,\n};\n\n/**\n * Default props for ProgressCard component tests\n * @constant\n */\nconst defaultProps = {\n  title: \"King and Queen vs King\",\n  description: \"Learn basic checkmate patterns\",\n  stats: mockProgressStats,\n  difficulty: \"beginner\" as const,\n  category: \"queen\" as const,\n  onStartTraining: jest.fn(),\n};\n\ndescribe(\"ProgressCard Component\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Rendering\", () => {\n    it(\"should render basic card information\", () => {\n      render(<ProgressCard {...defaultProps} />);\n\n      expect(screen.getByText(\"King and Queen vs King\")).toBeInTheDocument();\n      expect(\n        screen.getByText(\"Learn basic checkmate patterns\"),\n      ).toBeInTheDocument();\n    });\n\n    it(\"should display correct progress stats\", () => {\n      render(<ProgressCard {...defaultProps} />);\n\n      // Progress fraction\n      expect(screen.getByText(\"12/20\")).toBeInTheDocument();\n\n      // Progress percentage (60%)\n      expect(screen.getByText(\"60% abgeschlossen\")).toBeInTheDocument();\n\n      // Success rate (75%)\n      expect(screen.getByText(\"75%\")).toBeInTheDocument();\n      expect(screen.getByText(\"Erfolgsrate\")).toBeInTheDocument();\n\n      // Due today\n      expect(screen.getByText(\"3\")).toBeInTheDocument();\n      expect(screen.getByText(\"Heute fällig\")).toBeInTheDocument();\n    });\n\n    it(\"should display streak when present\", () => {\n      render(<ProgressCard {...defaultProps} />);\n\n      expect(screen.getByText(\"5 Tage Streak\")).toBeInTheDocument();\n      expect(screen.getByText(\"🔥\")).toBeInTheDocument();\n    });\n\n    it(\"should not display streak when zero\", () => {\n      const propsWithoutStreak = {\n        ...defaultProps,\n        stats: { ...mockProgressStats, streak: 0 },\n      };\n\n      render(<ProgressCard {...propsWithoutStreak} />);\n\n      expect(screen.queryByText(\"0 Tage Streak\")).not.toBeInTheDocument();\n    });\n\n    it(\"should handle zero total correctly\", () => {\n      const propsWithZeroTotal = {\n        ...defaultProps,\n        stats: { ...mockProgressStats, total: 0, completed: 0 },\n      };\n\n      render(<ProgressCard {...propsWithZeroTotal} />);\n\n      expect(screen.getByText(\"0/0\")).toBeInTheDocument();\n      expect(screen.getByText(\"0% abgeschlossen\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Difficulty Indicators\", () => {\n    it(\"should display beginner difficulty\", () => {\n      render(<ProgressCard {...defaultProps} difficulty=\"beginner\" />);\n\n      expect(screen.getByText(\"🌱\")).toBeInTheDocument();\n      expect(screen.getByText(\"beginner\")).toBeInTheDocument();\n    });\n\n    it(\"should display intermediate difficulty\", () => {\n      render(<ProgressCard {...defaultProps} difficulty=\"intermediate\" />);\n\n      expect(screen.getByText(\"⚡\")).toBeInTheDocument();\n      expect(screen.getByText(\"intermediate\")).toBeInTheDocument();\n    });\n\n    it(\"should display advanced difficulty\", () => {\n      render(<ProgressCard {...defaultProps} difficulty=\"advanced\" />);\n\n      // There are multiple fire emojis (difficulty and streak)\n      const fireEmojis = screen.getAllByText(\"🔥\");\n      expect(fireEmojis.length).toBeGreaterThan(0);\n      expect(screen.getByText(\"advanced\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Category Icons\", () => {\n    it(\"should display queen category icon\", () => {\n      render(<ProgressCard {...defaultProps} category=\"queen\" />);\n\n      expect(screen.getByText(\"♛\")).toBeInTheDocument();\n    });\n\n    it(\"should display rook category icon\", () => {\n      render(<ProgressCard {...defaultProps} category=\"rook\" />);\n\n      expect(screen.getByText(\"♜\")).toBeInTheDocument();\n    });\n\n    it(\"should display pawn category icon\", () => {\n      render(<ProgressCard {...defaultProps} category=\"pawn\" />);\n\n      expect(screen.getByText(\"♟️\")).toBeInTheDocument();\n    });\n\n    it(\"should display minor pieces category icon\", () => {\n      render(<ProgressCard {...defaultProps} category=\"minor\" />);\n\n      expect(screen.getByText(\"♝\")).toBeInTheDocument();\n    });\n\n    it(\"should display other category icon\", () => {\n      render(<ProgressCard {...defaultProps} category=\"other\" />);\n\n      expect(screen.getByText(\"🎯\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Button Behavior\", () => {\n    it(\"should call onStartTraining when button clicked\", () => {\n      const onStartTraining = jest.fn();\n\n      render(\n        <ProgressCard {...defaultProps} onStartTraining={onStartTraining} />,\n      );\n\n      const button = screen.getByRole(\"button\");\n      fireEvent.click(button);\n\n      expect(onStartTraining).toHaveBeenCalledTimes(1);\n    });\n\n    it(\"should show due tasks in button text when tasks are due\", () => {\n      render(<ProgressCard {...defaultProps} />);\n\n      expect(screen.getByText(\"3 Aufgaben trainieren\")).toBeInTheDocument();\n    });\n\n    it(\"should show generic text when no tasks due\", () => {\n      const propsWithoutDueTasks = {\n        ...defaultProps,\n        stats: { ...mockProgressStats, dueToday: 0 },\n      };\n\n      render(<ProgressCard {...propsWithoutDueTasks} />);\n\n      expect(screen.getByText(\"Training starten\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Progress Bar\", () => {\n    it(\"should display correct progress bar width\", () => {\n      const { container } = render(<ProgressCard {...defaultProps} />);\n\n      // Find progress bar element by looking for the div with width style\n      const progressBar = container.querySelector('div[style*=\"width: 60%\"]');\n\n      expect(progressBar).toBeInTheDocument();\n    });\n\n    it(\"should handle 100% completion\", () => {\n      const completeStats = {\n        ...mockProgressStats,\n        completed: 20,\n        total: 20,\n      };\n\n      render(<ProgressCard {...defaultProps} stats={completeStats} />);\n\n      expect(screen.getByText(\"100% abgeschlossen\")).toBeInTheDocument();\n    });\n\n    it(\"should handle 0% completion\", () => {\n      const zeroStats = {\n        ...mockProgressStats,\n        completed: 0,\n        total: 20,\n      };\n\n      render(<ProgressCard {...defaultProps} stats={zeroStats} />);\n\n      expect(screen.getByText(\"0% abgeschlossen\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"CSS Classes and Styling\", () => {\n    it(\"should apply correct difficulty styling classes\", () => {\n      const { container } = render(\n        <ProgressCard {...defaultProps} difficulty=\"beginner\" />,\n      );\n\n      const card = container.firstChild as HTMLElement;\n      expect(card.className).toContain(\"from-green-50\");\n      expect(card.className).toContain(\"to-emerald-50\");\n      expect(card.className).toContain(\"border-green-200\");\n    });\n\n    it(\"should apply intermediate difficulty styling\", () => {\n      const { container } = render(\n        <ProgressCard {...defaultProps} difficulty=\"intermediate\" />,\n      );\n\n      const card = container.firstChild as HTMLElement;\n      expect(card.className).toContain(\"from-yellow-50\");\n      expect(card.className).toContain(\"to-orange-50\");\n    });\n\n    it(\"should apply advanced difficulty styling\", () => {\n      const { container } = render(\n        <ProgressCard {...defaultProps} difficulty=\"advanced\" />,\n      );\n\n      const card = container.firstChild as HTMLElement;\n      expect(card.className).toContain(\"from-red-50\");\n      expect(card.className).toContain(\"to-pink-50\");\n    });\n\n    it(\"should have hover effects\", () => {\n      const { container } = render(<ProgressCard {...defaultProps} />);\n\n      const card = container.firstChild as HTMLElement;\n      expect(card.className).toContain(\"hover:shadow-xl\");\n      expect(card.className).toContain(\"hover:scale-105\");\n    });\n  });\n\n  describe(\"Accessibility\", () => {\n    it(\"should have proper button role\", () => {\n      render(<ProgressCard {...defaultProps} />);\n\n      const button = screen.getByRole(\"button\");\n      expect(button).toBeInTheDocument();\n    });\n\n    it(\"should support keyboard interaction\", () => {\n      const onStartTraining = jest.fn();\n\n      render(\n        <ProgressCard {...defaultProps} onStartTraining={onStartTraining} />,\n      );\n\n      const button = screen.getByRole(\"button\");\n\n      // Test Enter key\n      fireEvent.keyDown(button, { key: \"Enter\", code: \"Enter\" });\n      fireEvent.keyUp(button, { key: \"Enter\", code: \"Enter\" });\n\n      // Focus and click should work\n      button.focus();\n      fireEvent.click(button);\n\n      expect(onStartTraining).toHaveBeenCalled();\n    });\n\n    it(\"should have descriptive text content for screen readers\", () => {\n      render(<ProgressCard {...defaultProps} />);\n\n      // Important content should be visible to screen readers\n      expect(screen.getByText(\"Fortschritt\")).toBeInTheDocument();\n      expect(screen.getByText(\"Erfolgsrate\")).toBeInTheDocument();\n      expect(screen.getByText(\"Heute fällig\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Edge Cases\", () => {\n    it(\"should handle very high success rates\", () => {\n      const highSuccessStats = {\n        ...mockProgressStats,\n        successRate: 0.999,\n      };\n\n      render(<ProgressCard {...defaultProps} stats={highSuccessStats} />);\n\n      expect(screen.getByText(\"100%\")).toBeInTheDocument(); // Rounded to 100%\n    });\n\n    it(\"should handle very low success rates\", () => {\n      const lowSuccessStats = {\n        ...mockProgressStats,\n        successRate: 0.001,\n      };\n\n      render(<ProgressCard {...defaultProps} stats={lowSuccessStats} />);\n\n      expect(screen.getByText(\"0%\")).toBeInTheDocument(); // Rounded to 0%\n    });\n\n    it(\"should handle large numbers\", () => {\n      const largeStats = {\n        total: 1000,\n        completed: 567,\n        successRate: 0.843,\n        dueToday: 99,\n        streak: 150,\n      };\n\n      render(<ProgressCard {...defaultProps} stats={largeStats} />);\n\n      expect(screen.getByText(\"567/1000\")).toBeInTheDocument();\n      expect(screen.getByText(\"57% abgeschlossen\")).toBeInTheDocument(); // 567/1000 = 56.7% → 57%\n      expect(screen.getByText(\"84%\")).toBeInTheDocument(); // 84.3% → 84%\n      expect(screen.getByText(\"99\")).toBeInTheDocument();\n      expect(screen.getByText(\"150 Tage Streak\")).toBeInTheDocument();\n    });\n\n    it(\"should handle completed > total gracefully\", () => {\n      const invalidStats = {\n        ...mockProgressStats,\n        total: 10,\n        completed: 15, // More completed than total\n      };\n\n      render(<ProgressCard {...defaultProps} stats={invalidStats} />);\n\n      expect(screen.getByText(\"15/10\")).toBeInTheDocument();\n      expect(screen.getByText(\"150% abgeschlossen\")).toBeInTheDocument(); // 15/10 = 150%\n    });\n  });\n\n  describe(\"Component Memoization\", () => {\n    it(\"should be memoized with React.memo\", () => {\n      expect(ProgressCard.displayName).toBe(\"ProgressCard\");\n    });\n\n    it(\"should not re-render with same props\", () => {\n      const { rerender } = render(<ProgressCard {...defaultProps} />);\n      const initialHtml = screen\n        .getByText(\"King and Queen vs King\")\n        .closest(\"div\")?.outerHTML;\n\n      // Re-render with same props\n      rerender(<ProgressCard {...defaultProps} />);\n      const secondHtml = screen\n        .getByText(\"King and Queen vs King\")\n        .closest(\"div\")?.outerHTML;\n\n      expect(initialHtml).toBe(secondHtml);\n    });\n  });\n});\n"],"names":["mockProgressStats","total","completed","successRate","dueToday","streak","defaultProps","title","description","stats","difficulty","category","onStartTraining","jest","fn","describe","beforeEach","clearAllMocks","it","render","ProgressCard","expect","screen","getByText","toBeInTheDocument","propsWithoutStreak","queryByText","not","propsWithZeroTotal","fireEmojis","getAllByText","length","toBeGreaterThan","button","getByRole","fireEvent","click","toHaveBeenCalledTimes","propsWithoutDueTasks","container","progressBar","querySelector","completeStats","zeroStats","card","firstChild","className","toContain","keyDown","key","code","keyUp","focus","toHaveBeenCalled","highSuccessStats","lowSuccessStats","largeStats","invalidStats","displayName","toBe","rerender","initialHtml","closest","outerHTML","secondHtml"],"mappings":"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"}