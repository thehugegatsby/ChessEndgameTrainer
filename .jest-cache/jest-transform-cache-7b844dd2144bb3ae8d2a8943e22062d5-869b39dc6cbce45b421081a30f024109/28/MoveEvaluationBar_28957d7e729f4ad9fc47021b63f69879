4fa7fcdc1d0f397a72fea873183d57d2
/**
 * @file Move evaluation bar visualization component
 * @module components/tablebase/MoveEvaluationBar
 *
 * @description
 * Visual progress bar component that displays tablebase moves with color-coded
 * evaluation bars based on DTZ (Distance to Zero) values. Provides an intuitive
 * visualization similar to the Lichess tablebase interface.
 *
 * @remarks
 * Key features:
 * - Color-coded bars (green=win, yellow=draw, red=loss)
 * - Bar width proportional to DTZ value
 * - Interactive selection with hover states
 * - Accessible keyboard navigation
 * - Compact variant for dense layouts
 * - Dark mode support
 *
 * The component uses DTZ values to create visual feedback about move quality,
 * with longer bars indicating moves that take more time to reach an outcome.
 */ "use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get CompactMoveEvaluationBar () {
        return CompactMoveEvaluationBar;
    },
    get MoveEvaluationBar () {
        return MoveEvaluationBar;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _resultClassification = require("../../utils/tablebase/resultClassification");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const MoveEvaluationBar = ({ move, dtz, maxDtz, onClick, isSelected = false, className = "", category })=>{
    const resultType = category || (0, _resultClassification.getMoveResultType)(dtz);
    const barWidth = (0, _resultClassification.calculateBarWidth)(dtz, maxDtz);
    const barColor = (0, _resultClassification.getEvaluationBarColor)(resultType);
    const dtzDisplay = (0, _resultClassification.formatDtzDisplay)(dtz);
    const getTextColorClass = (type)=>{
        switch(type){
            case "win":
                return "text-green-600 dark:text-green-400";
            case "draw":
                return "text-yellow-600 dark:text-yellow-400";
            case "loss":
                return "text-red-600 dark:text-red-400";
            default:
                return "text-gray-600 dark:text-gray-400";
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `
        relative flex items-center justify-between py-2 px-3 
        cursor-pointer transition-all duration-200 hover:bg-gray-50 dark:hover:bg-gray-800/50
        ${isSelected ? "bg-blue-50 dark:bg-blue-900/20" : ""}
        ${className}
      `,
        onClick: onClick,
        role: "button",
        tabIndex: 0,
        "aria-label": `Move ${move}, ${dtzDisplay}`,
        onKeyDown: (e)=>{
            if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                onClick === null || onClick === void 0 ? void 0 : onClick();
            }
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: `
          absolute left-0 top-0 bottom-0 opacity-5 transition-all duration-300
          ${barColor}
        `,
                style: {
                    width: `${barWidth}%`
                },
                "aria-hidden": "true"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "relative z-10 flex items-center justify-between w-full",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "flex items-center space-x-3",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            className: `font-mono font-medium text-sm ${getTextColorClass(resultType)}`,
                            children: move
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: `text-xs font-medium ${getTextColorClass(resultType)}`,
                                children: dtzDisplay
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "sr-only",
                                children: dtzDisplay
                            })
                        ]
                    })
                ]
            })
        ]
    });
};
const CompactMoveEvaluationBar = ({ move, dtz, maxDtz, onClick, isSelected = false, className = "", category })=>{
    const resultType = category || (0, _resultClassification.getMoveResultType)(dtz);
    const barWidth = (0, _resultClassification.calculateBarWidth)(dtz, maxDtz);
    const barColor = (0, _resultClassification.getEvaluationBarColor)(resultType);
    const icon = (0, _resultClassification.getResultIcon)(resultType);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `
        relative flex items-center justify-between py-1 px-2 rounded
        cursor-pointer transition-all duration-200 hover:bg-gray-100
        ${isSelected ? "bg-blue-50 border-blue-300" : ""}
        ${className}
      `,
        onClick: onClick,
        role: "button",
        tabIndex: 0,
        "aria-label": `Move ${move}, DTZ ${Math.abs(dtz)}`,
        onKeyDown: (e)=>{
            if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                onClick === null || onClick === void 0 ? void 0 : onClick();
            }
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: `
          absolute inset-0 rounded opacity-10 transition-all duration-300
          ${barColor}
        `,
                style: {
                    width: `${barWidth}%`
                },
                "aria-hidden": "true"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "relative z-10 flex items-center justify-between w-full",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-1",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-xs",
                                "aria-hidden": "true",
                                children: icon
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "font-mono font-bold text-sm",
                                children: move
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        className: "text-xs text-gray-600",
                        children: dtz === 0 ? "0" : Math.abs(dtz)
                    })
                ]
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,