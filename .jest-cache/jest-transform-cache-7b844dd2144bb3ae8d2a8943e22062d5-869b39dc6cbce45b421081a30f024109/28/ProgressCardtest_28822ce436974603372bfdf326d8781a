fd0b2572d30df3e3891d2b9f5bbf1755
/**
 * @file Unit tests for ProgressCard component
 * @module tests/unit/ui/components/ProgressCard.test
 * 
 * @description
 * Comprehensive test suite for the ProgressCard component which displays
 * training progress with statistics, difficulty indicators, and category icons.
 * Tests cover rendering, interaction, accessibility, and edge cases.
 * 
 * @see {@link ProgressCard} - Component being tested
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _ProgressCard = require("../../../../shared/components/ui/ProgressCard");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Mock progress statistics for testing
 * @constant
 */ const mockProgressStats = {
    total: 20,
    completed: 12,
    successRate: 0.75,
    dueToday: 3,
    streak: 5
};
/**
 * Default props for ProgressCard component tests
 * @constant
 */ const defaultProps = {
    title: "King and Queen vs King",
    description: "Learn basic checkmate patterns",
    stats: mockProgressStats,
    difficulty: "beginner",
    category: "queen",
    onStartTraining: jest.fn()
};
describe("ProgressCard Component", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe("Rendering", ()=>{
        it("should render basic card information", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText("King and Queen vs King")).toBeInTheDocument();
            expect(_react1.screen.getByText("Learn basic checkmate patterns")).toBeInTheDocument();
        });
        it("should display correct progress stats", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps
            }));
            // Progress fraction
            expect(_react1.screen.getByText("12/20")).toBeInTheDocument();
            // Progress percentage (60%)
            expect(_react1.screen.getByText("60% abgeschlossen")).toBeInTheDocument();
            // Success rate (75%)
            expect(_react1.screen.getByText("75%")).toBeInTheDocument();
            expect(_react1.screen.getByText("Erfolgsrate")).toBeInTheDocument();
            // Due today
            expect(_react1.screen.getByText("3")).toBeInTheDocument();
            expect(_react1.screen.getByText("Heute fällig")).toBeInTheDocument();
        });
        it("should display streak when present", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText("5 Tage Streak")).toBeInTheDocument();
            expect(_react1.screen.getByText("🔥")).toBeInTheDocument();
        });
        it("should not display streak when zero", ()=>{
            const propsWithoutStreak = {
                ...defaultProps,
                stats: {
                    ...mockProgressStats,
                    streak: 0
                }
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...propsWithoutStreak
            }));
            expect(_react1.screen.queryByText("0 Tage Streak")).not.toBeInTheDocument();
        });
        it("should handle zero total correctly", ()=>{
            const propsWithZeroTotal = {
                ...defaultProps,
                stats: {
                    ...mockProgressStats,
                    total: 0,
                    completed: 0
                }
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...propsWithZeroTotal
            }));
            expect(_react1.screen.getByText("0/0")).toBeInTheDocument();
            expect(_react1.screen.getByText("0% abgeschlossen")).toBeInTheDocument();
        });
    });
    describe("Difficulty Indicators", ()=>{
        it("should display beginner difficulty", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                difficulty: "beginner"
            }));
            expect(_react1.screen.getByText("🌱")).toBeInTheDocument();
            expect(_react1.screen.getByText("beginner")).toBeInTheDocument();
        });
        it("should display intermediate difficulty", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                difficulty: "intermediate"
            }));
            expect(_react1.screen.getByText("⚡")).toBeInTheDocument();
            expect(_react1.screen.getByText("intermediate")).toBeInTheDocument();
        });
        it("should display advanced difficulty", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                difficulty: "advanced"
            }));
            // There are multiple fire emojis (difficulty and streak)
            const fireEmojis = _react1.screen.getAllByText("🔥");
            expect(fireEmojis.length).toBeGreaterThan(0);
            expect(_react1.screen.getByText("advanced")).toBeInTheDocument();
        });
    });
    describe("Category Icons", ()=>{
        it("should display queen category icon", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                category: "queen"
            }));
            expect(_react1.screen.getByText("♛")).toBeInTheDocument();
        });
        it("should display rook category icon", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                category: "rook"
            }));
            expect(_react1.screen.getByText("♜")).toBeInTheDocument();
        });
        it("should display pawn category icon", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                category: "pawn"
            }));
            expect(_react1.screen.getByText("♟️")).toBeInTheDocument();
        });
        it("should display minor pieces category icon", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                category: "minor"
            }));
            expect(_react1.screen.getByText("♝")).toBeInTheDocument();
        });
        it("should display other category icon", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                category: "other"
            }));
            expect(_react1.screen.getByText("🎯")).toBeInTheDocument();
        });
    });
    describe("Button Behavior", ()=>{
        it("should call onStartTraining when button clicked", ()=>{
            const onStartTraining = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                onStartTraining: onStartTraining
            }));
            const button = _react1.screen.getByRole("button");
            _react1.fireEvent.click(button);
            expect(onStartTraining).toHaveBeenCalledTimes(1);
        });
        it("should show due tasks in button text when tasks are due", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText("3 Aufgaben trainieren")).toBeInTheDocument();
        });
        it("should show generic text when no tasks due", ()=>{
            const propsWithoutDueTasks = {
                ...defaultProps,
                stats: {
                    ...mockProgressStats,
                    dueToday: 0
                }
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...propsWithoutDueTasks
            }));
            expect(_react1.screen.getByText("Training starten")).toBeInTheDocument();
        });
    });
    describe("Progress Bar", ()=>{
        it("should display correct progress bar width", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps
            }));
            // Find progress bar element by looking for the div with width style
            const progressBar = container.querySelector('div[style*="width: 60%"]');
            expect(progressBar).toBeInTheDocument();
        });
        it("should handle 100% completion", ()=>{
            const completeStats = {
                ...mockProgressStats,
                completed: 20,
                total: 20
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                stats: completeStats
            }));
            expect(_react1.screen.getByText("100% abgeschlossen")).toBeInTheDocument();
        });
        it("should handle 0% completion", ()=>{
            const zeroStats = {
                ...mockProgressStats,
                completed: 0,
                total: 20
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                stats: zeroStats
            }));
            expect(_react1.screen.getByText("0% abgeschlossen")).toBeInTheDocument();
        });
    });
    describe("CSS Classes and Styling", ()=>{
        it("should apply correct difficulty styling classes", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                difficulty: "beginner"
            }));
            const card = container.firstChild;
            expect(card.className).toContain("from-green-50");
            expect(card.className).toContain("to-emerald-50");
            expect(card.className).toContain("border-green-200");
        });
        it("should apply intermediate difficulty styling", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                difficulty: "intermediate"
            }));
            const card = container.firstChild;
            expect(card.className).toContain("from-yellow-50");
            expect(card.className).toContain("to-orange-50");
        });
        it("should apply advanced difficulty styling", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                difficulty: "advanced"
            }));
            const card = container.firstChild;
            expect(card.className).toContain("from-red-50");
            expect(card.className).toContain("to-pink-50");
        });
        it("should have hover effects", ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps
            }));
            const card = container.firstChild;
            expect(card.className).toContain("hover:shadow-xl");
            expect(card.className).toContain("hover:scale-105");
        });
    });
    describe("Accessibility", ()=>{
        it("should have proper button role", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps
            }));
            const button = _react1.screen.getByRole("button");
            expect(button).toBeInTheDocument();
        });
        it("should support keyboard interaction", ()=>{
            const onStartTraining = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                onStartTraining: onStartTraining
            }));
            const button = _react1.screen.getByRole("button");
            // Test Enter key
            _react1.fireEvent.keyDown(button, {
                key: "Enter",
                code: "Enter"
            });
            _react1.fireEvent.keyUp(button, {
                key: "Enter",
                code: "Enter"
            });
            // Focus and click should work
            button.focus();
            _react1.fireEvent.click(button);
            expect(onStartTraining).toHaveBeenCalled();
        });
        it("should have descriptive text content for screen readers", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps
            }));
            // Important content should be visible to screen readers
            expect(_react1.screen.getByText("Fortschritt")).toBeInTheDocument();
            expect(_react1.screen.getByText("Erfolgsrate")).toBeInTheDocument();
            expect(_react1.screen.getByText("Heute fällig")).toBeInTheDocument();
        });
    });
    describe("Edge Cases", ()=>{
        it("should handle very high success rates", ()=>{
            const highSuccessStats = {
                ...mockProgressStats,
                successRate: 0.999
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                stats: highSuccessStats
            }));
            expect(_react1.screen.getByText("100%")).toBeInTheDocument(); // Rounded to 100%
        });
        it("should handle very low success rates", ()=>{
            const lowSuccessStats = {
                ...mockProgressStats,
                successRate: 0.001
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                stats: lowSuccessStats
            }));
            expect(_react1.screen.getByText("0%")).toBeInTheDocument(); // Rounded to 0%
        });
        it("should handle large numbers", ()=>{
            const largeStats = {
                total: 1000,
                completed: 567,
                successRate: 0.843,
                dueToday: 99,
                streak: 150
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                stats: largeStats
            }));
            expect(_react1.screen.getByText("567/1000")).toBeInTheDocument();
            expect(_react1.screen.getByText("57% abgeschlossen")).toBeInTheDocument(); // 567/1000 = 56.7% → 57%
            expect(_react1.screen.getByText("84%")).toBeInTheDocument(); // 84.3% → 84%
            expect(_react1.screen.getByText("99")).toBeInTheDocument();
            expect(_react1.screen.getByText("150 Tage Streak")).toBeInTheDocument();
        });
        it("should handle completed > total gracefully", ()=>{
            const invalidStats = {
                ...mockProgressStats,
                total: 10,
                completed: 15
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps,
                stats: invalidStats
            }));
            expect(_react1.screen.getByText("15/10")).toBeInTheDocument();
            expect(_react1.screen.getByText("150% abgeschlossen")).toBeInTheDocument(); // 15/10 = 150%
        });
    });
    describe("Component Memoization", ()=>{
        it("should be memoized with React.memo", ()=>{
            expect(_ProgressCard.ProgressCard.displayName).toBe("ProgressCard");
        });
        it("should not re-render with same props", ()=>{
            var _screen_getByText_closest, _screen_getByText_closest1;
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps
            }));
            const initialHtml = (_screen_getByText_closest = _react1.screen.getByText("King and Queen vs King").closest("div")) === null || _screen_getByText_closest === void 0 ? void 0 : _screen_getByText_closest.outerHTML;
            // Re-render with same props
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProgressCard.ProgressCard, {
                ...defaultProps
            }));
            const secondHtml = (_screen_getByText_closest1 = _react1.screen.getByText("King and Queen vs King").closest("div")) === null || _screen_getByText_closest1 === void 0 ? void 0 : _screen_getByText_closest1.outerHTML;
            expect(initialHtml).toBe(secondHtml);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,