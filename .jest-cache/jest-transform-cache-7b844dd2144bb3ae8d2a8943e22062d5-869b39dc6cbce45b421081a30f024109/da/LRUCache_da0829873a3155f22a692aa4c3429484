f792d6dc2073b603ccf3ee4dd64a7155
/**
 * @file Minimal LRU Cache implementation for position caching
 * @module lib/cache/LRUCache
 * 
 * @description
 * Lightweight Least Recently Used (LRU) cache implementation designed
 * specifically for chess position caching without external dependencies.
 * Provides efficient memory management with automatic eviction of least
 * recently used entries when capacity is exceeded.
 * 
 * @remarks
 * Key features:
 * - Generic type support for flexible data storage
 * - Automatic LRU eviction policy
 * - Cache statistics tracking (hits, misses, hit rate)
 * - Memory usage estimation
 * - Performance metrics for optimization
 * - Clean, minimal API without external dependencies
 * 
 * The cache uses JavaScript's Map for O(1) operations and maintains
 * insertion order for efficient LRU tracking.
 */ /**
 * Cache statistics interface for performance monitoring
 * 
 * @interface CacheStats
 * 
 * @property {number} hits - Number of successful cache lookups
 * @property {number} misses - Number of failed cache lookups
 * @property {number} size - Current number of items in cache
 * @property {number} maxSize - Maximum cache capacity
 * @property {number} hitRate - Cache hit rate as a decimal (0.0 to 1.0)
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LRUCache", {
    enumerable: true,
    get: function() {
        return LRUCache;
    }
});
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
class LRUCache {
    /**
   * Get a value from the cache
   * 
   * @param {string} key - The cache key to look up
   * @returns {T | undefined} The cached value or undefined if not found
   * 
   * @description
   * Retrieves a value from the cache and marks it as recently used.
   * Updates hit/miss statistics and moves the accessed item to the
   * end of the cache (most recently used position).
   */ get(key) {
        const value = this.cache.get(key);
        if (value !== undefined) {
            this.hits++;
            // Move to end (most recently used)
            this.cache.delete(key);
            this.cache.set(key, value);
            return value;
        }
        this.misses++;
        return undefined;
    }
    /**
   * Set a value in the cache
   * 
   * @param {string} key - The cache key
   * @param {T} value - The value to store
   * 
   * @description
   * Stores a value in the cache. If the cache is at capacity,
   * evicts the least recently used item. If the key already exists,
   * updates the value and marks it as recently used.
   */ set(key, value) {
        // Remove if exists (to reorder)
        if (this.cache.has(key)) {
            this.cache.delete(key);
        } else if (this.cache.size >= this.maxSize) {
            // Remove oldest (first) entry
            const firstKey = this.cache.keys().next().value;
            if (firstKey !== undefined) {
                this.cache.delete(firstKey);
            }
        }
        this.cache.set(key, value);
    }
    /**
   * Check if a key exists in the cache
   * 
   * @param {string} key - The cache key to check
   * @returns {boolean} True if the key exists in the cache
   */ has(key) {
        return this.cache.has(key);
    }
    /**
   * Delete a key from the cache
   * 
   * @param {string} key - The cache key to delete
   * @returns {boolean} True if the key was deleted, false if it didn't exist
   */ delete(key) {
        return this.cache.delete(key);
    }
    /**
   * Clear all items from the cache and reset statistics
   * 
   * @description
   * Removes all cached items and resets hit/miss counters to zero.
   * Useful for testing or when cache needs to be completely refreshed.
   */ clear() {
        this.cache.clear();
        this.hits = 0;
        this.misses = 0;
    }
    /**
   * Get cache performance statistics
   * 
   * @returns {CacheStats} Object containing cache statistics
   * 
   * @description
   * Returns comprehensive statistics including hit rate, current size,
   * and total hits/misses for performance monitoring and optimization.
   */ getStats() {
        const total = this.hits + this.misses;
        return {
            hits: this.hits,
            misses: this.misses,
            size: this.cache.size,
            maxSize: this.maxSize,
            hitRate: total > 0 ? this.hits / total : 0
        };
    }
    /**
   * Estimate memory usage of the cache
   * 
   * @returns {number} Estimated memory usage in bytes
   * 
   * @description
   * Provides a rough estimate of memory usage by assuming
   * approximately 1KB per cache entry. Useful for monitoring
   * memory consumption in production environments.
   */ getMemoryUsage() {
        // Rough estimate
        return this.cache.size * 1000; // Assume 1KB per entry
    }
    /**
   * Get all cache keys
   * 
   * @returns {string[]} Array of all cache keys
   * 
   * @description
   * Returns an array of all keys currently in the cache.
   * Keys are returned in insertion order (least to most recent).
   */ keys() {
        return Array.from(this.cache.keys());
    }
    /**
   * Create a new LRU cache
   * 
   * @param {number} [maxSize=100] - Maximum number of items to store
   */ constructor(maxSize = 100){
        _define_property(this, "cache", new Map());
        _define_property(this, "maxSize", void 0);
        _define_property(this, "hits", 0);
        _define_property(this, "misses", 0);
        this.maxSize = maxSize;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL2xpYi9jYWNoZS9MUlVDYWNoZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIE1pbmltYWwgTFJVIENhY2hlIGltcGxlbWVudGF0aW9uIGZvciBwb3NpdGlvbiBjYWNoaW5nXG4gKiBAbW9kdWxlIGxpYi9jYWNoZS9MUlVDYWNoZVxuICogXG4gKiBAZGVzY3JpcHRpb25cbiAqIExpZ2h0d2VpZ2h0IExlYXN0IFJlY2VudGx5IFVzZWQgKExSVSkgY2FjaGUgaW1wbGVtZW50YXRpb24gZGVzaWduZWRcbiAqIHNwZWNpZmljYWxseSBmb3IgY2hlc3MgcG9zaXRpb24gY2FjaGluZyB3aXRob3V0IGV4dGVybmFsIGRlcGVuZGVuY2llcy5cbiAqIFByb3ZpZGVzIGVmZmljaWVudCBtZW1vcnkgbWFuYWdlbWVudCB3aXRoIGF1dG9tYXRpYyBldmljdGlvbiBvZiBsZWFzdFxuICogcmVjZW50bHkgdXNlZCBlbnRyaWVzIHdoZW4gY2FwYWNpdHkgaXMgZXhjZWVkZWQuXG4gKiBcbiAqIEByZW1hcmtzXG4gKiBLZXkgZmVhdHVyZXM6XG4gKiAtIEdlbmVyaWMgdHlwZSBzdXBwb3J0IGZvciBmbGV4aWJsZSBkYXRhIHN0b3JhZ2VcbiAqIC0gQXV0b21hdGljIExSVSBldmljdGlvbiBwb2xpY3lcbiAqIC0gQ2FjaGUgc3RhdGlzdGljcyB0cmFja2luZyAoaGl0cywgbWlzc2VzLCBoaXQgcmF0ZSlcbiAqIC0gTWVtb3J5IHVzYWdlIGVzdGltYXRpb25cbiAqIC0gUGVyZm9ybWFuY2UgbWV0cmljcyBmb3Igb3B0aW1pemF0aW9uXG4gKiAtIENsZWFuLCBtaW5pbWFsIEFQSSB3aXRob3V0IGV4dGVybmFsIGRlcGVuZGVuY2llc1xuICogXG4gKiBUaGUgY2FjaGUgdXNlcyBKYXZhU2NyaXB0J3MgTWFwIGZvciBPKDEpIG9wZXJhdGlvbnMgYW5kIG1haW50YWluc1xuICogaW5zZXJ0aW9uIG9yZGVyIGZvciBlZmZpY2llbnQgTFJVIHRyYWNraW5nLlxuICovXG5cbi8qKlxuICogQ2FjaGUgc3RhdGlzdGljcyBpbnRlcmZhY2UgZm9yIHBlcmZvcm1hbmNlIG1vbml0b3JpbmdcbiAqIFxuICogQGludGVyZmFjZSBDYWNoZVN0YXRzXG4gKiBcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoaXRzIC0gTnVtYmVyIG9mIHN1Y2Nlc3NmdWwgY2FjaGUgbG9va3Vwc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IG1pc3NlcyAtIE51bWJlciBvZiBmYWlsZWQgY2FjaGUgbG9va3Vwc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpemUgLSBDdXJyZW50IG51bWJlciBvZiBpdGVtcyBpbiBjYWNoZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1heFNpemUgLSBNYXhpbXVtIGNhY2hlIGNhcGFjaXR5XG4gKiBAcHJvcGVydHkge251bWJlcn0gaGl0UmF0ZSAtIENhY2hlIGhpdCByYXRlIGFzIGEgZGVjaW1hbCAoMC4wIHRvIDEuMClcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYWNoZVN0YXRzIHtcbiAgaGl0czogbnVtYmVyO1xuICBtaXNzZXM6IG51bWJlcjtcbiAgc2l6ZTogbnVtYmVyO1xuICBtYXhTaXplOiBudW1iZXI7XG4gIGhpdFJhdGU6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBMUlUgQ2FjaGUgaW1wbGVtZW50YXRpb24gd2l0aCBnZW5lcmljIHR5cGUgc3VwcG9ydFxuICogXG4gKiBAdGVtcGxhdGUgVCBUaGUgdHlwZSBvZiB2YWx1ZXMgc3RvcmVkIGluIHRoZSBjYWNoZVxuICogXG4gKiBAY2xhc3MgTFJVQ2FjaGVcbiAqIEBkZXNjcmlwdGlvblxuICogSW1wbGVtZW50cyBhIExlYXN0IFJlY2VudGx5IFVzZWQgY2FjaGUgd2l0aCBhdXRvbWF0aWMgZXZpY3Rpb24uXG4gKiBVc2VzIGEgTWFwIGZvciBPKDEpIG9wZXJhdGlvbnMgYW5kIG1haW50YWlucyBpbnNlcnRpb24gb3JkZXIgZm9yXG4gKiBlZmZpY2llbnQgTFJVIHRyYWNraW5nLiBQcm92aWRlcyBjb21wcmVoZW5zaXZlIHN0YXRpc3RpY3MgdHJhY2tpbmcuXG4gKiBcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyBDcmVhdGUgY2FjaGUgZm9yIGNoZXNzIHBvc2l0aW9uc1xuICogY29uc3QgcG9zaXRpb25DYWNoZSA9IG5ldyBMUlVDYWNoZTxQb3NpdGlvbkV2YWx1YXRpb24+KDIwMCk7XG4gKiBcbiAqIC8vIFN0b3JlIGFuZCByZXRyaWV2ZSB2YWx1ZXNcbiAqIHBvc2l0aW9uQ2FjaGUuc2V0KCdmZW4xJywgZXZhbHVhdGlvbik7XG4gKiBjb25zdCBjYWNoZWQgPSBwb3NpdGlvbkNhY2hlLmdldCgnZmVuMScpO1xuICogXG4gKiAvLyBNb25pdG9yIHBlcmZvcm1hbmNlXG4gKiBjb25zdCBzdGF0cyA9IHBvc2l0aW9uQ2FjaGUuZ2V0U3RhdHMoKTtcbiAqIGNvbnNvbGUubG9nKGBIaXQgcmF0ZTogJHsoc3RhdHMuaGl0UmF0ZSAqIDEwMCkudG9GaXhlZCgxKX0lYCk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIExSVUNhY2hlPFQ+IHtcbiAgcHJpdmF0ZSBjYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBUPigpO1xuICBwcml2YXRlIHJlYWRvbmx5IG1heFNpemU6IG51bWJlcjtcbiAgcHJpdmF0ZSBoaXRzID0gMDtcbiAgcHJpdmF0ZSBtaXNzZXMgPSAwO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgTFJVIGNhY2hlXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcn0gW21heFNpemU9MTAwXSAtIE1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHRvIHN0b3JlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtYXhTaXplOiBudW1iZXIgPSAxMDApIHtcbiAgICB0aGlzLm1heFNpemUgPSBtYXhTaXplO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIHZhbHVlIGZyb20gdGhlIGNhY2hlXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGNhY2hlIGtleSB0byBsb29rIHVwXG4gICAqIEByZXR1cm5zIHtUIHwgdW5kZWZpbmVkfSBUaGUgY2FjaGVkIHZhbHVlIG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmRcbiAgICogXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgYSB2YWx1ZSBmcm9tIHRoZSBjYWNoZSBhbmQgbWFya3MgaXQgYXMgcmVjZW50bHkgdXNlZC5cbiAgICogVXBkYXRlcyBoaXQvbWlzcyBzdGF0aXN0aWNzIGFuZCBtb3ZlcyB0aGUgYWNjZXNzZWQgaXRlbSB0byB0aGVcbiAgICogZW5kIG9mIHRoZSBjYWNoZSAobW9zdCByZWNlbnRseSB1c2VkIHBvc2l0aW9uKS5cbiAgICovXG4gIGdldChrZXk6IHN0cmluZyk6IFQgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5oaXRzKys7XG4gICAgICAvLyBNb3ZlIHRvIGVuZCAobW9zdCByZWNlbnRseSB1c2VkKVxuICAgICAgdGhpcy5jYWNoZS5kZWxldGUoa2V5KTtcbiAgICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLm1pc3NlcysrO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgdmFsdWUgaW4gdGhlIGNhY2hlXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGNhY2hlIGtleVxuICAgKiBAcGFyYW0ge1R9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHN0b3JlXG4gICAqIFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3RvcmVzIGEgdmFsdWUgaW4gdGhlIGNhY2hlLiBJZiB0aGUgY2FjaGUgaXMgYXQgY2FwYWNpdHksXG4gICAqIGV2aWN0cyB0aGUgbGVhc3QgcmVjZW50bHkgdXNlZCBpdGVtLiBJZiB0aGUga2V5IGFscmVhZHkgZXhpc3RzLFxuICAgKiB1cGRhdGVzIHRoZSB2YWx1ZSBhbmQgbWFya3MgaXQgYXMgcmVjZW50bHkgdXNlZC5cbiAgICovXG4gIHNldChrZXk6IHN0cmluZywgdmFsdWU6IFQpOiB2b2lkIHtcbiAgICAvLyBSZW1vdmUgaWYgZXhpc3RzICh0byByZW9yZGVyKVxuICAgIGlmICh0aGlzLmNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICB0aGlzLmNhY2hlLmRlbGV0ZShrZXkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jYWNoZS5zaXplID49IHRoaXMubWF4U2l6ZSkge1xuICAgICAgLy8gUmVtb3ZlIG9sZGVzdCAoZmlyc3QpIGVudHJ5XG4gICAgICBjb25zdCBmaXJzdEtleSA9IHRoaXMuY2FjaGUua2V5cygpLm5leHQoKS52YWx1ZTtcbiAgICAgIGlmIChmaXJzdEtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGZpcnN0S2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBrZXkgZXhpc3RzIGluIHRoZSBjYWNoZVxuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBjYWNoZSBrZXkgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGtleSBleGlzdHMgaW4gdGhlIGNhY2hlXG4gICAqL1xuICBoYXMoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSBrZXkgZnJvbSB0aGUgY2FjaGVcbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUgY2FjaGUga2V5IHRvIGRlbGV0ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUga2V5IHdhcyBkZWxldGVkLCBmYWxzZSBpZiBpdCBkaWRuJ3QgZXhpc3RcbiAgICovXG4gIGRlbGV0ZShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNhY2hlLmRlbGV0ZShrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpdGVtcyBmcm9tIHRoZSBjYWNoZSBhbmQgcmVzZXQgc3RhdGlzdGljc1xuICAgKiBcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlbW92ZXMgYWxsIGNhY2hlZCBpdGVtcyBhbmQgcmVzZXRzIGhpdC9taXNzIGNvdW50ZXJzIHRvIHplcm8uXG4gICAqIFVzZWZ1bCBmb3IgdGVzdGluZyBvciB3aGVuIGNhY2hlIG5lZWRzIHRvIGJlIGNvbXBsZXRlbHkgcmVmcmVzaGVkLlxuICAgKi9cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5jYWNoZS5jbGVhcigpO1xuICAgIHRoaXMuaGl0cyA9IDA7XG4gICAgdGhpcy5taXNzZXMgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjYWNoZSBwZXJmb3JtYW5jZSBzdGF0aXN0aWNzXG4gICAqIFxuICAgKiBAcmV0dXJucyB7Q2FjaGVTdGF0c30gT2JqZWN0IGNvbnRhaW5pbmcgY2FjaGUgc3RhdGlzdGljc1xuICAgKiBcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHVybnMgY29tcHJlaGVuc2l2ZSBzdGF0aXN0aWNzIGluY2x1ZGluZyBoaXQgcmF0ZSwgY3VycmVudCBzaXplLFxuICAgKiBhbmQgdG90YWwgaGl0cy9taXNzZXMgZm9yIHBlcmZvcm1hbmNlIG1vbml0b3JpbmcgYW5kIG9wdGltaXphdGlvbi5cbiAgICovXG4gIGdldFN0YXRzKCk6IENhY2hlU3RhdHMge1xuICAgIGNvbnN0IHRvdGFsID0gdGhpcy5oaXRzICsgdGhpcy5taXNzZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhpdHM6IHRoaXMuaGl0cyxcbiAgICAgIG1pc3NlczogdGhpcy5taXNzZXMsXG4gICAgICBzaXplOiB0aGlzLmNhY2hlLnNpemUsXG4gICAgICBtYXhTaXplOiB0aGlzLm1heFNpemUsXG4gICAgICBoaXRSYXRlOiB0b3RhbCA+IDAgPyB0aGlzLmhpdHMgLyB0b3RhbCA6IDAsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFc3RpbWF0ZSBtZW1vcnkgdXNhZ2Ugb2YgdGhlIGNhY2hlXG4gICAqIFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBFc3RpbWF0ZWQgbWVtb3J5IHVzYWdlIGluIGJ5dGVzXG4gICAqIFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUHJvdmlkZXMgYSByb3VnaCBlc3RpbWF0ZSBvZiBtZW1vcnkgdXNhZ2UgYnkgYXNzdW1pbmdcbiAgICogYXBwcm94aW1hdGVseSAxS0IgcGVyIGNhY2hlIGVudHJ5LiBVc2VmdWwgZm9yIG1vbml0b3JpbmdcbiAgICogbWVtb3J5IGNvbnN1bXB0aW9uIGluIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzLlxuICAgKi9cbiAgZ2V0TWVtb3J5VXNhZ2UoKTogbnVtYmVyIHtcbiAgICAvLyBSb3VnaCBlc3RpbWF0ZVxuICAgIHJldHVybiB0aGlzLmNhY2hlLnNpemUgKiAxMDAwOyAvLyBBc3N1bWUgMUtCIHBlciBlbnRyeVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgY2FjaGUga2V5c1xuICAgKiBcbiAgICogQHJldHVybnMge3N0cmluZ1tdfSBBcnJheSBvZiBhbGwgY2FjaGUga2V5c1xuICAgKiBcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgYWxsIGtleXMgY3VycmVudGx5IGluIHRoZSBjYWNoZS5cbiAgICogS2V5cyBhcmUgcmV0dXJuZWQgaW4gaW5zZXJ0aW9uIG9yZGVyIChsZWFzdCB0byBtb3N0IHJlY2VudCkuXG4gICAqL1xuICBrZXlzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmNhY2hlLmtleXMoKSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJMUlVDYWNoZSIsImdldCIsImtleSIsInZhbHVlIiwiY2FjaGUiLCJ1bmRlZmluZWQiLCJoaXRzIiwiZGVsZXRlIiwic2V0IiwibWlzc2VzIiwiaGFzIiwic2l6ZSIsIm1heFNpemUiLCJmaXJzdEtleSIsImtleXMiLCJuZXh0IiwiY2xlYXIiLCJnZXRTdGF0cyIsInRvdGFsIiwiaGl0UmF0ZSIsImdldE1lbW9yeVVzYWdlIiwiQXJyYXkiLCJmcm9tIiwiTWFwIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUJDLEdBRUQ7Ozs7Ozs7Ozs7Q0FVQzs7OzsrQkFrQ1lBOzs7ZUFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTixNQUFNQTtJQWVYOzs7Ozs7Ozs7O0dBVUMsR0FDREMsSUFBSUMsR0FBVyxFQUFpQjtRQUM5QixNQUFNQyxRQUFRLElBQUksQ0FBQ0MsS0FBSyxDQUFDSCxHQUFHLENBQUNDO1FBQzdCLElBQUlDLFVBQVVFLFdBQVc7WUFDdkIsSUFBSSxDQUFDQyxJQUFJO1lBQ1QsbUNBQW1DO1lBQ25DLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxNQUFNLENBQUNMO1lBQ2xCLElBQUksQ0FBQ0UsS0FBSyxDQUFDSSxHQUFHLENBQUNOLEtBQUtDO1lBQ3BCLE9BQU9BO1FBQ1Q7UUFDQSxJQUFJLENBQUNNLE1BQU07UUFDWCxPQUFPSjtJQUNUO0lBRUE7Ozs7Ozs7Ozs7R0FVQyxHQUNERyxJQUFJTixHQUFXLEVBQUVDLEtBQVEsRUFBUTtRQUMvQixnQ0FBZ0M7UUFDaEMsSUFBSSxJQUFJLENBQUNDLEtBQUssQ0FBQ00sR0FBRyxDQUFDUixNQUFNO1lBQ3ZCLElBQUksQ0FBQ0UsS0FBSyxDQUFDRyxNQUFNLENBQUNMO1FBQ3BCLE9BQU8sSUFBSSxJQUFJLENBQUNFLEtBQUssQ0FBQ08sSUFBSSxJQUFJLElBQUksQ0FBQ0MsT0FBTyxFQUFFO1lBQzFDLDhCQUE4QjtZQUM5QixNQUFNQyxXQUFXLElBQUksQ0FBQ1QsS0FBSyxDQUFDVSxJQUFJLEdBQUdDLElBQUksR0FBR1osS0FBSztZQUMvQyxJQUFJVSxhQUFhUixXQUFXO2dCQUMxQixJQUFJLENBQUNELEtBQUssQ0FBQ0csTUFBTSxDQUFDTTtZQUNwQjtRQUNGO1FBQ0EsSUFBSSxDQUFDVCxLQUFLLENBQUNJLEdBQUcsQ0FBQ04sS0FBS0M7SUFDdEI7SUFFQTs7Ozs7R0FLQyxHQUNETyxJQUFJUixHQUFXLEVBQVc7UUFDeEIsT0FBTyxJQUFJLENBQUNFLEtBQUssQ0FBQ00sR0FBRyxDQUFDUjtJQUN4QjtJQUVBOzs7OztHQUtDLEdBQ0RLLE9BQU9MLEdBQVcsRUFBVztRQUMzQixPQUFPLElBQUksQ0FBQ0UsS0FBSyxDQUFDRyxNQUFNLENBQUNMO0lBQzNCO0lBRUE7Ozs7OztHQU1DLEdBQ0RjLFFBQWM7UUFDWixJQUFJLENBQUNaLEtBQUssQ0FBQ1ksS0FBSztRQUNoQixJQUFJLENBQUNWLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0csTUFBTSxHQUFHO0lBQ2hCO0lBRUE7Ozs7Ozs7O0dBUUMsR0FDRFEsV0FBdUI7UUFDckIsTUFBTUMsUUFBUSxJQUFJLENBQUNaLElBQUksR0FBRyxJQUFJLENBQUNHLE1BQU07UUFDckMsT0FBTztZQUNMSCxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmRyxRQUFRLElBQUksQ0FBQ0EsTUFBTTtZQUNuQkUsTUFBTSxJQUFJLENBQUNQLEtBQUssQ0FBQ08sSUFBSTtZQUNyQkMsU0FBUyxJQUFJLENBQUNBLE9BQU87WUFDckJPLFNBQVNELFFBQVEsSUFBSSxJQUFJLENBQUNaLElBQUksR0FBR1ksUUFBUTtRQUMzQztJQUNGO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0RFLGlCQUF5QjtRQUN2QixpQkFBaUI7UUFDakIsT0FBTyxJQUFJLENBQUNoQixLQUFLLENBQUNPLElBQUksR0FBRyxNQUFNLHVCQUF1QjtJQUN4RDtJQUVBOzs7Ozs7OztHQVFDLEdBQ0RHLE9BQWlCO1FBQ2YsT0FBT08sTUFBTUMsSUFBSSxDQUFDLElBQUksQ0FBQ2xCLEtBQUssQ0FBQ1UsSUFBSTtJQUNuQztJQXpJQTs7OztHQUlDLEdBQ0QsWUFBWUYsVUFBa0IsR0FBRyxDQUFFO1FBVm5DLHVCQUFRUixTQUFRLElBQUltQjtRQUNwQix1QkFBaUJYLFdBQWpCLEtBQUE7UUFDQSx1QkFBUU4sUUFBTztRQUNmLHVCQUFRRyxVQUFTO1FBUWYsSUFBSSxDQUFDRyxPQUFPLEdBQUdBO0lBQ2pCO0FBbUlGIn0=