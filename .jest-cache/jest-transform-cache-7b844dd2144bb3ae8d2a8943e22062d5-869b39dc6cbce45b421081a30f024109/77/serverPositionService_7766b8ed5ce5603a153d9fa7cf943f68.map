{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/database/__mocks__/serverPositionService.ts"],"sourcesContent":["/**\n * Mock for serverPositionService\n * Used in tests to simulate position navigation without database calls\n */\n\nimport { IPositionService } from \"../IPositionService\";\n\n// Mock implementation of IPositionService for tests\nconst mockPositionService: IPositionService = {\n  // Single position operations\n  getPosition: jest.fn().mockResolvedValue(null),\n  createPosition: jest.fn().mockResolvedValue(null),\n  updatePosition: jest.fn().mockResolvedValue(null),\n  deletePosition: jest.fn().mockResolvedValue(false),\n\n  // Bulk position operations\n  getAllPositions: jest.fn().mockResolvedValue([]),\n  getPositionsByCategory: jest.fn().mockResolvedValue([]),\n  getPositionsByDifficulty: jest.fn().mockResolvedValue([]),\n\n  // Search and filtering\n  searchPositions: jest.fn().mockResolvedValue([]),\n\n  // Navigation - Return null by default (no next/previous positions)\n  getNextPosition: jest.fn().mockResolvedValue(null),\n  getPreviousPosition: jest.fn().mockResolvedValue(null),\n\n  // Categories and chapters\n  getCategories: jest.fn().mockResolvedValue([]),\n  getChapters: jest.fn().mockResolvedValue([]),\n  getChaptersByCategory: jest.fn().mockResolvedValue([]),\n\n  // Statistics\n  getTotalPositionCount: jest.fn().mockResolvedValue(0),\n  getPositionCountByCategory: jest.fn().mockResolvedValue(0),\n\n  // Cache management\n  clearCache: jest.fn(),\n  getCacheStats: jest.fn().mockReturnValue({ size: 0, keys: [], enabled: false }),\n};\n\n// Export the factory functions that are used in the actual code\nexport const createServerPositionService = jest.fn(() => mockPositionService);\nexport const getServerPositionService = jest.fn(() => mockPositionService);\nexport const resetServerPositionService = jest.fn();\n\n// Export the mock service for test access\nexport const mockServerPositionService = mockPositionService;"],"names":["createServerPositionService","getServerPositionService","mockServerPositionService","resetServerPositionService","mockPositionService","getPosition","jest","fn","mockResolvedValue","createPosition","updatePosition","deletePosition","getAllPositions","getPositionsByCategory","getPositionsByDifficulty","searchPositions","getNextPosition","getPreviousPosition","getCategories","getChapters","getChaptersByCategory","getTotalPositionCount","getPositionCountByCategory","clearCache","getCacheStats","mockReturnValue","size","keys","enabled"],"mappings":"AAAA;;;CAGC;;;;;;;;;;;QAuCYA;eAAAA;;QACAC;eAAAA;;QAIAC;eAAAA;;QAHAC;eAAAA;;;AArCb,oDAAoD;AACpD,MAAMC,sBAAwC;IAC5C,6BAA6B;IAC7BC,aAAaC,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;IACzCC,gBAAgBH,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;IAC5CE,gBAAgBJ,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;IAC5CG,gBAAgBL,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;IAE5C,2BAA2B;IAC3BI,iBAAiBN,KAAKC,EAAE,GAAGC,iBAAiB,CAAC,EAAE;IAC/CK,wBAAwBP,KAAKC,EAAE,GAAGC,iBAAiB,CAAC,EAAE;IACtDM,0BAA0BR,KAAKC,EAAE,GAAGC,iBAAiB,CAAC,EAAE;IAExD,uBAAuB;IACvBO,iBAAiBT,KAAKC,EAAE,GAAGC,iBAAiB,CAAC,EAAE;IAE/C,mEAAmE;IACnEQ,iBAAiBV,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;IAC7CS,qBAAqBX,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;IAEjD,0BAA0B;IAC1BU,eAAeZ,KAAKC,EAAE,GAAGC,iBAAiB,CAAC,EAAE;IAC7CW,aAAab,KAAKC,EAAE,GAAGC,iBAAiB,CAAC,EAAE;IAC3CY,uBAAuBd,KAAKC,EAAE,GAAGC,iBAAiB,CAAC,EAAE;IAErD,aAAa;IACba,uBAAuBf,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;IACnDc,4BAA4BhB,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;IAExD,mBAAmB;IACnBe,YAAYjB,KAAKC,EAAE;IACnBiB,eAAelB,KAAKC,EAAE,GAAGkB,eAAe,CAAC;QAAEC,MAAM;QAAGC,MAAM,EAAE;QAAEC,SAAS;IAAM;AAC/E;AAGO,MAAM5B,8BAA8BM,KAAKC,EAAE,CAAC,IAAMH;AAClD,MAAMH,2BAA2BK,KAAKC,EAAE,CAAC,IAAMH;AAC/C,MAAMD,6BAA6BG,KAAKC,EAAE;AAG1C,MAAML,4BAA4BE"}