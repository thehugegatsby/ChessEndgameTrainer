03dc986993d275479f5074fa03701616
/**
 * @file Move quality evaluation module
 * @module store/orchestrators/handlePlayerMove/MoveQualityEvaluator
 *
 * @description
 * Evaluates chess move quality using tablebase analysis.
 * Compares player moves against optimal tablebase recommendations to determine
 * if moves are suboptimal and warrant user feedback through error dialogs.
 *
 * @remarks
 * Key features:
 * - Parallel tablebase API calls for performance
 * - WDL (Win/Draw/Loss) perspective conversion for accurate evaluation
 * - Best move comparison against top 3 tablebase recommendations
 * - Outcome change detection (Win->Draw/Loss, Draw->Loss)
 * - Comprehensive logging for debugging move evaluation logic
 *
 * @example
 * ```typescript
 * const evaluator = new MoveQualityEvaluator();
 * const result = await evaluator.evaluateMoveQuality(
 *   "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
 *   "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",
 *   { from: "e2", to: "e4", san: "e4", color: "w" }
 * );
 * if (result.shouldShowErrorDialog) {
 *   // Show error dialog to user
 * }
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MoveQualityEvaluator", {
    enumerable: true,
    get: function() {
        return MoveQualityEvaluator;
    }
});
const _TablebaseService = require("../../../services/TablebaseService");
const _logging = require("../../../services/logging");
/** Number of top moves to fetch from tablebase for comparison */ const TOP_MOVES_LIMIT = 3;
class MoveQualityEvaluator {
    /**
   * Evaluates the quality of a played move against tablebase recommendations
   *
   * @param fenBefore - FEN position before the move
   * @param fenAfter - FEN position after the move
   * @param validatedMove - The move that was played
   * @param trainingBaseline - Optional evaluation baseline for training context
   * @returns Quality evaluation result
   */ async evaluateMoveQuality(fenBefore, fenAfter, validatedMove, trainingBaseline) {
        try {
            // Get evaluations before and after the move in parallel for better performance
            const [evalBefore, evalAfter] = await Promise.all([
                this.getEvaluation(fenBefore),
                this.getEvaluation(fenAfter)
            ]);
            // Check if both evaluations are available
            if (!this.areEvaluationsValid(evalBefore, evalAfter)) {
                (0, _logging.getLogger)().debug("[MoveQuality] Skipping evaluation - insufficient data:", {
                    evalBeforeAvailable: evalBefore === null || evalBefore === void 0 ? void 0 : evalBefore.isAvailable,
                    evalAfterAvailable: evalAfter === null || evalAfter === void 0 ? void 0 : evalAfter.isAvailable,
                    hasBeforeResult: evalBefore && "result" in evalBefore,
                    hasAfterResult: evalAfter && "result" in evalAfter
                });
                return {
                    shouldShowErrorDialog: false,
                    wasOptimal: false,
                    outcomeChanged: false
                };
            }
            const wdlBefore = evalBefore.result.wdl;
            const wdlAfter = evalAfter.result.wdl;
            (0, _logging.getLogger)().debug("[MoveQuality] Evaluating move quality:", {
                moveColor: validatedMove.color,
                moveSan: validatedMove.san,
                wdlBefore,
                wdlAfter,
                fenBefore: fenBefore.split(" ")[0],
                fenAfter: fenAfter.split(" ")[0]
            });
            // Convert WDL values to player perspective
            const { wdlBeforeFromPlayerPerspective, wdlAfterFromPlayerPerspective } = this.convertToPlayerPerspective(wdlBefore, wdlAfter);
            // Determine effective baseline for comparison
            const effectiveWdlBefore = this.determineEffectiveBaseline(trainingBaseline, wdlBeforeFromPlayerPerspective);
            (0, _logging.getLogger)().debug("[MoveQuality] WDL evaluation context:", {
                wdlBeforeFromPlayerPerspective,
                wdlAfterFromPlayerPerspective,
                trainingBaselineWdl: trainingBaseline === null || trainingBaseline === void 0 ? void 0 : trainingBaseline.wdl,
                effectiveWdlBefore,
                usingBaseline: !!trainingBaseline
            });
            // Get best moves for comparison
            const topMoves = await _TablebaseService.tablebaseService.getTopMoves(fenBefore, TOP_MOVES_LIMIT).catch(()=>({
                    isAvailable: false,
                    moves: []
                }));
            // Check if the played move was one of the best moves
            const playedMoveWasBest = this.wasMoveBest(topMoves, validatedMove.san);
            this.logBestMovesComparison(topMoves, validatedMove.san, playedMoveWasBest);
            // Determine if outcome changed significantly - use baseline if available
            const outcomeChanged = this.didOutcomeChange(effectiveWdlBefore, wdlAfterFromPlayerPerspective);
            this.logDecisionValues(outcomeChanged, playedMoveWasBest, effectiveWdlBefore, wdlAfterFromPlayerPerspective);
            const shouldShowErrorDialog = this.shouldShowErrorDialog(playedMoveWasBest, outcomeChanged);
            const bestMove = this.getBestMove(topMoves);
            (0, _logging.getLogger)().info("[MoveQuality] Decision to show error dialog:", {
                shouldShowErrorDialog,
                playedMoveWasBest,
                outcomeChanged,
                effectiveWdlBefore,
                wdlAfterFromPlayerPerspective,
                usingBaseline: !!trainingBaseline,
                validatedMove: validatedMove.san,
                bestMove
            });
            if (shouldShowErrorDialog) {
                (0, _logging.getLogger)().info("[MoveQuality] Move quality issue detected - suggesting error dialog");
            }
            return {
                shouldShowErrorDialog,
                wdlBefore,
                wdlAfter,
                bestMove,
                wasOptimal: playedMoveWasBest,
                outcomeChanged
            };
        } catch (error) {
            (0, _logging.getLogger)().error("Move quality evaluation failed:", error);
            return {
                shouldShowErrorDialog: false,
                wasOptimal: false,
                outcomeChanged: false
            };
        }
    }
    /**
   * Gets tablebase evaluation for a position with error handling
   */ async getEvaluation(fen) {
        return await _TablebaseService.tablebaseService.getEvaluation(fen).catch(()=>({
                isAvailable: false
            }));
    }
    /**
   * Validates that both evaluations are available and have results
   */ areEvaluationsValid(evalBefore, evalAfter) {
        return this.hasValidResult(evalBefore) && this.hasValidResult(evalAfter);
    }
    /**
   * Checks if a single evaluation has a valid result
   */ hasValidResult(evaluation) {
        return evaluation.isAvailable && "result" in evaluation && !!evaluation.result;
    }
    /**
   * Converts WDL values from the Lichess Tablebase API to a consistent perspective
   * for the player who just moved.
   *
   * @remarks
   * The Lichess Tablebase API returns WDL from the perspective of the side whose turn it is
   * (the side-to-move perspective). This is standard behavior for chess tablebases and engines.
   *
   * - `wdlBefore`: The WDL score before the move was made. This is from the perspective
   *   of the player making the move (they were the side-to-move).
   * - `wdlAfter`: The WDL score after the move was made. The turn has now passed to the
   *   opponent, so this score is from the opponent's perspective.
   *
   * Therefore, to maintain the original player's perspective for comparison:
   * - `wdlBefore` needs no conversion (already from player's perspective)
   * - `wdlAfter` must be negated (convert from opponent's to player's perspective)
   *
   * @param wdlBefore The WDL score for the position before the move
   * @param wdlAfter The WDL score for the position after the move
   * @returns An object with both WDL values from the original player's perspective
   *
   * @example
   * // Black plays a losing move (Kd7 instead of drawing Ke7)
   * // wdlBefore = 0 (draw from Black's perspective as side-to-move)
   * // wdlAfter = 1000 (win from White's perspective as side-to-move)
   * // Returns: { wdlBeforeFromPlayerPerspective: 0, wdlAfterFromPlayerPerspective: -1000 }
   * // This correctly shows Black went from draw (0) to loss (-1000)
   */ convertToPlayerPerspective(wdlBefore, wdlAfter) {
        // wdlBefore is already from the moving player's perspective (side-to-move)
        const wdlBeforeFromPlayerPerspective = wdlBefore;
        // wdlAfter is from opponent's perspective (they are now side-to-move)
        // We need to negate it to get the moving player's perspective
        const wdlAfterFromPlayerPerspective = -wdlAfter;
        return {
            wdlBeforeFromPlayerPerspective,
            wdlAfterFromPlayerPerspective
        };
    }
    /**
   * Checks if the played move was among the best moves
   */ wasMoveBest(topMoves, playedMoveSan) {
        if (!this.hasAvailableMoves(topMoves)) {
            return false;
        }
        return topMoves.moves.some((m)=>m.san === playedMoveSan);
    }
    /**
   * Checks if tablebase moves are available
   */ hasAvailableMoves(topMoves) {
        return topMoves.isAvailable && !!topMoves.moves && topMoves.moves.length > 0;
    }
    /**
   * Determines if the move outcome changed significantly
   */ didOutcomeChange(wdlBeforeFromPlayerPerspective, wdlAfterFromPlayerPerspective) {
        const winTurnedIntoDrawOrLoss = this.isWinToDrawOrLoss(wdlBeforeFromPlayerPerspective, wdlAfterFromPlayerPerspective);
        const drawTurnedIntoLoss = this.isDrawToLoss(wdlBeforeFromPlayerPerspective, wdlAfterFromPlayerPerspective);
        return winTurnedIntoDrawOrLoss || drawTurnedIntoLoss;
    }
    /**
   * Checks if a winning position turned into a draw or loss
   */ isWinToDrawOrLoss(wdlBefore, wdlAfter) {
        return wdlBefore > 0 && wdlAfter <= 0;
    }
    /**
   * Checks if a drawn position turned into a loss
   */ isDrawToLoss(wdlBefore, wdlAfter) {
        return wdlBefore === 0 && wdlAfter < 0;
    }
    /**
   * Gets the best move from top moves result
   */ getBestMove(topMoves) {
        return topMoves.isAvailable && topMoves.moves && topMoves.moves.length > 0 ? topMoves.moves[0].san : undefined;
    }
    /**
   * Logs best moves comparison for debugging
   */ logBestMovesComparison(topMoves, playedMoveSan, playedMoveWasBest) {
        var _topMoves_moves;
        (0, _logging.getLogger)().info("[MoveQuality] Best moves check:");
        (0, _logging.getLogger)().info("  topMovesAvailable:", topMoves.isAvailable);
        (0, _logging.getLogger)().info("  bestMoves:", JSON.stringify((_topMoves_moves = topMoves.moves) === null || _topMoves_moves === void 0 ? void 0 : _topMoves_moves.map((m)=>m.san)));
        (0, _logging.getLogger)().info("  playedMove:", playedMoveSan);
        (0, _logging.getLogger)().info("  playedMoveWasBest:", playedMoveWasBest);
        // Debug each move comparison
        if (topMoves.moves) {
            (0, _logging.getLogger)().debug("  Comparing each move:");
            topMoves.moves.forEach((m, i)=>{
                (0, _logging.getLogger)().debug(`    Move ${i}: "${m.san}" === "${playedMoveSan}" ? ${m.san === playedMoveSan}`);
            });
        }
    }
    /**
   * Determines the effective baseline for comparison
   */ determineEffectiveBaseline(trainingBaseline, wdlBeforeFromPlayerPerspective) {
        var _trainingBaseline_wdl;
        return (_trainingBaseline_wdl = trainingBaseline === null || trainingBaseline === void 0 ? void 0 : trainingBaseline.wdl) !== null && _trainingBaseline_wdl !== void 0 ? _trainingBaseline_wdl : wdlBeforeFromPlayerPerspective;
    }
    /**
   * Determines if error dialog should be shown based on move quality
   */ shouldShowErrorDialog(playedMoveWasBest, outcomeChanged) {
        return !playedMoveWasBest && outcomeChanged;
    }
    /**
   * Logs decision values for debugging
   */ logDecisionValues(outcomeChanged, playedMoveWasBest, effectiveWdlBefore, wdlAfterFromPlayerPerspective) {
        (0, _logging.getLogger)().debug("[MoveQuality] DECISION VALUES:");
        (0, _logging.getLogger)().debug("  outcomeChanged:", outcomeChanged);
        (0, _logging.getLogger)().debug("  playedMoveWasBest:", playedMoveWasBest);
        (0, _logging.getLogger)().debug("  effectiveWdlBefore:", effectiveWdlBefore);
        (0, _logging.getLogger)().debug("  wdlAfterFromPlayerPerspective:", wdlAfterFromPlayerPerspective);
        (0, _logging.getLogger)().debug("  showDialog:", !playedMoveWasBest && outcomeChanged);
    }
}

//# sourceMappingURL=data:application/json;base64,