d2243168df3687311e2464868597e12e
/**
 * @file Tests for useMoveQuality hook
 * @module tests/unit/hooks/useMoveQuality
 * 
 * @description
 * Basic tests for the useMoveQuality hook interface and functionality.
 * This hook provides on-demand move quality assessment.
 */ "use strict";
// Mock the logger
jest.mock('@shared/services/logging/Logger', ()=>({
        getLogger: jest.fn(()=>({
                setContext: jest.fn(()=>({
                        debug: jest.fn(),
                        info: jest.fn(),
                        warn: jest.fn(),
                        error: jest.fn()
                    })),
                debug: jest.fn(),
                info: jest.fn(),
                warn: jest.fn(),
                error: jest.fn()
            })),
        Logger: jest.fn().mockImplementation(()=>({
                debug: jest.fn(),
                info: jest.fn(),
                warn: jest.fn(),
                error: jest.fn()
            }))
    }));
// Mock tablebase service
jest.mock('@shared/services/TablebaseService', ()=>({
        tablebaseService: {
            getEvaluation: jest.fn()
        }
    }));
// Mock move quality utils
jest.mock('@shared/utils/moveQuality', ()=>({
        assessTablebaseMoveQuality: jest.fn()
    }));
// Mock chess.js
jest.mock('chess.js', ()=>({
        Chess: jest.fn().mockImplementation((fen)=>({
                move: jest.fn().mockReturnValue({
                    san: 'Kh1'
                }),
                fen: jest.fn(()=>fen || '8/8/8/8/8/8/8/8 w - - 0 1'),
                turn: jest.fn(()=>'w')
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useMoveQuality = require("../../../shared/hooks/useMoveQuality");
describe('useMoveQuality', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Hook Initialization', ()=>{
        it('returns correct interface with initial state', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            expect(result.current).toHaveProperty('data');
            expect(result.current).toHaveProperty('isLoading');
            expect(result.current).toHaveProperty('error');
            expect(result.current).toHaveProperty('assessMove');
            expect(result.current).toHaveProperty('clearAnalysis');
            // Initial state
            expect(result.current.data).toBeNull();
            expect(result.current.isLoading).toBe(false);
            expect(result.current.error).toBeNull();
            expect(typeof result.current.assessMove).toBe('function');
            expect(typeof result.current.clearAnalysis).toBe('function');
        });
        it('works with basic functionality', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            // Test that clearAnalysis works
            (0, _react.act)(()=>{
                result.current.clearAnalysis();
            });
            expect(result.current.data).toBeNull();
            expect(result.current.isLoading).toBe(false);
            expect(result.current.error).toBeNull();
        });
    });
    describe('Basic Functionality', ()=>{
        it('provides assessMove function that can be called', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            // Test that function exists and can be called without crashing
            expect(typeof result.current.assessMove).toBe('function');
            // Call it but don't make assertions about behavior since
            // the implementation may vary
            try {
                await (0, _react.act)(async ()=>{
                    await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');
                });
            } catch (error) {
            // Error handling is implementation-dependent
            }
            // Hook should still be in valid state
            expect(result.current).toBeDefined();
        });
        it('clearAnalysis resets state', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            (0, _react.act)(()=>{
                result.current.clearAnalysis();
            });
            expect(result.current.data).toBeNull();
            expect(result.current.isLoading).toBe(false);
            expect(result.current.error).toBeNull();
        });
    });
    describe('Hook Lifecycle', ()=>{
        it('cleans up properly on unmount', ()=>{
            const { unmount } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            // Should not throw on unmount
            expect(()=>{
                unmount();
            }).not.toThrow();
        });
        it('maintains stable function references', ()=>{
            const { result, rerender } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            const initialAssessMove = result.current.assessMove;
            const initialClearAnalysis = result.current.clearAnalysis;
            rerender();
            // Functions should be stable due to useCallback
            expect(result.current.assessMove).toBe(initialAssessMove);
            expect(result.current.clearAnalysis).toBe(initialClearAnalysis);
        });
    });
    describe('Move Assessment Scenarios', ()=>{
        beforeEach(()=>{
            // Reset mocks with default successful behavior
            const { tablebaseService } = require('@shared/services/TablebaseService');
            const { assessTablebaseMoveQuality } = require('@shared/utils/moveQuality');
            tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result: {
                    wdl: 1,
                    category: 'win'
                }
            });
            assessTablebaseMoveQuality.mockReturnValue({
                quality: 'excellent',
                reason: 'Best move',
                isTablebaseAnalysis: true
            });
        });
        it('handles invalid moves', async ()=>{
            // Mock Chess to simulate invalid move
            const { Chess } = require('chess.js');
            Chess.mockImplementation(()=>({
                    move: jest.fn().mockReturnValue(null),
                    fen: jest.fn(()=>'8/8/8/8/8/8/8/8 w - - 0 1')
                }));
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            let assessmentResult;
            await (0, _react.act)(async ()=>{
                assessmentResult = await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'invalid', 'w');
            });
            expect(assessmentResult.quality).toBe('unknown');
            expect(assessmentResult.reason).toBe('Invalid move');
            expect(assessmentResult.isTablebaseAnalysis).toBe(false);
            expect(result.current.data).toEqual(assessmentResult);
        });
        it('handles positions without tablebase data', async ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: false,
                result: null
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            let assessmentResult;
            await (0, _react.act)(async ()=>{
                assessmentResult = await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');
            });
            expect(assessmentResult.quality).toBe('unknown');
            expect(assessmentResult.reason).toBe('No tablebase data available');
            expect(assessmentResult.isTablebaseAnalysis).toBe(false);
        });
        it('completes successful assessment with logging', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            let assessmentResult;
            await (0, _react.act)(async ()=>{
                assessmentResult = await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');
            });
            expect(assessmentResult.quality).toBe('excellent');
            expect(assessmentResult.reason).toBe('Best move');
            expect(assessmentResult.isTablebaseAnalysis).toBe(true);
            expect(result.current.data).toEqual(assessmentResult);
            expect(result.current.isLoading).toBe(false);
            expect(result.current.error).toBeNull();
        });
        it('handles aborted requests gracefully', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            // Start first assessment
            const promise1 = (0, _react.act)(async ()=>{
                result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');
            });
            // Start second assessment that should abort the first
            const promise2 = (0, _react.act)(async ()=>{
                result.current.assessMove('4k3/8/4K3/4P3/8/8/8/8 w - - 0 1', 'Kh5', 'w');
            });
            // Wait for both to complete
            await Promise.all([
                promise1,
                promise2
            ]);
            // Should have the result from the second assessment
            expect(result.current.isLoading).toBe(false);
        });
    });
    describe('Error Handling', ()=>{
        it('handles tablebase service errors', async ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            tablebaseService.getEvaluation.mockRejectedValue(new Error('API Error'));
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');
                } catch (error) {
                    // Error should be caught and handled
                    expect(error).toBeInstanceOf(Error);
                }
            });
            expect(result.current.isLoading).toBe(false);
        });
        it('handles non-Error exceptions', async ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            tablebaseService.getEvaluation.mockRejectedValue('String error');
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');
                } catch (error) {
                    expect(error).toBeInstanceOf(Error);
                    expect(error.message).toBe('Unknown error occurred');
                }
            });
        });
    });
    describe('Integration', ()=>{
        it('handles basic integration scenarios', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            // Should start in clean state
            expect(result.current.data).toBeNull();
            expect(result.current.isLoading).toBe(false);
            expect(result.current.error).toBeNull();
            // Clear should maintain clean state
            (0, _react.act)(()=>{
                result.current.clearAnalysis();
            });
            expect(result.current.data).toBeNull();
            expect(result.current.isLoading).toBe(false);
            expect(result.current.error).toBeNull();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,