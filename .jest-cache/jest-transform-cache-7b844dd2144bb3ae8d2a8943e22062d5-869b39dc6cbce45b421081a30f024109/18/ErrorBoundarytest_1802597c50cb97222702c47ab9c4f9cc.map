{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/components/common/ErrorBoundary.test.tsx"],"sourcesContent":["/**\n * @file Unit tests for ErrorBoundary component\n * @module tests/unit/components/common/ErrorBoundary.test\n * \n * @description\n * Comprehensive test suite for the ErrorBoundary component and useErrorBoundary hook.\n * Tests error catching, logging, custom fallback UI, environment-specific behavior,\n * and error recovery functionality.\n * \n * @see {@link ErrorBoundary} - Component being tested\n * @see {@link useErrorBoundary} - Hook being tested\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, renderHook, act } from '@testing-library/react';\n\n// Mock logger before importing ErrorBoundary to intercept module-level initialization\njest.mock('@shared/services/logging', () => {\n  const mockLoggerInstance = {\n    error: jest.fn(),\n    setContext: jest.fn(function() { return this; }),\n  };\n  mockLoggerInstance.setContext.mockReturnValue(mockLoggerInstance);\n  \n  return {\n    getLogger: jest.fn(() => mockLoggerInstance),\n    /** \n     * Helper to access mock logger instance in tests \n     * @returns Mock logger instance\n     */\n    __getMockLogger: () => mockLoggerInstance,\n  };\n});\n\nimport { ErrorBoundary, useErrorBoundary } from '@shared/components/common/ErrorBoundary';\n\n// Get the mock logger instance for assertions\nconst { __getMockLogger } = require('@shared/services/logging');\nconst mockLoggerInstance = __getMockLogger();\n\n/**\n * Test component that conditionally throws an error\n * \n * @description Helper component for testing error boundary behavior.\n * Throws an error when shouldThrow prop is true, otherwise renders normally.\n * \n * @param props - Component props\n * @param props.shouldThrow - Whether to throw an error\n * @returns Rendered component or throws error\n * \n * @example\n * ```tsx\n * <ThrowError shouldThrow={true} /> // Throws error\n * <ThrowError shouldThrow={false} /> // Renders \"No error\"\n * ```\n */\nconst ThrowError: React.FC<{ shouldThrow: boolean }> = ({ shouldThrow }) => {\n  if (shouldThrow) {\n    throw new Error('Test error');\n  }\n  return <div>No error</div>;\n};\n\ndescribe('ErrorBoundary', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockLoggerInstance.error.mockClear();\n    mockLoggerInstance.setContext.mockClear();\n  });\n\n  it('renders children when there is no error', () => {\n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={false} />\n      </ErrorBoundary>\n    );\n    \n    expect(screen.getByText('No error')).toBeInTheDocument();\n  });\n\n  it('renders fallback UI when error occurs', () => {\n    // Suppress console.error for this test\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n    \n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n    \n    expect(screen.getByText(/etwas ist schiefgelaufen/i)).toBeInTheDocument();\n    \n    consoleSpy.mockRestore();\n  });\n\n  it('renders custom fallback when provided', () => {\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n    const customFallback = <div>Custom error message</div>;\n    \n    render(\n      <ErrorBoundary fallback={customFallback}>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n    \n    expect(screen.getByText('Custom error message')).toBeInTheDocument();\n    \n    consoleSpy.mockRestore();\n  });\n\n  it('logs error when componentDidCatch is called', () => {\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n    \n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n    \n    expect(mockLoggerInstance.error).toHaveBeenCalledWith(\n      'Component error caught by boundary',\n      expect.any(Error),\n      expect.objectContaining({\n        componentStack: expect.any(String),\n      })\n    );\n    \n    consoleSpy.mockRestore();\n  });\n\n  it('calls custom onError handler when provided', () => {\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n    const onError = jest.fn();\n    \n    render(\n      <ErrorBoundary onError={onError}>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n    \n    expect(onError).toHaveBeenCalledWith(\n      expect.any(Error),\n      expect.objectContaining({\n        componentStack: expect.any(String),\n      })\n    );\n    \n    consoleSpy.mockRestore();\n  });\n\n  it('displays error details in development mode', () => {\n    const originalEnv = process.env.NODE_ENV;\n    Object.defineProperty(process.env, 'NODE_ENV', {\n      value: 'development',\n      writable: true,\n      configurable: true\n    });\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n    \n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n    \n    expect(screen.getByText(/Fehlerdetails/)).toBeInTheDocument();\n    expect(screen.getByText(/Test error/)).toBeInTheDocument();\n    \n    consoleSpy.mockRestore();\n    Object.defineProperty(process.env, 'NODE_ENV', {\n      value: originalEnv,\n      writable: true,\n      configurable: true\n    });\n  });\n\n  it('does not display error details in production mode', () => {\n    const originalEnv = process.env.NODE_ENV;\n    Object.defineProperty(process.env, 'NODE_ENV', {\n      value: 'production',\n      writable: true,\n      configurable: true\n    });\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n    \n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n    \n    expect(screen.queryByText(/Fehlerdetails/)).not.toBeInTheDocument();\n    \n    consoleSpy.mockRestore();\n    Object.defineProperty(process.env, 'NODE_ENV', {\n      value: originalEnv,\n      writable: true,\n      configurable: true\n    });\n  });\n});\n\ndescribe('useErrorBoundary hook', () => {\n  it('provides resetKey and resetErrorBoundary function', () => {\n    const { result } = renderHook(() => useErrorBoundary());\n    \n    expect(result.current.resetKey).toBe(0);\n    expect(typeof result.current.resetErrorBoundary).toBe('function');\n  });\n\n  it('increments resetKey when resetErrorBoundary is called', () => {\n    const { result } = renderHook(() => useErrorBoundary());\n    \n    expect(result.current.resetKey).toBe(0);\n    \n    act(() => {\n      result.current.resetErrorBoundary();\n    });\n    \n    expect(result.current.resetKey).toBe(1);\n    \n    act(() => {\n      result.current.resetErrorBoundary();\n    });\n    \n    expect(result.current.resetKey).toBe(2);\n  });\n\n  it('allows error recovery through key reset', () => {\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n    \n    /**\n     * Test component demonstrating error recovery pattern\n     * \n     * @description\n     * Demonstrates how to use useErrorBoundary hook for error recovery.\n     * Uses resetKey to force ErrorBoundary remount and hasError state\n     * to control when the child component throws.\n     * \n     * @returns Component with error boundary and reset button\n     */\n    const TestComponent = () => {\n      const { resetKey, resetErrorBoundary } = useErrorBoundary();\n      const [hasError, setHasError] = React.useState(true);\n      \n      return (\n        <>\n          <ErrorBoundary key={resetKey}>\n            <ThrowError shouldThrow={hasError} />\n          </ErrorBoundary>\n          <button onClick={() => {\n            setHasError(false);\n            resetErrorBoundary();\n          }}>\n            Reset\n          </button>\n        </>\n      );\n    };\n    \n    render(<TestComponent />);\n    \n    // Initially shows error\n    expect(screen.getByText(/etwas ist schiefgelaufen/i)).toBeInTheDocument();\n    \n    // Click reset\n    fireEvent.click(screen.getByText('Reset'));\n    \n    // Now shows normal content\n    expect(screen.getByText('No error')).toBeInTheDocument();\n    expect(screen.queryByText(/etwas ist schiefgelaufen/i)).not.toBeInTheDocument();\n    \n    consoleSpy.mockRestore();\n  });\n});"],"names":["jest","mock","mockLoggerInstance","error","fn","setContext","mockReturnValue","getLogger","__getMockLogger","require","ThrowError","shouldThrow","Error","div","describe","beforeEach","clearAllMocks","mockClear","it","render","ErrorBoundary","expect","screen","getByText","toBeInTheDocument","consoleSpy","spyOn","console","mockImplementation","mockRestore","customFallback","fallback","toHaveBeenCalledWith","any","objectContaining","componentStack","String","onError","originalEnv","process","env","NODE_ENV","Object","defineProperty","value","writable","configurable","queryByText","not","result","renderHook","useErrorBoundary","current","resetKey","toBe","resetErrorBoundary","act","TestComponent","hasError","setHasError","React","useState","button","onClick","fireEvent","click"],"mappings":"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"}