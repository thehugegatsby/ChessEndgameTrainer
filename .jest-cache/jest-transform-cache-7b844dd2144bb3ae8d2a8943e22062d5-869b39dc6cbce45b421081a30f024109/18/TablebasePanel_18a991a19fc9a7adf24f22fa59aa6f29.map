{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/tablebase/TablebasePanel.tsx"],"sourcesContent":["/**\n * @file Tablebase analysis display panel\n * @module components/tablebase/TablebasePanel\n *\n * @description\n * Professional tablebase analysis panel with grouped move display,\n * color-coded evaluation bars, and interactive move selection.\n * Provides a Lichess-style interface for exploring tablebase evaluations.\n *\n * @remarks\n * Key features:\n * - Automatic move grouping by outcome (win/draw/loss)\n * - Visual DTZ (Distance to Zero) indicators\n * - Color-coded evaluation bars\n * - Expandable/collapsible move groups\n * - Loading and error state handling\n * - Responsive layout with compact mode\n *\n * The component integrates with the tablebase evaluation system\n * and provides visual feedback for optimal move selection.\n */\n\n\"use client\";\n\nimport React, { useMemo } from \"react\";\nimport { MoveResultGroup } from \"./MoveResultGroup\";\nimport {\n  type TablebaseMove,\n  classifyMovesByDTZ,\n} from \"@shared/utils/tablebase/resultClassification\";\nimport { type TablebaseData } from \"@shared/types/evaluation\";\n\n/**\n * Props for the TablebasePanel component\n *\n * @interface TablebasePanelProps\n *\n * @description\n * Configuration options for the tablebase analysis panel,\n * including data source, interaction callbacks, and display options.\n */\nexport interface TablebasePanelProps {\n  /** Tablebase data from the evaluation system */\n  tablebaseData: TablebaseData;\n  /** Callback when a move is selected */\n  onMoveSelect: (move: string) => void;\n  /** Currently selected move */\n  selectedMove?: string;\n  /** Whether the panel is in a loading state */\n  loading?: boolean;\n  /** Error message to display */\n  error?: string;\n  /** Whether to show compact layout */\n  compact?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Tablebase analysis display panel\n *\n * @component\n * @description\n * Displays tablebase evaluation results in an organized, interactive format.\n * Groups moves by outcome and provides visual indicators for move quality.\n *\n * @remarks\n * The component automatically categorizes moves into three groups:\n * - Winning moves (positive WDL)\n * - Drawing moves (zero WDL)\n * - Losing moves (negative WDL)\n *\n * Each group can be expanded/collapsed and shows DTZ information\n * when available. The panel handles various states including loading,\n * no data, and no moves available.\n *\n * @example\n * ```tsx\n * // Basic usage\n * <TablebasePanel\n *   tablebaseData={evaluation.tablebase}\n *   onMoveSelect={(move) => makeMove(move)}\n *   selectedMove={currentMove}\n * />\n *\n * // With loading state and compact mode\n * <TablebasePanel\n *   tablebaseData={data}\n *   onMoveSelect={handleMove}\n *   loading={isAnalyzing}\n *   compact={true}\n *   className=\"mt-4\"\n * />\n * ```\n *\n * @param {TablebasePanelProps} props - Component configuration\n * @returns {JSX.Element} Rendered tablebase panel\n */\nexport const TablebasePanel: React.FC<TablebasePanelProps> = ({\n  tablebaseData,\n  onMoveSelect,\n  selectedMove,\n  loading = false,\n  error,\n  compact = false,\n  className = \"\",\n}) => {\n  /**\n   * Transforms tablebase API data to internal move format\n   *\n   * @description\n   * Converts the raw tablebase data structure into a normalized\n   * format suitable for display and interaction. Handles missing\n   * data gracefully by returning an empty array.\n   *\n   * @remarks\n   * The transformation preserves all tablebase metrics:\n   * - move: UCI notation (e.g., \"e2e4\")\n   * - san: Standard Algebraic Notation (e.g., \"e4\")\n   * - dtz: Distance to Zero (moves to conversion)\n   * - dtm: Distance to Mate (if applicable)\n   * - wdl: Win/Draw/Loss value\n   * - category: Outcome classification\n   */\n  const moves: TablebaseMove[] = useMemo(() => {\n    if (!tablebaseData.topMoves || tablebaseData.topMoves.length === 0) {\n      return [];\n    }\n\n    return tablebaseData.topMoves.map((move) => ({\n      move: move.move,\n      san: move.san,\n      dtz: move.dtz,\n      dtm: move.dtm,\n      wdl: move.wdl,\n      category: move.category,\n    }));\n  }, [tablebaseData.topMoves]);\n\n  /**\n   * Categorizes moves by outcome for grouped display\n   *\n   * @description\n   * Uses the classification utility to group moves into\n   * winning, drawing, and losing categories based on their\n   * WDL (Win/Draw/Loss) values.\n   *\n   * @remarks\n   * This categorization enables the UI to display moves\n   * in semantically meaningful groups with appropriate\n   * visual styling and prioritization.\n   */\n  const categorizedMoves = useMemo(() => {\n    return classifyMovesByDTZ(moves);\n  }, [moves]);\n\n  // Error state\n  if (error) {\n    return (\n      <div className={`tablebase-panel ${className}`}>\n        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n          Tablebase\n        </div>\n        <div className=\"text-sm text-red-600 dark:text-red-400 p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n          Analyse konnte nicht geladen werden\n        </div>\n      </div>\n    );\n  }\n\n  // Loading state\n  if (loading) {\n    return (\n      <div className={`tablebase-panel ${className}`}>\n        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n          Tablebase\n        </div>\n        <div className=\"text-center py-4\">\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n            Lade Analyse...\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // No tablebase data\n  if (!tablebaseData.isTablebasePosition) {\n    return (\n      <div className={`tablebase-panel ${className}`}>\n        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n          Tablebase\n        </div>\n        <div className=\"text-sm text-amber-600 dark:text-amber-400 p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg\">\n          Keine Tablebase-Daten verf√ºgbar\n        </div>\n      </div>\n    );\n  }\n\n  // No moves available\n  if (moves.length === 0) {\n    return (\n      <div className={`tablebase-panel ${className}`} data-testid=\"tablebase-panel-empty\">\n        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n          Tablebase\n        </div>\n        <div className=\"text-sm text-green-600 dark:text-green-400 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n          Warte auf Tablebase-Analyse...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`tablebase-panel ${className}`}\n      data-testid=\"tablebase-panel\"\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n          Tablebase\n        </div>\n        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n          {categorizedMoves.totalMoves} moves\n        </div>\n      </div>\n\n      {/* Move Groups */}\n      <div className=\"space-y-2\">\n        {/* Winning Moves */}\n        {categorizedMoves.winningMoves.length > 0 && (\n          <MoveResultGroup\n            moves={categorizedMoves.winningMoves}\n            resultType=\"win\"\n            onMoveSelect={onMoveSelect}\n            selectedMove={selectedMove}\n            initiallyExpanded={true}\n            compact={compact}\n          />\n        )}\n\n        {/* Drawing Moves */}\n        {categorizedMoves.drawingMoves.length > 0 && (\n          <MoveResultGroup\n            moves={categorizedMoves.drawingMoves}\n            resultType=\"draw\"\n            onMoveSelect={onMoveSelect}\n            selectedMove={selectedMove}\n            initiallyExpanded={true}\n            compact={compact}\n          />\n        )}\n\n        {/* Losing Moves */}\n        {categorizedMoves.losingMoves.length > 0 && (\n          <MoveResultGroup\n            moves={categorizedMoves.losingMoves}\n            resultType=\"loss\"\n            onMoveSelect={onMoveSelect}\n            selectedMove={selectedMove}\n            initiallyExpanded={false}\n            compact={compact}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Compact version of TablebasePanel for dense layouts\n */\nexport const CompactTablebasePanel: React.FC<TablebasePanelProps> = (props) => {\n  return (\n    <TablebasePanel\n      {...props}\n      compact={true}\n      className={`compact-tablebase-panel ${props.className || \"\"}`}\n    />\n  );\n};\n\n/**\n * Error boundary wrapper for TablebasePanel\n */\nexport { TablebasePanel as TablebasePanelWithErrorBoundary };\n"],"names":["CompactTablebasePanel","TablebasePanel","TablebasePanelWithErrorBoundary","tablebaseData","onMoveSelect","selectedMove","loading","error","compact","className","moves","useMemo","topMoves","length","map","move","san","dtz","dtm","wdl","category","categorizedMoves","classifyMovesByDTZ","div","isTablebasePosition","data-testid","totalMoves","winningMoves","MoveResultGroup","resultType","initiallyExpanded","drawingMoves","losingMoves","props"],"mappings":"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"}