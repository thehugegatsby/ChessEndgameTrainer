465e73dda6fb88a0893bd9c34c6206d3
/**
 * @file Unit tests for ErrorBoundary component
 * @module tests/unit/components/common/ErrorBoundary.test
 * 
 * @description
 * Comprehensive test suite for the ErrorBoundary component and useErrorBoundary hook.
 * Tests error catching, logging, custom fallback UI, environment-specific behavior,
 * and error recovery functionality.
 * 
 * @see {@link ErrorBoundary} - Component being tested
 * @see {@link useErrorBoundary} - Hook being tested
 */ "use strict";
// Mock logger before importing ErrorBoundary to intercept module-level initialization
jest.mock('@shared/services/logging', ()=>{
    const mockLoggerInstance = {
        error: jest.fn(),
        setContext: jest.fn(function() {
            return this;
        })
    };
    mockLoggerInstance.setContext.mockReturnValue(mockLoggerInstance);
    return {
        getLogger: jest.fn(()=>mockLoggerInstance),
        /** 
     * Helper to access mock logger instance in tests 
     * @returns Mock logger instance
     */ __getMockLogger: ()=>mockLoggerInstance
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _ErrorBoundary = require("../../../../shared/components/common/ErrorBoundary");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Get the mock logger instance for assertions
const { __getMockLogger } = require('@shared/services/logging');
const mockLoggerInstance = __getMockLogger();
/**
 * Test component that conditionally throws an error
 * 
 * @description Helper component for testing error boundary behavior.
 * Throws an error when shouldThrow prop is true, otherwise renders normally.
 * 
 * @param props - Component props
 * @param props.shouldThrow - Whether to throw an error
 * @returns Rendered component or throws error
 * 
 * @example
 * ```tsx
 * <ThrowError shouldThrow={true} /> // Throws error
 * <ThrowError shouldThrow={false} /> // Renders "No error"
 * ```
 */ const ThrowError = ({ shouldThrow })=>{
    if (shouldThrow) {
        throw new Error('Test error');
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        children: "No error"
    });
};
describe('ErrorBoundary', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockLoggerInstance.error.mockClear();
        mockLoggerInstance.setContext.mockClear();
    });
    it('renders children when there is no error', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: false
            })
        }));
        expect(_react1.screen.getByText('No error')).toBeInTheDocument();
    });
    it('renders fallback UI when error occurs', ()=>{
        // Suppress console.error for this test
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react1.screen.getByText(/etwas ist schiefgelaufen/i)).toBeInTheDocument();
        consoleSpy.mockRestore();
    });
    it('renders custom fallback when provided', ()=>{
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
        const customFallback = /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            children: "Custom error message"
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            fallback: customFallback,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react1.screen.getByText('Custom error message')).toBeInTheDocument();
        consoleSpy.mockRestore();
    });
    it('logs error when componentDidCatch is called', ()=>{
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(mockLoggerInstance.error).toHaveBeenCalledWith('Component error caught by boundary', expect.any(Error), expect.objectContaining({
            componentStack: expect.any(String)
        }));
        consoleSpy.mockRestore();
    });
    it('calls custom onError handler when provided', ()=>{
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
        const onError = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            onError: onError,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(onError).toHaveBeenCalledWith(expect.any(Error), expect.objectContaining({
            componentStack: expect.any(String)
        }));
        consoleSpy.mockRestore();
    });
    it('displays error details in development mode', ()=>{
        const originalEnv = process.env.NODE_ENV;
        Object.defineProperty(process.env, 'NODE_ENV', {
            value: 'development',
            writable: true,
            configurable: true
        });
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react1.screen.getByText(/Fehlerdetails/)).toBeInTheDocument();
        expect(_react1.screen.getByText(/Test error/)).toBeInTheDocument();
        consoleSpy.mockRestore();
        Object.defineProperty(process.env, 'NODE_ENV', {
            value: originalEnv,
            writable: true,
            configurable: true
        });
    });
    it('does not display error details in production mode', ()=>{
        const originalEnv = process.env.NODE_ENV;
        Object.defineProperty(process.env, 'NODE_ENV', {
            value: 'production',
            writable: true,
            configurable: true
        });
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react1.screen.queryByText(/Fehlerdetails/)).not.toBeInTheDocument();
        consoleSpy.mockRestore();
        Object.defineProperty(process.env, 'NODE_ENV', {
            value: originalEnv,
            writable: true,
            configurable: true
        });
    });
});
describe('useErrorBoundary hook', ()=>{
    it('provides resetKey and resetErrorBoundary function', ()=>{
        const { result } = (0, _react1.renderHook)(()=>(0, _ErrorBoundary.useErrorBoundary)());
        expect(result.current.resetKey).toBe(0);
        expect(typeof result.current.resetErrorBoundary).toBe('function');
    });
    it('increments resetKey when resetErrorBoundary is called', ()=>{
        const { result } = (0, _react1.renderHook)(()=>(0, _ErrorBoundary.useErrorBoundary)());
        expect(result.current.resetKey).toBe(0);
        (0, _react1.act)(()=>{
            result.current.resetErrorBoundary();
        });
        expect(result.current.resetKey).toBe(1);
        (0, _react1.act)(()=>{
            result.current.resetErrorBoundary();
        });
        expect(result.current.resetKey).toBe(2);
    });
    it('allows error recovery through key reset', ()=>{
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
        /**
     * Test component demonstrating error recovery pattern
     * 
     * @description
     * Demonstrates how to use useErrorBoundary hook for error recovery.
     * Uses resetKey to force ErrorBoundary remount and hasError state
     * to control when the child component throws.
     * 
     * @returns Component with error boundary and reset button
     */ const TestComponent = ()=>{
            const { resetKey, resetErrorBoundary } = (0, _ErrorBoundary.useErrorBoundary)();
            const [hasError, setHasError] = _react.default.useState(true);
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                            shouldThrow: hasError
                        })
                    }, resetKey),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>{
                            setHasError(false);
                            resetErrorBoundary();
                        },
                        children: "Reset"
                    })
                ]
            });
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        // Initially shows error
        expect(_react1.screen.getByText(/etwas ist schiefgelaufen/i)).toBeInTheDocument();
        // Click reset
        _react1.fireEvent.click(_react1.screen.getByText('Reset'));
        // Now shows normal content
        expect(_react1.screen.getByText('No error')).toBeInTheDocument();
        expect(_react1.screen.queryByText(/etwas ist schiefgelaufen/i)).not.toBeInTheDocument();
        consoleSpy.mockRestore();
    });
});

//# sourceMappingURL=data:application/json;base64,