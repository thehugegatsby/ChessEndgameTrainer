d59918f011087e2102fbb772029ba71c
/**
 * @file Tablebase analysis display panel
 * @module components/tablebase/TablebasePanel
 *
 * @description
 * Professional tablebase analysis panel with grouped move display,
 * color-coded evaluation bars, and interactive move selection.
 * Provides a Lichess-style interface for exploring tablebase evaluations.
 *
 * @remarks
 * Key features:
 * - Automatic move grouping by outcome (win/draw/loss)
 * - Visual DTZ (Distance to Zero) indicators
 * - Color-coded evaluation bars
 * - Expandable/collapsible move groups
 * - Loading and error state handling
 * - Responsive layout with compact mode
 *
 * The component integrates with the tablebase evaluation system
 * and provides visual feedback for optimal move selection.
 */ "use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get CompactTablebasePanel () {
        return CompactTablebasePanel;
    },
    get TablebasePanel () {
        return TablebasePanel;
    },
    get TablebasePanelWithErrorBoundary () {
        return TablebasePanel;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _MoveResultGroup = require("./MoveResultGroup");
const _resultClassification = require("../../utils/tablebase/resultClassification");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const TablebasePanel = ({ tablebaseData, onMoveSelect, selectedMove, loading = false, error, compact = false, className = "" })=>{
    /**
   * Transforms tablebase API data to internal move format
   *
   * @description
   * Converts the raw tablebase data structure into a normalized
   * format suitable for display and interaction. Handles missing
   * data gracefully by returning an empty array.
   *
   * @remarks
   * The transformation preserves all tablebase metrics:
   * - move: UCI notation (e.g., "e2e4")
   * - san: Standard Algebraic Notation (e.g., "e4")
   * - dtz: Distance to Zero (moves to conversion)
   * - dtm: Distance to Mate (if applicable)
   * - wdl: Win/Draw/Loss value
   * - category: Outcome classification
   */ const moves = (0, _react.useMemo)(()=>{
        if (!tablebaseData.topMoves || tablebaseData.topMoves.length === 0) {
            return [];
        }
        return tablebaseData.topMoves.map((move)=>({
                move: move.move,
                san: move.san,
                dtz: move.dtz,
                dtm: move.dtm,
                wdl: move.wdl,
                category: move.category
            }));
    }, [
        tablebaseData.topMoves
    ]);
    /**
   * Categorizes moves by outcome for grouped display
   *
   * @description
   * Uses the classification utility to group moves into
   * winning, drawing, and losing categories based on their
   * WDL (Win/Draw/Loss) values.
   *
   * @remarks
   * This categorization enables the UI to display moves
   * in semantically meaningful groups with appropriate
   * visual styling and prioritization.
   */ const categorizedMoves = (0, _react.useMemo)(()=>{
        return (0, _resultClassification.classifyMovesByDTZ)(moves);
    }, [
        moves
    ]);
    // Error state
    if (error) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: `tablebase-panel ${className}`,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "text-sm font-medium text-gray-700 dark:text-gray-300 mb-3",
                    children: "Tablebase"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "text-sm text-red-600 dark:text-red-400 p-3 bg-red-50 dark:bg-red-900/20 rounded-lg",
                    children: "Analyse konnte nicht geladen werden"
                })
            ]
        });
    }
    // Loading state
    if (loading) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: `tablebase-panel ${className}`,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "text-sm font-medium text-gray-700 dark:text-gray-300 mb-3",
                    children: "Tablebase"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "text-center py-4",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "text-sm text-gray-500 dark:text-gray-400",
                        children: "Lade Analyse..."
                    })
                })
            ]
        });
    }
    // No tablebase data
    if (!tablebaseData.isTablebasePosition) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: `tablebase-panel ${className}`,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "text-sm font-medium text-gray-700 dark:text-gray-300 mb-3",
                    children: "Tablebase"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "text-sm text-amber-600 dark:text-amber-400 p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg",
                    children: "Keine Tablebase-Daten verfÃ¼gbar"
                })
            ]
        });
    }
    // No moves available
    if (moves.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: `tablebase-panel ${className}`,
            "data-testid": "tablebase-panel-empty",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "text-sm font-medium text-gray-700 dark:text-gray-300 mb-3",
                    children: "Tablebase"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "text-sm text-green-600 dark:text-green-400 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg",
                    children: "Warte auf Tablebase-Analyse..."
                })
            ]
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `tablebase-panel ${className}`,
        "data-testid": "tablebase-panel",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-center justify-between mb-4",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "text-sm font-medium text-gray-700 dark:text-gray-300",
                        children: "Tablebase"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "text-xs text-gray-500 dark:text-gray-400",
                        children: [
                            categorizedMoves.totalMoves,
                            " moves"
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-2",
                children: [
                    categorizedMoves.winningMoves.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveResultGroup.MoveResultGroup, {
                        moves: categorizedMoves.winningMoves,
                        resultType: "win",
                        onMoveSelect: onMoveSelect,
                        selectedMove: selectedMove,
                        initiallyExpanded: true,
                        compact: compact
                    }),
                    categorizedMoves.drawingMoves.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveResultGroup.MoveResultGroup, {
                        moves: categorizedMoves.drawingMoves,
                        resultType: "draw",
                        onMoveSelect: onMoveSelect,
                        selectedMove: selectedMove,
                        initiallyExpanded: true,
                        compact: compact
                    }),
                    categorizedMoves.losingMoves.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveResultGroup.MoveResultGroup, {
                        moves: categorizedMoves.losingMoves,
                        resultType: "loss",
                        onMoveSelect: onMoveSelect,
                        selectedMove: selectedMove,
                        initiallyExpanded: false,
                        compact: compact
                    })
                ]
            })
        ]
    });
};
const CompactTablebasePanel = (props)=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(TablebasePanel, {
        ...props,
        compact: true,
        className: `compact-tablebase-panel ${props.className || ""}`
    });
};

//# sourceMappingURL=data:application/json;base64,