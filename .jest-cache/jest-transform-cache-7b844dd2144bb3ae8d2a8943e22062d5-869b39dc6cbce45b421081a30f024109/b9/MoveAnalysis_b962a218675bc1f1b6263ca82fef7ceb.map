{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/training/AnalysisPanel/MoveAnalysis.tsx"],"sourcesContent":["/**\n * @file Move analysis list component for game analysis panel\n * @module components/training/AnalysisPanel/MoveAnalysis\n * \n * @description\n * Move analysis list component displaying an interactive list of chess moves\n * with quality classifications, evaluations, and selection functionality.\n * Provides a comprehensive overview of game analysis with visual indicators.\n * \n * @remarks\n * Key features:\n * - Interactive move list with click selection\n * - Color-coded move quality classifications (excellent to blunder)\n * - Chess notation symbols for move quality (!!, !, ?!, ?, ??)\n * - Move numbering with proper chess format display\n * - Evaluation display with positive/negative formatting\n * - Responsive design with proper spacing and hover effects\n * - Dark mode support with appropriate color schemes\n * - Scrollable container for long games\n * \n * The component integrates with the AnalysisDetails component to provide\n * a complete analysis experience where users can select moves from the\n * list to view detailed information.\n */\n\nimport React from \"react\";\nimport { Move } from \"chess.js\";\n\n/**\n * Move analysis data structure for move list display\n * \n * @interface MoveAnalysisData\n * \n * @property {Move} move - Chess move object from chess.js\n * @property {number} [evaluation] - Position evaluation after the move\n * @property {string} [bestMove] - Best move according to analysis (not displayed in list)\n * @property {'excellent' | 'good' | 'inaccuracy' | 'mistake' | 'blunder'} [classification] - Move quality classification\n */\ninterface MoveAnalysisData {\n  move: Move;\n  evaluation?: number;\n  bestMove?: string;\n  classification?: \"excellent\" | \"good\" | \"inaccuracy\" | \"mistake\" | \"blunder\";\n}\n\n/**\n * Props for the MoveAnalysis component\n * \n * @interface MoveAnalysisProps\n * \n * @property {MoveAnalysisData[]} analysisData - Array of move analysis data for all moves\n * @property {number | null} selectedMoveIndex - Index of currently selected move, null if none selected\n * @property {(index: number) => void} onMoveSelect - Callback function when a move is selected from the list\n */\ninterface MoveAnalysisProps {\n  analysisData: MoveAnalysisData[];\n  selectedMoveIndex: number | null;\n  onMoveSelect: (index: number) => void;\n}\n\n/**\n * Get CSS classes for move classification color coding\n * \n * @param {MoveAnalysisData[\"classification\"]} [classification] - Move quality classification\n * @returns {string} CSS classes for text and background colors\n * \n * @example\n * ```typescript\n * getClassificationColor('excellent') // \"text-green-600 bg-green-50 dark:text-green-400 dark:bg-green-900/30\"\n * getClassificationColor('blunder')   // \"text-red-600 bg-red-50 dark:text-red-400 dark:bg-red-900/30\"\n * ```\n */\nconst getClassificationColor = (\n  classification?: MoveAnalysisData[\"classification\"],\n) => {\n  switch (classification) {\n    case \"excellent\":\n      return \"text-green-600 bg-green-50 dark:text-green-400 dark:bg-green-900/30\";\n    case \"good\":\n      return \"text-blue-600 bg-blue-50 dark:text-blue-400 dark:bg-blue-900/30\";\n    case \"inaccuracy\":\n      return \"text-yellow-600 bg-yellow-50 dark:text-yellow-400 dark:bg-yellow-900/30\";\n    case \"mistake\":\n      return \"text-orange-600 bg-orange-50 dark:text-orange-400 dark:bg-orange-900/30\";\n    case \"blunder\":\n      return \"text-red-600 bg-red-50 dark:text-red-400 dark:bg-red-900/30\";\n    default:\n      return \"text-gray-600 bg-gray-50 dark:text-gray-400 dark:bg-gray-800\";\n  }\n};\n\n/**\n * Get chess notation symbol for move classification\n * \n * @param {MoveAnalysisData[\"classification\"]} [classification] - Move quality classification\n * @returns {string} Chess notation symbol for the move quality\n * \n * @remarks\n * Chess notation symbols:\n * - !! (Excellent): Brilliant or best move\n * - ! (Good): Good move  \n * - ?! (Inaccuracy): Dubious or questionable move\n * - ? (Mistake): Mistake or bad move\n * - ?? (Blunder): Blunder or very bad move\n * \n * @example\n * ```typescript\n * getClassificationSymbol('excellent')  // \"!!\"\n * getClassificationSymbol('blunder')    // \"??\"\n * getClassificationSymbol(undefined)    // \"\"\n * ```\n */\nconst getClassificationSymbol = (\n  classification?: MoveAnalysisData[\"classification\"],\n) => {\n  switch (classification) {\n    case \"excellent\":\n      return \"!!\";\n    case \"good\":\n      return \"!\";\n    case \"inaccuracy\":\n      return \"?!\";\n    case \"mistake\":\n      return \"?\";\n    case \"blunder\":\n      return \"??\";\n    default:\n      return \"\";\n  }\n};\n\n/**\n * Move analysis list component for interactive game analysis\n * \n * @component\n * @description\n * Displays an interactive list of chess moves with quality classifications,\n * evaluations, and selection functionality. Each move shows its algebraic\n * notation, quality symbol, and evaluation in a compact, scannable format.\n * \n * @remarks\n * List features:\n * - Chess move numbering (1. e4, 1...e5, 2. Nf3, etc.)\n * - Color-coded quality indicators with standard chess symbols\n * - Evaluation display with proper +/- formatting\n * - Click selection with visual feedback\n * - Hover effects for interactive elements\n * - Scrollable container for long games\n * - Dark mode support throughout\n * \n * Visual design:\n * - Compact layout optimized for analysis workflow\n * - Clear typography with monospace font for moves\n * - Consistent spacing and alignment\n * - Selected move highlighting with blue background\n * - Quality badges with appropriate color coding\n * \n * The component is memoized for performance and integrates with\n * AnalysisDetails to provide comprehensive move analysis workflow.\n * \n * @example\n * ```tsx\n * // Basic usage in analysis panel\n * <MoveAnalysis\n *   analysisData={gameAnalysis}\n *   selectedMoveIndex={currentMove}\n *   onMoveSelect={(index) => setCurrentMove(index)}\n * />\n * \n * // In split-panel layout\n * <div className=\"flex\">\n *   <MoveAnalysis\n *     analysisData={moves}\n *     selectedMoveIndex={selected}\n *     onMoveSelect={handleSelect}\n *   />\n *   <AnalysisDetails\n *     selectedMoveIndex={selected}\n *     analysisData={moves}\n *   />\n * </div>\n * ```\n * \n * @param {MoveAnalysisProps} props - Component configuration\n * @returns {JSX.Element} Interactive move list with analysis indicators\n */\nexport const MoveAnalysis: React.FC<MoveAnalysisProps> = React.memo(\n  ({ analysisData, selectedMoveIndex, onMoveSelect }) => {\n    return (\n      <div className=\"w-2/5 border-r border-gray-200 dark:border-gray-700 flex flex-col\">\n        <div className=\"p-2 border-b border-gray-100 dark:border-gray-800 bg-gray-50 dark:bg-gray-800\">\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n            Zugfolge\n          </h4>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-2\">\n          <div className=\"space-y-1\">\n            {analysisData.map((analysis, index) => {\n              const moveNumber = Math.floor(index / 2) + 1;\n              const isWhiteMove = index % 2 === 0;\n\n              return (\n                <div\n                  key={index}\n                  className={`flex items-center gap-2 p-1.5 rounded cursor-pointer transition-colors text-sm ${\n                    selectedMoveIndex === index\n                      ? \"bg-blue-100 border border-blue-200 dark:bg-blue-900/30 dark:border-blue-700\"\n                      : \"hover:bg-gray-50 dark:hover:bg-gray-800\"\n                  }`}\n                  onClick={() => onMoveSelect(index)}\n                >\n                  {/* Move Number */}\n                  {isWhiteMove && (\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400 w-6\">\n                      {moveNumber}.\n                    </span>\n                  )}\n                  {!isWhiteMove && <span className=\"w-6\"></span>}\n\n                  {/* Move */}\n                  <span className=\"font-mono font-medium text-gray-800 dark:text-gray-200 min-w-[45px]\">\n                    {analysis.move.san}\n                  </span>\n\n                  {/* Classification */}\n                  {analysis.classification && (\n                    <span\n                      className={`text-xs px-1.5 py-0.5 rounded-full font-medium ${getClassificationColor(analysis.classification)}`}\n                    >\n                      {getClassificationSymbol(analysis.classification)}\n                    </span>\n                  )}\n\n                  {/* Evaluation */}\n                  <span className=\"text-xs font-mono text-gray-600 dark:text-gray-400 ml-auto\">\n                    {analysis.evaluation !== undefined\n                      ? analysis.evaluation > 0\n                        ? `+${analysis.evaluation.toFixed(2)}`\n                        : analysis.evaluation.toFixed(2)\n                      : \"0.00\"}\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n\nMoveAnalysis.displayName = \"MoveAnalysis\";\n"],"names":["MoveAnalysis","getClassificationColor","classification","getClassificationSymbol","React","memo","analysisData","selectedMoveIndex","onMoveSelect","div","className","h4","map","analysis","index","moveNumber","Math","floor","isWhiteMove","onClick","span","move","san","evaluation","undefined","toFixed","displayName"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;CAuBC;;;;+BAmKYA;;;eAAAA;;;;8DAjKK;;;;;;AAmClB;;;;;;;;;;;CAWC,GACD,MAAMC,yBAAyB,CAC7BC;IAEA,OAAQA;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF;AAEA;;;;;;;;;;;;;;;;;;;;CAoBC,GACD,MAAMC,0BAA0B,CAC9BD;IAEA,OAAQA;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF;AAyDO,MAAMF,6BAA4CI,cAAK,CAACC,IAAI,CACjE,CAAC,EAAEC,YAAY,EAAEC,iBAAiB,EAAEC,YAAY,EAAE;IAChD,qBACE,sBAACC;QAAIC,WAAU;;0BACb,qBAACD;gBAAIC,WAAU;0BACb,cAAA,qBAACC;oBAAGD,WAAU;8BAAuD;;;0BAKvE,qBAACD;gBAAIC,WAAU;0BACb,cAAA,qBAACD;oBAAIC,WAAU;8BACZJ,aAAaM,GAAG,CAAC,CAACC,UAAUC;wBAC3B,MAAMC,aAAaC,KAAKC,KAAK,CAACH,QAAQ,KAAK;wBAC3C,MAAMI,cAAcJ,QAAQ,MAAM;wBAElC,qBACE,sBAACL;4BAECC,WAAW,CAAC,+EAA+E,EACzFH,sBAAsBO,QAClB,gFACA,2CACJ;4BACFK,SAAS,IAAMX,aAAaM;;gCAG3BI,6BACC,sBAACE;oCAAKV,WAAU;;wCACbK;wCAAW;;;gCAGf,CAACG,6BAAe,qBAACE;oCAAKV,WAAU;;8CAGjC,qBAACU;oCAAKV,WAAU;8CACbG,SAASQ,IAAI,CAACC,GAAG;;gCAInBT,SAASX,cAAc,kBACtB,qBAACkB;oCACCV,WAAW,CAAC,+CAA+C,EAAET,uBAAuBY,SAASX,cAAc,GAAG;8CAE7GC,wBAAwBU,SAASX,cAAc;;8CAKpD,qBAACkB;oCAAKV,WAAU;8CACbG,SAASU,UAAU,KAAKC,YACrBX,SAASU,UAAU,GAAG,IACpB,CAAC,CAAC,EAAEV,SAASU,UAAU,CAACE,OAAO,CAAC,IAAI,GACpCZ,SAASU,UAAU,CAACE,OAAO,CAAC,KAC9B;;;2BApCDX;oBAwCX;;;;;AAKV;AAGFd,aAAa0B,WAAW,GAAG"}