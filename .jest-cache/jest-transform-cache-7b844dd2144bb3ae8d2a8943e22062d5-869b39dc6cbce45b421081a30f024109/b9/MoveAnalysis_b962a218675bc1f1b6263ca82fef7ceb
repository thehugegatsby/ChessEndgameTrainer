cebbb8fddf3e296008d5072863a3137b
/**
 * @file Move analysis list component for game analysis panel
 * @module components/training/AnalysisPanel/MoveAnalysis
 * 
 * @description
 * Move analysis list component displaying an interactive list of chess moves
 * with quality classifications, evaluations, and selection functionality.
 * Provides a comprehensive overview of game analysis with visual indicators.
 * 
 * @remarks
 * Key features:
 * - Interactive move list with click selection
 * - Color-coded move quality classifications (excellent to blunder)
 * - Chess notation symbols for move quality (!!, !, ?!, ?, ??)
 * - Move numbering with proper chess format display
 * - Evaluation display with positive/negative formatting
 * - Responsive design with proper spacing and hover effects
 * - Dark mode support with appropriate color schemes
 * - Scrollable container for long games
 * 
 * The component integrates with the AnalysisDetails component to provide
 * a complete analysis experience where users can select moves from the
 * list to view detailed information.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MoveAnalysis", {
    enumerable: true,
    get: function() {
        return MoveAnalysis;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Get CSS classes for move classification color coding
 * 
 * @param {MoveAnalysisData["classification"]} [classification] - Move quality classification
 * @returns {string} CSS classes for text and background colors
 * 
 * @example
 * ```typescript
 * getClassificationColor('excellent') // "text-green-600 bg-green-50 dark:text-green-400 dark:bg-green-900/30"
 * getClassificationColor('blunder')   // "text-red-600 bg-red-50 dark:text-red-400 dark:bg-red-900/30"
 * ```
 */ const getClassificationColor = (classification)=>{
    switch(classification){
        case "excellent":
            return "text-green-600 bg-green-50 dark:text-green-400 dark:bg-green-900/30";
        case "good":
            return "text-blue-600 bg-blue-50 dark:text-blue-400 dark:bg-blue-900/30";
        case "inaccuracy":
            return "text-yellow-600 bg-yellow-50 dark:text-yellow-400 dark:bg-yellow-900/30";
        case "mistake":
            return "text-orange-600 bg-orange-50 dark:text-orange-400 dark:bg-orange-900/30";
        case "blunder":
            return "text-red-600 bg-red-50 dark:text-red-400 dark:bg-red-900/30";
        default:
            return "text-gray-600 bg-gray-50 dark:text-gray-400 dark:bg-gray-800";
    }
};
/**
 * Get chess notation symbol for move classification
 * 
 * @param {MoveAnalysisData["classification"]} [classification] - Move quality classification
 * @returns {string} Chess notation symbol for the move quality
 * 
 * @remarks
 * Chess notation symbols:
 * - !! (Excellent): Brilliant or best move
 * - ! (Good): Good move  
 * - ?! (Inaccuracy): Dubious or questionable move
 * - ? (Mistake): Mistake or bad move
 * - ?? (Blunder): Blunder or very bad move
 * 
 * @example
 * ```typescript
 * getClassificationSymbol('excellent')  // "!!"
 * getClassificationSymbol('blunder')    // "??"
 * getClassificationSymbol(undefined)    // ""
 * ```
 */ const getClassificationSymbol = (classification)=>{
    switch(classification){
        case "excellent":
            return "!!";
        case "good":
            return "!";
        case "inaccuracy":
            return "?!";
        case "mistake":
            return "?";
        case "blunder":
            return "??";
        default:
            return "";
    }
};
const MoveAnalysis = /*#__PURE__*/ _react.default.memo(({ analysisData, selectedMoveIndex, onMoveSelect })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "w-2/5 border-r border-gray-200 dark:border-gray-700 flex flex-col",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "p-2 border-b border-gray-100 dark:border-gray-800 bg-gray-50 dark:bg-gray-800",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("h4", {
                    className: "text-sm font-medium text-gray-700 dark:text-gray-300",
                    children: "Zugfolge"
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "flex-1 overflow-y-auto p-2",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "space-y-1",
                    children: analysisData.map((analysis, index)=>{
                        const moveNumber = Math.floor(index / 2) + 1;
                        const isWhiteMove = index % 2 === 0;
                        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: `flex items-center gap-2 p-1.5 rounded cursor-pointer transition-colors text-sm ${selectedMoveIndex === index ? "bg-blue-100 border border-blue-200 dark:bg-blue-900/30 dark:border-blue-700" : "hover:bg-gray-50 dark:hover:bg-gray-800"}`,
                            onClick: ()=>onMoveSelect(index),
                            children: [
                                isWhiteMove && /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                    className: "text-xs text-gray-500 dark:text-gray-400 w-6",
                                    children: [
                                        moveNumber,
                                        "."
                                    ]
                                }),
                                !isWhiteMove && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    className: "w-6"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    className: "font-mono font-medium text-gray-800 dark:text-gray-200 min-w-[45px]",
                                    children: analysis.move.san
                                }),
                                analysis.classification && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    className: `text-xs px-1.5 py-0.5 rounded-full font-medium ${getClassificationColor(analysis.classification)}`,
                                    children: getClassificationSymbol(analysis.classification)
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    className: "text-xs font-mono text-gray-600 dark:text-gray-400 ml-auto",
                                    children: analysis.evaluation !== undefined ? analysis.evaluation > 0 ? `+${analysis.evaluation.toFixed(2)}` : analysis.evaluation.toFixed(2) : "0.00"
                                })
                            ]
                        }, index);
                    })
                })
            })
        ]
    });
});
MoveAnalysis.displayName = "MoveAnalysis";

//# sourceMappingURL=data:application/json;base64,