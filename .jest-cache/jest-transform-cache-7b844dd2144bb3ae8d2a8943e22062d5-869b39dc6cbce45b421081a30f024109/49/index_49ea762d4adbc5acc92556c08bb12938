d243de6ea83392cda9aa01b2b775c15e
/**
 * @file Global constants for the Chess Endgame Trainer application
 * @module constants/index
 *
 * @description
 * Centralizes all magic numbers, configuration values, and constants used
 * throughout the Chess Endgame Trainer application. Provides comprehensive
 * configuration for caching, performance, UI, chess logic, evaluation,
 * training, and testing environments.
 *
 * @remarks
 * Key constant categories:
 * - Storage: LocalStorage and cache configurations
 * - Cache: LRU cache sizes and TTL values for various components
 * - Performance: Debouncing, throttling, and batch processing settings
 * - Tablebase: Lichess API timeouts and piece limits
 * - UI: Animation durations, breakpoints, and color schemes
 * - Chess: Game rules, piece limits, and position validation
 * - Evaluation: Score thresholds for move quality assessment
 * - Training: Spaced repetition and success rate configurations
 * - E2E: Testing selectors, timeouts, and mock data
 *
 * All constants use `as const` assertion for type safety and immutability.
 */ /**
 * Storage configuration constants
 *
 * @description
 * Configuration values for localStorage, sessionStorage, and cache
 * management including size limits, compression thresholds, and TTL values.
 *
 * @example
 * ```typescript
 * const key = `${STORAGE.PREFIX}user_settings`;
 * if (dataSize > STORAGE.COMPRESSION_THRESHOLD) {
 *   // Compress before storing
 * }
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ANIMATION () {
        return ANIMATION;
    },
    get CACHE () {
        return CACHE;
    },
    get CHESS () {
        return CHESS;
    },
    get DIMENSIONS () {
        return DIMENSIONS;
    },
    get E2E () {
        return E2E;
    },
    get EVALUATION () {
        return EVALUATION;
    },
    get NETWORK () {
        return NETWORK;
    },
    get RATING () {
        return RATING;
    },
    get STORAGE () {
        return STORAGE;
    },
    get SYSTEM () {
        return SYSTEM;
    },
    get TABLEBASE () {
        return TABLEBASE;
    },
    get TESTING () {
        return TESTING;
    },
    get TIME () {
        return TIME;
    },
    get TRAINING () {
        return TRAINING;
    },
    get UI () {
        return UI;
    }
});
const STORAGE = {
    PREFIX: "chess_trainer_",
    MAX_SIZE_WEB: 100 * 1024 * 1024,
    MAX_SIZE_MOBILE: 50 * 1024 * 1024,
    COMPRESSION_THRESHOLD: 1024,
    CACHE_DURATION: 24 * 60 * 60 * 1000
};
const CACHE = {
    // Cache sizes - Standardized across all components
    EVALUATION_CACHE_SIZE: 200,
    BEST_MOVE_CACHE_SIZE: 500,
    LRU_DEFAULT_SIZE: 1000,
    LRU_MEMORY_PER_ITEM: 350,
    CHESS_AWARE_CACHE_SIZE: 200,
    TABLEBASE_CACHE_SIZE: 100,
    POSITION_CACHE_SIZE: 200,
    ANALYSIS_CACHE_SIZE: 200,
    PARALLEL_EVALUATION_CACHE_SIZE: 200,
    // Cache timeouts - Standardized TTL values
    TABLEBASE_CACHE_TIMEOUT: 5 * 60 * 1000,
    ANALYSIS_CACHE_TTL: 5 * 60 * 1000,
    EVALUATION_CACHE_TTL: 30 * 60 * 1000,
    BEST_MOVE_CACHE_TTL: 10 * 60 * 1000,
    DEDUPLICATION_TTL: 10 * 1000,
    CLEANUP_INTERVAL_TTL: 30 * 1000
};
const TABLEBASE = {
    // Timeouts
    EVALUATION_TIMEOUT: 7000,
    TIMEOUT_BUFFER: 1000,
    CACHE_TTL: 5 * 60 * 1000,
    MAX_PIECES: 7
};
/**
 *
 */ const UI = {
    ANIMATION_DURATION: 300,
    TOAST_DURATION: 3000,
    TOAST_FADE_DURATION: 300,
    TOUCH_TARGET_MIN: 44,
    BREAKPOINTS: {
        MOBILE: 640,
        TABLET: 1024,
        DESKTOP: 1280
    },
    // Evaluation color palette - synchronized with CSS variables
    EVALUATION_COLORS: {
        EXCELLENT: {
            text: "#10b981",
            background: "#065f46"
        },
        GOOD: {
            text: "#3b82f6",
            background: "#1e40af"
        },
        NEUTRAL: {
            text: "var(--text-secondary)",
            background: "var(--bg-accent)"
        },
        INACCURATE: {
            text: "#f59e0b",
            background: "#92400e"
        },
        MISTAKE: {
            text: "#fb923c",
            background: "#c2410c"
        },
        BLUNDER: {
            text: "#ef4444",
            background: "#991b1b"
        }
    }
};
/**
 *
 */ const CHESS = {
    BOARD_SIZE: 8,
    STARTING_FEN: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
    MAX_MOVES_HISTORY: 500,
    FIFTY_MOVE_RULE: 50,
    THREEFOLD_REPETITION: 3,
    TABLEBASE_PIECE_LIMIT: 7,
    ENDGAME_PIECE_THRESHOLD: 7,
    // Piece Count Limits (kept for general chess logic)
    MAX_PIECES_PER_SIDE: 16,
    MAX_PAWNS_PER_SIDE: 8,
    KINGS_PER_SIDE: 1,
    // Starting piece counts for promotion validation
    STARTING_PIECES: {
        WHITE: {
            Q: 1,
            R: 2,
            B: 2,
            N: 2,
            P: 8
        },
        BLACK: {
            q: 1,
            r: 2,
            b: 2,
            n: 2,
            p: 8
        }
    }
};
/**
 *
 */ const EVALUATION = {
    MATE_SCORE: 10000,
    WINNING_THRESHOLD: 200,
    DRAWING_THRESHOLD: 50,
    BLUNDER_THRESHOLD: 300,
    MISTAKE_THRESHOLD: 100,
    INACCURACY_THRESHOLD: 50,
    TABLEBASE_TIMEOUT: 2000,
    // Multi-PV and move display configuration
    MULTI_PV_COUNT: 3,
    MAX_DISPLAY_MOVES: 5,
    // Critical position thresholds
    CRITICAL_SCORE_THRESHOLD: 500,
    CRITICAL_MISTAKE_THRESHOLD: 200,
    TABLEBASE_SCORE_LIMIT: 3000,
    // Priority calculation
    BASE_PRIORITY: 100,
    CRITICAL_PRIORITY_BOOST: 200,
    ENDGAME_PRIORITY_FACTOR: 20,
    // ChessAwareCache configuration
    CHESS_AWARE_CACHE: {
        ENDGAME_THRESHOLD: 7,
        CRITICAL_SCORE_THRESHOLD: 500,
        ENDGAME_PRIORITY_BASE: 100,
        ENDGAME_PRIORITY_MULTIPLIER: 20,
        CRITICAL_POSITION_BOOST: 200,
        NON_ENDGAME_PRIORITY_BASE: 50
    },
    // Win/Loss thresholds for mistake checking
    WIN_THRESHOLD: 300,
    LOSS_THRESHOLD: -300,
    MATE_THRESHOLD: 100000,
    // Color display thresholds (in pawn units, 1 pawn = 100 centipawns)
    COLOR_THRESHOLDS: {
        DOMINATING: 5.0,
        EXCELLENT: 2.0,
        GOOD: 0.5,
        NEUTRAL_UPPER: 0.5,
        NEUTRAL_LOWER: -0.5,
        INACCURATE: -2.0,
        MISTAKE: -5.0
    },
    // Tablebase WDL thresholds
    WDL_THRESHOLDS: {
        WIN: 1,
        LOSS: -1
    }
};
/**
 *
 */ const TRAINING = {
    MIN_MOVES_FOR_COMPLETION: 3,
    SUCCESS_RATE_THRESHOLD: 0.8,
    REPETITION_INTERVALS: [
        1,
        3,
        7,
        14,
        30
    ],
    MAX_HINTS: 3,
    // Spaced repetition multipliers
    SUCCESS_MULTIPLIER: 2,
    FAILURE_MULTIPLIER: 1,
    // Mock data for development
    MOCK: {
        DEFAULT_LESSON_COUNT: 10,
        SUCCESS_RATE_MIN: 0.7,
        SUCCESS_RATE_RANGE: 0.3,
        DUE_TODAY_MAX: 3,
        STREAK_MAX: 10,
        OVERALL_STREAK_MAX: 15
    }
};
/**
 *
 */ const RATING = {
    // Base ratings
    DEFAULT_RATING: 1200,
    TEST_RATING: 1500,
    // Skill level thresholds
    BEGINNER_THRESHOLD: 1200,
    INTERMEDIATE_THRESHOLD: 1800,
    ADVANCED_THRESHOLD: 2200,
    EXPERT_THRESHOLD: 2200,
    // Rating change calculations
    RATING_CHANGE_BASE: 32
};
/**
 *
 */ const NETWORK = {
    API_TIMEOUT: 10000,
    TABLEBASE_API_TIMEOUT: 5000,
    RETRY_COUNT: 3,
    RETRY_DELAY: 1000,
    BATCH_UPLOAD_SIZE: 10
};
/**
 *
 */ const TIME = {
    SECOND: 1000,
    MINUTE: 60 * 1000,
    HOUR: 60 * 60 * 1000,
    DAY: 24 * 60 * 60 * 1000,
    WEEK: 7 * 24 * 60 * 60 * 1000
};
/**
 *
 */ const ANIMATION = {
    // Training feedback animations
    EVALUATION_FEEDBACK_DURATION: 2000,
    MOVE_PLAY_DELAY_FAST: 500,
    MOVE_PLAY_DELAY_NORMAL: 1500,
    MOVE_PLAY_DELAY_SLOW: 2000,
    // Service timeouts
    PARALLEL_EVALUATION_DELAY: 200,
    PARALLEL_EVALUATION_FALLBACK: 500,
    TABLEBASE_REQUEST_TIMEOUT: 5000,
    WORKER_DELAY: 100,
    MOCK_SERVICE_DELAY: 10,
    // Toast message durations
    SUCCESS_TOAST_DURATION: 4000,
    ERROR_TOAST_DURATION: 3000,
    // E2E test timeouts
    VIEWPORT_CHANGE_DELAY: 100,
    BREAKPOINT_DETECTION_TIMEOUT: 5000
};
/**
 *
 */ const DIMENSIONS = {
    // Board sizes
    DEFAULT_BOARD_SIZE: 400,
    TRAINING_BOARD_SIZE: 600,
    // Panel heights
    ANALYSIS_PANEL_HEIGHT: 400,
    // Component minimum widths
    MOVE_CONTAINER_MIN_WIDTH: 80,
    MOVE_NUMBER_MIN_WIDTH: 20,
    MOVE_DISPLAY_MIN_WIDTH: 45,
    // Breakpoint values (for E2E tests)
    MOBILE_BREAKPOINT: 768,
    TABLET_BREAKPOINT: 1024
};
/**
 *
 */ const E2E = {
    // Timeouts
    TIMEOUTS: {
        PAGE_LOAD: 2 * TIME.SECOND,
        PAGE_RELOAD: 3 * TIME.SECOND,
        TABLEBASE_INIT: 3 * TIME.SECOND,
        MODAL_APPEAR: 1 * TIME.SECOND,
        ANIMATION: 500
    },
    // Test Data
    DATA: {
        STORAGE_KEY: "chess-trainer-storage",
        USER: {
            RATING: 1500,
            STREAK: 5
        },
        MOVES: [
            {
                from: "e2",
                to: "e4",
                san: "e4"
            },
            {
                from: "e7",
                to: "e5",
                san: "e5"
            }
        ],
        COMPLETED_POSITIONS: [
            1,
            2
        ],
        PREFERENCES: {
            theme: "light",
            showCoordinates: false,
            animationSpeed: "fast"
        }
    },
    // Selectors (data-testid based)
    SELECTORS: {
        // Navigation
        NAV: {
            TRAINING_LINK: '[data-testid="training-link"]',
            DASHBOARD_LINK: '[data-testid="nav-dashboard"]',
            NAVBAR: '[data-testid="navbar"]',
            NAVBAR_LOGO: '[data-testid="navbar-logo"]'
        },
        // Chess Board
        BOARD: '[data-testid="training-board"]',
        CHESSBOARD: '[data-testid="chessboard"]',
        /**
     *
     * @param square
     */ SQUARE: (square)=>`[data-square="${square}"]`,
        PIECE: "[data-piece]",
        // Training Controls
        BUTTONS: {
            RESET: '[data-testid="reset-button"]',
            HINT: '[data-testid="hint-button"]',
            SOLUTION: '[data-testid="solution-button"]',
            NEXT_POSITION: '[data-testid="next-position-button"]',
            PREVIOUS_POSITION: '[data-testid="previous-position-button"]',
            UNDO: '[data-testid="undo-button"]'
        },
        // Navigation Controls
        NAVIGATION: {
            FIRST: '[data-testid="nav-first"]',
            BACK: '[data-testid="nav-back"]',
            FORWARD: '[data-testid="nav-forward"]',
            LAST: '[data-testid="nav-last"]'
        },
        // Error Recovery Elements
        ERROR_RECOVERY: {
            TOAST: '.toast, [data-testid="toast"], .notification',
            MISTAKE_COUNTER: '[data-testid="mistake-counter"]',
            TABLEBASE_ERROR: '[data-testid="tablebase-error"]',
            RETRY_BUTTON: '[data-testid="retry-tablebase"]',
            WARNING_DIALOG: '[data-testid="warning-dialog"]'
        },
        // UI Elements
        EVALUATION_DISPLAY: '[data-testid="evaluation-display"]',
        MOVE_COUNTER: '[data-testid="move-counter"]',
        ANALYSIS_STATUS: '[data-testid="analysis-status"]',
        POSITION_DESCRIPTION: '[data-testid="position-description"]',
        LOADING_SPINNER: '[data-testid="loading-spinner"]',
        // Modals
        HINT_MODAL: '[data-testid="hint-modal"]',
        SOLUTION_MODAL: '[data-testid="solution-modal"]',
        PROMOTION_DIALOG: '[data-testid="promotion-dialog"]'
    },
    // Routes/URLs
    ROUTES: {
        HOME: "/",
        /**
     *
     * @param id
     */ TRAIN: (id)=>`/train/${id}`,
        DASHBOARD: "/dashboard"
    },
    // Expected Messages/Texts
    MESSAGES: {
        SUCCESS: {
            CORE_TRAINING_COMPLETE: "Core Training Workflow completed successfully",
            TABLEBASE_VERIFIED: "Tablebase initialization verified",
            STATE_PERSISTED: "State persistence test completed successfully",
            POSITION_PRESERVED: "Position navigation state preserved after reload",
            CORRUPTION_HANDLED: "App handles localStorage corruption gracefully",
            PREFERENCES_PERSISTED: "User preferences persisted across sessions",
            ERROR_RECOVERY_TESTED: "Error recovery functionality tested successfully",
            UNDO_FUNCTIONALITY_TESTED: "Undo functionality and state consistency verified",
            MISTAKE_TRACKING_TESTED: "Mistake tracking functionality verified",
            TABLEBASE_ERROR_RECOVERY_TESTED: "Tablebase error recovery scenarios tested"
        },
        ERRORS: {
            TABLEBASE_ERROR: /tablebase.*error/i,
            GENERIC_ERROR: /error/i,
            INVALID_MOVE: /invalid.*move/i,
            WARNING: /warning/i
        },
        WARNINGS: {
            INVALID_MOVE: "Invalid move",
            BAD_MOVE: "Not the best move",
            MISTAKE: "Mistake detected"
        }
    }
};
/**
 *
 */ const TESTING = {
    DEFAULT_TIMEOUT: 1000,
    POLL_INTERVAL: 50
};
/**
 *
 */ const SYSTEM = {
    GB_TO_BYTES_FACTOR: 1024 * 1024 * 1024,
    DEFAULT_MEMORY_GB: 4,
    LOW_MEMORY_THRESHOLD_GB: 4
};

//# sourceMappingURL=data:application/json;base64,