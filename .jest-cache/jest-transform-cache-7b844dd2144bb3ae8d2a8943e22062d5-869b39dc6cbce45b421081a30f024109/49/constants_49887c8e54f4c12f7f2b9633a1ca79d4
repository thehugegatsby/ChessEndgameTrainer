7f7bdd0876831596cd46b4f1f86f7375
/**
 * Central configuration constants for the application
 */ /**
 * Application configuration constants containing all app-wide settings
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get APP_CONFIG () {
        return APP_CONFIG;
    },
    get getAppUrl () {
        return getAppUrl;
    },
    get isDevelopment () {
        return isDevelopment;
    },
    get isProduction () {
        return isProduction;
    },
    get isTest () {
        return isTest;
    }
});
const APP_CONFIG = {
    /** Development server port */ DEV_PORT: 3002,
    /** Development server host */ DEV_HOST: "127.0.0.1",
    /**
   * Get the development URL
   * @returns The development server URL
   */ get DEV_URL () {
        return `http://${this.DEV_HOST}:${this.DEV_PORT}`;
    },
    /** Production URL */ PROD_URL: process.env.NEXT_PUBLIC_APP_URL || "https://endgametrainer.com",
    /** API base URL */ API_BASE_URL: process.env.NEXT_PUBLIC_API_URL || "/api",
    /** Lichess Tablebase API URL */ TABLEBASE_API_URL: process.env.NEXT_PUBLIC_TABLEBASE_API_URL || "https://tablebase.lichess.ovh",
    /** Feature flags */ FEATURES: {
        /** Firebase integration enabled */ FIREBASE_ENABLED: process.env.NEXT_PUBLIC_FIREBASE_ENABLED === "true",
        /** Analytics tracking enabled */ ANALYTICS_ENABLED: process.env.NEXT_PUBLIC_ANALYTICS_ENABLED === "true"
    }
};
const isDevelopment = process.env.NODE_ENV === "development";
const isProduction = process.env.NODE_ENV === "production";
const isTest = process.env.NODE_ENV === "test";
const getAppUrl = ()=>{
    if (isDevelopment || isTest) {
        return APP_CONFIG.DEV_URL;
    }
    return APP_CONFIG.PROD_URL;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvY29uZmlnL2NvbnN0YW50cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENlbnRyYWwgY29uZmlndXJhdGlvbiBjb25zdGFudHMgZm9yIHRoZSBhcHBsaWNhdGlvblxuICovXG5cbi8qKlxuICogQXBwbGljYXRpb24gY29uZmlndXJhdGlvbiBjb25zdGFudHMgY29udGFpbmluZyBhbGwgYXBwLXdpZGUgc2V0dGluZ3NcbiAqL1xuZXhwb3J0IGNvbnN0IEFQUF9DT05GSUcgPSB7XG4gIC8qKiBEZXZlbG9wbWVudCBzZXJ2ZXIgcG9ydCAqL1xuICBERVZfUE9SVDogMzAwMixcbiAgLyoqIERldmVsb3BtZW50IHNlcnZlciBob3N0ICovXG4gIERFVl9IT1NUOiBcIjEyNy4wLjAuMVwiLFxuICAvKipcbiAgICogR2V0IHRoZSBkZXZlbG9wbWVudCBVUkxcbiAgICogQHJldHVybnMgVGhlIGRldmVsb3BtZW50IHNlcnZlciBVUkxcbiAgICovXG4gIGdldCBERVZfVVJMKCkge1xuICAgIHJldHVybiBgaHR0cDovLyR7dGhpcy5ERVZfSE9TVH06JHt0aGlzLkRFVl9QT1JUfWA7XG4gIH0sXG5cbiAgLyoqIFByb2R1Y3Rpb24gVVJMICovXG4gIFBST0RfVVJMOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUFBfVVJMIHx8IFwiaHR0cHM6Ly9lbmRnYW1ldHJhaW5lci5jb21cIixcblxuICAvKiogQVBJIGJhc2UgVVJMICovXG4gIEFQSV9CQVNFX1VSTDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX1VSTCB8fCBcIi9hcGlcIixcbiAgLyoqIExpY2hlc3MgVGFibGViYXNlIEFQSSBVUkwgKi9cbiAgVEFCTEVCQVNFX0FQSV9VUkw6XG4gICAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVEFCTEVCQVNFX0FQSV9VUkwgfHxcbiAgICBcImh0dHBzOi8vdGFibGViYXNlLmxpY2hlc3Mub3ZoXCIsXG5cbiAgLyoqIEZlYXR1cmUgZmxhZ3MgKi9cbiAgRkVBVFVSRVM6IHtcbiAgICAvKiogRmlyZWJhc2UgaW50ZWdyYXRpb24gZW5hYmxlZCAqL1xuICAgIEZJUkVCQVNFX0VOQUJMRUQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX0VOQUJMRUQgPT09IFwidHJ1ZVwiLFxuICAgIC8qKiBBbmFseXRpY3MgdHJhY2tpbmcgZW5hYmxlZCAqL1xuICAgIEFOQUxZVElDU19FTkFCTEVEOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BTkFMWVRJQ1NfRU5BQkxFRCA9PT0gXCJ0cnVlXCIsXG4gIH0sXG59IGFzIGNvbnN0O1xuXG4vLyBFbnZpcm9ubWVudCBoZWxwZXJzXG4vKipcbiAqIENoZWNrIGlmIHJ1bm5pbmcgaW4gZGV2ZWxvcG1lbnQgbW9kZVxuICovXG5leHBvcnQgY29uc3QgaXNEZXZlbG9wbWVudCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCI7XG5cbi8qKlxuICogQ2hlY2sgaWYgcnVubmluZyBpbiBwcm9kdWN0aW9uIG1vZGVcbiAqL1xuZXhwb3J0IGNvbnN0IGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIjtcblxuLyoqXG4gKiBDaGVjayBpZiBydW5uaW5nIGluIHRlc3QgbW9kZVxuICovXG5leHBvcnQgY29uc3QgaXNUZXN0ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwidGVzdFwiO1xuXG4vKipcbiAqIEdldCB0aGUgYXBwcm9wcmlhdGUgVVJMIGJhc2VkIG9uIGVudmlyb25tZW50XG4gKiBAcmV0dXJucyBUaGUgYXBwbGljYXRpb24gVVJMXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRBcHBVcmwgPSAoKTogc3RyaW5nID0+IHtcbiAgaWYgKGlzRGV2ZWxvcG1lbnQgfHwgaXNUZXN0KSB7XG4gICAgcmV0dXJuIEFQUF9DT05GSUcuREVWX1VSTDtcbiAgfVxuICByZXR1cm4gQVBQX0NPTkZJRy5QUk9EX1VSTDtcbn07Il0sIm5hbWVzIjpbIkFQUF9DT05GSUciLCJnZXRBcHBVcmwiLCJpc0RldmVsb3BtZW50IiwiaXNQcm9kdWN0aW9uIiwiaXNUZXN0IiwiREVWX1BPUlQiLCJERVZfSE9TVCIsIkRFVl9VUkwiLCJQUk9EX1VSTCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUFBfVVJMIiwiQVBJX0JBU0VfVVJMIiwiTkVYVF9QVUJMSUNfQVBJX1VSTCIsIlRBQkxFQkFTRV9BUElfVVJMIiwiTkVYVF9QVUJMSUNfVEFCTEVCQVNFX0FQSV9VUkwiLCJGRUFUVVJFUyIsIkZJUkVCQVNFX0VOQUJMRUQiLCJORVhUX1BVQkxJQ19GSVJFQkFTRV9FTkFCTEVEIiwiQU5BTFlUSUNTX0VOQUJMRUQiLCJORVhUX1BVQkxJQ19BTkFMWVRJQ1NfRU5BQkxFRCIsIk5PREVfRU5WIl0sIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQyxHQUVEOztDQUVDOzs7Ozs7Ozs7OztRQUNZQTtlQUFBQTs7UUFvREFDO2VBQUFBOztRQWhCQUM7ZUFBQUE7O1FBS0FDO2VBQUFBOztRQUtBQztlQUFBQTs7O0FBOUNOLE1BQU1KLGFBQWE7SUFDeEIsNEJBQTRCLEdBQzVCSyxVQUFVO0lBQ1YsNEJBQTRCLEdBQzVCQyxVQUFVO0lBQ1Y7OztHQUdDLEdBQ0QsSUFBSUMsV0FBVTtRQUNaLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDRCxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0QsUUFBUSxFQUFFO0lBQ25EO0lBRUEsbUJBQW1CLEdBQ25CRyxVQUFVQyxRQUFRQyxHQUFHLENBQUNDLG1CQUFtQixJQUFJO0lBRTdDLGlCQUFpQixHQUNqQkMsY0FBY0gsUUFBUUMsR0FBRyxDQUFDRyxtQkFBbUIsSUFBSTtJQUNqRCw4QkFBOEIsR0FDOUJDLG1CQUNFTCxRQUFRQyxHQUFHLENBQUNLLDZCQUE2QixJQUN6QztJQUVGLGtCQUFrQixHQUNsQkMsVUFBVTtRQUNSLGlDQUFpQyxHQUNqQ0Msa0JBQWtCUixRQUFRQyxHQUFHLENBQUNRLDRCQUE0QixLQUFLO1FBQy9ELCtCQUErQixHQUMvQkMsbUJBQW1CVixRQUFRQyxHQUFHLENBQUNVLDZCQUE2QixLQUFLO0lBQ25FO0FBQ0Y7QUFNTyxNQUFNbEIsZ0JBQWdCTyxRQUFRQyxHQUFHLENBQUNXLFFBQVEsS0FBSztBQUsvQyxNQUFNbEIsZUFBZU0sUUFBUUMsR0FBRyxDQUFDVyxRQUFRLEtBQUs7QUFLOUMsTUFBTWpCLFNBQVNLLFFBQVFDLEdBQUcsQ0FBQ1csUUFBUSxLQUFLO0FBTXhDLE1BQU1wQixZQUFZO0lBQ3ZCLElBQUlDLGlCQUFpQkUsUUFBUTtRQUMzQixPQUFPSixXQUFXTyxPQUFPO0lBQzNCO0lBQ0EsT0FBT1AsV0FBV1EsUUFBUTtBQUM1QiJ9