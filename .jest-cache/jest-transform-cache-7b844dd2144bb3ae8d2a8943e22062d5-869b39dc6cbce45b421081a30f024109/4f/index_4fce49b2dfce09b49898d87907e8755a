a82baea799b52f2c06f6bfc8719b9417
/**
 * @file Game analysis panel component
 * @module components/training/AnalysisPanel
 *
 * @description
 * Sliding panel component that displays comprehensive move-by-move analysis
 * of a completed chess game. Shows move quality, evaluations, and detailed
 * insights for training review. Currently uses simulated data for demo
 * purposes.
 *
 * @remarks
 * Key features:
 * - Sliding animation from bottom of screen
 * - Two-column layout: move list and detailed analysis
 * - Move quality classification (excellent/good/inaccuracy/mistake/blunder)
 * - Simulated evaluation data (to be replaced with real tablebase data)
 * - Dark mode support
 * - Responsive height based on constants
 *
 * The component is designed to work with the training interface,
 * providing post-game analysis for learning purposes.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AnalysisPanel", {
    enumerable: true,
    get: function() {
        return AnalysisPanel;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _chess = require("chess.js");
const _MoveAnalysis = require("./MoveAnalysis");
const _AnalysisDetails = require("./AnalysisDetails");
const _constants = require("../../../constants");
const _TablebaseService = require("../../../services/TablebaseService");
const _logging = require("../../../services/logging");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const logger = (0, _logging.getLogger)().setContext("AnalysisPanel");
const AnalysisPanel = /*#__PURE__*/ _react.default.memo(({ history, initialFen, onClose, isVisible })=>{
    const [selectedMoveIndex, setSelectedMoveIndex] = (0, _react.useState)(null);
    const [analysisData, setAnalysisData] = (0, _react.useState)([]);
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    /**
     * Load analysis data from tablebase for all positions
     */ (0, _react.useEffect)(()=>{
        if (!isVisible || history.length === 0) return;
        const loadAnalysisData = async ()=>{
            setIsLoading(true);
            try {
                // Reconstruct all FENs from move history
                const startFen = initialFen || "4k3/8/4K3/4P3/8/8/8/8 w - - 0 1";
                const chess = new _chess.Chess(startFen);
                const positions = [
                    startFen
                ];
                // Apply each move to get FEN after each move
                for (const move of history){
                    chess.move(move);
                    positions.push(chess.fen());
                }
                // Fetch tablebase analysis for all positions in parallel
                const analysisPromises = history.map(async (move, index)=>{
                    const fenBefore = positions[index];
                    const fenAfter = positions[index + 1];
                    const [evalBefore, evalAfter, topMoves] = await Promise.all([
                        _TablebaseService.tablebaseService.getEvaluation(fenBefore),
                        _TablebaseService.tablebaseService.getEvaluation(fenAfter),
                        _TablebaseService.tablebaseService.getTopMoves(fenBefore, 1)
                    ]);
                    // Calculate move quality based on WDL change
                    let classification = "good";
                    if (evalBefore.isAvailable && evalAfter.isAvailable && evalBefore.result && evalAfter.result) {
                        const wdlBefore = evalBefore.result.wdl;
                        const wdlAfter = evalAfter.result.wdl;
                        const wdlChange = wdlBefore - wdlAfter; // From player's perspective
                        if (wdlChange >= 2) classification = "blunder"; // Win to loss
                        else if (wdlChange >= 1) classification = "mistake"; // Win to draw or draw to loss
                        else if (wdlChange > 0) classification = "inaccuracy"; // Small loss
                        else if (wdlChange === 0) classification = "excellent"; // Maintained evaluation
                        else classification = "good"; // Improved position
                    }
                    return {
                        move,
                        evaluation: evalAfter.isAvailable && evalAfter.result ? evalAfter.result.wdl : 0,
                        classification,
                        bestMove: topMoves.isAvailable && topMoves.moves && topMoves.moves.length > 0 ? topMoves.moves[0].san : undefined
                    };
                });
                const results = await Promise.all(analysisPromises);
                setAnalysisData(results);
            } catch (error) {
                logger.error("Failed to load analysis data:", error);
                // Fallback to empty analysis
                setAnalysisData(history.map((move)=>({
                        move,
                        evaluation: 0,
                        classification: "good",
                        bestMove: undefined
                    })));
            } finally{
                setIsLoading(false);
            }
        };
        loadAnalysisData();
    }, [
        history,
        initialFen,
        isVisible
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-900 rounded-t-xl shadow-lg border-t border-gray-200 dark:border-gray-700 flex flex-col transform transition-transform duration-300 ease-in-out z-50 ${isVisible ? "translate-y-0" : "translate-y-full"}`,
        style: {
            height: `${_constants.DIMENSIONS.ANALYSIS_PANEL_HEIGHT}px`
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-center justify-between p-3 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 rounded-t-xl",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center gap-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-lg",
                                children: "ðŸ“Š"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                className: "text-lg font-semibold text-gray-800 dark:text-gray-200",
                                children: "Spielanalyse"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                className: "text-sm text-gray-500 dark:text-gray-400",
                                children: [
                                    "(",
                                    history.length,
                                    " ZÃ¼ge)"
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onClose,
                        className: "text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-xl font-bold w-6 h-6 flex items-center justify-center rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors",
                        children: "Ã—"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "flex flex-1 overflow-hidden",
                children: isLoading ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "flex-1 flex items-center justify-center",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "text-center",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-2"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                className: "text-sm text-gray-500 dark:text-gray-400",
                                children: "Lade Analyse..."
                            })
                        ]
                    })
                }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveAnalysis.MoveAnalysis, {
                            analysisData: analysisData,
                            selectedMoveIndex: selectedMoveIndex,
                            onMoveSelect: setSelectedMoveIndex
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_AnalysisDetails.AnalysisDetails, {
                            selectedMoveIndex: selectedMoveIndex,
                            analysisData: analysisData
                        })
                    ]
                })
            })
        ]
    });
});
AnalysisPanel.displayName = "AnalysisPanel";

//# sourceMappingURL=data:application/json;base64,