{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/training/AnalysisPanel/index.tsx"],"sourcesContent":["/**\n * @file Game analysis panel component\n * @module components/training/AnalysisPanel\n *\n * @description\n * Sliding panel component that displays comprehensive move-by-move analysis\n * of a completed chess game. Shows move quality, evaluations, and detailed\n * insights for training review. Currently uses simulated data for demo\n * purposes.\n *\n * @remarks\n * Key features:\n * - Sliding animation from bottom of screen\n * - Two-column layout: move list and detailed analysis\n * - Move quality classification (excellent/good/inaccuracy/mistake/blunder)\n * - Simulated evaluation data (to be replaced with real tablebase data)\n * - Dark mode support\n * - Responsive height based on constants\n *\n * The component is designed to work with the training interface,\n * providing post-game analysis for learning purposes.\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport { Move } from \"chess.js\";\nimport { Chess } from \"chess.js\";\nimport { MoveAnalysis } from \"./MoveAnalysis\";\nimport { AnalysisDetails } from \"./AnalysisDetails\";\nimport { DIMENSIONS } from \"@shared/constants\";\nimport { tablebaseService } from \"@shared/services/TablebaseService\";\nimport { getLogger } from \"@shared/services/logging\";\n\nconst logger = getLogger().setContext(\"AnalysisPanel\");\n\n/**\n * Props for the AnalysisPanel component\n *\n * @interface AnalysisPanelProps\n *\n * @property {Move[]} history - Array of moves played in the game\n * @property {string} [initialFen] - Starting position FEN (currently unused)\n * @property {() => void} onClose - Callback to close the panel\n * @property {boolean} isVisible - Controls panel visibility with animation\n */\ninterface AnalysisPanelProps {\n  history: Move[];\n  initialFen?: string;\n  onClose: () => void;\n  isVisible: boolean;\n}\n\n/**\n * Internal data structure for move analysis\n *\n * @interface MoveAnalysisData\n * @private\n *\n * @property {Move} move - The chess move object\n * @property {number} [evaluation] - Position evaluation after the move\n * @property {string} [bestMove] - Best move according to analysis\n * @property {string} [classification] - Quality classification of the move\n */\ninterface MoveAnalysisData {\n  move: Move;\n  evaluation?: number;\n  bestMove?: string;\n  classification?: \"excellent\" | \"good\" | \"inaccuracy\" | \"mistake\" | \"blunder\";\n}\n\n/**\n * Game analysis panel component\n *\n * @component\n * @description\n * Provides a comprehensive post-game analysis interface that slides up from\n * the bottom of the screen. Displays move-by-move analysis with quality\n * indicators and detailed insights for each move.\n *\n * @remarks\n * Current implementation uses simulated data for demonstration.\n * In production, this would integrate with:\n * - TablebaseService for endgame evaluations\n * - Move quality analysis from the training session\n * - Actual best move suggestions from tablebase data\n *\n * The panel height is controlled by DIMENSIONS.ANALYSIS_PANEL_HEIGHT\n * for consistent layout across the application.\n *\n * @example\n * ```tsx\n * <AnalysisPanel\n *   history={gameHistory}\n *   onClose={() => setShowAnalysis(false)}\n *   isVisible={showAnalysis}\n * />\n * ```\n *\n * @param {AnalysisPanelProps} props - Component props\n * @returns {JSX.Element} Rendered analysis panel\n */\nexport const AnalysisPanel: React.FC<AnalysisPanelProps> = React.memo(\n  ({ history, initialFen, onClose, isVisible }) => {\n    const [selectedMoveIndex, setSelectedMoveIndex] = useState<number | null>(\n      null,\n    );\n    const [analysisData, setAnalysisData] = useState<MoveAnalysisData[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    /**\n     * Load analysis data from tablebase for all positions\n     */\n    useEffect(() => {\n      if (!isVisible || history.length === 0) return;\n\n      const loadAnalysisData = async () => {\n        setIsLoading(true);\n        try {\n          // Reconstruct all FENs from move history\n          const startFen = initialFen || \"4k3/8/4K3/4P3/8/8/8/8 w - - 0 1\";\n          const chess = new Chess(startFen);\n          const positions: string[] = [startFen];\n\n          // Apply each move to get FEN after each move\n          for (const move of history) {\n            chess.move(move);\n            positions.push(chess.fen());\n          }\n\n          // Fetch tablebase analysis for all positions in parallel\n          const analysisPromises = history.map(async (move, index) => {\n            const fenBefore = positions[index];\n            const fenAfter = positions[index + 1];\n\n            const [evalBefore, evalAfter, topMoves] = await Promise.all([\n              tablebaseService.getEvaluation(fenBefore),\n              tablebaseService.getEvaluation(fenAfter),\n              tablebaseService.getTopMoves(fenBefore, 1),\n            ]);\n\n            // Calculate move quality based on WDL change\n            let classification: MoveAnalysisData[\"classification\"] = \"good\";\n            if (\n              evalBefore.isAvailable &&\n              evalAfter.isAvailable &&\n              evalBefore.result &&\n              evalAfter.result\n            ) {\n              const wdlBefore = evalBefore.result.wdl;\n              const wdlAfter = evalAfter.result.wdl;\n              const wdlChange = wdlBefore - wdlAfter; // From player's perspective\n\n              if (wdlChange >= 2)\n                classification = \"blunder\"; // Win to loss\n              else if (wdlChange >= 1)\n                classification = \"mistake\"; // Win to draw or draw to loss\n              else if (wdlChange > 0)\n                classification = \"inaccuracy\"; // Small loss\n              else if (wdlChange === 0)\n                classification = \"excellent\"; // Maintained evaluation\n              else classification = \"good\"; // Improved position\n            }\n\n            return {\n              move,\n              evaluation:\n                evalAfter.isAvailable && evalAfter.result\n                  ? evalAfter.result.wdl\n                  : 0,\n              classification,\n              bestMove:\n                topMoves.isAvailable &&\n                topMoves.moves &&\n                topMoves.moves.length > 0\n                  ? topMoves.moves[0].san\n                  : undefined,\n            };\n          });\n\n          const results = await Promise.all(analysisPromises);\n          setAnalysisData(results);\n        } catch (error) {\n          logger.error(\"Failed to load analysis data:\", error);\n          // Fallback to empty analysis\n          setAnalysisData(\n            history.map((move) => ({\n              move,\n              evaluation: 0,\n              classification: \"good\" as const,\n              bestMove: undefined,\n            })),\n          );\n        } finally {\n          setIsLoading(false);\n        }\n      };\n\n      loadAnalysisData();\n    }, [history, initialFen, isVisible]);\n\n    return (\n      <div\n        className={`fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-900 rounded-t-xl shadow-lg border-t border-gray-200 dark:border-gray-700 flex flex-col transform transition-transform duration-300 ease-in-out z-50 ${\n          isVisible ? \"translate-y-0\" : \"translate-y-full\"\n        }`}\n        style={{ height: `${DIMENSIONS.ANALYSIS_PANEL_HEIGHT}px` }}\n      >\n        {/* Compact Header */}\n        <div className=\"flex items-center justify-between p-3 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 rounded-t-xl\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-lg\">ðŸ“Š</span>\n            <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n              Spielanalyse\n            </h3>\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n              ({history.length} ZÃ¼ge)\n            </span>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-xl font-bold w-6 h-6 flex items-center justify-center rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors\"\n          >\n            Ã—\n          </button>\n        </div>\n\n        <div className=\"flex flex-1 overflow-hidden\">\n          {isLoading ? (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-2\"></div>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  Lade Analyse...\n                </p>\n              </div>\n            </div>\n          ) : (\n            <>\n              {/* Move Analysis List */}\n              <MoveAnalysis\n                analysisData={analysisData}\n                selectedMoveIndex={selectedMoveIndex}\n                onMoveSelect={setSelectedMoveIndex}\n              />\n\n              {/* Analysis Details */}\n              <AnalysisDetails\n                selectedMoveIndex={selectedMoveIndex}\n                analysisData={analysisData}\n              />\n            </>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nAnalysisPanel.displayName = \"AnalysisPanel\";\n"],"names":["AnalysisPanel","logger","getLogger","setContext","React","memo","history","initialFen","onClose","isVisible","selectedMoveIndex","setSelectedMoveIndex","useState","analysisData","setAnalysisData","isLoading","setIsLoading","useEffect","length","loadAnalysisData","startFen","chess","Chess","positions","move","push","fen","analysisPromises","map","index","fenBefore","fenAfter","evalBefore","evalAfter","topMoves","Promise","all","tablebaseService","getEvaluation","getTopMoves","classification","isAvailable","result","wdlBefore","wdl","wdlAfter","wdlChange","evaluation","bestMove","moves","san","undefined","results","error","div","className","style","height","DIMENSIONS","ANALYSIS_PANEL_HEIGHT","span","h3","button","onClick","p","MoveAnalysis","onMoveSelect","AnalysisDetails","displayName"],"mappings":"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"}