{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/hooks/useDerivedProgress.test.ts"],"sourcesContent":["/**\n * @file Unit tests for enhanced useDerivedProgress hook with cache-first strategy\n * @description Tests cache integration, fallback scenarios, and performance optimizations\n */\n\nimport { renderHook, act } from '@testing-library/react';\nimport { useDerivedProgress, useDueCardsCache } from '@shared/store/hooks/useProgressStore';\nimport { useStore } from '@shared/store/rootStore';\nimport { dueCardsCacheService } from '@shared/services/DueCardsCacheService';\nimport type { CardProgress } from '@shared/store/slices/types';\n\n// Mock the cache service\njest.mock('@shared/services/DueCardsCacheService', () => {\n  let mockCacheData: any = null;\n  let mockCacheStats = {\n    available: true,\n    totalEntries: 0,\n    estimatedSize: 0,\n    lastCleanup: null\n  };\n\n  const mockCacheService = {\n    getDueCards: jest.fn(() => mockCacheData),\n    setDueCards: jest.fn(() => {\n      mockCacheStats.totalEntries += 1;\n      mockCacheStats.estimatedSize += 1000; // Simulate size growth\n    }),\n    clearUserCache: jest.fn(() => {\n      mockCacheData = null;\n      mockCacheStats.totalEntries = Math.max(0, mockCacheStats.totalEntries - 1);\n    }),\n    clearAllCache: jest.fn(() => {\n      mockCacheData = null;\n      mockCacheStats = { available: true, totalEntries: 0, estimatedSize: 0, lastCleanup: null };\n    }),\n    getCacheStats: jest.fn(() => mockCacheStats),\n    forceCleanup: jest.fn()\n  };\n\n  // Helper to set mock cache data for tests\n  (mockCacheService as any).__setMockCacheData = (data: any) => {\n    mockCacheData = data;\n  };\n\n  return {\n    dueCardsCacheService: mockCacheService,\n    createInputHash: jest.fn((input: any) => 'mock-hash-' + JSON.stringify(input).length)\n  };\n});\n\n// Mock logger to avoid console spam in tests\njest.mock('@shared/services/logging/Logger', () => ({\n  getLogger: () => ({\n    setContext: () => ({\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn()\n    })\n  })\n}));\n\n// Test helpers\nconst createTestCard = (id: string, nextReviewAt: number): CardProgress => ({\n  id,\n  nextReviewAt,\n  lastReviewedAt: Date.now() - 86400000, // 24 hours ago\n  interval: 1,\n  repetition: 1,\n  efactor: 2.5,\n  lapses: 0\n});\n\nconst createDueCard = (id: string) => createTestCard(id, Date.now() - 1000); // Due 1 second ago\nconst createFutureCard = (id: string) => createTestCard(id, Date.now() + 86400000); // Due in 24 hours\n\ndescribe('useDerivedProgress Hook (Enhanced with Cache)', () => {\n  const userId = 'test-user-123';\n  let mockCacheService: any;\n\n  beforeEach(() => {\n    mockCacheService = dueCardsCacheService as any;\n    mockCacheService.__setMockCacheData(null);\n    \n    // Reset cache stats\n    jest.mocked(mockCacheService.getCacheStats).mockReturnValue({\n      available: true,\n      totalEntries: 0,\n      estimatedSize: 0,\n      lastCleanup: null\n    });\n\n    jest.clearAllMocks();\n    \n    // Reset store to initial state\n    useStore.getState().progress.resetProgress();\n  });\n\n  describe('Basic functionality without cache', () => {\n    it('should calculate due cards without userId (fallback mode)', () => {\n      // Setup some card progress\n      const cards = [\n        createDueCard('due-1'),\n        createDueCard('due-2'),\n        createFutureCard('future-1')\n      ];\n\n      act(() => {\n        useStore.getState().progress.initializeCards(cards);\n        useStore.getState().progress.updateSessionProgress({\n          positionsCorrect: 8,\n          positionsAttempted: 10\n        });\n      });\n\n      const { result } = renderHook(() => useDerivedProgress(null));\n\n      expect(result.current.dueCardCount).toBe(2);\n      expect(result.current.totalCards).toBe(3);\n      expect(result.current.successRate).toBe(80);\n      expect(result.current.isFromCache).toBe(false);\n      expect(result.current.cacheStats.available).toBe(false);\n      \n      // Should not call cache service without userId\n      expect(mockCacheService.getDueCards).not.toHaveBeenCalled();\n    });\n\n    it('should handle empty card progress', () => {\n      const { result } = renderHook(() => useDerivedProgress(userId));\n\n      expect(result.current.dueCardCount).toBe(0);\n      expect(result.current.totalCards).toBe(0);\n      expect(result.current.successRate).toBe(0);\n      expect(result.current.isFromCache).toBe(false);\n    });\n  });\n\n  describe('Cache-first strategy', () => {\n    it('should use cached result when available', () => {\n      // Setup cards in store\n      const cards = [\n        createDueCard('due-1'),\n        createDueCard('due-2'),\n        createFutureCard('future-1')\n      ];\n\n      act(() => {\n        useStore.getState().progress.initializeCards(cards);\n      });\n\n      // Mock cached result\n      const mockCachedResult = {\n        dueCards: [\n          { ...createDueCard('due-1'), __isDue: true, __brand: 'DueCard' },\n          { ...createDueCard('due-2'), __isDue: true, __brand: 'DueCard' }\n        ],\n        calculatedAt: Date.now() - 30000, // 30 seconds ago\n        stats: {\n          totalCards: 3,\n          dueCount: 2,\n          duePercentage: 67,\n          nextDueAt: Date.now() + 3600000,\n          averageInterval: 2.5\n        },\n        inputHash: 'cached-hash',\n        createdAt: Date.now() - 30000,\n        lastAccessedAt: Date.now() - 30000\n      };\n\n      mockCacheService.__setMockCacheData(mockCachedResult);\n\n      const { result } = renderHook(() => useDerivedProgress(userId));\n\n      expect(result.current.isFromCache).toBe(true);\n      expect(result.current.dueCardCount).toBe(2);\n      expect(result.current.stats).toEqual(mockCachedResult.stats);\n      expect(mockCacheService.getDueCards).toHaveBeenCalledWith(userId, expect.any(String));\n    });\n\n    it('should compute fresh result on cache miss and cache it', () => {\n      // Setup cards in store\n      const cards = [\n        createDueCard('due-1'),\n        createFutureCard('future-1'),\n        createFutureCard('future-2')\n      ];\n\n      act(() => {\n        useStore.getState().progress.initializeCards(cards);\n      });\n\n      // No cached result (cache miss)\n      mockCacheService.__setMockCacheData(null);\n\n      const { result } = renderHook(() => useDerivedProgress(userId));\n\n      expect(result.current.isFromCache).toBe(false);\n      expect(result.current.dueCardCount).toBe(1);\n      expect(result.current.totalCards).toBe(3);\n\n      // Should have tried to get from cache\n      expect(mockCacheService.getDueCards).toHaveBeenCalledWith(userId, expect.any(String));\n      \n      // Should have cached the result\n      expect(mockCacheService.setDueCards).toHaveBeenCalledWith(\n        userId,\n        expect.arrayContaining([expect.objectContaining({ id: 'due-1' })]),\n        expect.objectContaining({ dueCount: 1, totalCards: 3 }),\n        expect.any(String)\n      );\n    });\n\n    it('should handle cache service errors gracefully', () => {\n      // Setup cards\n      const cards = [createDueCard('due-1')];\n      act(() => {\n        useStore.getState().progress.initializeCards(cards);\n      });\n\n      // Mock cache service to throw error\n      jest.mocked(mockCacheService.setDueCards).mockImplementation(() => {\n        throw new Error('Cache write error');\n      });\n\n      const { result } = renderHook(() => useDerivedProgress(userId));\n\n      // Should still return computed result despite cache error\n      expect(result.current.dueCardCount).toBe(1);\n      expect(result.current.isFromCache).toBe(false);\n      expect(result.current.totalCards).toBe(1);\n    });\n  });\n\n  describe('Input hash validation', () => {\n    it('should create consistent input hash for same inputs', () => {\n      const cards = [createDueCard('due-1'), createFutureCard('future-1')];\n      \n      act(() => {\n        useStore.getState().progress.initializeCards(cards);\n      });\n\n      // Render hook multiple times\n      renderHook(() => useDerivedProgress(userId));\n      renderHook(() => useDerivedProgress(userId));\n\n      // Both should call getDueCards with same hash\n      expect(mockCacheService.getDueCards).toHaveBeenCalledTimes(2);\n    });\n\n    it('should create different hash when cards change', () => {\n      // Initial cards\n      act(() => {\n        useStore.getState().progress.initializeCards([createDueCard('due-1')]);\n      });\n\n      const { rerender } = renderHook(() => useDerivedProgress(userId));\n\n      // Add more cards\n      act(() => {\n        useStore.getState().progress.initializeCards([\n          createDueCard('due-1'), \n          createDueCard('due-2')\n        ]);\n      });\n\n      rerender();\n\n      // Should have called getDueCards twice with different contexts\n      expect(mockCacheService.getDueCards).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Performance optimization', () => {\n    it('should handle large card collections efficiently', () => {\n      // Create 1000 cards (500 due, 500 future)\n      const largeCardSet = Array.from({ length: 1000 }, (_, i) => \n        i % 2 === 0 \n          ? createDueCard(`due-${i}`)\n          : createFutureCard(`future-${i}`)\n      );\n\n      act(() => {\n        useStore.getState().progress.initializeCards(largeCardSet);\n      });\n\n      const startTime = performance.now();\n      renderHook(() => useDerivedProgress(userId));\n      const endTime = performance.now();\n      \n      // Should complete within reasonable time (< 100ms)\n      expect(endTime - startTime).toBeLessThan(100);\n      \n      // Should attempt to cache the large result\n      expect(mockCacheService.setDueCards).toHaveBeenCalled();\n    });\n\n    it('should use 5-minute timestamp buckets for cache stability', () => {\n      const cards = [createDueCard('due-1')];\n      \n      act(() => {\n        useStore.getState().progress.initializeCards(cards);\n      });\n\n      // Mock time to be mid-bucket\n      const originalDateNow = Date.now;\n      const fixedTime = 1700000000000; // Fixed timestamp\n      Date.now = jest.fn(() => fixedTime + 2 * 60 * 1000); // +2 minutes\n\n      renderHook(() => useDerivedProgress(userId));\n\n      // Should use 5-minute bucket in hash calculation\n      expect(mockCacheService.getDueCards).toHaveBeenCalled();\n\n      Date.now = originalDateNow;\n    });\n  });\n});\n\ndescribe('useDueCardsCache Hook', () => {\n  let mockCacheService: any;\n\n  beforeEach(() => {\n    mockCacheService = dueCardsCacheService as any;\n    jest.clearAllMocks();\n  });\n\n  it('should provide cache management functions', () => {\n    const { result } = renderHook(() => useDueCardsCache());\n\n    expect(typeof result.current.clearUserCache).toBe('function');\n    expect(typeof result.current.clearAllCache).toBe('function');\n    expect(typeof result.current.getCacheStats).toBe('function');\n    expect(typeof result.current.forceCleanup).toBe('function');\n  });\n\n  it('should call cache service methods correctly', () => {\n    const { result } = renderHook(() => useDueCardsCache());\n\n    // Test clearUserCache\n    result.current.clearUserCache('test-user');\n    expect(mockCacheService.clearUserCache).toHaveBeenCalledWith('test-user');\n\n    // Test clearAllCache\n    result.current.clearAllCache();\n    expect(mockCacheService.clearAllCache).toHaveBeenCalled();\n\n    // Test getCacheStats\n    result.current.getCacheStats();\n    expect(mockCacheService.getCacheStats).toHaveBeenCalled();\n\n    // Test forceCleanup\n    result.current.forceCleanup();\n    expect(mockCacheService.forceCleanup).toHaveBeenCalled();\n  });\n\n  it('should return stable references (useMemo)', () => {\n    const { result, rerender } = renderHook(() => useDueCardsCache());\n\n    const firstRender = result.current;\n    \n    rerender();\n    \n    const secondRender = result.current;\n\n    // All functions should be the same reference\n    expect(firstRender.clearUserCache).toBe(secondRender.clearUserCache);\n    expect(firstRender.clearAllCache).toBe(secondRender.clearAllCache);\n    expect(firstRender.getCacheStats).toBe(secondRender.getCacheStats);\n    expect(firstRender.forceCleanup).toBe(secondRender.forceCleanup);\n  });\n});"],"names":["jest","mock","mockCacheData","mockCacheStats","available","totalEntries","estimatedSize","lastCleanup","mockCacheService","getDueCards","fn","setDueCards","clearUserCache","Math","max","clearAllCache","getCacheStats","forceCleanup","__setMockCacheData","data","dueCardsCacheService","createInputHash","input","JSON","stringify","length","getLogger","setContext","debug","info","warn","error","createTestCard","id","nextReviewAt","lastReviewedAt","Date","now","interval","repetition","efactor","lapses","createDueCard","createFutureCard","describe","userId","beforeEach","mocked","mockReturnValue","clearAllMocks","useStore","getState","progress","resetProgress","it","cards","act","initializeCards","updateSessionProgress","positionsCorrect","positionsAttempted","result","renderHook","useDerivedProgress","expect","current","dueCardCount","toBe","totalCards","successRate","isFromCache","cacheStats","not","toHaveBeenCalled","mockCachedResult","dueCards","__isDue","__brand","calculatedAt","stats","dueCount","duePercentage","nextDueAt","averageInterval","inputHash","createdAt","lastAccessedAt","toEqual","toHaveBeenCalledWith","any","String","arrayContaining","objectContaining","mockImplementation","Error","toHaveBeenCalledTimes","rerender","largeCardSet","Array","from","_","i","startTime","performance","endTime","toBeLessThan","originalDateNow","fixedTime","useDueCardsCache","firstRender","secondRender"],"mappings":"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"}