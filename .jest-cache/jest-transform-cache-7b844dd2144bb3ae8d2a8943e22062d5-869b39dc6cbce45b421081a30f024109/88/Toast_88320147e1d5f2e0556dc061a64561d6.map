{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/ui/Toast.tsx"],"sourcesContent":["/**\n * @file Toast notification components\n * @module components/ui/Toast\n *\n * @description\n * Provides toast notification components for displaying temporary messages\n * to users. Includes both individual Toast component and ToastContainer\n * for managing multiple toasts. Features auto-dismiss, manual close,\n * and smooth animations.\n *\n * @remarks\n * Key features:\n * - Four notification types: success, error, info, warning\n * - Auto-dismiss with configurable duration\n * - Manual dismiss via close button\n * - Smooth slide-in/fade-out animations\n * - Icon indicators for each type\n * - Stacking support for multiple toasts\n * - Backdrop blur for better visibility\n * - Responsive positioning\n *\n * Uses Tailwind CSS for styling with glassmorphism effects.\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport { UI } from \"@shared/constants\";\n\n/**\n * Props for individual Toast component\n *\n * @interface ToastProps\n *\n * @property {string} message - The notification message to display\n * @property {'success' | 'error' | 'info' | 'warning'} type - Toast type determines styling and icon\n * @property {number} [duration] - Auto-dismiss duration in milliseconds (default: UI.TOAST_DURATION)\n * @property {() => void} onClose - Callback when toast is dismissed\n */\nexport interface ToastProps {\n  message: string;\n  type: \"success\" | \"error\" | \"info\" | \"warning\";\n  duration?: number;\n  onClose: () => void;\n}\n\n/**\n * Toast notification component\n *\n * @component\n * @description\n * Displays a temporary notification message with automatic dismissal.\n * Supports different types with unique colors and icons. Features\n * smooth animations for appearance and disappearance.\n *\n * @example\n * ```tsx\n * import { getLogger } from '@shared/services/logging/Logger';\n * const logger = getLogger();\n * \n * <Toast\n *   message=\"Move successful!\"\n *   type=\"success\"\n *   duration={3000}\n *   onClose={() => logger.info('Toast closed')}\n * />\n * ```\n *\n * @param {ToastProps} props - Toast configuration\n * @returns {JSX.Element} Rendered toast notification\n */\nexport const Toast: React.FC<ToastProps> = ({\n  message,\n  type,\n  duration = UI.TOAST_DURATION,\n  onClose,\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(false);\n      setTimeout(onClose, UI.TOAST_FADE_DURATION); // Allow fade out animation\n    }, duration);\n\n    return () => clearTimeout(timer);\n  }, [duration, onClose]);\n\n  /**\n   * Generate dynamic styles based on toast type and visibility\n   *\n   * @private\n   * @returns {string} Combined Tailwind classes\n   */\n  const getToastStyles = () => {\n    const baseStyles =\n      \"fixed top-4 right-4 z-50 px-4 py-3 rounded-lg shadow-lg backdrop-blur-sm transition-all duration-300 max-w-sm\";\n\n    const typeStyles = {\n      success: \"bg-green-500/90 text-white border border-green-400\",\n      error: \"bg-red-500/90 text-white border border-red-400\",\n      info: \"bg-blue-500/90 text-white border border-blue-400\",\n      warning: \"bg-yellow-500/90 text-black border border-yellow-400\",\n    };\n\n    const visibilityStyles = isVisible\n      ? \"opacity-100 translate-x-0\"\n      : \"opacity-0 translate-x-full\";\n\n    return `${baseStyles} ${typeStyles[type]} ${visibilityStyles}`;\n  };\n\n  /**\n   * Get emoji icon for toast type\n   *\n   * @private\n   * @returns {string} Emoji icon\n   */\n  const getIcon = () => {\n    switch (type) {\n      case \"success\":\n        return \"üéâ\";\n      case \"error\":\n        return \"‚ùå\";\n      case \"info\":\n        return \"‚ÑπÔ∏è\";\n      case \"warning\":\n        return \"‚ö†Ô∏è\";\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <div className={getToastStyles()}>\n      <div className=\"flex items-center gap-2\">\n        <span className=\"text-lg\">{getIcon()}</span>\n        <span className=\"font-medium\">{message}</span>\n        <button\n          onClick={() => {\n            setIsVisible(false);\n            setTimeout(onClose, UI.TOAST_FADE_DURATION);\n          }}\n          className=\"ml-2 text-xl opacity-70 hover:opacity-100 transition-opacity\"\n        >\n          √ó\n        </button>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Props for ToastContainer component\n *\n * @interface ToastContainerProps\n *\n * @property {Array} toasts - Array of toast configurations\n * @property {string} toasts[].id - Unique identifier for the toast\n * @property {string} toasts[].message - Toast message\n * @property {'success' | 'error' | 'info' | 'warning'} toasts[].type - Toast type\n * @property {number} [toasts[].duration] - Optional custom duration\n * @property {(id: string) => void} onRemoveToast - Callback to remove a toast by ID\n */\ninterface ToastContainerProps {\n  toasts: Array<{\n    id: string;\n    message: string;\n    type: \"success\" | \"error\" | \"info\" | \"warning\";\n    duration?: number;\n  }>;\n  onRemoveToast: (id: string) => void;\n}\n\n/**\n * Toast container component\n *\n * @component\n * @description\n * Manages and displays multiple toast notifications in a fixed position.\n * Handles stacking of toasts with proper spacing and ensures new toasts\n * appear smoothly without disrupting existing ones.\n *\n * @remarks\n * - Positioned at top-right of viewport\n * - Stacks toasts vertically with spacing\n * - Each toast maintains independent lifecycle\n * - High z-index ensures visibility over other content\n *\n * @example\n * ```tsx\n * const [toasts, setToasts] = useState([]);\n *\n * <ToastContainer\n *   toasts={toasts}\n *   onRemoveToast={(id) => {\n *     setToasts(prev => prev.filter(t => t.id !== id));\n *   }}\n * />\n * ```\n *\n * @param {ToastContainerProps} props - Container configuration\n * @returns {JSX.Element} Rendered toast container\n */\nexport const ToastContainer: React.FC<ToastContainerProps> = ({\n  toasts,\n  onRemoveToast,\n}) => {\n  return (\n    <div className=\"fixed top-4 right-4 z-50 space-y-2\">\n      {toasts.map((toast) => (\n        <Toast\n          key={toast.id}\n          message={toast.message}\n          type={toast.type}\n          duration={toast.duration}\n          onClose={() => onRemoveToast(toast.id)}\n        />\n      ))}\n    </div>\n  );\n};\n"],"names":["Toast","ToastContainer","message","type","duration","UI","TOAST_DURATION","onClose","isVisible","setIsVisible","useState","useEffect","timer","setTimeout","TOAST_FADE_DURATION","clearTimeout","getToastStyles","baseStyles","typeStyles","success","error","info","warning","visibilityStyles","getIcon","div","className","span","button","onClick","toasts","onRemoveToast","map","toast","id"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;CAsBC;;;;;;;;;;;QA+CYA;eAAAA;;QAqIAC;eAAAA;;;;+DAlL8B;2BACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CZ,MAAMD,QAA8B,CAAC,EAC1CE,OAAO,EACPC,IAAI,EACJC,WAAWC,aAAE,CAACC,cAAc,EAC5BC,OAAO,EACR;IACC,MAAM,CAACC,WAAWC,aAAa,GAAGC,IAAAA,eAAQ,EAAC;IAE3CC,IAAAA,gBAAS,EAAC;QACR,MAAMC,QAAQC,WAAW;YACvBJ,aAAa;YACbI,WAAWN,SAASF,aAAE,CAACS,mBAAmB,GAAG,2BAA2B;QAC1E,GAAGV;QAEH,OAAO,IAAMW,aAAaH;IAC5B,GAAG;QAACR;QAAUG;KAAQ;IAEtB;;;;;GAKC,GACD,MAAMS,iBAAiB;QACrB,MAAMC,aACJ;QAEF,MAAMC,aAAa;YACjBC,SAAS;YACTC,OAAO;YACPC,MAAM;YACNC,SAAS;QACX;QAEA,MAAMC,mBAAmBf,YACrB,8BACA;QAEJ,OAAO,GAAGS,WAAW,CAAC,EAAEC,UAAU,CAACf,KAAK,CAAC,CAAC,EAAEoB,kBAAkB;IAChE;IAEA;;;;;GAKC,GACD,MAAMC,UAAU;QACd,OAAQrB;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,qBACE,qBAACsB;QAAIC,WAAWV;kBACd,cAAA,sBAACS;YAAIC,WAAU;;8BACb,qBAACC;oBAAKD,WAAU;8BAAWF;;8BAC3B,qBAACG;oBAAKD,WAAU;8BAAexB;;8BAC/B,qBAAC0B;oBACCC,SAAS;wBACPpB,aAAa;wBACbI,WAAWN,SAASF,aAAE,CAACS,mBAAmB;oBAC5C;oBACAY,WAAU;8BACX;;;;;AAMT;AAsDO,MAAMzB,iBAAgD,CAAC,EAC5D6B,MAAM,EACNC,aAAa,EACd;IACC,qBACE,qBAACN;QAAIC,WAAU;kBACZI,OAAOE,GAAG,CAAC,CAACC,sBACX,qBAACjC;gBAECE,SAAS+B,MAAM/B,OAAO;gBACtBC,MAAM8B,MAAM9B,IAAI;gBAChBC,UAAU6B,MAAM7B,QAAQ;gBACxBG,SAAS,IAAMwB,cAAcE,MAAMC,EAAE;eAJhCD,MAAMC,EAAE;;AASvB"}