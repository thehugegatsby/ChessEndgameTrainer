121ff15728a975733c4c2009b7b6bc09
/**
 * @file Toast notification components
 * @module components/ui/Toast
 *
 * @description
 * Provides toast notification components for displaying temporary messages
 * to users. Includes both individual Toast component and ToastContainer
 * for managing multiple toasts. Features auto-dismiss, manual close,
 * and smooth animations.
 *
 * @remarks
 * Key features:
 * - Four notification types: success, error, info, warning
 * - Auto-dismiss with configurable duration
 * - Manual dismiss via close button
 * - Smooth slide-in/fade-out animations
 * - Icon indicators for each type
 * - Stacking support for multiple toasts
 * - Backdrop blur for better visibility
 * - Responsive positioning
 *
 * Uses Tailwind CSS for styling with glassmorphism effects.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Toast () {
        return Toast;
    },
    get ToastContainer () {
        return ToastContainer;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _constants = require("../../constants");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Toast = ({ message, type, duration = _constants.UI.TOAST_DURATION, onClose })=>{
    const [isVisible, setIsVisible] = (0, _react.useState)(true);
    (0, _react.useEffect)(()=>{
        const timer = setTimeout(()=>{
            setIsVisible(false);
            setTimeout(onClose, _constants.UI.TOAST_FADE_DURATION); // Allow fade out animation
        }, duration);
        return ()=>clearTimeout(timer);
    }, [
        duration,
        onClose
    ]);
    /**
   * Generate dynamic styles based on toast type and visibility
   *
   * @private
   * @returns {string} Combined Tailwind classes
   */ const getToastStyles = ()=>{
        const baseStyles = "fixed top-4 right-4 z-50 px-4 py-3 rounded-lg shadow-lg backdrop-blur-sm transition-all duration-300 max-w-sm";
        const typeStyles = {
            success: "bg-green-500/90 text-white border border-green-400",
            error: "bg-red-500/90 text-white border border-red-400",
            info: "bg-blue-500/90 text-white border border-blue-400",
            warning: "bg-yellow-500/90 text-black border border-yellow-400"
        };
        const visibilityStyles = isVisible ? "opacity-100 translate-x-0" : "opacity-0 translate-x-full";
        return `${baseStyles} ${typeStyles[type]} ${visibilityStyles}`;
    };
    /**
   * Get emoji icon for toast type
   *
   * @private
   * @returns {string} Emoji icon
   */ const getIcon = ()=>{
        switch(type){
            case "success":
                return "🎉";
            case "error":
                return "❌";
            case "info":
                return "ℹ️";
            case "warning":
                return "⚠️";
            default:
                return "";
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: getToastStyles(),
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "flex items-center gap-2",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    className: "text-lg",
                    children: getIcon()
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    className: "font-medium",
                    children: message
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>{
                        setIsVisible(false);
                        setTimeout(onClose, _constants.UI.TOAST_FADE_DURATION);
                    },
                    className: "ml-2 text-xl opacity-70 hover:opacity-100 transition-opacity",
                    children: "×"
                })
            ]
        })
    });
};
const ToastContainer = ({ toasts, onRemoveToast })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: "fixed top-4 right-4 z-50 space-y-2",
        children: toasts.map((toast)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(Toast, {
                message: toast.message,
                type: toast.type,
                duration: toast.duration,
                onClose: ()=>onRemoveToast(toast.id)
            }, toast.id))
    });
};

//# sourceMappingURL=data:application/json;base64,