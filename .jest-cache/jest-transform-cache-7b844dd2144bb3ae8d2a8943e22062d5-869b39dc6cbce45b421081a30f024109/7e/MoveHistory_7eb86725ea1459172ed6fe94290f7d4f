2c1b2f7ad1402dabc812cda09f9e1346
/**
 * @file Move history display component
 * @module components/training/MoveHistory
 *
 * @description
 * Displays chess move history in a traditional two-column format with
 * optional evaluations. Shows moves in algebraic notation with visual
 * styling and supports tablebase evaluations.
 *
 * @remarks
 * Key features:
 * - Two-column layout (white/black moves) with move numbering
 * - Optional evaluation display with color coding
 * - Tablebase evaluation support with emoji indicators
 * - Scrollable container with maximum height constraints
 * - Hover effects and responsive design
 * - Empty state messaging for no moves
 * - German language interface
 *
 * The component handles tablebase evaluations (win/draw/loss categories) with appropriate
 * visual indicators and color coding.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MoveHistory", {
    enumerable: true,
    get: function() {
        return MoveHistory;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _uiConstants = require("../../constants/uiConstants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const MoveHistory = ({ moves, showEvaluations = false, evaluations = [] })=>{
    // Erstelle Zugpaare mit korrekter sofortiger Positionierung
    const movePairs = [];
    for(let i = 0; i < moves.length; i += 2){
        const moveNumber = Math.floor(i / 2) + 1;
        const whiteMove = moves[i];
        const blackMove = moves[i + 1];
        movePairs.push({
            number: moveNumber,
            white: whiteMove,
            black: blackMove,
            whiteEval: evaluations[i],
            blackEval: evaluations[i + 1]
        });
    }
    const formatEvaluation = (evalData)=>{
        var _evalData_tablebase;
        if (!evalData) return "";
        // Tablebase evaluation with emojis
        if ((_evalData_tablebase = evalData.tablebase) === null || _evalData_tablebase === void 0 ? void 0 : _evalData_tablebase.isTablebasePosition) {
            const { category, wdl, dtm } = evalData.tablebase;
            let emoji = "";
            let text = "";
            if (category) {
                switch(category){
                    case "win":
                        emoji = "üèÜ";
                        text = dtm ? `W${dtm}` : "Win";
                        break;
                    case "loss":
                        emoji = "‚ùå";
                        text = dtm ? `L${dtm}` : "Loss";
                        break;
                    case "draw":
                        emoji = "‚öñÔ∏è";
                        text = "Draw";
                        break;
                }
            } else if (wdl !== undefined) {
                if (wdl === 2) {
                    emoji = "üèÜ";
                    text = dtm ? `W${dtm}` : "Win";
                } else if (wdl === -2) {
                    emoji = "‚ùå";
                    text = dtm ? `L${dtm}` : "Loss";
                } else {
                    emoji = "‚öñÔ∏è";
                    text = "Draw";
                }
            }
            return `${emoji} ${text}`;
        }
        if (evalData.mateInMoves !== undefined) {
            return `#${Math.abs(evalData.mateInMoves)}`;
        }
        const eval_ = evalData.evaluation;
        if (Math.abs(eval_) < 0.1) return "0.0";
        return eval_ > 0 ? `+${eval_.toFixed(1)}` : eval_.toFixed(1);
    };
    const getEvaluationColor = (evalData)=>{
        var _evalData_tablebase;
        if (!evalData) return "";
        // Tablebase evaluation colors
        if ((_evalData_tablebase = evalData.tablebase) === null || _evalData_tablebase === void 0 ? void 0 : _evalData_tablebase.isTablebasePosition) {
            const { category, wdl } = evalData.tablebase;
            if (category) {
                switch(category){
                    case "win":
                        return "text-green-700";
                    case "loss":
                        return "text-red-700";
                    case "draw":
                        return "text-yellow-600";
                }
            } else if (wdl !== undefined) {
                if (wdl === 2) return "text-green-700";
                if (wdl === -2) return "text-red-700";
                return "text-yellow-600";
            }
        }
        if (evalData.mateInMoves !== undefined) {
            return evalData.mateInMoves > 0 ? "text-green-700" : "text-red-700";
        }
        const eval_ = evalData.evaluation;
        if (eval_ > 2) return "text-green-700";
        if (eval_ > 0.5) return "text-green-600";
        if (eval_ > -0.5) return "text-gray-600";
        if (eval_ > -2) return "text-orange-600";
        return "text-red-600";
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "bg-white border border-gray-200 rounded-2xl shadow-lg h-full overflow-hidden",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "bg-gradient-to-r from-emerald-500 to-teal-600 text-white p-4",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("h2", {
                    className: "text-xl font-bold flex items-center gap-2",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            children: "üìã"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                            children: [
                                "Z√ºge",
                                showEvaluations ? " & Bewertungen" : ""
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "p-3",
                children: moves.length === 0 ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "text-center py-8",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "inline-flex items-center justify-center w-12 h-12 bg-gray-100 rounded-full mb-3",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-xl",
                                children: "üéØ"
                            })
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "text-gray-500 text-base italic",
                            children: "Noch keine Z√ºge gespielt"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "text-gray-400 text-sm mt-1",
                            children: "Ziehe eine Figur um zu beginnen"
                        })
                    ]
                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "overflow-y-auto",
                    style: {
                        maxHeight: _uiConstants.UI_CONSTANTS.MOVE_HISTORY.MAX_HEIGHT
                    },
                    "data-testid": "move-list",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "space-y-0.5",
                        children: movePairs.map((pair)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "group flex items-center py-1.5 px-2 rounded-lg hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 transition-all duration-200 border border-transparent hover:border-blue-100",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                        className: "font-bold text-emerald-600 w-6 text-right text-sm",
                                        children: [
                                            pair.number,
                                            "."
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "flex-1 ml-3 min-w-0",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex items-center gap-2",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "flex flex-col items-center min-w-0 flex-1",
                                                    children: [
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                            className: "font-mono text-sm text-gray-800 bg-gray-50 px-1.5 py-0.5 rounded group-hover:bg-white transition-colors truncate w-full text-center",
                                                            "data-testid": `move-item-${(pair.number - 1) * 2}`,
                                                            children: pair.white.san
                                                        }),
                                                        showEvaluations && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                            className: `text-xs font-mono ${getEvaluationColor(pair.whiteEval)} mt-0.5`,
                                                            children: formatEvaluation(pair.whiteEval)
                                                        })
                                                    ]
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "flex flex-col items-center min-w-0 flex-1",
                                                    children: pair.black ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                className: "font-mono text-sm text-gray-600 bg-gray-50 px-1.5 py-0.5 rounded group-hover:bg-white transition-colors truncate w-full text-center",
                                                                "data-testid": `move-item-${(pair.number - 1) * 2 + 1}`,
                                                                children: pair.black.san
                                                            }),
                                                            showEvaluations && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                className: `text-xs font-mono ${getEvaluationColor(pair.blackEval)} mt-0.5`,
                                                                children: formatEvaluation(pair.blackEval)
                                                            })
                                                        ]
                                                    }) : // Empty placeholder to maintain consistent spacing
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                        className: "h-6"
                                                    })
                                                })
                                            ]
                                        })
                                    })
                                ]
                            }, pair.number))
                    })
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,