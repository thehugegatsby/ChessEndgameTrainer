e959b670958daa963d343ee21baddf1f
/**
 * @file Tablebase store hooks with state/action separation
 * @module store/hooks/useTablebaseStore
 *
 * @description
 * Provides optimized hooks for tablebase-related state and actions with proper separation.
 * This pattern prevents unnecessary re-renders in action-only components while
 * maintaining excellent developer experience.
 *
 * Three hooks are exported:
 * - useTablebaseState(): For components that need reactive state
 * - useTablebaseActions(): For components that only dispatch actions (no re-renders)
 * - useTablebaseStore(): Convenience hook returning [state, actions] tuple
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useTablebaseActions () {
        return useTablebaseActions;
    },
    get useTablebaseState () {
        return useTablebaseState;
    },
    get useTablebaseStore () {
        return useTablebaseStore;
    }
});
const _react = require("react");
const _StoreContext = require("../StoreContext");
const _shallow = require("zustand/react/shallow");
const useTablebaseState = ()=>{
    return (0, _StoreContext.useStore)((0, _shallow.useShallow)((state)=>({
            // Tablebase state from nested structure
            tablebaseMove: state.tablebase.tablebaseMove,
            analysisStatus: state.tablebase.analysisStatus,
            evaluations: state.tablebase.evaluations,
            currentEvaluation: state.tablebase.currentEvaluation
        })));
};
const useTablebaseActions = ()=>{
    // Non-reactive access to avoid SSR issues
    const storeApi = (0, _StoreContext.useStoreApi)();
    // Memoize the actions object to ensure stable reference
    return (0, _react.useMemo)(()=>{
        const state = storeApi.getState();
        // Clean access: actions are directly available in tablebase slice
        return {
            // Tablebase actions - directly from slice (no CRITICAL FIX workaround needed)
            setTablebaseMove: state.tablebase.setTablebaseMove,
            setAnalysisStatus: state.tablebase.setAnalysisStatus,
            addEvaluation: state.tablebase.addEvaluation,
            setEvaluations: state.tablebase.setEvaluations,
            setCurrentEvaluation: state.tablebase.setCurrentEvaluation,
            clearTablebaseState: state.tablebase.clearTablebaseState
        };
    }, [
        storeApi
    ]);
};
const useTablebaseStore = ()=>{
    return [
        useTablebaseState(),
        useTablebaseActions()
    ];
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL3N0b3JlL2hvb2tzL3VzZVRhYmxlYmFzZVN0b3JlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgVGFibGViYXNlIHN0b3JlIGhvb2tzIHdpdGggc3RhdGUvYWN0aW9uIHNlcGFyYXRpb25cbiAqIEBtb2R1bGUgc3RvcmUvaG9va3MvdXNlVGFibGViYXNlU3RvcmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFByb3ZpZGVzIG9wdGltaXplZCBob29rcyBmb3IgdGFibGViYXNlLXJlbGF0ZWQgc3RhdGUgYW5kIGFjdGlvbnMgd2l0aCBwcm9wZXIgc2VwYXJhdGlvbi5cbiAqIFRoaXMgcGF0dGVybiBwcmV2ZW50cyB1bm5lY2Vzc2FyeSByZS1yZW5kZXJzIGluIGFjdGlvbi1vbmx5IGNvbXBvbmVudHMgd2hpbGVcbiAqIG1haW50YWluaW5nIGV4Y2VsbGVudCBkZXZlbG9wZXIgZXhwZXJpZW5jZS5cbiAqXG4gKiBUaHJlZSBob29rcyBhcmUgZXhwb3J0ZWQ6XG4gKiAtIHVzZVRhYmxlYmFzZVN0YXRlKCk6IEZvciBjb21wb25lbnRzIHRoYXQgbmVlZCByZWFjdGl2ZSBzdGF0ZVxuICogLSB1c2VUYWJsZWJhc2VBY3Rpb25zKCk6IEZvciBjb21wb25lbnRzIHRoYXQgb25seSBkaXNwYXRjaCBhY3Rpb25zIChubyByZS1yZW5kZXJzKVxuICogLSB1c2VUYWJsZWJhc2VTdG9yZSgpOiBDb252ZW5pZW5jZSBob29rIHJldHVybmluZyBbc3RhdGUsIGFjdGlvbnNdIHR1cGxlXG4gKi9cblxuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU3RvcmUsIHVzZVN0b3JlQXBpIH0gZnJvbSBcIi4uL1N0b3JlQ29udGV4dFwiO1xuaW1wb3J0IHsgdXNlU2hhbGxvdyB9IGZyb20gXCJ6dXN0YW5kL3JlYWN0L3NoYWxsb3dcIjtcbmltcG9ydCB0eXBlIHtcbiAgUm9vdFN0YXRlLFxuICBUYWJsZWJhc2VTdGF0ZSBhcyBUYWJsZWJhc2VTdGF0ZVR5cGUsXG4gIFRhYmxlYmFzZUFjdGlvbnMgYXMgVGFibGViYXNlQWN0aW9uc1R5cGUsXG59IGZyb20gXCIuLi9zbGljZXMvdHlwZXNcIjtcbi8vIE5vdGU6IHJlcXVlc3RQb3NpdGlvbkV2YWx1YXRpb24gcmVtb3ZlZCAtIHVzZSBjaGVzc1NlcnZpY2UgZGlyZWN0bHlcblxuLyoqXG4gKiBIb29rIGZvciByZWFjdGl2ZSB0YWJsZWJhc2Ugc3RhdGUgcHJvcGVydGllc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3Vic2NyaWJlcyBjb21wb25lbnRzIHRvIHRhYmxlYmFzZSBzdGF0ZSBjaGFuZ2VzLiBVc2UgdGhpcyBpbiBjb21wb25lbnRzXG4gKiB0aGF0IG5lZWQgdG8gZGlzcGxheSBvciByZWFjdCB0byBldmFsdWF0aW9uIGRhdGEuIFdpbGwgcmUtcmVuZGVyIHdoZW4gYW55XG4gKiBzZWxlY3RlZCB0YWJsZWJhc2Ugc3RhdGUgY2hhbmdlcy5cbiAqXG4gKiBAcmV0dXJucyB7VGFibGViYXNlU3RhdGVUeXBlfSBUYWJsZWJhc2Ugc3RhdGUgcHJvcGVydGllc1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIGNvbnN0IHsgdGFibGViYXNlTW92ZSwgYW5hbHlzaXNTdGF0dXMsIGN1cnJlbnRFdmFsdWF0aW9uIH0gPSB1c2VUYWJsZWJhc2VTdGF0ZSgpO1xuICpcbiAqIC8vIENvbXBvbmVudCB3aWxsIHJlLXJlbmRlciB3aGVuIHRoZXNlIHZhbHVlcyBjaGFuZ2VcbiAqIGlmIChhbmFseXNpc1N0YXR1cyA9PT0gJ2xvYWRpbmcnKSB7XG4gKiAgIHJldHVybiA8U3Bpbm5lciAvPjtcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgdXNlVGFibGViYXNlU3RhdGUgPSAoKTogVGFibGViYXNlU3RhdGVUeXBlID0+IHtcbiAgcmV0dXJuIHVzZVN0b3JlKFxuICAgIHVzZVNoYWxsb3coKHN0YXRlOiBSb290U3RhdGUpID0+ICh7XG4gICAgICAvLyBUYWJsZWJhc2Ugc3RhdGUgZnJvbSBuZXN0ZWQgc3RydWN0dXJlXG4gICAgICB0YWJsZWJhc2VNb3ZlOiBzdGF0ZS50YWJsZWJhc2UudGFibGViYXNlTW92ZSxcbiAgICAgIGFuYWx5c2lzU3RhdHVzOiBzdGF0ZS50YWJsZWJhc2UuYW5hbHlzaXNTdGF0dXMsXG4gICAgICBldmFsdWF0aW9uczogc3RhdGUudGFibGViYXNlLmV2YWx1YXRpb25zLFxuICAgICAgY3VycmVudEV2YWx1YXRpb246IHN0YXRlLnRhYmxlYmFzZS5jdXJyZW50RXZhbHVhdGlvbixcbiAgICB9KSksXG4gICk7XG59O1xuXG4vKipcbiAqIEhvb2sgZm9yIHRhYmxlYmFzZSBhY3Rpb24gZnVuY3Rpb25zXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHN0YWJsZSBhY3Rpb24gZnVuY3Rpb25zIHRoYXQgbmV2ZXIgY2F1c2UgcmUtcmVuZGVycy5cbiAqIFVzZSB0aGlzIGluIGNvbXBvbmVudHMgdGhhdCBvbmx5IG5lZWQgdG8gdHJpZ2dlciB0YWJsZWJhc2UgYWN0aW9uc1xuICogd2l0aG91dCBzdWJzY3JpYmluZyB0byBzdGF0ZSBjaGFuZ2VzLlxuICpcbiAqIEByZXR1cm5zIHtUYWJsZWJhc2VBY3Rpb25zVHlwZX0gVGFibGViYXNlIGFjdGlvbiBmdW5jdGlvbnNcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBjb25zdCB7IHNldEFuYWx5c2lzU3RhdHVzLCByZXF1ZXN0UG9zaXRpb25FdmFsdWF0aW9uIH0gPSB1c2VUYWJsZWJhc2VBY3Rpb25zKCk7XG4gKlxuICogLy8gVGhpcyBjb21wb25lbnQgd2lsbCBuZXZlciByZS1yZW5kZXIgZHVlIHRvIHRhYmxlYmFzZSBzdGF0ZSBjaGFuZ2VzXG4gKiBjb25zdCBhbmFseXplUG9zaXRpb24gPSBhc3luYyAoKSA9PiB7XG4gKiAgIHNldEFuYWx5c2lzU3RhdHVzKCdsb2FkaW5nJyk7XG4gKiAgIGF3YWl0IHJlcXVlc3RQb3NpdGlvbkV2YWx1YXRpb24oKTtcbiAqIH07XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVRhYmxlYmFzZUFjdGlvbnMgPSAoKTogVGFibGViYXNlQWN0aW9uc1R5cGUgPT4ge1xuICAvLyBOb24tcmVhY3RpdmUgYWNjZXNzIHRvIGF2b2lkIFNTUiBpc3N1ZXNcbiAgY29uc3Qgc3RvcmVBcGkgPSB1c2VTdG9yZUFwaSgpO1xuICBcbiAgLy8gTWVtb2l6ZSB0aGUgYWN0aW9ucyBvYmplY3QgdG8gZW5zdXJlIHN0YWJsZSByZWZlcmVuY2VcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gc3RvcmVBcGkuZ2V0U3RhdGUoKTtcbiAgICBcbiAgICAvLyBDbGVhbiBhY2Nlc3M6IGFjdGlvbnMgYXJlIGRpcmVjdGx5IGF2YWlsYWJsZSBpbiB0YWJsZWJhc2Ugc2xpY2VcbiAgICByZXR1cm4ge1xuICAgICAgLy8gVGFibGViYXNlIGFjdGlvbnMgLSBkaXJlY3RseSBmcm9tIHNsaWNlIChubyBDUklUSUNBTCBGSVggd29ya2Fyb3VuZCBuZWVkZWQpXG4gICAgICBzZXRUYWJsZWJhc2VNb3ZlOiBzdGF0ZS50YWJsZWJhc2Uuc2V0VGFibGViYXNlTW92ZSxcbiAgICAgIHNldEFuYWx5c2lzU3RhdHVzOiBzdGF0ZS50YWJsZWJhc2Uuc2V0QW5hbHlzaXNTdGF0dXMsXG4gICAgICBhZGRFdmFsdWF0aW9uOiBzdGF0ZS50YWJsZWJhc2UuYWRkRXZhbHVhdGlvbixcbiAgICAgIHNldEV2YWx1YXRpb25zOiBzdGF0ZS50YWJsZWJhc2Uuc2V0RXZhbHVhdGlvbnMsXG4gICAgICBzZXRDdXJyZW50RXZhbHVhdGlvbjogc3RhdGUudGFibGViYXNlLnNldEN1cnJlbnRFdmFsdWF0aW9uLFxuICAgICAgY2xlYXJUYWJsZWJhc2VTdGF0ZTogc3RhdGUudGFibGViYXNlLmNsZWFyVGFibGViYXNlU3RhdGUsXG5cbiAgICAgIC8vIE5vdGU6IHJlcXVlc3RQb3NpdGlvbkV2YWx1YXRpb24gcmVtb3ZlZCAtIHVzZSBjaGVzc1NlcnZpY2UuZmV0Y2hFdmFsdWF0aW9uKCkgZGlyZWN0bHlcbiAgICB9O1xuICB9LCBbc3RvcmVBcGldKTtcbn07XG5cbi8qKlxuICogQ29udmVuaWVuY2UgaG9vayBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgYm90aCBzdGF0ZSBhbmQgYWN0aW9uc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBhIHR1cGxlIG9mIFtzdGF0ZSwgYWN0aW9uc10gZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIGJvdGguXG4gKiBUaGlzIG1haW50YWlucyB0aGUgZmFtaWxpYXIgcGF0dGVybiB3aGlsZSBiZW5lZml0aW5nIGZyb20gdGhlXG4gKiBvcHRpbWl6ZWQgc2VwYXJhdGlvbiB1bmRlciB0aGUgaG9vZC5cbiAqXG4gKiBAcmV0dXJucyB7W1RhYmxlYmFzZVN0YXRlVHlwZSwgRXh0ZW5kZWRUYWJsZWJhc2VBY3Rpb25zXX0gVHVwbGUgb2YgdGFibGViYXNlIHN0YXRlIGFuZCBhY3Rpb25zXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogY29uc3QgW3RhYmxlYmFzZVN0YXRlLCB0YWJsZWJhc2VBY3Rpb25zXSA9IHVzZVRhYmxlYmFzZVN0b3JlKCk7XG4gKlxuICogY29uc3QgaGFuZGxlRXZhbHVhdGlvbiA9IChldmFsOiBQb3NpdGlvbkFuYWx5c2lzKSA9PiB7XG4gKiAgIHRhYmxlYmFzZUFjdGlvbnMuYWRkRXZhbHVhdGlvbihldmFsKTtcbiAqICAgaWYgKCF0YWJsZWJhc2VTdGF0ZS5jdXJyZW50RXZhbHVhdGlvbikge1xuICogICAgIHRhYmxlYmFzZUFjdGlvbnMuc2V0Q3VycmVudEV2YWx1YXRpb24oZXZhbCk7XG4gKiAgIH1cbiAqIH07XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVRhYmxlYmFzZVN0b3JlID0gKCk6IFtcbiAgVGFibGViYXNlU3RhdGVUeXBlLFxuICBUYWJsZWJhc2VBY3Rpb25zVHlwZSxcbl0gPT4ge1xuICByZXR1cm4gW3VzZVRhYmxlYmFzZVN0YXRlKCksIHVzZVRhYmxlYmFzZUFjdGlvbnMoKV07XG59O1xuIl0sIm5hbWVzIjpbInVzZVRhYmxlYmFzZUFjdGlvbnMiLCJ1c2VUYWJsZWJhc2VTdGF0ZSIsInVzZVRhYmxlYmFzZVN0b3JlIiwidXNlU3RvcmUiLCJ1c2VTaGFsbG93Iiwic3RhdGUiLCJ0YWJsZWJhc2VNb3ZlIiwidGFibGViYXNlIiwiYW5hbHlzaXNTdGF0dXMiLCJldmFsdWF0aW9ucyIsImN1cnJlbnRFdmFsdWF0aW9uIiwic3RvcmVBcGkiLCJ1c2VTdG9yZUFwaSIsInVzZU1lbW8iLCJnZXRTdGF0ZSIsInNldFRhYmxlYmFzZU1vdmUiLCJzZXRBbmFseXNpc1N0YXR1cyIsImFkZEV2YWx1YXRpb24iLCJzZXRFdmFsdWF0aW9ucyIsInNldEN1cnJlbnRFdmFsdWF0aW9uIiwiY2xlYXJUYWJsZWJhc2VTdGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Q0FhQzs7Ozs7Ozs7Ozs7UUFpRVlBO2VBQUFBOztRQWpDQUM7ZUFBQUE7O1FBOEVBQztlQUFBQTs7O3VCQTVHVzs4QkFDYzt5QkFDWDtBQTRCcEIsTUFBTUQsb0JBQW9CO0lBQy9CLE9BQU9FLElBQUFBLHNCQUFRLEVBQ2JDLElBQUFBLG1CQUFVLEVBQUMsQ0FBQ0MsUUFBc0IsQ0FBQTtZQUNoQyx3Q0FBd0M7WUFDeENDLGVBQWVELE1BQU1FLFNBQVMsQ0FBQ0QsYUFBYTtZQUM1Q0UsZ0JBQWdCSCxNQUFNRSxTQUFTLENBQUNDLGNBQWM7WUFDOUNDLGFBQWFKLE1BQU1FLFNBQVMsQ0FBQ0UsV0FBVztZQUN4Q0MsbUJBQW1CTCxNQUFNRSxTQUFTLENBQUNHLGlCQUFpQjtRQUN0RCxDQUFBO0FBRUo7QUF1Qk8sTUFBTVYsc0JBQXNCO0lBQ2pDLDBDQUEwQztJQUMxQyxNQUFNVyxXQUFXQyxJQUFBQSx5QkFBVztJQUU1Qix3REFBd0Q7SUFDeEQsT0FBT0MsSUFBQUEsY0FBTyxFQUFDO1FBQ2IsTUFBTVIsUUFBUU0sU0FBU0csUUFBUTtRQUUvQixrRUFBa0U7UUFDbEUsT0FBTztZQUNMLDhFQUE4RTtZQUM5RUMsa0JBQWtCVixNQUFNRSxTQUFTLENBQUNRLGdCQUFnQjtZQUNsREMsbUJBQW1CWCxNQUFNRSxTQUFTLENBQUNTLGlCQUFpQjtZQUNwREMsZUFBZVosTUFBTUUsU0FBUyxDQUFDVSxhQUFhO1lBQzVDQyxnQkFBZ0JiLE1BQU1FLFNBQVMsQ0FBQ1csY0FBYztZQUM5Q0Msc0JBQXNCZCxNQUFNRSxTQUFTLENBQUNZLG9CQUFvQjtZQUMxREMscUJBQXFCZixNQUFNRSxTQUFTLENBQUNhLG1CQUFtQjtRQUcxRDtJQUNGLEdBQUc7UUFBQ1Q7S0FBUztBQUNmO0FBd0JPLE1BQU1ULG9CQUFvQjtJQUkvQixPQUFPO1FBQUNEO1FBQXFCRDtLQUFzQjtBQUNyRCJ9