b81602abc2b575bb899c960f845fe6ae
/**
 * @file Chess board wrapper component
 * @module components/chess/Chessboard
 *
 * @description
 * Wrapper component around react-chessboard library that provides a
 * standardized interface for displaying chess positions. Handles the
 * API differences and provides a consistent interface for the application.
 *
 * @remarks
 * Key features:
 * - FEN position display with configurable board size
 * - Piece drag and drop functionality
 * - API adapter for react-chessboard v5 compatibility
 * - Configurable piece dragging control
 * - Type-safe piece drop handling
 *
 * The component serves as an adapter layer between the application's
 * chess logic and the external react-chessboard library, ensuring
 * consistent behavior and easier upgrades.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Chessboard", {
    enumerable: true,
    get: function() {
        return Chessboard;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactchessboard = require("react-chessboard");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Chessboard = ({ fen, onPieceDrop, onSquareClick, boardWidth = 400, arePiecesDraggable = true })=>{
    // Prevent SSR hydration mismatch by only rendering on client
    const [isClient, setIsClient] = (0, _react.useState)(false);
    (0, _react.useEffect)(()=>{
        setIsClient(true);
    }, []);
    /**
   * Adapts piece drop events to react-chessboard v5 API
   *
   * @param {PieceDropHandlerArgs} args - Drop event arguments from react-chessboard
   * @returns {boolean} Whether the move should be allowed
   *
   * @description
   * Converts the react-chessboard v5 API format to the simplified format
   * expected by the application's move handlers. Extracts the relevant
   * data and calls the provided onPieceDrop callback.
   */ const handlePieceDrop = (args)=>{
        if (!onPieceDrop || !args.targetSquare) return false;
        return onPieceDrop(args.sourceSquare, args.targetSquare, args.piece.pieceType);
    };
    // Render placeholder during SSR to avoid hydration mismatch
    if (!isClient) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            style: {
                width: `${boardWidth}px`,
                height: `${boardWidth}px`,
                backgroundColor: "#f0d9b5",
                display: "flex",
                alignItems: "center",
                justifyContent: "center"
            }
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactchessboard.Chessboard, {
        options: {
            position: fen,
            onPieceDrop: onPieceDrop ? handlePieceDrop : undefined,
            onSquareClick: onSquareClick,
            boardStyle: {
                width: `${boardWidth}px`,
                height: `${boardWidth}px`
            },
            allowDragging: arePiecesDraggable
        }
    });
};

//# sourceMappingURL=data:application/json;base64,