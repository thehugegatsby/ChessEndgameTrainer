{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/hooks/useTablebaseStore.ts"],"sourcesContent":["/**\n * @file Tablebase store hooks with state/action separation\n * @module store/hooks/useTablebaseStore\n *\n * @description\n * Provides optimized hooks for tablebase-related state and actions with proper separation.\n * This pattern prevents unnecessary re-renders in action-only components while\n * maintaining excellent developer experience.\n *\n * Three hooks are exported:\n * - useTablebaseState(): For components that need reactive state\n * - useTablebaseActions(): For components that only dispatch actions (no re-renders)\n * - useTablebaseStore(): Convenience hook returning [state, actions] tuple\n */\n\nimport { useMemo } from \"react\";\nimport { useStore, useStoreApi } from \"../StoreContext\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport type {\n  RootState,\n  TablebaseState as TablebaseStateType,\n  TablebaseActions as TablebaseActionsType,\n} from \"../slices/types\";\n// Note: requestPositionEvaluation removed - use chessService directly\n\n/**\n * Hook for reactive tablebase state properties\n *\n * @description\n * Subscribes components to tablebase state changes. Use this in components\n * that need to display or react to evaluation data. Will re-render when any\n * selected tablebase state changes.\n *\n * @returns {TablebaseStateType} Tablebase state properties\n *\n * @example\n * ```tsx\n * const { tablebaseMove, analysisStatus, currentEvaluation } = useTablebaseState();\n *\n * // Component will re-render when these values change\n * if (analysisStatus === 'loading') {\n *   return <Spinner />;\n * }\n * ```\n */\nexport const useTablebaseState = (): TablebaseStateType => {\n  return useStore(\n    useShallow((state: RootState) => ({\n      // Tablebase state from nested structure\n      tablebaseMove: state.tablebase.tablebaseMove,\n      analysisStatus: state.tablebase.analysisStatus,\n      evaluations: state.tablebase.evaluations,\n      currentEvaluation: state.tablebase.currentEvaluation,\n    })),\n  );\n};\n\n/**\n * Hook for tablebase action functions\n *\n * @description\n * Returns stable action functions that never cause re-renders.\n * Use this in components that only need to trigger tablebase actions\n * without subscribing to state changes.\n *\n * @returns {TablebaseActionsType} Tablebase action functions\n *\n * @example\n * ```tsx\n * const { setAnalysisStatus, requestPositionEvaluation } = useTablebaseActions();\n *\n * // This component will never re-render due to tablebase state changes\n * const analyzePosition = async () => {\n *   setAnalysisStatus('loading');\n *   await requestPositionEvaluation();\n * };\n * ```\n */\nexport const useTablebaseActions = (): TablebaseActionsType => {\n  // Non-reactive access to avoid SSR issues\n  const storeApi = useStoreApi();\n  \n  // Memoize the actions object to ensure stable reference\n  return useMemo(() => {\n    const state = storeApi.getState();\n    \n    // Clean access: actions are directly available in tablebase slice\n    return {\n      // Tablebase actions - directly from slice (no CRITICAL FIX workaround needed)\n      setTablebaseMove: state.tablebase.setTablebaseMove,\n      setAnalysisStatus: state.tablebase.setAnalysisStatus,\n      addEvaluation: state.tablebase.addEvaluation,\n      setEvaluations: state.tablebase.setEvaluations,\n      setCurrentEvaluation: state.tablebase.setCurrentEvaluation,\n      clearTablebaseState: state.tablebase.clearTablebaseState,\n\n      // Note: requestPositionEvaluation removed - use chessService.fetchEvaluation() directly\n    };\n  }, [storeApi]);\n};\n\n/**\n * Convenience hook for components that need both state and actions\n *\n * @description\n * Returns a tuple of [state, actions] for components that need both.\n * This maintains the familiar pattern while benefiting from the\n * optimized separation under the hood.\n *\n * @returns {[TablebaseStateType, ExtendedTablebaseActions]} Tuple of tablebase state and actions\n *\n * @example\n * ```tsx\n * const [tablebaseState, tablebaseActions] = useTablebaseStore();\n *\n * const handleEvaluation = (eval: PositionAnalysis) => {\n *   tablebaseActions.addEvaluation(eval);\n *   if (!tablebaseState.currentEvaluation) {\n *     tablebaseActions.setCurrentEvaluation(eval);\n *   }\n * };\n * ```\n */\nexport const useTablebaseStore = (): [\n  TablebaseStateType,\n  TablebaseActionsType,\n] => {\n  return [useTablebaseState(), useTablebaseActions()];\n};\n"],"names":["useTablebaseActions","useTablebaseState","useTablebaseStore","useStore","useShallow","state","tablebaseMove","tablebase","analysisStatus","evaluations","currentEvaluation","storeApi","useStoreApi","useMemo","getState","setTablebaseMove","setAnalysisStatus","addEvaluation","setEvaluations","setCurrentEvaluation","clearTablebaseState"],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;;;;;;;;QAiEYA;eAAAA;;QAjCAC;eAAAA;;QA8EAC;eAAAA;;;uBA5GW;8BACc;yBACX;AA4BpB,MAAMD,oBAAoB;IAC/B,OAAOE,IAAAA,sBAAQ,EACbC,IAAAA,mBAAU,EAAC,CAACC,QAAsB,CAAA;YAChC,wCAAwC;YACxCC,eAAeD,MAAME,SAAS,CAACD,aAAa;YAC5CE,gBAAgBH,MAAME,SAAS,CAACC,cAAc;YAC9CC,aAAaJ,MAAME,SAAS,CAACE,WAAW;YACxCC,mBAAmBL,MAAME,SAAS,CAACG,iBAAiB;QACtD,CAAA;AAEJ;AAuBO,MAAMV,sBAAsB;IACjC,0CAA0C;IAC1C,MAAMW,WAAWC,IAAAA,yBAAW;IAE5B,wDAAwD;IACxD,OAAOC,IAAAA,cAAO,EAAC;QACb,MAAMR,QAAQM,SAASG,QAAQ;QAE/B,kEAAkE;QAClE,OAAO;YACL,8EAA8E;YAC9EC,kBAAkBV,MAAME,SAAS,CAACQ,gBAAgB;YAClDC,mBAAmBX,MAAME,SAAS,CAACS,iBAAiB;YACpDC,eAAeZ,MAAME,SAAS,CAACU,aAAa;YAC5CC,gBAAgBb,MAAME,SAAS,CAACW,cAAc;YAC9CC,sBAAsBd,MAAME,SAAS,CAACY,oBAAoB;YAC1DC,qBAAqBf,MAAME,SAAS,CAACa,mBAAmB;QAG1D;IACF,GAAG;QAACT;KAAS;AACf;AAwBO,MAAMT,oBAAoB;IAI/B,OAAO;QAACD;QAAqBD;KAAsB;AACrD"}