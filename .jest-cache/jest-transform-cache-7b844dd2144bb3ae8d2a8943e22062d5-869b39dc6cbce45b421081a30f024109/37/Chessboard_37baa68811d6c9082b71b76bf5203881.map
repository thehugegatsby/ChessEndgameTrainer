{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/chess/Chessboard.tsx"],"sourcesContent":["/**\n * @file Chess board wrapper component\n * @module components/chess/Chessboard\n *\n * @description\n * Wrapper component around react-chessboard library that provides a\n * standardized interface for displaying chess positions. Handles the\n * API differences and provides a consistent interface for the application.\n *\n * @remarks\n * Key features:\n * - FEN position display with configurable board size\n * - Piece drag and drop functionality\n * - API adapter for react-chessboard v5 compatibility\n * - Configurable piece dragging control\n * - Type-safe piece drop handling\n *\n * The component serves as an adapter layer between the application's\n * chess logic and the external react-chessboard library, ensuring\n * consistent behavior and easier upgrades.\n */\n\nimport React, { useEffect, useState } from \"react\";\nimport { Chessboard as ReactChessboard } from \"react-chessboard\";\n// Using any for react-chessboard types due to missing type definitions\ntype PieceDropHandlerArgs = any;\n\n/**\n * Props for the Chessboard component\n *\n * @interface ChessboardProps\n *\n * @property {string} fen - FEN string representing the chess position\n * @property {(sourceSquare: string, targetSquare: string, piece: string) => boolean} [onPieceDrop] - Callback for piece drop events\n * @property {(square: string) => void} [onSquareClick] - Callback for square click events (for click-to-move support)\n * @property {number} [boardWidth=400] - Width of the chess board in pixels\n * @property {boolean} [arePiecesDraggable=true] - Whether pieces can be dragged\n */\ninterface ChessboardProps {\n  fen: string;\n  onPieceDrop?: (\n    sourceSquare: string,\n    targetSquare: string,\n    piece: string,\n  ) => boolean;\n  onSquareClick?: (args: { piece: any; square: string }) => void;\n  boardWidth?: number;\n  arePiecesDraggable?: boolean;\n}\n\n/**\n * Chess board wrapper component\n *\n * @component\n * @description\n * Wrapper around react-chessboard that provides a simplified interface\n * for displaying chess positions and handling piece movements. Adapts\n * the external library's API to match the application's requirements.\n *\n * @remarks\n * Component features:\n * - Displays chess positions from FEN strings\n * - Handles piece drag and drop with validation callback\n * - Configurable board dimensions and interaction\n * - Type-safe event handling with proper API conversion\n * - Consistent styling and behavior across the application\n *\n * The onPieceDrop callback receives the source square, target square,\n * and piece type, and should return true to allow the move or false\n * to reject it.\n *\n * @example\n * ```tsx\n * // Basic position display\n * <Chessboard fen=\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\" />\n *\n * // Interactive board with move handling\n * <Chessboard\n *   fen={currentFen}\n *   onPieceDrop={(from, to, piece) => {\n *     return handleMove(from, to);\n *   }}\n *   boardWidth={600}\n *   arePiecesDraggable={true}\n * />\n *\n * // Display-only board\n * <Chessboard\n *   fen={position}\n *   arePiecesDraggable={false}\n *   boardWidth={300}\n * />\n * ```\n *\n * @param {ChessboardProps} props - Board configuration and event handlers\n * @returns {JSX.Element} Rendered chess board component\n */\nexport const Chessboard: React.FC<ChessboardProps> = ({\n  fen,\n  onPieceDrop,\n  onSquareClick,\n  boardWidth = 400,\n  arePiecesDraggable = true,\n}) => {\n  // Prevent SSR hydration mismatch by only rendering on client\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n  /**\n   * Adapts piece drop events to react-chessboard v5 API\n   *\n   * @param {PieceDropHandlerArgs} args - Drop event arguments from react-chessboard\n   * @returns {boolean} Whether the move should be allowed\n   *\n   * @description\n   * Converts the react-chessboard v5 API format to the simplified format\n   * expected by the application's move handlers. Extracts the relevant\n   * data and calls the provided onPieceDrop callback.\n   */\n  const handlePieceDrop = (args: PieceDropHandlerArgs): boolean => {\n    if (!onPieceDrop || !args.targetSquare) return false;\n    return onPieceDrop(\n      args.sourceSquare,\n      args.targetSquare,\n      args.piece.pieceType,\n    );\n  };\n\n  // Render placeholder during SSR to avoid hydration mismatch\n  if (!isClient) {\n    return (\n      <div\n        style={{\n          width: `${boardWidth}px`,\n          height: `${boardWidth}px`,\n          backgroundColor: \"#f0d9b5\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        {/* Empty board placeholder during SSR */}\n      </div>\n    );\n  }\n\n  return (\n    <ReactChessboard\n      options={{\n        position: fen,\n        onPieceDrop: onPieceDrop ? handlePieceDrop : undefined,\n        onSquareClick: onSquareClick,\n        boardStyle: { width: `${boardWidth}px`, height: `${boardWidth}px` },\n        allowDragging: arePiecesDraggable,\n      }}\n    />\n  );\n};\n"],"names":["Chessboard","fen","onPieceDrop","onSquareClick","boardWidth","arePiecesDraggable","isClient","setIsClient","useState","useEffect","handlePieceDrop","args","targetSquare","sourceSquare","piece","pieceType","div","style","width","height","backgroundColor","display","alignItems","justifyContent","ReactChessboard","options","position","undefined","boardStyle","allowDragging"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;CAoBC;;;;+BA6EYA;;;eAAAA;;;;+DA3E8B;iCACG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EvC,MAAMA,aAAwC,CAAC,EACpDC,GAAG,EACHC,WAAW,EACXC,aAAa,EACbC,aAAa,GAAG,EAChBC,qBAAqB,IAAI,EAC1B;IACC,6DAA6D;IAC7D,MAAM,CAACC,UAAUC,YAAY,GAAGC,IAAAA,eAAQ,EAAC;IAEzCC,IAAAA,gBAAS,EAAC;QACRF,YAAY;IACd,GAAG,EAAE;IACL;;;;;;;;;;GAUC,GACD,MAAMG,kBAAkB,CAACC;QACvB,IAAI,CAACT,eAAe,CAACS,KAAKC,YAAY,EAAE,OAAO;QAC/C,OAAOV,YACLS,KAAKE,YAAY,EACjBF,KAAKC,YAAY,EACjBD,KAAKG,KAAK,CAACC,SAAS;IAExB;IAEA,4DAA4D;IAC5D,IAAI,CAACT,UAAU;QACb,qBACE,qBAACU;YACCC,OAAO;gBACLC,OAAO,GAAGd,WAAW,EAAE,CAAC;gBACxBe,QAAQ,GAAGf,WAAW,EAAE,CAAC;gBACzBgB,iBAAiB;gBACjBC,SAAS;gBACTC,YAAY;gBACZC,gBAAgB;YAClB;;IAKN;IAEA,qBACE,qBAACC,2BAAe;QACdC,SAAS;YACPC,UAAUzB;YACVC,aAAaA,cAAcQ,kBAAkBiB;YAC7CxB,eAAeA;YACfyB,YAAY;gBAAEV,OAAO,GAAGd,WAAW,EAAE,CAAC;gBAAEe,QAAQ,GAAGf,WAAW,EAAE,CAAC;YAAC;YAClEyB,eAAexB;QACjB;;AAGN"}