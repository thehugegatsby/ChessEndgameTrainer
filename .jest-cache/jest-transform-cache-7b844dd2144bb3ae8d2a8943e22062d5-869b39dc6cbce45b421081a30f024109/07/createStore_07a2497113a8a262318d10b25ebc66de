d414050ff1d53acc851ab9f516e1f76a
/**
 * @file Store factory for SSR-safe Zustand store creation
 * @module store/createStore
 * @description Factory function that creates fresh store instances for each request/context.
 * This resolves SSR hydration issues by ensuring consistent store creation patterns.
 *
 * @remarks
 * This factory is used by the StoreProvider to create store instances:
 * - Server: Fresh instance per request
 * - Client: Consistent instance during hydration
 * - HMR: Stable instance during development
 *
 * The factory extracts the store creation logic from rootStore.ts to enable
 * per-request instantiation without singleton conflicts.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createStore", {
    enumerable: true,
    get: function() {
        return createStore;
    }
});
const _zustand = require("zustand");
const _middleware = require("zustand/middleware");
const _immer = require("zustand/middleware/immer");
const _gameSlice = require("./slices/gameSlice");
const _tablebaseSlice = require("./slices/tablebaseSlice");
const _trainingSlice = require("./slices/trainingSlice");
const _progressSlice = require("./slices/progressSlice");
const _uiSlice = require("./slices/uiSlice");
const _ChessService = require("../services/ChessService");
const _Logger = require("../services/logging/Logger");
const _loadTrainingContext = require("./orchestrators/loadTrainingContext");
const _index = require("./orchestrators/handlePlayerMove/index");
// Safe storage adapter that gracefully handles localStorage errors
const safeStorage = {
    getItem: (name)=>{
        try {
            if (typeof window === "undefined") return null;
            return localStorage.getItem(name);
        } catch  {
            return null;
        }
    },
    setItem: (name, value)=>{
        try {
            if (typeof window === "undefined") return;
            localStorage.setItem(name, value);
        } catch  {
        // Silently fail in restricted environments
        }
    },
    removeItem: (name)=>{
        try {
            if (typeof window === "undefined") return;
            localStorage.removeItem(name);
        } catch  {
        // Silently fail in restricted environments
        }
    }
};
const createStore = (initialState)=>{
    const store = (0, _zustand.create)()((0, _middleware.devtools)((0, _middleware.persist)((0, _immer.immer)((set, get, api)=>{
        // Create slices using Slice-in-Slice pattern (clean separation of state and actions)
        const gameSlice = (0, _gameSlice.createGameSlice)(set, get, api);
        const progressSlice = (0, _progressSlice.createProgressSlice)(set, get, api);
        const uiSlice = (0, _uiSlice.createUISlice)(set, get, api);
        const rootState = {
            // Clean Slice-in-Slice pattern: state and actions preserved at slice level
            game: gameSlice,
            training: {
                ...(0, _trainingSlice.createTrainingState)(),
                ...(0, _trainingSlice.createTrainingActions)(set, get)
            },
            tablebase: {
                ...(0, _tablebaseSlice.createTablebaseState)(),
                ...(0, _tablebaseSlice.createTablebaseActions)(set)
            },
            progress: progressSlice,
            ui: uiSlice,
            // Orchestrator actions - coordinate across multiple slices
            handlePlayerMove: async (move)=>{
                const logger = (0, _Logger.getLogger)().setContext("CreateStore");
                logger.debug("handlePlayerMove called", {
                    move
                });
                const storeApi = {
                    getState: get,
                    setState: set
                };
                logger.debug("Calling handlePlayerMoveOrchestrator");
                const result = await (0, _index.handlePlayerMove)(storeApi, move);
                logger.debug("handlePlayerMoveOrchestrator result", {
                    result
                });
                return result;
            },
            loadTrainingContext: async (position)=>{
                const storeApi = {
                    getState: get,
                    setState: set
                };
                return await (0, _loadTrainingContext.loadTrainingContext)(storeApi, position);
            },
            /**
             * Resets entire store to initial state
             */ reset: ()=>{
                set((state)=>{
                    // Reset only the state properties, not the actions - MANUAL PROPERTY RESET
                    // Game slice - explicit property reset
                    state.game.moveHistory = [];
                    state.game.currentMoveIndex = 0;
                    state.game.isGameFinished = false;
                    // Training slice - DO NOT RESET - Preserve all action methods
                    // Tablebase slice - explicit property reset
                    state.tablebase.tablebaseMove = null;
                    state.tablebase.analysisStatus = "idle";
                    state.tablebase.evaluations = [];
                    state.tablebase.currentEvaluation = undefined;
                    // UI slice - explicit property reset
                    state.ui.isSidebarOpen = false;
                    state.ui.currentModal = null;
                    state.ui.toasts = [];
                    state.ui.loading = {
                        global: false,
                        position: false,
                        tablebase: false,
                        analysis: false
                    };
                    state.ui.analysisPanel = {
                        isOpen: false,
                        activeTab: "evaluation",
                        showTablebase: false
                    };
                });
            },
            /**
             * Hydrates store with partial state data
             */ hydrate: (state)=>{
                set((currentState)=>({
                        ...currentState,
                        ...state
                    }));
            }
        };
        // Apply initial state if provided - Deep merge to preserve slice functions
        if (initialState) {
            // Merge game state properties
            if (initialState.game) {
                Object.assign(rootState.game, initialState.game);
                // CRITICAL: Sync ChessService with initial FEN after render
                // Use setTimeout to avoid setState during render
                if (initialState.game.currentFen) {
                    const fenToLoad = initialState.game.currentFen;
                    setTimeout(()=>{
                        try {
                            _ChessService.chessService.initialize(fenToLoad);
                        } catch (error) {
                            (0, _Logger.getLogger)().error("Failed to load initial FEN into ChessService", {
                                fen: fenToLoad,
                                error
                            });
                        }
                    }, 0);
                }
            }
            // Merge training state properties
            if (initialState.training) {
                Object.assign(rootState.training, initialState.training);
            }
            // Merge tablebase state properties
            if (initialState.tablebase) {
                Object.assign(rootState.tablebase, initialState.tablebase);
            }
            // Merge progress state properties
            if (initialState.progress) {
                Object.assign(rootState.progress, initialState.progress);
            }
            // Merge UI state properties
            if (initialState.ui) {
                Object.assign(rootState.ui, initialState.ui);
            }
        }
        return rootState;
    }), {
        name: "endgame-trainer-store",
        version: 1,
        storage: (0, _middleware.createJSONStorage)(()=>safeStorage),
        // Only persist training position for session continuity
        partialize: (state)=>({
                training: {
                    currentPosition: state.training.currentPosition
                }
            }),
        // Merge strategy to prevent overwriting the entire slice
        merge: (persistedState, currentState)=>{
            // Deep merge to preserve slice structure and functions
            const merged = {
                ...currentState
            };
            if (persistedState && typeof persistedState === "object") {
                var _persisted_training;
                const persisted = persistedState;
                // Only merge the specific persisted properties, not the entire slice
                if ((_persisted_training = persisted.training) === null || _persisted_training === void 0 ? void 0 : _persisted_training.currentPosition) {
                    merged.training = {
                        ...currentState.training,
                        currentPosition: persisted.training.currentPosition
                    };
                }
            }
            return merged;
        }
    }), {
        name: "EndgameTrainer Store",
        enabled: process.env.NODE_ENV === "development"
    }));
    // Subscribe to ChessService events for automatic state synchronization
    const unsubscribeChessService = _ChessService.chessService.subscribe((event)=>{
        switch(event.type){
            case "stateUpdate":
                // Use batched payload for atomic state update
                store.setState((draft)=>{
                    draft.game.currentFen = event.payload.fen;
                    draft.game.currentPgn = event.payload.pgn;
                    draft.game.moveHistory = event.payload.moveHistory;
                    draft.game.currentMoveIndex = event.payload.currentMoveIndex;
                    draft.game.isGameFinished = event.payload.isGameOver;
                    draft.game.gameResult = event.payload.gameResult;
                });
                break;
            case "error":
                // Handle errors from ChessService
                store.setState((draft)=>{
                    draft.ui.toasts.push({
                        id: crypto.randomUUID(),
                        message: event.payload.message,
                        type: "error",
                        duration: 5000
                    });
                });
                break;
        }
    });
    // Attach cleanup function to store instance
    store.__cleanup = unsubscribeChessService;
    return store;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL3N0b3JlL2NyZWF0ZVN0b3JlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgU3RvcmUgZmFjdG9yeSBmb3IgU1NSLXNhZmUgWnVzdGFuZCBzdG9yZSBjcmVhdGlvblxuICogQG1vZHVsZSBzdG9yZS9jcmVhdGVTdG9yZVxuICogQGRlc2NyaXB0aW9uIEZhY3RvcnkgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGZyZXNoIHN0b3JlIGluc3RhbmNlcyBmb3IgZWFjaCByZXF1ZXN0L2NvbnRleHQuXG4gKiBUaGlzIHJlc29sdmVzIFNTUiBoeWRyYXRpb24gaXNzdWVzIGJ5IGVuc3VyaW5nIGNvbnNpc3RlbnQgc3RvcmUgY3JlYXRpb24gcGF0dGVybnMuXG4gKlxuICogQHJlbWFya3NcbiAqIFRoaXMgZmFjdG9yeSBpcyB1c2VkIGJ5IHRoZSBTdG9yZVByb3ZpZGVyIHRvIGNyZWF0ZSBzdG9yZSBpbnN0YW5jZXM6XG4gKiAtIFNlcnZlcjogRnJlc2ggaW5zdGFuY2UgcGVyIHJlcXVlc3RcbiAqIC0gQ2xpZW50OiBDb25zaXN0ZW50IGluc3RhbmNlIGR1cmluZyBoeWRyYXRpb25cbiAqIC0gSE1SOiBTdGFibGUgaW5zdGFuY2UgZHVyaW5nIGRldmVsb3BtZW50XG4gKlxuICogVGhlIGZhY3RvcnkgZXh0cmFjdHMgdGhlIHN0b3JlIGNyZWF0aW9uIGxvZ2ljIGZyb20gcm9vdFN0b3JlLnRzIHRvIGVuYWJsZVxuICogcGVyLXJlcXVlc3QgaW5zdGFudGlhdGlvbiB3aXRob3V0IHNpbmdsZXRvbiBjb25mbGljdHMuXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSBcInp1c3RhbmRcIjtcbmltcG9ydCB7IGRldnRvb2xzLCBwZXJzaXN0LCBjcmVhdGVKU09OU3RvcmFnZSwgU3RhdGVTdG9yYWdlIH0gZnJvbSBcInp1c3RhbmQvbWlkZGxld2FyZVwiO1xuaW1wb3J0IHsgaW1tZXIgfSBmcm9tIFwienVzdGFuZC9taWRkbGV3YXJlL2ltbWVyXCI7XG5cbi8vIFNhZmUgc3RvcmFnZSBhZGFwdGVyIHRoYXQgZ3JhY2VmdWxseSBoYW5kbGVzIGxvY2FsU3RvcmFnZSBlcnJvcnNcbmNvbnN0IHNhZmVTdG9yYWdlOiBTdGF0ZVN0b3JhZ2UgPSB7XG4gIGdldEl0ZW06IChuYW1lKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcbiAgc2V0SXRlbTogKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm47XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lLCB2YWx1ZSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBTaWxlbnRseSBmYWlsIGluIHJlc3RyaWN0ZWQgZW52aXJvbm1lbnRzXG4gICAgfVxuICB9LFxuICByZW1vdmVJdGVtOiAobmFtZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuO1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0obmFtZSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBTaWxlbnRseSBmYWlsIGluIHJlc3RyaWN0ZWQgZW52aXJvbm1lbnRzXG4gICAgfVxuICB9LFxufTtcblxuLy8gSW1wb3J0IGFsbCBzbGljZSBjcmVhdG9yc1xuaW1wb3J0IHsgY3JlYXRlR2FtZVNsaWNlIH0gZnJvbSBcIi4vc2xpY2VzL2dhbWVTbGljZVwiO1xuaW1wb3J0IHtcbiAgY3JlYXRlVGFibGViYXNlU3RhdGUsXG4gIGNyZWF0ZVRhYmxlYmFzZUFjdGlvbnMsXG59IGZyb20gXCIuL3NsaWNlcy90YWJsZWJhc2VTbGljZVwiO1xuaW1wb3J0IHtcbiAgY3JlYXRlVHJhaW5pbmdTdGF0ZSxcbiAgY3JlYXRlVHJhaW5pbmdBY3Rpb25zLFxufSBmcm9tIFwiLi9zbGljZXMvdHJhaW5pbmdTbGljZVwiO1xuaW1wb3J0IHsgY3JlYXRlUHJvZ3Jlc3NTbGljZSB9IGZyb20gXCIuL3NsaWNlcy9wcm9ncmVzc1NsaWNlXCI7XG5pbXBvcnQgeyBjcmVhdGVVSVNsaWNlIH0gZnJvbSBcIi4vc2xpY2VzL3VpU2xpY2VcIjtcblxuLy8gSW1wb3J0IENoZXNzU2VydmljZSBmb3IgZXZlbnQgc3Vic2NyaXB0aW9uXG5pbXBvcnQge1xuICBjaGVzc1NlcnZpY2UsXG4gIHR5cGUgQ2hlc3NTZXJ2aWNlRXZlbnQsXG59IGZyb20gXCJAc2hhcmVkL3NlcnZpY2VzL0NoZXNzU2VydmljZVwiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSBcIkBzaGFyZWQvc2VydmljZXMvbG9nZ2luZy9Mb2dnZXJcIjtcblxuLy8gSW1wb3J0IG9yY2hlc3RyYXRvcnNcbmltcG9ydCB7IGxvYWRUcmFpbmluZ0NvbnRleHQgYXMgbG9hZFRyYWluaW5nQ29udGV4dE9yY2hlc3RyYXRvciB9IGZyb20gXCIuL29yY2hlc3RyYXRvcnMvbG9hZFRyYWluaW5nQ29udGV4dFwiO1xuaW1wb3J0IHsgaGFuZGxlUGxheWVyTW92ZSBhcyBoYW5kbGVQbGF5ZXJNb3ZlT3JjaGVzdHJhdG9yIH0gZnJvbSBcIi4vb3JjaGVzdHJhdG9ycy9oYW5kbGVQbGF5ZXJNb3ZlL2luZGV4XCI7XG5cbi8vIEltcG9ydCB0eXBlc1xuaW1wb3J0IHR5cGUgeyBSb290U3RhdGUgfSBmcm9tIFwiLi9zbGljZXMvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgTW92ZSBhcyBDaGVzc0pzTW92ZSB9IGZyb20gXCJjaGVzcy5qc1wiO1xuaW1wb3J0IHR5cGUgeyBFbmRnYW1lUG9zaXRpb24gfSBmcm9tIFwiQHNoYXJlZC90eXBlcy9lbmRnYW1lXCI7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZyZXNoIHN0b3JlIGluc3RhbmNlIHdpdGggYWxsIHNsaWNlcyBhbmQgbWlkZGxld2FyZVxuICpcbiAqIEBwYXJhbSB7UGFydGlhbDxSb290U3RhdGU+fSBbaW5pdGlhbFN0YXRlXSAtIE9wdGlvbmFsIGluaXRpYWwgc3RhdGUgZm9yIGh5ZHJhdGlvblxuICogQHJldHVybnMge1JldHVyblR5cGU8dHlwZW9mIGNyZWF0ZTxSb290U3RhdGU+Pn0gRnJlc2ggWnVzdGFuZCBzdG9yZSBpbnN0YW5jZVxuICpcbiAqIEByZW1hcmtzXG4gKiBUaGlzIGZhY3RvcnkgY3JlYXRlcyBhIGNvbXBsZXRlIHN0b3JlIHdpdGg6XG4gKiAtIEFsbCA0IGRvbWFpbi1zcGVjaWZpYyBzbGljZXMgKEdhbWUsIFRhYmxlYmFzZSwgVHJhaW5pbmcsIFVJKVxuICogLSBDcm9zcy1zbGljZSBvcmNoZXN0cmF0b3JzIGZvciBjb21wbGV4IG9wZXJhdGlvbnNcbiAqIC0gTWlkZGxld2FyZSBpbnRlZ3JhdGlvbiAoRGV2VG9vbHMsIFBlcnNpc3QsIEltbWVyKVxuICogLSBDaGVzc1NlcnZpY2UgZXZlbnQgc3Vic2NyaXB0aW9uIGZvciBzdGF0ZSBzeW5jXG4gKiAtIEdsb2JhbCByZXNldCBhbmQgaHlkcmF0aW9uIGFjdGlvbnNcbiAqXG4gKiBFYWNoIGNhbGwgY3JlYXRlcyBhIGNvbXBsZXRlbHkgZnJlc2ggc3RvcmUgaW5zdGFuY2UsIHByZXZlbnRpbmdcbiAqIFNTUiBoeWRyYXRpb24gbWlzbWF0Y2hlcyBhbmQgZW5zdXJpbmcgY2xlYW4gc3RhdGUgaXNvbGF0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyBDcmVhdGUgZnJlc2ggc3RvcmVcbiAqIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoKTtcbiAqXG4gKiAvLyBDcmVhdGUgd2l0aCBpbml0aWFsIHN0YXRlIGZvciBTU1JcbiAqIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoe1xuICogICBnYW1lOiB7IGN1cnJlbnRGZW46ICdybmJxa2Juci9wcHBwcHBwcC84LzgvOC84L1BQUFBQUFBQL1JOQlFLQk5SIHcgS1FrcSAtIDAgMScgfVxuICogfSk7XG4gKlxuICogLy8gVXNlIGluIGNvbnRleHQgcHJvdmlkZXJcbiAqIGNvbnN0IHN0b3JlUmVmID0gdXNlUmVmPFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZVN0b3JlPj4oKTtcbiAqIGlmICghc3RvcmVSZWYuY3VycmVudCkge1xuICogICBzdG9yZVJlZi5jdXJyZW50ID0gY3JlYXRlU3RvcmUoaW5pdGlhbFN0YXRlKTtcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU3RvcmUgPSAoaW5pdGlhbFN0YXRlPzogUGFydGlhbDxSb290U3RhdGU+KSA9PiB7XG4gIGNvbnN0IHN0b3JlID0gY3JlYXRlPFJvb3RTdGF0ZT4oKShcbiAgICBkZXZ0b29scyhcbiAgICAgIHBlcnNpc3QoXG4gICAgICAgIGltbWVyKChzZXQsIGdldCwgYXBpKSA9PiB7XG4gICAgICAgICAgLy8gQ3JlYXRlIHNsaWNlcyB1c2luZyBTbGljZS1pbi1TbGljZSBwYXR0ZXJuIChjbGVhbiBzZXBhcmF0aW9uIG9mIHN0YXRlIGFuZCBhY3Rpb25zKVxuICAgICAgICAgIGNvbnN0IGdhbWVTbGljZSA9IGNyZWF0ZUdhbWVTbGljZShzZXQsIGdldCwgYXBpKTtcbiAgICAgICAgICBjb25zdCBwcm9ncmVzc1NsaWNlID0gY3JlYXRlUHJvZ3Jlc3NTbGljZShzZXQsIGdldCwgYXBpKTtcbiAgICAgICAgICBjb25zdCB1aVNsaWNlID0gY3JlYXRlVUlTbGljZShzZXQsIGdldCwgYXBpKTtcbiAgICAgICAgICBjb25zdCByb290U3RhdGU6IFJvb3RTdGF0ZSA9IHtcbiAgICAgICAgICAgIC8vIENsZWFuIFNsaWNlLWluLVNsaWNlIHBhdHRlcm46IHN0YXRlIGFuZCBhY3Rpb25zIHByZXNlcnZlZCBhdCBzbGljZSBsZXZlbFxuICAgICAgICAgICAgZ2FtZTogZ2FtZVNsaWNlLFxuICAgICAgICAgICAgdHJhaW5pbmc6IHtcbiAgICAgICAgICAgICAgLi4uY3JlYXRlVHJhaW5pbmdTdGF0ZSgpLFxuICAgICAgICAgICAgICAuLi5jcmVhdGVUcmFpbmluZ0FjdGlvbnMoc2V0LCBnZXQpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhYmxlYmFzZToge1xuICAgICAgICAgICAgICAuLi5jcmVhdGVUYWJsZWJhc2VTdGF0ZSgpLFxuICAgICAgICAgICAgICAuLi5jcmVhdGVUYWJsZWJhc2VBY3Rpb25zKHNldCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IHByb2dyZXNzU2xpY2UsXG4gICAgICAgICAgICB1aTogdWlTbGljZSxcblxuICAgICAgICAgICAgLy8gT3JjaGVzdHJhdG9yIGFjdGlvbnMgLSBjb29yZGluYXRlIGFjcm9zcyBtdWx0aXBsZSBzbGljZXNcbiAgICAgICAgICAgIGhhbmRsZVBsYXllck1vdmU6IGFzeW5jIChcbiAgICAgICAgICAgICAgbW92ZTpcbiAgICAgICAgICAgICAgICB8IENoZXNzSnNNb3ZlXG4gICAgICAgICAgICAgICAgfCB7IGZyb206IHN0cmluZzsgdG86IHN0cmluZzsgcHJvbW90aW9uPzogc3RyaW5nIH1cbiAgICAgICAgICAgICAgICB8IHN0cmluZyxcbiAgICAgICAgICAgICk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgICAgICAgICAgICBjb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoKS5zZXRDb250ZXh0KFwiQ3JlYXRlU3RvcmVcIik7XG4gICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhcImhhbmRsZVBsYXllck1vdmUgY2FsbGVkXCIsIHsgbW92ZSB9KTtcbiAgICAgICAgICAgICAgY29uc3Qgc3RvcmVBcGkgPSB7IGdldFN0YXRlOiBnZXQsIHNldFN0YXRlOiBzZXQgfTtcbiAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiQ2FsbGluZyBoYW5kbGVQbGF5ZXJNb3ZlT3JjaGVzdHJhdG9yXCIpO1xuICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBoYW5kbGVQbGF5ZXJNb3ZlT3JjaGVzdHJhdG9yKHN0b3JlQXBpLCBtb3ZlKTtcbiAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiaGFuZGxlUGxheWVyTW92ZU9yY2hlc3RyYXRvciByZXN1bHRcIiwgeyByZXN1bHQgfSk7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBsb2FkVHJhaW5pbmdDb250ZXh0OiBhc3luYyAoXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBFbmRnYW1lUG9zaXRpb24sXG4gICAgICAgICAgICApOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qgc3RvcmVBcGkgPSB7IGdldFN0YXRlOiBnZXQsIHNldFN0YXRlOiBzZXQgfTtcbiAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGxvYWRUcmFpbmluZ0NvbnRleHRPcmNoZXN0cmF0b3Ioc3RvcmVBcGksIHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVzZXRzIGVudGlyZSBzdG9yZSB0byBpbml0aWFsIHN0YXRlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlc2V0OiAoKSA9PiB7XG4gICAgICAgICAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBSZXNldCBvbmx5IHRoZSBzdGF0ZSBwcm9wZXJ0aWVzLCBub3QgdGhlIGFjdGlvbnMgLSBNQU5VQUwgUFJPUEVSVFkgUkVTRVRcbiAgICAgICAgICAgICAgICAvLyBHYW1lIHNsaWNlIC0gZXhwbGljaXQgcHJvcGVydHkgcmVzZXRcbiAgICAgICAgICAgICAgICBzdGF0ZS5nYW1lLm1vdmVIaXN0b3J5ID0gW107XG4gICAgICAgICAgICAgICAgc3RhdGUuZ2FtZS5jdXJyZW50TW92ZUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICBzdGF0ZS5nYW1lLmlzR2FtZUZpbmlzaGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBUcmFpbmluZyBzbGljZSAtIERPIE5PVCBSRVNFVCAtIFByZXNlcnZlIGFsbCBhY3Rpb24gbWV0aG9kc1xuXG4gICAgICAgICAgICAgICAgLy8gVGFibGViYXNlIHNsaWNlIC0gZXhwbGljaXQgcHJvcGVydHkgcmVzZXRcbiAgICAgICAgICAgICAgICBzdGF0ZS50YWJsZWJhc2UudGFibGViYXNlTW92ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUudGFibGViYXNlLmFuYWx5c2lzU3RhdHVzID0gXCJpZGxlXCI7XG4gICAgICAgICAgICAgICAgc3RhdGUudGFibGViYXNlLmV2YWx1YXRpb25zID0gW107XG4gICAgICAgICAgICAgICAgc3RhdGUudGFibGViYXNlLmN1cnJlbnRFdmFsdWF0aW9uID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgLy8gVUkgc2xpY2UgLSBleHBsaWNpdCBwcm9wZXJ0eSByZXNldFxuICAgICAgICAgICAgICAgIHN0YXRlLnVpLmlzU2lkZWJhck9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdGF0ZS51aS5jdXJyZW50TW9kYWwgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN0YXRlLnVpLnRvYXN0cyA9IFtdO1xuICAgICAgICAgICAgICAgIHN0YXRlLnVpLmxvYWRpbmcgPSB7XG4gICAgICAgICAgICAgICAgICBnbG9iYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgdGFibGViYXNlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIGFuYWx5c2lzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHN0YXRlLnVpLmFuYWx5c2lzUGFuZWwgPSB7XG4gICAgICAgICAgICAgICAgICBpc09wZW46IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgYWN0aXZlVGFiOiBcImV2YWx1YXRpb25cIixcbiAgICAgICAgICAgICAgICAgIHNob3dUYWJsZWJhc2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBIeWRyYXRlcyBzdG9yZSB3aXRoIHBhcnRpYWwgc3RhdGUgZGF0YVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBoeWRyYXRlOiAoc3RhdGU6IFBhcnRpYWw8Um9vdFN0YXRlPikgPT4ge1xuICAgICAgICAgICAgICBzZXQoKGN1cnJlbnRTdGF0ZSkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5jdXJyZW50U3RhdGUsXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIEFwcGx5IGluaXRpYWwgc3RhdGUgaWYgcHJvdmlkZWQgLSBEZWVwIG1lcmdlIHRvIHByZXNlcnZlIHNsaWNlIGZ1bmN0aW9uc1xuICAgICAgICAgIGlmIChpbml0aWFsU3RhdGUpIHtcbiAgICAgICAgICAgIC8vIE1lcmdlIGdhbWUgc3RhdGUgcHJvcGVydGllc1xuICAgICAgICAgICAgaWYgKGluaXRpYWxTdGF0ZS5nYW1lKSB7XG4gICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocm9vdFN0YXRlLmdhbWUsIGluaXRpYWxTdGF0ZS5nYW1lKTtcblxuICAgICAgICAgICAgICAvLyBDUklUSUNBTDogU3luYyBDaGVzc1NlcnZpY2Ugd2l0aCBpbml0aWFsIEZFTiBhZnRlciByZW5kZXJcbiAgICAgICAgICAgICAgLy8gVXNlIHNldFRpbWVvdXQgdG8gYXZvaWQgc2V0U3RhdGUgZHVyaW5nIHJlbmRlclxuICAgICAgICAgICAgICBpZiAoaW5pdGlhbFN0YXRlLmdhbWUuY3VycmVudEZlbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZlblRvTG9hZCA9IGluaXRpYWxTdGF0ZS5nYW1lLmN1cnJlbnRGZW47XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjaGVzc1NlcnZpY2UuaW5pdGlhbGl6ZShmZW5Ub0xvYWQpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0TG9nZ2VyKCkuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgXCJGYWlsZWQgdG8gbG9hZCBpbml0aWFsIEZFTiBpbnRvIENoZXNzU2VydmljZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlbjogZmVuVG9Mb2FkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNZXJnZSB0cmFpbmluZyBzdGF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBpZiAoaW5pdGlhbFN0YXRlLnRyYWluaW5nKSB7XG4gICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocm9vdFN0YXRlLnRyYWluaW5nLCBpbml0aWFsU3RhdGUudHJhaW5pbmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNZXJnZSB0YWJsZWJhc2Ugc3RhdGUgcHJvcGVydGllc1xuICAgICAgICAgICAgaWYgKGluaXRpYWxTdGF0ZS50YWJsZWJhc2UpIHtcbiAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyb290U3RhdGUudGFibGViYXNlLCBpbml0aWFsU3RhdGUudGFibGViYXNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWVyZ2UgcHJvZ3Jlc3Mgc3RhdGUgcHJvcGVydGllc1xuICAgICAgICAgICAgaWYgKGluaXRpYWxTdGF0ZS5wcm9ncmVzcykge1xuICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJvb3RTdGF0ZS5wcm9ncmVzcywgaW5pdGlhbFN0YXRlLnByb2dyZXNzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWVyZ2UgVUkgc3RhdGUgcHJvcGVydGllc1xuICAgICAgICAgICAgaWYgKGluaXRpYWxTdGF0ZS51aSkge1xuICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJvb3RTdGF0ZS51aSwgaW5pdGlhbFN0YXRlLnVpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcm9vdFN0YXRlO1xuICAgICAgICB9KSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IFwiZW5kZ2FtZS10cmFpbmVyLXN0b3JlXCIsXG4gICAgICAgICAgdmVyc2lvbjogMSxcbiAgICAgICAgICBzdG9yYWdlOiBjcmVhdGVKU09OU3RvcmFnZSgoKSA9PiBzYWZlU3RvcmFnZSksIC8vIFNhZmUgc3RvcmFnZSB0aGF0IGhhbmRsZXMgZXJyb3JzIGdyYWNlZnVsbHlcbiAgICAgICAgICAvLyBPbmx5IHBlcnNpc3QgdHJhaW5pbmcgcG9zaXRpb24gZm9yIHNlc3Npb24gY29udGludWl0eVxuICAgICAgICAgIHBhcnRpYWxpemU6IChzdGF0ZSkgPT4gKHtcbiAgICAgICAgICAgIHRyYWluaW5nOiB7XG4gICAgICAgICAgICAgIGN1cnJlbnRQb3NpdGlvbjogc3RhdGUudHJhaW5pbmcuY3VycmVudFBvc2l0aW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAvLyBNZXJnZSBzdHJhdGVneSB0byBwcmV2ZW50IG92ZXJ3cml0aW5nIHRoZSBlbnRpcmUgc2xpY2VcbiAgICAgICAgICBtZXJnZTogKHBlcnNpc3RlZFN0YXRlLCBjdXJyZW50U3RhdGUpID0+IHtcbiAgICAgICAgICAgIC8vIERlZXAgbWVyZ2UgdG8gcHJlc2VydmUgc2xpY2Ugc3RydWN0dXJlIGFuZCBmdW5jdGlvbnNcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IHsgLi4uY3VycmVudFN0YXRlIH07XG5cbiAgICAgICAgICAgIGlmIChwZXJzaXN0ZWRTdGF0ZSAmJiB0eXBlb2YgcGVyc2lzdGVkU3RhdGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgY29uc3QgcGVyc2lzdGVkID0gcGVyc2lzdGVkU3RhdGUgYXMgYW55O1xuXG4gICAgICAgICAgICAgIC8vIE9ubHkgbWVyZ2UgdGhlIHNwZWNpZmljIHBlcnNpc3RlZCBwcm9wZXJ0aWVzLCBub3QgdGhlIGVudGlyZSBzbGljZVxuICAgICAgICAgICAgICBpZiAocGVyc2lzdGVkLnRyYWluaW5nPy5jdXJyZW50UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBtZXJnZWQudHJhaW5pbmcgPSB7XG4gICAgICAgICAgICAgICAgICAuLi5jdXJyZW50U3RhdGUudHJhaW5pbmcsXG4gICAgICAgICAgICAgICAgICBjdXJyZW50UG9zaXRpb246IHBlcnNpc3RlZC50cmFpbmluZy5jdXJyZW50UG9zaXRpb24sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICApLFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIkVuZGdhbWVUcmFpbmVyIFN0b3JlXCIsXG4gICAgICAgIGVuYWJsZWQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIsXG4gICAgICB9LFxuICAgICksXG4gICk7XG5cbiAgLy8gU3Vic2NyaWJlIHRvIENoZXNzU2VydmljZSBldmVudHMgZm9yIGF1dG9tYXRpYyBzdGF0ZSBzeW5jaHJvbml6YXRpb25cbiAgY29uc3QgdW5zdWJzY3JpYmVDaGVzc1NlcnZpY2UgPSBjaGVzc1NlcnZpY2Uuc3Vic2NyaWJlKFxuICAgIChldmVudDogQ2hlc3NTZXJ2aWNlRXZlbnQpID0+IHtcbiAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICBjYXNlIFwic3RhdGVVcGRhdGVcIjpcbiAgICAgICAgICAvLyBVc2UgYmF0Y2hlZCBwYXlsb2FkIGZvciBhdG9taWMgc3RhdGUgdXBkYXRlXG4gICAgICAgICAgc3RvcmUuc2V0U3RhdGUoKGRyYWZ0KSA9PiB7XG4gICAgICAgICAgICBkcmFmdC5nYW1lLmN1cnJlbnRGZW4gPSBldmVudC5wYXlsb2FkLmZlbjtcbiAgICAgICAgICAgIGRyYWZ0LmdhbWUuY3VycmVudFBnbiA9IGV2ZW50LnBheWxvYWQucGduO1xuICAgICAgICAgICAgZHJhZnQuZ2FtZS5tb3ZlSGlzdG9yeSA9IGV2ZW50LnBheWxvYWQubW92ZUhpc3Rvcnk7XG4gICAgICAgICAgICBkcmFmdC5nYW1lLmN1cnJlbnRNb3ZlSW5kZXggPSBldmVudC5wYXlsb2FkLmN1cnJlbnRNb3ZlSW5kZXg7XG4gICAgICAgICAgICBkcmFmdC5nYW1lLmlzR2FtZUZpbmlzaGVkID0gZXZlbnQucGF5bG9hZC5pc0dhbWVPdmVyO1xuICAgICAgICAgICAgZHJhZnQuZ2FtZS5nYW1lUmVzdWx0ID0gZXZlbnQucGF5bG9hZC5nYW1lUmVzdWx0O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICAgIC8vIEhhbmRsZSBlcnJvcnMgZnJvbSBDaGVzc1NlcnZpY2VcbiAgICAgICAgICBzdG9yZS5zZXRTdGF0ZSgoZHJhZnQpID0+IHtcbiAgICAgICAgICAgIGRyYWZ0LnVpLnRvYXN0cy5wdXNoKHtcbiAgICAgICAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGV2ZW50LnBheWxvYWQubWVzc2FnZSxcbiAgICAgICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwMCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0sXG4gICk7XG5cbiAgLy8gQXR0YWNoIGNsZWFudXAgZnVuY3Rpb24gdG8gc3RvcmUgaW5zdGFuY2VcbiAgKHN0b3JlIGFzIGFueSkuX19jbGVhbnVwID0gdW5zdWJzY3JpYmVDaGVzc1NlcnZpY2U7XG5cbiAgcmV0dXJuIHN0b3JlO1xufTtcblxuLyoqXG4gKiBUeXBlIGV4cG9ydCBmb3IgdGhlIHN0b3JlIGluc3RhbmNlXG4gKi9cbmV4cG9ydCB0eXBlIFN0b3JlSW5zdGFuY2UgPSBSZXR1cm5UeXBlPHR5cGVvZiBjcmVhdGVTdG9yZT47XG4iXSwibmFtZXMiOlsiY3JlYXRlU3RvcmUiLCJzYWZlU3RvcmFnZSIsImdldEl0ZW0iLCJuYW1lIiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInZhbHVlIiwicmVtb3ZlSXRlbSIsImluaXRpYWxTdGF0ZSIsInN0b3JlIiwiY3JlYXRlIiwiZGV2dG9vbHMiLCJwZXJzaXN0IiwiaW1tZXIiLCJzZXQiLCJnZXQiLCJhcGkiLCJnYW1lU2xpY2UiLCJjcmVhdGVHYW1lU2xpY2UiLCJwcm9ncmVzc1NsaWNlIiwiY3JlYXRlUHJvZ3Jlc3NTbGljZSIsInVpU2xpY2UiLCJjcmVhdGVVSVNsaWNlIiwicm9vdFN0YXRlIiwiZ2FtZSIsInRyYWluaW5nIiwiY3JlYXRlVHJhaW5pbmdTdGF0ZSIsImNyZWF0ZVRyYWluaW5nQWN0aW9ucyIsInRhYmxlYmFzZSIsImNyZWF0ZVRhYmxlYmFzZVN0YXRlIiwiY3JlYXRlVGFibGViYXNlQWN0aW9ucyIsInByb2dyZXNzIiwidWkiLCJoYW5kbGVQbGF5ZXJNb3ZlIiwibW92ZSIsImxvZ2dlciIsImdldExvZ2dlciIsInNldENvbnRleHQiLCJkZWJ1ZyIsInN0b3JlQXBpIiwiZ2V0U3RhdGUiLCJzZXRTdGF0ZSIsInJlc3VsdCIsImhhbmRsZVBsYXllck1vdmVPcmNoZXN0cmF0b3IiLCJsb2FkVHJhaW5pbmdDb250ZXh0IiwicG9zaXRpb24iLCJsb2FkVHJhaW5pbmdDb250ZXh0T3JjaGVzdHJhdG9yIiwicmVzZXQiLCJzdGF0ZSIsIm1vdmVIaXN0b3J5IiwiY3VycmVudE1vdmVJbmRleCIsImlzR2FtZUZpbmlzaGVkIiwidGFibGViYXNlTW92ZSIsImFuYWx5c2lzU3RhdHVzIiwiZXZhbHVhdGlvbnMiLCJjdXJyZW50RXZhbHVhdGlvbiIsInVuZGVmaW5lZCIsImlzU2lkZWJhck9wZW4iLCJjdXJyZW50TW9kYWwiLCJ0b2FzdHMiLCJsb2FkaW5nIiwiZ2xvYmFsIiwiYW5hbHlzaXMiLCJhbmFseXNpc1BhbmVsIiwiaXNPcGVuIiwiYWN0aXZlVGFiIiwic2hvd1RhYmxlYmFzZSIsImh5ZHJhdGUiLCJjdXJyZW50U3RhdGUiLCJPYmplY3QiLCJhc3NpZ24iLCJjdXJyZW50RmVuIiwiZmVuVG9Mb2FkIiwic2V0VGltZW91dCIsImNoZXNzU2VydmljZSIsImluaXRpYWxpemUiLCJlcnJvciIsImZlbiIsInZlcnNpb24iLCJzdG9yYWdlIiwiY3JlYXRlSlNPTlN0b3JhZ2UiLCJwYXJ0aWFsaXplIiwiY3VycmVudFBvc2l0aW9uIiwibWVyZ2UiLCJwZXJzaXN0ZWRTdGF0ZSIsIm1lcmdlZCIsInBlcnNpc3RlZCIsImVuYWJsZWQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJ1bnN1YnNjcmliZUNoZXNzU2VydmljZSIsInN1YnNjcmliZSIsImV2ZW50IiwidHlwZSIsImRyYWZ0IiwicGF5bG9hZCIsImN1cnJlbnRQZ24iLCJwZ24iLCJpc0dhbWVPdmVyIiwiZ2FtZVJlc3VsdCIsInB1c2giLCJpZCIsImNyeXB0byIsInJhbmRvbVVVSUQiLCJtZXNzYWdlIiwiZHVyYXRp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