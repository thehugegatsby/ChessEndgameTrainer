405599268190691d7647c805a03ac439
/**
 * @file Tests for useMoveValidation hook
 * @module tests/unit/hooks/useMoveValidation
 * 
 * @description
 * Comprehensive tests for the useMoveValidation hook that handles
 * move validation and quality assessment logic.
 * 
 * Tests cover:
 * - Move quality evaluation
 * - Tablebase result processing
 * - Analysis status updates
 * - Error handling and edge cases
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useMoveValidation = require("../../../shared/hooks/useMoveValidation");
// Mock dependencies
const mockTablebaseActions = {
    setAnalysisStatus: jest.fn(),
    setAnalysisResult: jest.fn()
};
const mockTablebaseState = {
    analysisStatus: 'idle',
    analysisResult: null,
    cache: new Map()
};
describe('useMoveValidation', ()=>{
    const defaultProps = {
        lastEvaluation: null,
        currentFen: '8/8/8/8/8/8/8/8 w - - 0 1',
        evaluations: [],
        isEvaluating: false,
        tablebaseState: mockTablebaseState,
        tablebaseActions: mockTablebaseActions
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Hook Initialization', ()=>{
        it('initializes with correct default values', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(defaultProps));
            expect(result.current).toBeDefined();
        // Hook returns move validation utilities
        });
        it('handles missing dependencies gracefully', ()=>{
            const propsWithMissingDeps = {
                ...defaultProps,
                lastEvaluation: undefined,
                evaluations: undefined
            };
            expect(()=>{
                (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(propsWithMissingDeps));
            }).not.toThrow();
        });
    });
    describe('Move Quality Assessment', ()=>{
        it('processes tablebase results correctly', ()=>{
            const mockEvaluation = {
                fen: '8/8/8/8/8/8/8/8 w - - 0 1',
                moves: [
                    {
                        move: 'Kh1',
                        wdl: 1,
                        dtm: 5
                    },
                    {
                        move: 'Kg1',
                        wdl: 0,
                        dtm: 0
                    }
                ],
                isAvailable: true
            };
            const props = {
                ...defaultProps,
                lastEvaluation: mockEvaluation,
                isEvaluating: false
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            // Hook should process the evaluation
            expect(result.current).toBeDefined();
        });
        it('handles unavailable tablebase results', ()=>{
            const mockEvaluation = {
                fen: '8/8/8/8/8/8/8/8 w - - 0 1',
                moves: [],
                isAvailable: false,
                error: 'Position not in tablebase'
            };
            const props = {
                ...defaultProps,
                lastEvaluation: mockEvaluation
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            expect(result.current).toBeDefined();
        });
    });
    describe('Analysis Status Management', ()=>{
        it('updates analysis status when evaluation starts', ()=>{
            const { rerender } = (0, _react.renderHook)((props)=>(0, _useMoveValidation.useMoveValidation)(props), {
                initialProps: {
                    ...defaultProps,
                    isEvaluating: false
                }
            });
            // Start evaluating
            rerender({
                ...defaultProps,
                isEvaluating: true
            });
            // Status should be updated in some way (hook manages internal state)
            expect(mockTablebaseActions.setAnalysisStatus).toHaveBeenCalled();
        });
        it('clears analysis status when evaluation completes', ()=>{
            const { rerender } = (0, _react.renderHook)((props)=>(0, _useMoveValidation.useMoveValidation)(props), {
                initialProps: {
                    ...defaultProps,
                    isEvaluating: true
                }
            });
            // Complete evaluation
            const mockResult = {
                fen: '8/8/8/8/8/8/8/8 w - - 0 1',
                moves: [
                    {
                        move: 'Kh1',
                        wdl: 1
                    }
                ],
                isAvailable: true
            };
            rerender({
                ...defaultProps,
                isEvaluating: false,
                lastEvaluation: mockResult
            });
            expect(mockTablebaseActions.setAnalysisStatus).toHaveBeenCalled();
        });
    });
    describe('Error Handling', ()=>{
        it('handles evaluation errors gracefully', ()=>{
            const mockEvaluation = {
                fen: '8/8/8/8/8/8/8/8 w - - 0 1',
                moves: [],
                isAvailable: false,
                error: 'Network error'
            };
            const props = {
                ...defaultProps,
                lastEvaluation: mockEvaluation
            };
            expect(()=>{
                (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            }).not.toThrow();
        });
        it('handles malformed evaluation data', ()=>{
            const malformedEvaluation = {
                // Missing required fields
                moves: null,
                isAvailable: true
            };
            const props = {
                ...defaultProps,
                lastEvaluation: malformedEvaluation
            };
            expect(()=>{
                (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            }).not.toThrow();
        });
    });
    describe('FEN Position Changes', ()=>{
        it('reacts to FEN changes', ()=>{
            const { rerender } = (0, _react.renderHook)((props)=>(0, _useMoveValidation.useMoveValidation)(props), {
                initialProps: defaultProps
            });
            const newFen = '4k3/8/4K3/4P3/8/8/8/8 w - - 0 1';
            rerender({
                ...defaultProps,
                currentFen: newFen
            });
            // Hook should handle FEN changes - this is a passive hook that processes data
            // It may not directly call setAnalysisStatus, depending on implementation
            expect(mockTablebaseActions.setAnalysisStatus).toHaveBeenCalledTimes(0);
        });
        it('validates FEN format correctly', ()=>{
            const invalidFen = 'invalid-fen-string';
            const props = {
                ...defaultProps,
                currentFen: invalidFen
            };
            expect(()=>{
                (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            }).not.toThrow();
        });
    });
    describe('Evaluation History', ()=>{
        it('processes evaluation history correctly', ()=>{
            const evaluationHistory = [
                {
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1',
                    evaluation: 100
                },
                {
                    fen: '4k3/8/4K3/4P3/8/8/8/8 b - - 1 1',
                    evaluation: -50
                }
            ];
            const props = {
                ...defaultProps,
                evaluations: evaluationHistory
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            expect(result.current).toBeDefined();
        });
        it('handles empty evaluation history', ()=>{
            const props = {
                ...defaultProps,
                evaluations: []
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            expect(result.current).toBeDefined();
        });
    });
    describe('Tablebase State Integration', ()=>{
        it('reads from tablebase state correctly', ()=>{
            const tablebaseStateWithResults = {
                ...mockTablebaseState,
                analysisStatus: 'success',
                analysisResult: {
                    moves: [
                        {
                            move: 'Kh1',
                            wdl: 1,
                            dtm: 3
                        }
                    ]
                }
            };
            const props = {
                ...defaultProps,
                tablebaseState: tablebaseStateWithResults
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            expect(result.current).toBeDefined();
        });
        it('handles tablebase loading states', ()=>{
            const loadingTablebaseState = {
                ...mockTablebaseState,
                analysisStatus: 'loading',
                analysisResult: null
            };
            const props = {
                ...defaultProps,
                tablebaseState: loadingTablebaseState
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            expect(result.current).toBeDefined();
        });
        it('handles tablebase error states', ()=>{
            const errorTablebaseState = {
                ...mockTablebaseState,
                analysisStatus: 'error',
                analysisResult: null
            };
            const props = {
                ...defaultProps,
                tablebaseState: errorTablebaseState
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            expect(result.current).toBeDefined();
        });
    });
    describe('Performance and Memory', ()=>{
        it('maintains stable references between renders', ()=>{
            const { result, rerender } = (0, _react.renderHook)((props)=>(0, _useMoveValidation.useMoveValidation)(props), {
                initialProps: defaultProps
            });
            const initialResult = result.current;
            // Re-render with same props
            rerender(defaultProps);
            // Should maintain reference stability where appropriate
            expect(result.current).toBeDefined();
        });
        it('properly cleans up on unmount', ()=>{
            const { unmount } = (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(defaultProps));
            // Should not throw on unmount
            expect(()=>{
                unmount();
            }).not.toThrow();
        });
    });
    describe('Complex Scenarios', ()=>{
        it('handles rapid FEN changes', ()=>{
            const { rerender } = (0, _react.renderHook)((props)=>(0, _useMoveValidation.useMoveValidation)(props), {
                initialProps: defaultProps
            });
            // Rapidly change FENs
            const fens = [
                '8/8/8/8/8/8/8/8 w - - 0 1',
                '4k3/8/4K3/4P3/8/8/8/8 w - - 0 1',
                '4k3/8/4K3/8/4P3/8/8/8 b - - 1 1'
            ];
            fens.forEach((fen)=>{
                rerender({
                    ...defaultProps,
                    currentFen: fen
                });
            });
            // Should handle rapid changes gracefully - useMoveValidation is a passive processor
            expect(mockTablebaseActions.setAnalysisStatus).toHaveBeenCalledTimes(0);
        });
        it('handles concurrent evaluation states', ()=>{
            const props = {
                ...defaultProps,
                isEvaluating: true,
                lastEvaluation: {
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1',
                    moves: [
                        {
                            move: 'Kh1',
                            wdl: 1
                        }
                    ],
                    isAvailable: true
                }
            };
            expect(()=>{
                (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            }).not.toThrow();
        });
    });
    describe('Integration with Other Hooks', ()=>{
        it('works with evaluation data from usePositionAnalysis', ()=>{
            const mockPositionAnalysisData = {
                fen: '8/8/8/8/8/8/8/8 w - - 0 1',
                moves: [
                    {
                        move: 'Kh1',
                        wdl: 1,
                        dtm: 5,
                        evaluation: 100
                    },
                    {
                        move: 'Kg1',
                        wdl: 0,
                        dtm: 0,
                        evaluation: 0
                    }
                ],
                isAvailable: true,
                bestMove: 'Kh1'
            };
            const props = {
                ...defaultProps,
                lastEvaluation: mockPositionAnalysisData,
                evaluations: [
                    mockPositionAnalysisData
                ]
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            expect(result.current).toBeDefined();
        });
        it('integrates with tablebase store state', ()=>{
            const richTablebaseState = {
                analysisStatus: 'success',
                analysisResult: {
                    position: '8/8/8/8/8/8/8/8 w - - 0 1',
                    moves: [
                        {
                            move: 'Kh1',
                            wdl: 1,
                            dtm: 3
                        },
                        {
                            move: 'Kg1',
                            wdl: -1,
                            dtm: 15
                        }
                    ],
                    bestMove: 'Kh1'
                },
                cache: new Map([
                    [
                        '8/8/8/8/8/8/8/8 w - - 0 1',
                        {
                            wdl: 1,
                            moves: [
                                'Kh1'
                            ]
                        }
                    ]
                ])
            };
            const props = {
                ...defaultProps,
                tablebaseState: richTablebaseState
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveValidation.useMoveValidation)(props));
            expect(result.current).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,