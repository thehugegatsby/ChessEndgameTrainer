5abc0e4094a72c24815d797175bcfab1
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _MoveErrorDialog = require("../../../../shared/components/ui/MoveErrorDialog");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("MoveErrorDialog", ()=>{
    const defaultProps = {
        isOpen: true,
        wdlBefore: 2,
        wdlAfter: -1,
        bestMove: "Kb1",
        onClose: jest.fn(),
        onTakeBack: jest.fn()
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe("Rendering", ()=>{
        it("renders dialog when open", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            // Check for German error message header
            expect(_react1.screen.getByText("Fehler erkannt!")).toBeInTheDocument();
        });
        it("does not render when closed", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps,
                isOpen: false
            }));
            expect(_react1.screen.queryByText("Fehler erkannt!")).not.toBeInTheDocument();
        });
        it("displays the best move", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText(defaultProps.bestMove)).toBeInTheDocument();
            expect(_react1.screen.getByText("Bester Zug war:")).toBeInTheDocument();
        });
        it("shows correct message for win to loss", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps,
                wdlBefore: 2,
                wdlAfter: 0
            }));
            // Should show that the move ruins the win
            expect(_react1.screen.getByText("Dieser Zug verdirbt den Gewinn!")).toBeInTheDocument();
        });
        it("shows correct message for draw to loss", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps,
                wdlBefore: 0,
                wdlAfter: -2
            }));
            // Should show that the move leads to loss
            expect(_react1.screen.getByText("Dieser Zug führt zum Verlust!")).toBeInTheDocument();
        });
        it("shows correct message for position deterioration", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps,
                wdlBefore: 2,
                wdlAfter: 0
            }));
            // Should show that the position worsens
            expect(_react1.screen.getByText("Dieser Zug verdirbt den Gewinn!")).toBeInTheDocument();
        });
        it("shows default error message", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps,
                wdlBefore: -2,
                wdlAfter: -2
            }));
            // Should show default error message
            expect(_react1.screen.getByText("Dieser Zug ist ein Fehler!")).toBeInTheDocument();
        });
        it("hides best move when not provided", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps,
                bestMove: undefined
            }));
            expect(_react1.screen.queryByText("Bester Zug war:")).not.toBeInTheDocument();
        });
    });
    describe("Interactions", ()=>{
        it("calls onTakeBack when take back button is clicked", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            const takeBackButton = _react1.screen.getByRole("button", {
                name: "Zurücknehmen"
            });
            _react1.fireEvent.click(takeBackButton);
            expect(defaultProps.onTakeBack).toHaveBeenCalledTimes(1);
        });
        it("calls onClose when continue playing button is clicked", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            const closeButton = _react1.screen.getByRole("button", {
                name: "Weiterspielen"
            });
            _react1.fireEvent.click(closeButton);
            expect(defaultProps.onClose).toHaveBeenCalledTimes(1);
            expect(defaultProps.onTakeBack).not.toHaveBeenCalled();
        });
        it("calls onClose when clicking outside the dialog", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            // Click on the backdrop/overlay - it's the outermost div
            const backdrop = _react1.screen.getByText("Fehler erkannt!").closest(".fixed");
            _react1.fireEvent.click(backdrop);
            expect(defaultProps.onClose).toHaveBeenCalledTimes(1);
        });
        it("does not close when clicking inside the dialog content", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            // Click on the inner dialog content
            const dialogTitle = _react1.screen.getByText("Fehler erkannt!");
            _react1.fireEvent.click(dialogTitle);
            expect(defaultProps.onClose).not.toHaveBeenCalled();
        });
        it("prevents event propagation when clicking dialog content", ()=>{
            const mockOnClick = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                onClick: mockOnClick,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                    ...defaultProps
                })
            }));
            // Click on dialog content should not propagate to parent
            const dialogTitle = _react1.screen.getByText("Fehler erkannt!");
            _react1.fireEvent.click(dialogTitle);
            expect(mockOnClick).not.toHaveBeenCalled();
        });
    });
    describe("Accessibility", ()=>{
        it("has proper heading structure", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            const heading = _react1.screen.getByRole("heading", {
                name: "Fehler erkannt!"
            });
            expect(heading).toBeInTheDocument();
        });
        it("has interactive buttons", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            const buttons = _react1.screen.getAllByRole("button");
            expect(buttons).toHaveLength(2);
            const weiterspielen = _react1.screen.getByRole("button", {
                name: "Weiterspielen"
            });
            const zurücknehmen = _react1.screen.getByRole("button", {
                name: "Zurücknehmen"
            });
            expect(weiterspielen).toBeInTheDocument();
            expect(zurücknehmen).toBeInTheDocument();
        });
        it("renders semantic structure", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            // Check for proper text structure
            expect(_react1.screen.getByText("Fehler erkannt!")).toBeInTheDocument();
            expect(_react1.screen.getByText(/Dieser Zug/)).toBeInTheDocument();
        });
    });
    describe("Edge Cases", ()=>{
        it("handles missing bestMove gracefully", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps,
                bestMove: undefined
            }));
            expect(_react1.screen.getByText("Fehler erkannt!")).toBeInTheDocument();
            expect(_react1.screen.queryByText("Bester Zug war:")).not.toBeInTheDocument();
        });
        it("handles equal WDL values", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps,
                wdlBefore: 0,
                wdlAfter: 0
            }));
            // Should show default error message
            expect(_react1.screen.getByText("Dieser Zug ist ein Fehler!")).toBeInTheDocument();
        });
        it("shows correct message for position worsening", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps,
                wdlBefore: 1,
                wdlAfter: -1
            }));
            // Should show that position worsens (wdlBefore > wdlAfter)
            expect(_react1.screen.getByText("Dieser Zug verschlechtert die Stellung!")).toBeInTheDocument();
        });
    });
    describe("Visual Elements", ()=>{
        it("displays warning icon", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            // Check for SVG warning icon by looking for the path element
            const svgElements = document.querySelectorAll("svg");
            expect(svgElements.length).toBe(1);
            // Check the warning triangle path is present
            const pathElement = document.querySelector('path[d*="M12 9v2m0 4h.01"]');
            expect(pathElement).toBeInTheDocument();
        });
        it("has proper styling classes", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            const backdrop = _react1.screen.getByText("Fehler erkannt!").closest(".fixed");
            expect(backdrop).toHaveClass("fixed", "inset-0", "bg-black", "bg-opacity-80");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,