{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/integration/tablebase-real-api.integration.spec.ts"],"sourcesContent":["/**\n * Tablebase Real API Integration Tests\n *\n * These tests make actual calls to the Lichess Tablebase API to verify\n * contract compatibility and ensure our implementation works with real responses.\n *\n * NOTE: These tests require internet connection and should be run separately\n * from the main test suite to avoid rate limiting.\n *\n * Run with: npm run test:integration:real-api (if configured)\n * or: jest tests/integration/tablebase-real-api.integration.spec.ts\n */\n\nimport { tablebaseService } from \"../../shared/services/TablebaseService\";\nimport { IntegrationTestPositions } from \"../fixtures/fenPositions\";\n\n// Skip these tests in CI to avoid rate limiting and external dependencies\n// Also skip if fetch is not available (e.g., in Node.js test environment without polyfill)\nconst describeIfNotCI =\n  process.env.CI || typeof fetch === \"undefined\" ? describe.skip : describe;\n\ndescribeIfNotCI(\"Tablebase Real API Integration Tests\", () => {\n  beforeEach(() => {\n    // Clear cache before each test\n    tablebaseService.clearCache();\n  });\n\n  describe(\"Known Positions\", () => {\n    it(\"should correctly evaluate K+P vs K winning position\", async () => {\n      // Same position as in our mocked tests\n      const fen = \"K7/P7/k7/8/8/8/8/8 w - - 0 1\";\n\n      const result = await tablebaseService.getEvaluation(fen);\n\n      expect(result.isAvailable).toBe(true);\n      expect(result.result?.category).toBe(\"win\");\n      expect(result.result?.dtz).toBeGreaterThan(0); // White wins\n      expect(result.result?.dtz).toBeLessThanOrEqual(50); // Should win within 50 moves\n    });\n\n    it(\"should correctly evaluate K vs K draw position\", async () => {\n      const fen = \"4k3/8/4K3/8/8/8/8/8 w - - 0 1\";\n\n      const result = await tablebaseService.getEvaluation(fen);\n\n      expect(result.isAvailable).toBe(true);\n      expect(result.result?.category).toBe(\"draw\");\n      expect(result.result?.dtz).toBe(0);\n    });\n\n    it(\"should handle position with too many pieces\", async () => {\n      const fen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\n      const result = await tablebaseService.getEvaluation(fen);\n\n      expect(result.isAvailable).toBe(false);\n      expect(result.result).toBeUndefined();\n    });\n  });\n\n  describe(\"Move Evaluation\", () => {\n    it(\"should get top moves for K+P vs K position\", async () => {\n      // Use a known winning position that actually has moves\n      const fen = \"K7/P7/k7/8/8/8/8/8 w - - 0 1\";\n\n      // Clear cache to ensure fresh API call\n      tablebaseService.clearCache();\n      const movesResult = await tablebaseService.getTopMoves(fen, 5);\n      const moves = movesResult.moves || [];\n\n      expect(moves).toBeDefined();\n\n      if (moves.length > 0) {\n        // All moves should have tablebase data\n        moves.forEach((move: any) => {\n          expect(move.wdl).toBeDefined();\n          expect(move.dtz).toBeDefined();\n          expect(move.category).toBeDefined();\n        });\n\n        // Best moves should be winning\n        const winningMoves = moves.filter((m: any) => m.category === \"win\");\n        expect(winningMoves.length).toBeGreaterThan(0);\n\n        // Moves should be sorted by DTZ (best first)\n        if (winningMoves.length > 1) {\n          for (let i = 1; i < winningMoves.length; i++) {\n            const currentDtz = winningMoves[i].dtz || 0;\n            const previousDtz = winningMoves[i - 1].dtz || 0;\n            expect(currentDtz).toBeGreaterThanOrEqual(previousDtz);\n          }\n        }\n      } else {\n        // In some environments, API might not return moves\n        // Verify that the position is at least recognized as winning\n        const evaluation = await tablebaseService.getEvaluation(fen);\n        expect(evaluation.isAvailable).toBe(true);\n        expect(evaluation.result?.category).toBe(\"win\");\n        console.warn(\n          \"No moves returned from API - this may be a test environment issue\",\n        );\n      }\n    });\n  });\n\n  describe(\"WDL Perspective Normalization\", () => {\n    it(\"should handle perspective correctly for black to move\", async () => {\n      // Position where black is to move and losing\n      const realApiPosition = IntegrationTestPositions.REAL_API_KPK;\n      const fen = realApiPosition.fen;\n\n      const result = await tablebaseService.getEvaluation(fen);\n\n      expect(result.isAvailable).toBe(true);\n      // From API perspective (black to move), it's a loss\n      // But our service should normalize this\n      expect(result.result?.category).toBe(\"loss\"); // Black loses\n      expect(result.result?.wdl).toBeLessThan(0); // Negative for black\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"should handle malformed FEN gracefully\", async () => {\n      const invalidFen = \"invalid fen string\";\n\n      const result = await tablebaseService.getEvaluation(invalidFen);\n\n      expect(result.isAvailable).toBe(false);\n      expect(result.error).toBeDefined();\n    });\n\n    it(\"should handle network timeouts\", async () => {\n      // Test with an invalid FEN that would cause API issues\n      const invalidFen = \"K7/P7/k7/8/8/8/8/8 w - - invalid\";\n\n      const result = await tablebaseService.getEvaluation(invalidFen);\n\n      // Should fail gracefully\n      expect(result.isAvailable).toBe(false);\n      expect(result.error).toBeDefined();\n    }, 10000); // Allow 10 seconds for this test\n  });\n\n  describe(\"Rate Limiting\", () => {\n    it(\"should handle multiple rapid requests\", async () => {\n      const fen = \"K7/P7/k7/8/8/8/8/8 w - - 0 1\";\n\n      // Make 5 rapid requests\n      const promises = Array(5)\n        .fill(null)\n        .map(() => tablebaseService.getEvaluation(fen));\n\n      const results = await Promise.all(promises);\n\n      // All should succeed (service should handle rate limiting internally)\n      results.forEach((result: any) => {\n        expect(result.isAvailable).toBe(true);\n        expect(result.result?.category).toBe(\"win\");\n      });\n    });\n  });\n\n  describe(\"Cache Behavior\", () => {\n    it(\"should cache repeated requests\", async () => {\n      const fen = \"K7/P7/k7/8/8/8/8/8 w - - 0 1\";\n\n      // First request\n      const start1 = Date.now();\n      const result1 = await tablebaseService.getEvaluation(fen);\n      const time1 = Date.now() - start1;\n\n      // Second request (should be cached)\n      const start2 = Date.now();\n      const result2 = await tablebaseService.getEvaluation(fen);\n      const time2 = Date.now() - start2;\n\n      expect(result1).toEqual(result2);\n      // Cached request should be much faster\n      expect(time2).toBeLessThan(time1);\n    });\n  });\n});\n\n/**\n * Contract Verification Tests\n *\n * These tests verify that the real API response format matches our expectations\n */\ndescribeIfNotCI(\"API Contract Verification\", () => {\n  it(\"should verify tablebase API response format\", async () => {\n    const response = await fetch(\n      \"https://tablebase.lichess.ovh/standard?fen=K7/P7/k7/8/8/8/8/8 w - - 0 1\",\n    );\n    const data = await response.json();\n\n    // Verify expected fields exist\n    expect(data).toHaveProperty(\"category\");\n    expect([\"win\", \"draw\", \"loss\", \"cursed-win\", \"blessed-loss\"]).toContain(\n      data.category,\n    );\n\n    if (data.dtz !== null) {\n      expect(typeof data.dtz).toBe(\"number\");\n    }\n\n    if (data.precise_dtz !== undefined) {\n      expect(typeof data.precise_dtz).toBe(\"boolean\");\n    }\n  });\n\n  it(\"should verify moves endpoint response format\", async () => {\n    const response = await fetch(\n      \"https://tablebase.lichess.ovh/standard?fen=K7/P7/k7/8/8/8/8/8%20w%20-%20-%200%201&moves=5\",\n    );\n    const data = await response.json();\n\n    // API should have moves field (even if empty in some environments)\n    if (\"moves\" in data) {\n      expect(Array.isArray(data.moves)).toBe(true);\n\n      if (data.moves.length > 0) {\n        const move = data.moves[0];\n        expect(move).toHaveProperty(\"uci\");\n        expect(move).toHaveProperty(\"category\");\n\n        if (move.dtz !== null) {\n          expect(typeof move.dtz).toBe(\"number\");\n        }\n      }\n    } else {\n      // In some environments (Jest/Node.js), API might not return moves\n      // This is acceptable as long as basic position evaluation works\n      expect(data).toHaveProperty(\"category\");\n      expect(data).toHaveProperty(\"dtz\");\n      console.warn(\n        \"API didn't return moves array - this may be a test environment issue\",\n      );\n    }\n  });\n});\n"],"names":["describeIfNotCI","process","env","CI","fetch","describe","skip","beforeEach","tablebaseService","clearCache","it","result","fen","getEvaluation","expect","isAvailable","toBe","category","dtz","toBeGreaterThan","toBeLessThanOrEqual","toBeUndefined","movesResult","getTopMoves","moves","toBeDefined","length","forEach","move","wdl","winningMoves","filter","m","i","currentDtz","previousDtz","toBeGreaterThanOrEqual","evaluation","console","warn","realApiPosition","IntegrationTestPositions","REAL_API_KPK","toBeLessThan","invalidFen","error","promises","Array","fill","map","results","Promise","all","start1","Date","now","result1","time1","start2","result2","time2","toEqual","response","data","json","toHaveProperty","toContain","precise_dtz","undefined","isArray"],"mappings":"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"}