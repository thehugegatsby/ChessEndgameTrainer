{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/container/adapter.tsx"],"sourcesContent":["/**\n * Unified Service Container Adapter\n * Single, focused adapter for React integration\n */\n\n\"use client\";\n\nimport React, { createContext, useContext, useMemo, ReactNode } from \"react\";\nimport { ServiceContainer, IServiceContainer, ServiceRegistry } from \"./index\";\n\n/**\n * Context for ServiceContainer\n */\nconst ServiceContainerContext = createContext<IServiceContainer | undefined>(\n  undefined,\n);\n\n/**\n * Provider props\n */\ninterface ServiceProviderProps {\n  children: ReactNode;\n  /**\n   * Container instance (if not provided, creates production container)\n   */\n  container?: IServiceContainer;\n}\n\n/**\n * Service Provider - Single point of integration\n */\nexport const ServiceProvider: React.FC<ServiceProviderProps> = ({\n  children,\n  container,\n}) => {\n  const serviceContainer = useMemo(() => {\n    return container || ServiceContainer.createProductionContainer();\n  }, [container]);\n\n  return (\n    <ServiceContainerContext.Provider value={serviceContainer}>\n      {children}\n    </ServiceContainerContext.Provider>\n  );\n};\n\n/**\n * Hook to get the container\n */\nexport const useServiceContainer = (): IServiceContainer => {\n  const container = useContext(ServiceContainerContext);\n  if (!container) {\n    throw new Error(\"useServiceContainer must be used within ServiceProvider\");\n  }\n  return container;\n};\n\n/**\n * Hook to get a specific service\n */\nexport const useService = <K extends keyof ServiceRegistry>(\n  key: K,\n): ServiceRegistry[K] => {\n  const container = useServiceContainer();\n  return container.resolve(key);\n};\n\n/**\n * Hook shortcuts for common services\n */\nexport const usePlatformStorage = () => useService(\"platform.storage\");\nexport const usePlatformDevice = () => useService(\"platform.device\");\nexport const usePlatformNotifications = () =>\n  useService(\"platform.notifications\");\n\n/**\n * Hook for localStorage (the main Jest 30 fix)\n */\nexport const useLocalStorage = () => {\n  const container = useServiceContainer();\n  return container.resolveCustom<Storage>(\"browser.localStorage\");\n};\n\n/**\n * Factory function for backward compatibility\n * Replaces the original getPlatformService()\n */\nlet globalContainer: IServiceContainer | null = null;\n\nexport function getPlatformService() {\n  if (!globalContainer) {\n    globalContainer = ServiceContainer.createProductionContainer();\n  }\n\n  // Return platform service object - will be properly typed when services are registered\n  return globalContainer.resolveCustom(\"platform.service\");\n}\n\n/**\n * Reset global container (for testing)\n */\nexport function resetPlatformService(): void {\n  globalContainer = null;\n}\n"],"names":["ServiceProvider","getPlatformService","resetPlatformService","useLocalStorage","usePlatformDevice","usePlatformNotifications","usePlatformStorage","useService","useServiceContainer","ServiceContainerContext","createContext","undefined","children","container","serviceContainer","useMemo","ServiceContainer","createProductionContainer","Provider","value","useContext","Error","key","resolve","resolveCustom","globalContainer"],"mappings":"AAAA;;;CAGC,GAED;;;;;;;;;;;;QA0BaA;eAAAA;;QA0DGC;eAAAA;;QAYAC;eAAAA;;QAvBHC;eAAAA;;QAPAC;eAAAA;;QACAC;eAAAA;;QAFAC;eAAAA;;QAVAC;eAAAA;;QAXAC;eAAAA;;;;+DA1CwD;uBACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAErE;;CAEC,GACD,MAAMC,wCAA0BC,IAAAA,oBAAa,EAC3CC;AAiBK,MAAMX,kBAAkD,CAAC,EAC9DY,QAAQ,EACRC,SAAS,EACV;IACC,MAAMC,mBAAmBC,IAAAA,cAAO,EAAC;QAC/B,OAAOF,aAAaG,uBAAgB,CAACC,yBAAyB;IAChE,GAAG;QAACJ;KAAU;IAEd,qBACE,qBAACJ,wBAAwBS,QAAQ;QAACC,OAAOL;kBACtCF;;AAGP;AAKO,MAAMJ,sBAAsB;IACjC,MAAMK,YAAYO,IAAAA,iBAAU,EAACX;IAC7B,IAAI,CAACI,WAAW;QACd,MAAM,IAAIQ,MAAM;IAClB;IACA,OAAOR;AACT;AAKO,MAAMN,aAAa,CACxBe;IAEA,MAAMT,YAAYL;IAClB,OAAOK,UAAUU,OAAO,CAACD;AAC3B;AAKO,MAAMhB,qBAAqB,IAAMC,WAAW;AAC5C,MAAMH,oBAAoB,IAAMG,WAAW;AAC3C,MAAMF,2BAA2B,IACtCE,WAAW;AAKN,MAAMJ,kBAAkB;IAC7B,MAAMU,YAAYL;IAClB,OAAOK,UAAUW,aAAa,CAAU;AAC1C;AAEA;;;CAGC,GACD,IAAIC,kBAA4C;AAEzC,SAASxB;IACd,IAAI,CAACwB,iBAAiB;QACpBA,kBAAkBT,uBAAgB,CAACC,yBAAyB;IAC9D;IAEA,uFAAuF;IACvF,OAAOQ,gBAAgBD,aAAa,CAAC;AACvC;AAKO,SAAStB;IACduB,kBAAkB;AACpB"}