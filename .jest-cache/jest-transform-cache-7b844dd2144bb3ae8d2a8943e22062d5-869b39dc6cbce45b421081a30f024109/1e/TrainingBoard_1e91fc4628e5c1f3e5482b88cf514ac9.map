{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/training/TrainingBoard/TrainingBoard.tsx"],"sourcesContent":["/**\n * @file Interactive chess training board component\n * @module components/training/TrainingBoard\n *\n * @description\n * Core training interface for chess endgame practice. Provides an interactive\n * chessboard with real-time tablebase analysis, move validation, error feedback,\n * and training session management. Integrates with Zustand store for state management\n * and supports E2E testing with special hooks.\n *\n * @remarks\n * Key features:\n * - Interactive drag-and-drop chess moves\n * - Real-time tablebase position evaluation\n * - Move quality feedback with WDL analysis\n * - Training session tracking and completion\n * - E2E test support with programmatic move injection\n * - Responsive board sizing and animations\n *\n * The component acts as the main interface between the user and the chess\n * training system, coordinating between multiple services and state slices.\n */\n\n// Module loading confirmed - debug logging removed for production\n\nimport React, {\n  useEffect,\n  useCallback,\n  useMemo,\n  useState,\n  useRef,\n} from \"react\";\nimport { Chess, Move } from \"chess.js\";\nimport { Chessboard } from \"@shared/components/chess/Chessboard\";\nimport { usePositionAnalysis, useTrainingSession } from \"../../../hooks\";\nimport { usePageReady } from \"../../../hooks/usePageReady\";\nimport {\n  useGameStore,\n  useTrainingStore,\n  useTablebaseStore,\n  useUIStore,\n} from \"@shared/store/hooks\";\nimport { useStore, useStoreApi } from \"@shared/store/StoreContext\";\nimport { EndgamePosition } from \"@shared/types\";\nimport { getLogger } from \"@shared/services/logging/Logger\";\nimport { ANIMATION, DIMENSIONS } from \"@shared/constants\";\nimport { MoveErrorDialog } from \"@shared/components/ui/MoveErrorDialog\";\nimport { MoveSuccessDialog } from \"@shared/components/ui/MoveSuccessDialog\";\nimport { AlertDisplay } from \"@shared/components/ui/AlertDisplay\";\nimport { DialogManager } from \"../DialogManager\";\nimport { E2ETestHelper } from \"../../testing/E2ETestHelper\";\nimport { toLibraryMove } from \"@shared/infrastructure/chess-adapter\";\nimport {\n  cancelScheduledOpponentTurn,\n  scheduleOpponentTurn,\n} from \"@shared/store/orchestrators/handlePlayerMove\";\nimport { chessService } from \"@shared/services/ChessService\";\nimport { useMoveHandlers } from \"@shared/hooks/useMoveHandlers\";\nimport { useDialogHandlers } from \"@shared/hooks/useDialogHandlers\";\nimport { useMoveValidation } from \"@shared/hooks/useMoveValidation\";\nimport { useGameNavigation } from \"@shared/hooks/useGameNavigation\";\n\n/**\n * Extended evaluation data structure for move panel integration\n *\n * @interface ExtendedEvaluation\n *\n * @description\n * Provides comprehensive evaluation data including tablebase-specific\n * information for move quality assessment and UI display.\n */\ninterface ExtendedEvaluation {\n  /** Numeric evaluation score (centipawns or mate distance) */\n  evaluation: number;\n  /** Number of moves to mate (if applicable) */\n  mateInMoves?: number;\n  /** Tablebase-specific evaluation data */\n  tablebase?: {\n    /** Whether position exists in tablebase */\n    isTablebasePosition: boolean;\n    /** Win/Draw/Loss value before move */\n    wdlBefore?: number;\n    /** Win/Draw/Loss value after move */\n    wdlAfter?: number;\n    /** Outcome category (e.g., \"win\", \"draw\", \"loss\") */\n    category?: string;\n    /** Distance to zero (moves to conversion) */\n    dtz?: number;\n  };\n}\n\n/**\n * Props for the TrainingBoard component\n *\n * @interface TrainingBoardProps\n *\n * @description\n * Configuration options for the training board, supporting both\n * controlled and uncontrolled usage patterns.\n */\ninterface TrainingBoardProps {\n  /** Initial FEN position (if not using EndgamePosition) */\n  fen?: string;\n  /** Complete endgame position data with metadata */\n  position?: EndgamePosition;\n  /** Callback when training session completes */\n  onComplete: (success: boolean) => void;\n  /** Callback when move history changes */\n  onHistoryChange?: (moves: Move[]) => void;\n  /** Callback when position evaluations update */\n  onEvaluationsChange?: (evaluations: ExtendedEvaluation[]) => void;\n  /** Callback when board position changes */\n  onPositionChange?: (currentFen: string, pgn: string) => void;\n  /** Provides jump-to-move function to parent */\n  onJumpToMove?: (jumpToMoveFunc: (moveIndex: number) => void) => void;\n  /** Current move index for navigation */\n  currentMoveIndex?: number;\n  /** Trigger value to force board reset */\n  resetTrigger?: number;\n}\n\n/**\n * Interactive chess training board component\n *\n * @component\n * @description\n * Main training interface providing an interactive chessboard with\n * real-time tablebase analysis, move validation, and session management.\n *\n * @remarks\n * The component integrates with multiple systems:\n * - Zustand store for global state management\n * - Tablebase service for position evaluation\n * - Training hooks for session management\n * - E2E test infrastructure for automated testing\n *\n * State is managed through a combination of:\n * - Global Zustand store (game state, evaluations, progress)\n * - Local component state (UI-only concerns)\n * - Custom hooks (position analysis, training session)\n *\n * @example\n * ```tsx\n * // Basic usage with endgame position\n * import { getLogger } from '@shared/services/logging/Logger';\n * const logger = getLogger();\n *\n * <TrainingBoard\n *   position={endgamePosition}\n *   onComplete={(success) => {\n *     logger.info('Training completed:', success);\n *   }}\n * />\n *\n * // With callbacks for parent integration\n * <TrainingBoard\n *   position={position}\n *   onComplete={handleComplete}\n *   onHistoryChange={updateMoveList}\n *   onEvaluationsChange={updateEvaluations}\n * />\n * ```\n *\n * @param {TrainingBoardProps} props - Component configuration\n * @returns {JSX.Element} Rendered training board interface\n */\nexport const TrainingBoard: React.FC<TrainingBoardProps> = ({\n  fen,\n  position,\n  onComplete,\n  onHistoryChange,\n  onEvaluationsChange,\n  onPositionChange,\n  onJumpToMove,\n  resetTrigger = 0,\n}) => {\n  const initialFen = fen || position?.fen || \"4k3/8/4K3/4P3/8/8/8/8 w - - 0 1\";\n\n  // === ZUSTAND STORE - Using domain-specific hooks for performance ===\n  const [gameState, gameActions] = useGameStore(); // Pure chess state\n  const [trainingState, trainingActions] = useTrainingStore(); // Training session state\n  const [tablebaseState, tablebaseActions] = useTablebaseStore(); // Analysis and evaluation data\n  const [, uiActions] = useUIStore(); // UI state (toasts, modals, loading)\n  const storeApi = useStoreApi(); // Store API for orchestrator functions\n\n  // Set position in store on mount or when position changes\n  useEffect(() => {\n    const logger = getLogger().setContext(\"TrainingBoard-PositionInit\");\n\n    if (\n      position &&\n      (!trainingState.currentPosition ||\n        trainingState.currentPosition.id !== position.id)\n    ) {\n      logger.info(\"Setting position in store\", {\n        positionId: position.id,\n        title: position.title,\n        fen: position.fen,\n        currentPositionId: trainingState.currentPosition?.id,\n      });\n      trainingActions.loadTrainingContext(position);\n    }\n  }, [position, trainingActions, trainingState]);\n\n  // CRITICAL: Prevent any interactions if position is not loaded\n  const isPositionReady = !!trainingState.currentPosition;\n\n  // === HOOKS ===\n\n  // Chess game logic - now using Store as single source of truth\n  const {\n    history,\n    isGameFinished,\n    currentFen,\n    makeMove,\n    jumpToMove,\n    resetGame,\n    undoMove,\n  } = useTrainingSession({\n    /**\n     *\n     * @param success\n     */\n    onComplete: (success) => {\n      // Call parent callback\n      onComplete(success);\n    },\n    onPositionChange,\n  });\n\n  // Move handling logic - extracted to custom hook\n  const { onDrop, onSquareClick, selectedSquare } = useMoveHandlers({\n    currentFen: currentFen || initialFen,\n    isGameFinished,\n    isPositionReady,\n    trainingState,\n    onMove: makeMove,\n  });\n\n  // Game navigation logic - extracted to custom hook\n  const gameNavigation = useGameNavigation({\n    history,\n    initialFen,\n    currentFen,\n    onHistoryChange,\n    onJumpToMove,\n    jumpToMove,\n  });\n\n  // Evaluation logic\n  const {\n    evaluations,\n    lastEvaluation,\n    isEvaluating,\n    error: evaluationError,\n    clearEvaluations,\n  } = usePositionAnalysis({\n    fen: currentFen || initialFen,\n    isEnabled: true,\n    previousFen: gameNavigation.previousFen,\n  });\n\n  // UI state management - local component state only\n  const [resetKey, setResetKey] = useState(0);\n  const [warning, setWarning] = useState<string | null>(null);\n  const [moveError, setMoveError] = useState<string | null>(null);\n\n  const trainingUIState = {\n    resetKey,\n    warning,\n    analysisError: null, // Analysis errors now handled by store\n    moveError,\n    /**\n     *\n     */\n    handleReset: () => setResetKey((prev) => prev + 1),\n    /**\n     *\n     */\n    handleDismissMoveError: useCallback(() => {\n      setMoveError(null);\n    }, []),\n    /**\n     *\n     */\n    handleClearWarning: () => setWarning(null),\n    /**\n     *\n     */\n    handleClearAnalysisError: () => {},\n  };\n\n  // Dialog handling logic - extracted to custom hook\n  const dialogHandlers = useDialogHandlers({\n    undoMove,\n    resetGame,\n    clearEvaluations,\n    trainingActions,\n    gameActions,\n    uiActions,\n    trainingState,\n    storeApi,\n    trainingUIState,\n  });\n\n  // Move validation logic - extracted to custom hook\n  const moveValidation = useMoveValidation({\n    lastEvaluation,\n    currentFen,\n    evaluations,\n    isEvaluating,\n    tablebaseState,\n    tablebaseActions,\n  });\n\n  // Note: Evaluation processing now handled by useMoveValidation hook\n\n  // Dialog state is now passed directly to DialogManager\n  // No local state variables needed - DialogManager reads from trainingState directly\n\n  // All dialog handler functions now handled by useDialogHandlers hook\n  // See: /shared/hooks/useDialogHandlers.ts for implementation\n  \n  // Note: Analysis status updates now handled by useMoveValidation hook\n\n\n  // === REMOVED E2E WINDOW ATTACHMENTS ===\n  // E2E tests now use Page Object Model via DOM interaction\n  // See: tests/e2e/helpers/pageObjects/TrainingBoardPage.ts\n\n  // === EVENT HANDLERS ===\n  // Move handling logic extracted to useMoveHandlers hook\n\n  // Handle reset trigger from parent\n  useEffect(() => {\n    if (resetTrigger > 0) {\n      dialogHandlers.handleReset();\n    }\n  }, [resetTrigger, dialogHandlers]);\n\n  // === EFFECTS ===\n\n  // Note: Move history and navigation callbacks now handled by useGameNavigation hook\n\n  // Update parent with evaluations\n  useEffect(() => {\n    if (onEvaluationsChange) {\n      onEvaluationsChange(evaluations);\n    }\n  }, [evaluations, onEvaluationsChange]);\n\n  // === E2E TEST SUPPORT ===\n  // E2E testing logic extracted to separate E2ETestHelper component\n\n  // === PAGE READY DETECTION ===\n  const isAnalysisReady =\n    tablebaseState.analysisStatus === \"success\" ||\n    tablebaseState.analysisStatus === \"idle\";\n  const isBoardReady = !!currentFen;\n  const isPageReady = usePageReady([isAnalysisReady, isBoardReady]);\n\n  // === RENDER ===\n  // Note: customSquareRenderer was removed as it's not supported in react-chessboard v2.1.3\n  // E2E tests should use the board's data-testid=\"training-board\" and other available selectors\n\n  const showE2ESignals = process.env.NEXT_PUBLIC_E2E_SIGNALS === \"true\";\n\n  return (\n    <div\n      className=\"flex flex-col items-center\"\n      {...(showE2ESignals && { \"data-page-ready\": isPageReady })}\n    >\n      {/* Chessboard with Evaluation Overlay and E2E data attributes */}\n      <div\n        className=\"relative\"\n        key={trainingUIState.resetKey}\n        style={{\n          width: `${DIMENSIONS.TRAINING_BOARD_SIZE}px`,\n          height: `${DIMENSIONS.TRAINING_BOARD_SIZE}px`,\n        }}\n        data-fen={currentFen}\n        data-testid=\"training-board\"\n        data-analysis-status={tablebaseState.analysisStatus}\n      >\n        <Chessboard\n          fen={currentFen}\n          onPieceDrop={onDrop}\n          onSquareClick={onSquareClick}\n          arePiecesDraggable={!isGameFinished}\n          boardWidth={600}\n        />\n      </div>\n\n      {/* Error and Warning Displays - using AlertDisplay component */}\n      {trainingUIState.warning && (\n        <AlertDisplay\n          type=\"warning\"\n          message={trainingUIState.warning}\n          onDismiss={trainingUIState.handleClearWarning}\n        />\n      )}\n\n      {(trainingUIState.analysisError || evaluationError) && (\n        <AlertDisplay\n          type=\"error\"\n          message={trainingUIState.analysisError || evaluationError || \"Unknown error\"}\n          onDismiss={trainingUIState.handleClearAnalysisError}\n        />\n      )}\n\n      {/* Dialog Manager - Handles all training dialogs */}\n      <DialogManager\n        errorDialog={trainingState.moveErrorDialog}\n        successDialog={trainingState.moveSuccessDialog}\n        onErrorTakeBack={dialogHandlers.handleMoveErrorTakeBack}\n        onErrorRestart={dialogHandlers.handleMoveErrorRestart}\n        onErrorContinue={dialogHandlers.handleMoveErrorContinue}\n        onErrorShowBestMove={dialogHandlers.handleShowBestMove}\n        onSuccessClose={dialogHandlers.handleMoveSuccessClose}\n        onSuccessContinue={dialogHandlers.handleMoveSuccessContinue}\n      />\n\n      {/* E2E Test Helper - Handles automated move execution for testing */}\n      <E2ETestHelper\n        currentFen={currentFen}\n        isGameFinished={isGameFinished}\n        onMove={makeMove}\n        moveHistory={history}\n      />\n    </div>\n  );\n};\n"],"names":["TrainingBoard","fen","position","onComplete","onHistoryChange","onEvaluationsChange","onPositionChange","onJumpToMove","resetTrigger","initialFen","gameState","gameActions","useGameStore","trainingState","trainingActions","useTrainingStore","tablebaseState","tablebaseActions","useTablebaseStore","uiActions","useUIStore","storeApi","useStoreApi","useEffect","logger","getLogger","setContext","currentPosition","id","info","positionId","title","currentPositionId","loadTrainingContext","isPositionReady","history","isGameFinished","currentFen","makeMove","jumpToMove","resetGame","undoMove","useTrainingSession","success","onDrop","onSquareClick","selectedSquare","useMoveHandlers","onMove","gameNavigation","useGameNavigation","evaluations","lastEvaluation","isEvaluating","error","evaluationError","clearEvaluations","usePositionAnalysis","isEnabled","previousFen","resetKey","setResetKey","useState","warning","setWarning","moveError","setMoveError","trainingUIState","analysisError","handleReset","prev","handleDismissMoveError","useCallback","handleClearWarning","handleClearAnalysisError","dialogHandlers","useDialogHandlers","moveValidation","useMoveValidation","isAnalysisReady","analysisStatus","isBoardReady","isPageReady","usePageReady","showE2ESignals","process","env","NEXT_PUBLIC_E2E_SIGNALS","div","className","style","width","DIMENSIONS","TRAINING_BOARD_SIZE","height","data-fen","data-testid","data-analysis-status","Chessboard","onPieceDrop","arePiecesDraggable","boardWidth","AlertDisplay","type","message","onDismiss","DialogManager","errorDialog","moveErrorDialog","successDialog","moveSuccessDialog","onErrorTakeBack","handleMoveErrorTakeBack","onErrorRestart","handleMoveErrorRestart","onErrorContinue","handleMoveErrorContinue","onErrorShowBestMove","handleShowBestMove","onSuccessClose","handleMoveSuccessClose","onSuccessContinue","handleMoveSuccessContinue","E2ETestHelper","moveHistory"],"mappings":"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"}