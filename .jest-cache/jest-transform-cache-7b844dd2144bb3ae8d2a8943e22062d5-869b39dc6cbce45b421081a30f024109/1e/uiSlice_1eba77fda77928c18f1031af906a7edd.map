{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/slices/uiSlice.ts"],"sourcesContent":["/**\n * @file UI state slice for Zustand store\n * @module store/slices/uiSlice\n * @description Manages all UI-related state including modals, toasts, loading states, and sidebar visibility.\n * This slice is responsible for transient UI state that doesn't need to be persisted.\n *\n * @example\n * ```typescript\n * // Using the UI slice in a component\n * import { useStore } from '@/store';\n * import { uiSelectors } from '@/store/slices/uiSlice';\n *\n * function MyComponent() {\n *   const toasts = useStore(uiSelectors.selectToasts);\n *   const showToast = useStore(state => state.showToast);\n *\n *   const handleSuccess = () => {\n *     showToast('Operation successful!', 'success');\n *   };\n * }\n * ```\n */\n\nimport { ImmerStateCreator, UISlice } from \"./types\";\nimport { nanoid } from \"nanoid\";\nimport { Toast, ModalType, LoadingState, AnalysisPanelState } from \"../types\";\n\n/**\n * Initial state for the UI slice\n * Exported separately to enable proper store reset in tests\n */\nexport const initialUIState = {\n  isSidebarOpen: true,\n  currentModal: null as ModalType | null,\n  toasts: [] as Toast[],\n  loading: {\n    global: false,\n    tablebase: false,\n    position: false,\n    analysis: false,\n  } as LoadingState,\n  analysisPanel: {\n    isOpen: false,\n    activeTab: \"moves\" as const,\n    showTablebase: true,\n  } as AnalysisPanelState,\n};\n\n/**\n * Creates the initial UI state with default values\n * @deprecated Use initialUIState export directly\n */\nexport const createInitialUIState = () => ({ ...initialUIState });\n\n/**\n * Creates the UI slice for the Zustand store\n *\n * @param {Function} set - Zustand's set function for state updates\n * @param {Function} get - Zustand's get function for accessing current state\n * @returns {UISlice} Complete UI slice with state and actions\n *\n * @remarks\n * This slice follows the Zustand slice pattern and is designed to be combined\n * with other slices in the root store. All actions are synchronous and side-effect free,\n * except for the auto-removal timer in showToast.\n *\n * @example\n * ```typescript\n * // In your root store\n * import { create } from 'zustand';\n * import { createUISlice } from './slices/uiSlice';\n *\n * const useStore = create<RootState>()((...args) => ({\n *   ...createUISlice(...args),\n *   ...createGameSlice(...args),\n *   // ... other slices\n * }));\n * ```\n */\nexport const createUISlice: ImmerStateCreator<UISlice> = (set, get) => ({\n  // Initial state - use fresh arrays for each instance\n  isSidebarOpen: false,\n  currentModal: null as ModalType | null,\n  toasts: [],\n  lastError: null as Error | null,\n  loading: {\n    global: false,\n    position: false,\n    tablebase: false,\n    analysis: false,\n  } as LoadingState,\n  analysisPanel: {\n    isOpen: false,\n    activeTab: \"moves\" as const,\n    showTablebase: true,\n  } as AnalysisPanelState,\n\n  // Actions\n  /**\n   * Toggles the sidebar visibility state\n   *\n   * @fires stateChange - When sidebar state changes\n   *\n   * @example\n   * ```typescript\n   * // Toggle sidebar from open to closed or vice versa\n   * store.getState().toggleSidebar();\n   * ```\n   */\n  toggleSidebar: () =>\n    set((state) => {\n      state.ui.isSidebarOpen = !state.ui.isSidebarOpen;\n    }),\n\n  /**\n   * Sets the sidebar visibility state explicitly\n   *\n   * @param {boolean} isOpen - Whether the sidebar should be open\n   * @fires stateChange - When sidebar state changes\n   *\n   * @example\n   * ```typescript\n   * // Open sidebar\n   * store.getState().setIsSidebarOpen(true);\n   *\n   * // Close sidebar\n   * store.getState().setIsSidebarOpen(false);\n   * ```\n   */\n  setIsSidebarOpen: (isOpen: boolean) =>\n    set((state) => {\n      state.ui.isSidebarOpen = isOpen;\n    }),\n\n  /**\n   * Opens a modal by type, closing any currently open modal\n   *\n   * @param {ModalType} type - The type of modal to open\n   * @fires stateChange - When modal state changes\n   *\n   * @remarks\n   * Only one modal can be open at a time. Opening a new modal will close\n   * any currently open modal.\n   *\n   * @example\n   * ```typescript\n   * // Open settings modal\n   * store.getState().openModal('settings');\n   *\n   * // Open achievements modal\n   * store.getState().openModal('achievements');\n   * ```\n   */\n  openModal: (type: ModalType) =>\n    set((state) => {\n      state.ui.currentModal = type;\n    }),\n\n  /**\n   * Closes the currently open modal\n   *\n   * @fires stateChange - When modal is closed\n   *\n   * @example\n   * ```typescript\n   * // Close any open modal\n   * store.getState().closeModal();\n   * ```\n   */\n  closeModal: () =>\n    set((state) => {\n      state.ui.currentModal = null;\n    }),\n\n  /**\n   * Shows a toast notification with auto-removal\n   *\n   * @param {string} message - The message to display in the toast\n   * @param {Toast[\"type\"]} type - Toast type determining appearance and icon\n   * @param {number} [duration=3000] - Duration in milliseconds before auto-removal (0 = no auto-removal)\n   * @returns {void}\n   *\n   * @fires stateChange - When toast is added\n   * @fires stateChange - When toast is auto-removed after duration\n   *\n   * @remarks\n   * - Each toast gets a unique ID using nanoid\n   * - Toasts are automatically removed after the specified duration\n   * - Set duration to 0 or negative to disable auto-removal\n   * - Multiple toasts can be shown simultaneously\n   *\n   * @example\n   * ```typescript\n   * // Show success toast (auto-removes after 3 seconds)\n   * store.getState().showToast('File saved successfully!', 'success');\n   *\n   * // Show error toast with custom duration\n   * store.getState().showToast('Network error occurred', 'error', 5000);\n   *\n   * // Show permanent toast (no auto-removal)\n   * store.getState().showToast('Important message', 'info', 0);\n   * ```\n   */\n  showToast: (message: string, type: Toast[\"type\"], duration = 3000) => {\n    const id = nanoid();\n    const toast: Toast = {\n      id,\n      message,\n      type,\n      duration,\n    };\n\n    set((state) => {\n      state.ui.toasts.push(toast);\n    });\n\n    // Auto-remove toast after duration\n    if (duration && duration > 0) {\n      setTimeout(() => {\n        get().ui.removeToast(id);\n      }, duration);\n    }\n  },\n\n  /**\n   * Removes a specific toast notification by ID\n   *\n   * @param {string} id - The unique ID of the toast to remove\n   * @fires stateChange - When toast is removed\n   *\n   * @remarks\n   * This is typically called automatically by the showToast timer,\n   * but can be called manually for user-dismissible toasts.\n   *\n   * @example\n   * ```typescript\n   * // Remove a specific toast\n   * store.getState().removeToast('toast-id-123');\n   *\n   * // Remove all toasts\n   * const state = store.getState();\n   * state.toasts.forEach(toast => state.removeToast(toast.id));\n   * ```\n   */\n  removeToast: (id: string) =>\n    set((state) => {\n      state.ui.toasts = state.ui.toasts.filter((toast: any) => toast.id !== id);\n    }),\n\n  /**\n   * Sets the loading state for a specific operation\n   *\n   * @param {keyof LoadingState} key - The loading state key to update\n   * @param {boolean} value - The loading state value (true = loading, false = not loading)\n   * @fires stateChange - When loading state changes\n   *\n   * @remarks\n   * Loading states are used to show spinners or disable UI elements\n   * during async operations. Each key represents a different operation type.\n   *\n   * @example\n   * ```typescript\n   * // Start global loading\n   * store.getState().setLoading('global', true);\n   *\n   * // Start tablebase loading\n   * store.getState().setLoading('tablebase', true);\n   *\n   * // Stop position loading\n   * store.getState().setLoading('position', false);\n   * ```\n   */\n  setLoading: (key: keyof LoadingState, value: boolean) =>\n    set((state) => {\n      state.ui.loading[key] = value;\n    }),\n\n  /**\n   * Updates the analysis panel configuration\n   *\n   * @param {Partial<AnalysisPanelState>} update - Partial update to merge with current state\n   * @fires stateChange - When analysis panel state changes\n   *\n   * @remarks\n   * This method performs a shallow merge of the update object with\n   * the current analysis panel state. Use this to update one or more\n   * properties without affecting others.\n   *\n   * @example\n   * ```typescript\n   * // Open analysis panel\n   * store.getState().updateAnalysisPanel({ isOpen: true });\n   *\n   * // Change active tab\n   * store.getState().updateAnalysisPanel({ activeTab: 'evaluation' });\n   *\n   * // Update multiple properties\n   * store.getState().updateAnalysisPanel({\n   *   isOpen: true,\n   *   activeTab: 'variations',\n   *   showTablebase: false\n   * });\n   * ```\n   */\n  updateAnalysisPanel: (update: Partial<AnalysisPanelState>) =>\n    set((state) => {\n      Object.assign(state.ui.analysisPanel, update);\n    }),\n});\n\n/**\n * Selector functions for efficient state access\n *\n * @remarks\n * These selectors provide a consistent API for accessing UI state\n * and can be used with Zustand's subscribe mechanism for optimal\n * re-renders. Use these instead of inline selectors when possible.\n *\n * @example\n * ```typescript\n * import { useStore } from '@/store';\n * import { uiSelectors } from '@/store/slices/uiSlice';\n *\n * // In a component\n * const toasts = useStore(uiSelectors.selectToasts);\n * const isSettingsOpen = useStore(uiSelectors.selectIsModalOpen('settings'));\n * const isLoading = useStore(uiSelectors.selectGlobalLoading);\n * ```\n */\nexport const uiSelectors = {\n  /**\n   * Selects the sidebar open state\n   * @param {UISlice} state - The UI slice of the store\n   * @returns {boolean} Whether the sidebar is open\n   */\n  selectSidebarOpen: (state: UISlice) => state.isSidebarOpen,\n\n  /**\n   * Selects the currently open modal type\n   * @param {UISlice} state - The UI slice of the store\n   * @returns {ModalType | null} The open modal type or null if no modal is open\n   */\n  selectCurrentModal: (state: UISlice) => state.currentModal,\n\n  /**\n   * Selects all active toasts\n   * @param {UISlice} state - The UI slice of the store\n   * @returns {Toast[]} Array of active toast notifications\n   */\n  selectToasts: (state: UISlice) => state.toasts,\n\n  /**\n   * Selects the entire loading state object\n   * @param {UISlice} state - The UI slice of the store\n   * @returns {LoadingState} Object containing all loading states\n   */\n  selectLoading: (state: UISlice) => state.loading,\n\n  /**\n   * Selects the global loading state\n   * @param {UISlice} state - The UI slice of the store\n   * @returns {boolean} Whether global loading is active\n   */\n  selectGlobalLoading: (state: UISlice) => state.loading.global,\n\n  /**\n   * Selects the tablebase loading state\n   * @param {UISlice} state - The UI slice of the store\n   * @returns {boolean} Whether tablebase loading is active\n   */\n  selectTablebaseLoading: (state: UISlice) => state.loading.tablebase,\n\n  /**\n   * Selects the analysis panel state\n   * @param {UISlice} state - The UI slice of the store\n   * @returns {AnalysisPanelState} The analysis panel configuration\n   */\n  selectAnalysisPanel: (state: UISlice) => state.analysisPanel,\n\n  /**\n   * Creates a selector to check if a specific modal is open\n   * @param {ModalType} type - The modal type to check\n   * @returns {Function} Selector function that returns true if the specified modal is open\n   *\n   * @example\n   * ```typescript\n   * const isSettingsOpen = useStore(uiSelectors.selectIsModalOpen('settings'));\n   * ```\n   */\n  selectIsModalOpen: (type: ModalType) => (state: UISlice) =>\n    state.currentModal === type,\n};\n"],"names":["createInitialUIState","createUISlice","initialUIState","uiSelectors","isSidebarOpen","currentModal","toasts","loading","global","tablebase","position","analysis","analysisPanel","isOpen","activeTab","showTablebase","set","get","lastError","toggleSidebar","state","ui","setIsSidebarOpen","openModal","type","closeModal","showToast","message","duration","id","nanoid","toast","push","setTimeout","removeToast","filter","setLoading","key","value","updateAnalysisPanel","update","Object","assign","selectSidebarOpen","selectCurrentModal","selectToasts","selectLoading","selectGlobalLoading","selectTablebaseLoading","selectAnalysisPanel","selectIsModalOpen"],"mappings":"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"}