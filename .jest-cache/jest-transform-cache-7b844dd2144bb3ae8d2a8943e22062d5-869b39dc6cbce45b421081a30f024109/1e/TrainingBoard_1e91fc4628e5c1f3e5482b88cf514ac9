785510c619c5799c6624852f2da2a256
/**
 * @file Interactive chess training board component
 * @module components/training/TrainingBoard
 *
 * @description
 * Core training interface for chess endgame practice. Provides an interactive
 * chessboard with real-time tablebase analysis, move validation, error feedback,
 * and training session management. Integrates with Zustand store for state management
 * and supports E2E testing with special hooks.
 *
 * @remarks
 * Key features:
 * - Interactive drag-and-drop chess moves
 * - Real-time tablebase position evaluation
 * - Move quality feedback with WDL analysis
 * - Training session tracking and completion
 * - E2E test support with programmatic move injection
 * - Responsive board sizing and animations
 *
 * The component acts as the main interface between the user and the chess
 * training system, coordinating between multiple services and state slices.
 */ // Module loading confirmed - debug logging removed for production
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "TrainingBoard", {
    enumerable: true,
    get: function() {
        return TrainingBoard;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _Chessboard = require("../../chess/Chessboard");
const _hooks = require("../../../hooks");
const _usePageReady = require("../../../hooks/usePageReady");
const _hooks1 = require("../../../store/hooks");
const _StoreContext = require("../../../store/StoreContext");
const _Logger = require("../../../services/logging/Logger");
const _constants = require("../../../constants");
const _AlertDisplay = require("../../ui/AlertDisplay");
const _DialogManager = require("../DialogManager");
const _E2ETestHelper = require("../../testing/E2ETestHelper");
const _useMoveHandlers = require("../../../hooks/useMoveHandlers");
const _useDialogHandlers = require("../../../hooks/useDialogHandlers");
const _useMoveValidation = require("../../../hooks/useMoveValidation");
const _useGameNavigation = require("../../../hooks/useGameNavigation");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const TrainingBoard = ({ fen, position, onComplete, onHistoryChange, onEvaluationsChange, onPositionChange, onJumpToMove, resetTrigger = 0 })=>{
    const initialFen = fen || (position === null || position === void 0 ? void 0 : position.fen) || "4k3/8/4K3/4P3/8/8/8/8 w - - 0 1";
    // === ZUSTAND STORE - Using domain-specific hooks for performance ===
    const [gameState, gameActions] = (0, _hooks1.useGameStore)(); // Pure chess state
    const [trainingState, trainingActions] = (0, _hooks1.useTrainingStore)(); // Training session state
    const [tablebaseState, tablebaseActions] = (0, _hooks1.useTablebaseStore)(); // Analysis and evaluation data
    const [, uiActions] = (0, _hooks1.useUIStore)(); // UI state (toasts, modals, loading)
    const storeApi = (0, _StoreContext.useStoreApi)(); // Store API for orchestrator functions
    // Set position in store on mount or when position changes
    (0, _react.useEffect)(()=>{
        const logger = (0, _Logger.getLogger)().setContext("TrainingBoard-PositionInit");
        if (position && (!trainingState.currentPosition || trainingState.currentPosition.id !== position.id)) {
            var _trainingState_currentPosition;
            logger.info("Setting position in store", {
                positionId: position.id,
                title: position.title,
                fen: position.fen,
                currentPositionId: (_trainingState_currentPosition = trainingState.currentPosition) === null || _trainingState_currentPosition === void 0 ? void 0 : _trainingState_currentPosition.id
            });
            trainingActions.loadTrainingContext(position);
        }
    }, [
        position,
        trainingActions,
        trainingState
    ]);
    // CRITICAL: Prevent any interactions if position is not loaded
    const isPositionReady = !!trainingState.currentPosition;
    // === HOOKS ===
    // Chess game logic - now using Store as single source of truth
    const { history, isGameFinished, currentFen, makeMove, jumpToMove, resetGame, undoMove } = (0, _hooks.useTrainingSession)({
        /**
     *
     * @param success
     */ onComplete: (success)=>{
            // Call parent callback
            onComplete(success);
        },
        onPositionChange
    });
    // Move handling logic - extracted to custom hook
    const { onDrop, onSquareClick, selectedSquare } = (0, _useMoveHandlers.useMoveHandlers)({
        currentFen: currentFen || initialFen,
        isGameFinished,
        isPositionReady,
        trainingState,
        onMove: makeMove
    });
    // Game navigation logic - extracted to custom hook
    const gameNavigation = (0, _useGameNavigation.useGameNavigation)({
        history,
        initialFen,
        currentFen,
        onHistoryChange,
        onJumpToMove,
        jumpToMove
    });
    // Evaluation logic
    const { evaluations, lastEvaluation, isEvaluating, error: evaluationError, clearEvaluations } = (0, _hooks.usePositionAnalysis)({
        fen: currentFen || initialFen,
        isEnabled: true,
        previousFen: gameNavigation.previousFen
    });
    // UI state management - local component state only
    const [resetKey, setResetKey] = (0, _react.useState)(0);
    const [warning, setWarning] = (0, _react.useState)(null);
    const [moveError, setMoveError] = (0, _react.useState)(null);
    const trainingUIState = {
        resetKey,
        warning,
        analysisError: null,
        moveError,
        /**
     *
     */ handleReset: ()=>setResetKey((prev)=>prev + 1),
        /**
     *
     */ handleDismissMoveError: (0, _react.useCallback)(()=>{
            setMoveError(null);
        }, []),
        /**
     *
     */ handleClearWarning: ()=>setWarning(null),
        /**
     *
     */ handleClearAnalysisError: ()=>{}
    };
    // Dialog handling logic - extracted to custom hook
    const dialogHandlers = (0, _useDialogHandlers.useDialogHandlers)({
        undoMove,
        resetGame,
        clearEvaluations,
        trainingActions,
        gameActions,
        uiActions,
        trainingState,
        storeApi,
        trainingUIState
    });
    // Move validation logic - extracted to custom hook
    const moveValidation = (0, _useMoveValidation.useMoveValidation)({
        lastEvaluation,
        currentFen,
        evaluations,
        isEvaluating,
        tablebaseState,
        tablebaseActions
    });
    // Note: Evaluation processing now handled by useMoveValidation hook
    // Dialog state is now passed directly to DialogManager
    // No local state variables needed - DialogManager reads from trainingState directly
    // All dialog handler functions now handled by useDialogHandlers hook
    // See: /shared/hooks/useDialogHandlers.ts for implementation
    // Note: Analysis status updates now handled by useMoveValidation hook
    // === REMOVED E2E WINDOW ATTACHMENTS ===
    // E2E tests now use Page Object Model via DOM interaction
    // See: tests/e2e/helpers/pageObjects/TrainingBoardPage.ts
    // === EVENT HANDLERS ===
    // Move handling logic extracted to useMoveHandlers hook
    // Handle reset trigger from parent
    (0, _react.useEffect)(()=>{
        if (resetTrigger > 0) {
            dialogHandlers.handleReset();
        }
    }, [
        resetTrigger,
        dialogHandlers
    ]);
    // === EFFECTS ===
    // Note: Move history and navigation callbacks now handled by useGameNavigation hook
    // Update parent with evaluations
    (0, _react.useEffect)(()=>{
        if (onEvaluationsChange) {
            onEvaluationsChange(evaluations);
        }
    }, [
        evaluations,
        onEvaluationsChange
    ]);
    // === E2E TEST SUPPORT ===
    // E2E testing logic extracted to separate E2ETestHelper component
    // === PAGE READY DETECTION ===
    const isAnalysisReady = tablebaseState.analysisStatus === "success" || tablebaseState.analysisStatus === "idle";
    const isBoardReady = !!currentFen;
    const isPageReady = (0, _usePageReady.usePageReady)([
        isAnalysisReady,
        isBoardReady
    ]);
    // === RENDER ===
    // Note: customSquareRenderer was removed as it's not supported in react-chessboard v2.1.3
    // E2E tests should use the board's data-testid="training-board" and other available selectors
    const showE2ESignals = process.env.NEXT_PUBLIC_E2E_SIGNALS === "true";
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "flex flex-col items-center",
        ...showE2ESignals && {
            "data-page-ready": isPageReady
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "relative",
                style: {
                    width: `${_constants.DIMENSIONS.TRAINING_BOARD_SIZE}px`,
                    height: `${_constants.DIMENSIONS.TRAINING_BOARD_SIZE}px`
                },
                "data-fen": currentFen,
                "data-testid": "training-board",
                "data-analysis-status": tablebaseState.analysisStatus,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Chessboard.Chessboard, {
                    fen: currentFen,
                    onPieceDrop: onDrop,
                    onSquareClick: onSquareClick,
                    arePiecesDraggable: !isGameFinished,
                    boardWidth: 600
                })
            }, trainingUIState.resetKey),
            trainingUIState.warning && /*#__PURE__*/ (0, _jsxruntime.jsx)(_AlertDisplay.AlertDisplay, {
                type: "warning",
                message: trainingUIState.warning,
                onDismiss: trainingUIState.handleClearWarning
            }),
            (trainingUIState.analysisError || evaluationError) && /*#__PURE__*/ (0, _jsxruntime.jsx)(_AlertDisplay.AlertDisplay, {
                type: "error",
                message: trainingUIState.analysisError || evaluationError || "Unknown error",
                onDismiss: trainingUIState.handleClearAnalysisError
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_DialogManager.DialogManager, {
                errorDialog: trainingState.moveErrorDialog,
                successDialog: trainingState.moveSuccessDialog,
                onErrorTakeBack: dialogHandlers.handleMoveErrorTakeBack,
                onErrorRestart: dialogHandlers.handleMoveErrorRestart,
                onErrorContinue: dialogHandlers.handleMoveErrorContinue,
                onErrorShowBestMove: dialogHandlers.handleShowBestMove,
                onSuccessClose: dialogHandlers.handleMoveSuccessClose,
                onSuccessContinue: dialogHandlers.handleMoveSuccessContinue
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_E2ETestHelper.E2ETestHelper, {
                currentFen: currentFen,
                isGameFinished: isGameFinished,
                onMove: makeMove,
                moveHistory: history
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,