{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/components/training/TrainingBoard.test.tsx"],"sourcesContent":["import React from \"react\";\nimport { render, screen, fireEvent, waitFor } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom\";\nimport { TrainingBoard } from \"@shared/components/training/TrainingBoard/TrainingBoard\";\nimport { StoreProvider } from \"@shared/store/StoreContext\";\nimport { useTrainingStore } from \"@shared/store/hooks/useTrainingStore\";\nimport { useGameStore } from \"@shared/store/hooks/useGameStore\";\nimport { useTablebaseStore } from \"@shared/store/hooks/useTablebaseStore\";\nimport { useUIStore } from \"@shared/store/hooks/useUIStore\";\nimport { useTrainingSession, usePositionAnalysis } from \"@shared/hooks\";\nimport { EndgamePosition } from \"@shared/types\";\n\n// Mock all store hooks\njest.mock(\"@shared/store/hooks/useTrainingStore\");\njest.mock(\"@shared/store/hooks/useGameStore\");\njest.mock(\"@shared/store/hooks/useTablebaseStore\");\njest.mock(\"@shared/store/hooks/useUIStore\");\n\n// Mock custom hooks\njest.mock(\"@shared/hooks/useTrainingSession\");\njest.mock(\"@shared/hooks/usePositionAnalysis\");\n\n// Mock the Chessboard wrapper component (not react-chessboard directly)\njest.mock(\"@shared/components/chess/Chessboard\", () => ({\n  Chessboard: jest.fn(\n    ({ onPieceDrop, fen, arePiecesDraggable, boardWidth }) => (\n      <div\n        data-testid=\"mock-chessboard\"\n        data-fen={fen}\n        data-draggable={arePiecesDraggable}\n        data-width={boardWidth}\n      >\n        <button\n          data-testid=\"piece-drop-trigger\"\n          onClick={() => onPieceDrop && onPieceDrop(\"a7\", \"a8\", \"wP\")}\n          disabled={!arePiecesDraggable}\n        >\n          Make Move\n        </button>\n      </div>\n    ),\n  ),\n}));\n\nconst mockUseTrainingStore = useTrainingStore as jest.MockedFunction<\n  typeof useTrainingStore\n>;\nconst mockUseGameStore = useGameStore as jest.MockedFunction<\n  typeof useGameStore\n>;\nconst mockUseTablebaseStore = useTablebaseStore as jest.MockedFunction<\n  typeof useTablebaseStore\n>;\nconst mockUseUIStore = useUIStore as jest.MockedFunction<typeof useUIStore>;\nconst mockUseTrainingSession = useTrainingSession as jest.MockedFunction<\n  typeof useTrainingSession\n>;\nconst mockUsePositionAnalysis = usePositionAnalysis as jest.MockedFunction<\n  typeof usePositionAnalysis\n>;\n\ndescribe(\"TrainingBoard\", () => {\n  const mockTrainingState = {\n    currentPosition: {\n      id: 1,\n      fen: \"K7/P7/k7/8/8/8/8/8 w - - 0 1\",\n      title: \"Test Position\",\n      description: \"Test description\",\n      difficulty: \"intermediate\" as const,\n      category: \"pawn\" as const,\n      colorToTrain: \"white\" as const,\n      targetOutcome: \"1-0\" as const,\n    },\n    nextPosition: null,\n    previousPosition: null,\n    isLoadingNavigation: false,\n    navigationError: null,\n    chapterProgress: null,\n    isPlayerTurn: true,\n    isOpponentThinking: false,\n    isSuccess: false,\n    sessionStartTime: undefined,\n    sessionEndTime: undefined,\n    hintsUsed: 0,\n    mistakeCount: 0,\n    moveErrorDialog: null,\n    moveSuccessDialog: null,\n    evaluationBaseline: null,\n  };\n\n  const mockTrainingActions = {\n    setPosition: jest.fn(),\n    setNavigationPositions: jest.fn(),\n    setNavigationLoading: jest.fn(),\n    setNavigationError: jest.fn(),\n    setChapterProgress: jest.fn(),\n    setPlayerTurn: jest.fn(),\n    clearOpponentThinking: jest.fn(),\n    completeTraining: jest.fn(),\n    incrementHint: jest.fn(),\n    incrementMistake: jest.fn(),\n    setMoveErrorDialog: jest.fn(),\n    setMoveSuccessDialog: jest.fn(),\n    addTrainingMove: jest.fn(),\n    resetTraining: jest.fn(),\n    resetPosition: jest.fn(),\n    setEvaluationBaseline: jest.fn(),\n    clearEvaluationBaseline: jest.fn(),\n    // Add async actions\n    handlePlayerMove: jest.fn(),\n    loadTrainingContext: jest.fn(),\n  };\n\n  const mockGameState = {\n    currentFen: \"K7/P7/k7/8/8/8/8/8 w - - 0 1\",\n    currentPgn: \"\",\n    moveHistory: [],\n    currentMoveIndex: 0,\n    isGameFinished: false,\n    gameResult: null,\n    isCheckmate: false,\n    isDraw: false,\n    isStalemate: false,\n  };\n\n  const mockGameActions = {\n    updatePosition: jest.fn(),\n    addMove: jest.fn(),\n    setMoveHistory: jest.fn(),\n    setCurrentMoveIndex: jest.fn(),\n    setGameFinished: jest.fn(),\n    setGameStatus: jest.fn(),\n    resetGame: jest.fn(),\n    initializeGame: jest.fn(),\n    makeMove: jest.fn(),\n    undoMove: jest.fn(),\n    redoMove: jest.fn(),\n    goToMove: jest.fn(),\n    goToFirst: jest.fn(),\n    goToPrevious: jest.fn(),\n    goToNext: jest.fn(),\n    goToLast: jest.fn(),\n    setCurrentFen: jest.fn(),\n  };\n\n  const mockTablebaseState = {\n    tablebaseMove: null,\n    analysisStatus: \"idle\" as const,\n    evaluations: [],\n    currentEvaluation: undefined,\n  };\n\n  const mockTablebaseActions = {\n    setTablebaseMove: jest.fn(),\n    setAnalysisStatus: jest.fn(),\n    addEvaluation: jest.fn(),\n    setEvaluations: jest.fn(),\n    setCurrentEvaluation: jest.fn(),\n    clearTablebaseState: jest.fn(),\n  };\n\n  const mockUIState = {\n    isSidebarOpen: false,\n    currentModal: null,\n    toasts: [],\n    loading: {\n      global: false,\n      tablebase: false,\n      position: false,\n      analysis: false,\n    },\n    analysisPanel: {\n      isOpen: false,\n      activeTab: \"evaluation\" as const,\n      showTablebase: true,\n    },\n  };\n\n  const mockUIActions = {\n    toggleSidebar: jest.fn(),\n    setIsSidebarOpen: jest.fn(),\n    openModal: jest.fn(),\n    closeModal: jest.fn(),\n    showToast: jest.fn(),\n    removeToast: jest.fn(),\n    setLoading: jest.fn(),\n    updateAnalysisPanel: jest.fn(),\n  };\n\n  // Mock implementations for custom hooks\n  const mockMakeMove = jest.fn().mockResolvedValue(true);\n  const mockUndoMove = jest.fn();\n  const mockJumpToMove = jest.fn();\n  const mockResetGame = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Setup store mocks\n    mockUseTrainingStore.mockReturnValue([\n      mockTrainingState,\n      mockTrainingActions,\n    ]);\n    mockUseGameStore.mockReturnValue([mockGameState, mockGameActions]);\n    mockUseTablebaseStore.mockReturnValue([\n      mockTablebaseState,\n      mockTablebaseActions,\n    ]);\n    mockUseUIStore.mockReturnValue([mockUIState, mockUIActions]);\n\n    // Setup custom hook mocks\n    mockUseTrainingSession.mockReturnValue({\n      game: null,\n      currentPgn: \"\",\n      history: [],\n      isGameFinished: false,\n      currentFen: mockTrainingState.currentPosition.fen,\n      makeMove: mockMakeMove,\n      jumpToMove: mockJumpToMove,\n      resetGame: mockResetGame,\n      undoMove: mockUndoMove,\n    });\n\n    mockUsePositionAnalysis.mockReturnValue({\n      evaluations: [],\n      lastEvaluation: null,\n      isEvaluating: false,\n      error: null,\n      addEvaluation: jest.fn(),\n      clearEvaluations: jest.fn(),\n    });\n  });\n\n  describe(\"Rendering\", () => {\n    it(\"renders training board wrapper and mock chessboard\", () => {\n      const position: EndgamePosition = {\n        id: 1,\n        fen: \"K7/P7/k7/8/8/8/8/8 w - - 0 1\",\n        title: \"Test Position\",\n        description: \"Test description\",\n        difficulty: \"intermediate\",\n        category: \"pawn\",\n      };\n\n      renderWithStoreProvider(\n        <TrainingBoard position={position} onComplete={jest.fn()} />,\n      );\n\n      // Check wrapper exists\n      const wrapper = screen.getByTestId(\"training-board\");\n      expect(wrapper).toBeInTheDocument();\n      expect(wrapper).toHaveAttribute(\"data-fen\", position.fen);\n\n      // Check mock chessboard exists\n      const chessboard = screen.getByTestId(\"mock-chessboard\");\n      expect(chessboard).toBeInTheDocument();\n      expect(chessboard).toHaveAttribute(\"data-fen\", position.fen);\n    });\n\n    it(\"renders with draggable pieces when game is not finished\", () => {\n      renderWithStoreProvider(\n        <TrainingBoard\n          position={mockTrainingState.currentPosition!}\n          onComplete={jest.fn()}\n        />,\n      );\n\n      const chessboard = screen.getByTestId(\"mock-chessboard\");\n      expect(chessboard).toHaveAttribute(\"data-draggable\", \"true\");\n    });\n\n    it(\"shows loading state when training position is not loaded\", () => {\n      mockUseTrainingStore.mockReturnValue([\n        { ...mockTrainingState, currentPosition: undefined },\n        mockTrainingActions,\n      ]);\n\n      // The component should still render but in a loading state\n      renderWithStoreProvider(<TrainingBoard onComplete={jest.fn()} />);\n\n      // The wrapper might still be rendered, but chessboard should not be\n      // or we check for a loading indicator\n      // Since the actual component behavior needs to be checked, we'll adjust this\n      expect(screen.queryByTestId(\"mock-chessboard\")).toBeInTheDocument();\n      // But the training is not active without a position\n    });\n  });\n\n  describe(\"Move Handling\", () => {\n    it(\"calls makeMove from useTrainingSession when piece is dropped\", async () => {\n      renderWithStoreProvider(\n        <TrainingBoard\n          position={mockTrainingState.currentPosition!}\n          onComplete={jest.fn()}\n        />,\n      );\n\n      const moveTrigger = screen.getByTestId(\"piece-drop-trigger\");\n      fireEvent.click(moveTrigger);\n\n      await waitFor(() => {\n        // Check that makeMove from the custom hook was called\n        expect(mockMakeMove).toHaveBeenCalledWith({\n          from: \"a7\",\n          to: \"a8\",\n          promotion: \"q\", // Default promotion for pawn reaching 8th rank\n        });\n      });\n    });\n\n    it(\"shows error dialog when move is incorrect\", async () => {\n      const stateWithError = {\n        ...mockTrainingState,\n        moveErrorDialog: {\n          isOpen: true,\n          wdlBefore: 2,\n          wdlAfter: -1,\n          bestMove: \"a7a8q\",\n        },\n      };\n\n      mockUseTrainingStore.mockReturnValue([\n        stateWithError,\n        mockTrainingActions,\n      ]);\n\n      renderWithStoreProvider(<TrainingBoard onComplete={jest.fn()} />);\n\n      // MoveErrorDialog should be rendered when error state is present\n      expect(mockTrainingActions.setMoveErrorDialog).toBeDefined();\n    });\n\n    it(\"shows success dialog when position is completed\", () => {\n      const stateWithSuccess = {\n        ...mockTrainingState,\n        moveSuccessDialog: {\n          isOpen: true,\n          promotionPiece: \"q\",\n          moveDescription: \"Excellent move!\",\n        },\n      };\n\n      mockUseTrainingStore.mockReturnValue([\n        stateWithSuccess,\n        mockTrainingActions,\n      ]);\n\n      renderWithStoreProvider(<TrainingBoard onComplete={jest.fn()} />);\n\n      // MoveSuccessDialog should be rendered when success state is present\n      expect(mockTrainingActions.setMoveSuccessDialog).toBeDefined();\n    });\n\n    it(\"disables moves when game is finished\", () => {\n      // Update the mock to return isGameFinished: true\n      mockUseTrainingSession.mockReturnValue({\n        game: null,\n        currentPgn: \"\",\n        history: [],\n        isGameFinished: true, // Game is finished\n        currentFen: mockTrainingState.currentPosition!.fen,\n        makeMove: mockMakeMove,\n        jumpToMove: mockJumpToMove,\n        resetGame: mockResetGame,\n        undoMove: mockUndoMove,\n      });\n\n      renderWithStoreProvider(\n        <TrainingBoard\n          position={mockTrainingState.currentPosition!}\n          onComplete={jest.fn()}\n        />,\n      );\n\n      const moveTrigger = screen.getByTestId(\"piece-drop-trigger\");\n      expect(moveTrigger).toBeDisabled();\n    });\n  });\n\n  describe(\"Promotion Handling\", () => {\n    it(\"handles pawn promotion correctly\", async () => {\n      // Mock a position where promotion is possible\n      const promotionPosition = {\n        id: 2,\n        fen: \"8/P7/k7/8/8/8/8/K7 w - - 0 1\",\n        title: \"Promotion Test\",\n        description: \"Test promotion\",\n        difficulty: \"beginner\" as const,\n        category: \"pawn\" as const,\n        colorToTrain: \"white\" as const,\n        targetOutcome: \"1-0\" as const,\n      };\n\n      mockUseTrainingStore.mockReturnValue([\n        { ...mockTrainingState, currentPosition: promotionPosition },\n        mockTrainingActions,\n      ]);\n\n      mockUseTrainingSession.mockReturnValue({\n        game: null,\n        currentPgn: \"\",\n        history: [],\n        isGameFinished: false,\n        currentFen: promotionPosition.fen,\n        makeMove: mockMakeMove,\n        jumpToMove: mockJumpToMove,\n        resetGame: mockResetGame,\n        undoMove: mockUndoMove,\n      });\n\n      renderWithStoreProvider(\n        <TrainingBoard position={promotionPosition} onComplete={jest.fn()} />,\n      );\n\n      // Simulate promotion move\n      const moveTrigger = screen.getByTestId(\"piece-drop-trigger\");\n      fireEvent.click(moveTrigger);\n\n      // Should handle promotion with default queen\n      await waitFor(() => {\n        expect(mockMakeMove).toHaveBeenCalledWith({\n          from: \"a7\",\n          to: \"a8\",\n          promotion: \"q\",\n        });\n      });\n    });\n  });\n\n  describe(\"Game State Integration\", () => {\n    it(\"updates when game state changes\", () => {\n      const { rerender } = renderWithStoreProvider(\n        <TrainingBoard\n          position={mockTrainingState.currentPosition!}\n          onComplete={jest.fn()}\n        />,\n      );\n\n      // Update the mock to return new FEN\n      const newFen = \"8/8/k7/8/8/8/8/K7 w - - 0 1\";\n      mockUseTrainingSession.mockReturnValue({\n        game: null,\n        currentPgn: \"\",\n        history: [],\n        isGameFinished: false,\n        currentFen: newFen,\n        makeMove: mockMakeMove,\n        jumpToMove: mockJumpToMove,\n        resetGame: mockResetGame,\n        undoMove: mockUndoMove,\n      });\n\n      rerender(\n        <StoreProvider>\n          <TrainingBoard\n            position={mockTrainingState.currentPosition!}\n            onComplete={jest.fn()}\n          />\n        </StoreProvider>,\n      );\n\n      const wrapper = screen.getByTestId(\"training-board\");\n      expect(wrapper).toHaveAttribute(\"data-fen\", newFen);\n    });\n\n    it(\"shows last move in game state\", () => {\n      renderWithStoreProvider(\n        <TrainingBoard\n          position={mockTrainingState.currentPosition!}\n          onComplete={jest.fn()}\n        />,\n      );\n\n      // The board should be rendered with the position\n      const wrapper = screen.getByTestId(\"training-board\");\n      const chessboard = screen.getByTestId(\"mock-chessboard\");\n\n      // Both should be present\n      expect(wrapper).toBeInTheDocument();\n      expect(chessboard).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Tablebase Integration\", () => {\n    it(\"handles tablebase state correctly\", () => {\n      // Test that the component renders with tablebase state\n      mockUseTablebaseStore.mockReturnValue([\n        {\n          ...mockTablebaseState,\n          analysisStatus: \"loading\" as const,\n          evaluations: [],\n        },\n        mockTablebaseActions,\n      ]);\n\n      renderWithStoreProvider(\n        <TrainingBoard\n          position={mockTrainingState.currentPosition!}\n          onComplete={jest.fn()}\n        />,\n      );\n\n      const wrapper = screen.getByTestId(\"training-board\");\n      // Check that the analysis status is reflected in data attribute\n      expect(wrapper).toHaveAttribute(\"data-analysis-status\", \"loading\");\n    });\n\n    it(\"handles tablebase unavailable state\", () => {\n      mockUseTablebaseStore.mockReturnValue([\n        mockTablebaseState,\n        mockTablebaseActions,\n      ]);\n\n      renderWithStoreProvider(\n        <TrainingBoard\n          position={mockTrainingState.currentPosition!}\n          onComplete={jest.fn()}\n        />,\n      );\n\n      // Should still render board even if tablebase is unavailable\n      expect(screen.getByTestId(\"training-board\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"handles move errors gracefully\", async () => {\n      // Mock makeMove to reject\n      mockMakeMove.mockRejectedValueOnce(new Error(\"Invalid move\"));\n\n      renderWithStoreProvider(\n        <TrainingBoard\n          position={mockTrainingState.currentPosition!}\n          onComplete={jest.fn()}\n        />,\n      );\n\n      const moveTrigger = screen.getByTestId(\"piece-drop-trigger\");\n      fireEvent.click(moveTrigger);\n\n      await waitFor(() => {\n        expect(mockMakeMove).toHaveBeenCalled();\n        // The component should still be rendered despite the error\n        expect(screen.getByTestId(\"training-board\")).toBeInTheDocument();\n      });\n    });\n\n    it(\"handles position analysis errors\", () => {\n      // Mock position analysis to have an error\n      mockUsePositionAnalysis.mockReturnValue({\n        evaluations: [],\n        lastEvaluation: null,\n        isEvaluating: false,\n        error: \"Failed to analyze position\",\n        addEvaluation: jest.fn(),\n        clearEvaluations: jest.fn(),\n      });\n\n      renderWithStoreProvider(\n        <TrainingBoard\n          position={mockTrainingState.currentPosition!}\n          onComplete={jest.fn()}\n        />,\n      );\n\n      // Should render despite analysis error\n      expect(screen.getByTestId(\"training-board\")).toBeInTheDocument();\n      expect(screen.getByTestId(\"mock-chessboard\")).toBeInTheDocument();\n    });\n  });\n\n  describe(\"Accessibility\", () => {\n    it(\"provides accessible board structure\", () => {\n      renderWithStoreProvider(\n        <TrainingBoard\n          position={mockTrainingState.currentPosition!}\n          onComplete={jest.fn()}\n        />,\n      );\n\n      const wrapper = screen.getByTestId(\"training-board\");\n      const chessboard = screen.getByTestId(\"mock-chessboard\");\n\n      // Both components should be rendered and accessible\n      expect(wrapper).toBeInTheDocument();\n      expect(chessboard).toBeInTheDocument();\n    });\n\n    it(\"provides proper data attributes for testing\", () => {\n      renderWithStoreProvider(\n        <TrainingBoard\n          position={mockTrainingState.currentPosition!}\n          onComplete={jest.fn()}\n        />,\n      );\n\n      const wrapper = screen.getByTestId(\"training-board\");\n\n      // Check data attributes used for testing and debugging\n      expect(wrapper).toHaveAttribute(\"data-testid\", \"training-board\");\n      expect(wrapper).toHaveAttribute(\"data-fen\");\n      expect(wrapper).toHaveAttribute(\"data-analysis-status\");\n    });\n  });\n\n  // Helper function to render TrainingBoard with StoreProvider\n  /**\n   *\n   * @param ui\n   */\n  const renderWithStoreProvider = (ui: React.ReactElement) => {\n    return render(<StoreProvider>{ui}</StoreProvider>);\n  };\n});\n"],"names":["jest","mock","Chessboard","fn","onPieceDrop","fen","arePiecesDraggable","boardWidth","div","data-testid","data-fen","data-draggable","data-width","button","onClick","disabled","mockUseTrainingStore","useTrainingStore","mockUseGameStore","useGameStore","mockUseTablebaseStore","useTablebaseStore","mockUseUIStore","useUIStore","mockUseTrainingSession","useTrainingSession","mockUsePositionAnalysis","usePositionAnalysis","describe","mockTrainingState","currentPosition","id","title","description","difficulty","category","colorToTrain","targetOutcome","nextPosition","previousPosition","isLoadingNavigation","navigationError","chapterProgress","isPlayerTurn","isOpponentThinking","isSuccess","sessionStartTime","undefined","sessionEndTime","hintsUsed","mistakeCount","moveErrorDialog","moveSuccessDialog","evaluationBaseline","mockTrainingActions","setPosition","setNavigationPositions","setNavigationLoading","setNavigationError","setChapterProgress","setPlayerTurn","clearOpponentThinking","completeTraining","incrementHint","incrementMistake","setMoveErrorDialog","setMoveSuccessDialog","addTrainingMove","resetTraining","resetPosition","setEvaluationBaseline","clearEvaluationBaseline","handlePlayerMove","loadTrainingContext","mockGameState","currentFen","currentPgn","moveHistory","currentMoveIndex","isGameFinished","gameResult","isCheckmate","isDraw","isStalemate","mockGameActions","updatePosition","addMove","setMoveHistory","setCurrentMoveIndex","setGameFinished","setGameStatus","resetGame","initializeGame","makeMove","undoMove","redoMove","goToMove","goToFirst","goToPrevious","goToNext","goToLast","setCurrentFen","mockTablebaseState","tablebaseMove","analysisStatus","evaluations","currentEvaluation","mockTablebaseActions","setTablebaseMove","setAnalysisStatus","addEvaluation","setEvaluations","setCurrentEvaluation","clearTablebaseState","mockUIState","isSidebarOpen","currentModal","toasts","loading","global","tablebase","position","analysis","analysisPanel","isOpen","activeTab","showTablebase","mockUIActions","toggleSidebar","setIsSidebarOpen","openModal","closeModal","showToast","removeToast","setLoading","updateAnalysisPanel","mockMakeMove","mockResolvedValue","mockUndoMove","mockJumpToMove","mockResetGame","beforeEach","clearAllMocks","mockReturnValue","game","history","jumpToMove","lastEvaluation","isEvaluating","error","clearEvaluations","it","renderWithStoreProvider","TrainingBoard","onComplete","wrapper","screen","getByTestId","expect","toBeInTheDocument","toHaveAttribute","chessboard","queryByTestId","moveTrigger","fireEvent","click","waitFor","toHaveBeenCalledWith","from","to","promotion","stateWithError","wdlBefore","wdlAfter","bestMove","toBeDefined","stateWithSuccess","promotionPiece","moveDescription","toBeDisabled","promotionPosition","rerender","newFen","StoreProvider","mockRejectedValueOnce","Error","toHaveBeenCalled","ui","render"],"mappings":"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"}