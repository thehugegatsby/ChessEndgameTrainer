f695fe861e81a3bdc4c0c2ad24a6a38b
/**
 * @file E2E-specific mocks for TablebaseService
 * @module services/TablebaseService.e2e.mocks
 *
 * @description
 * Provides realistic mock implementations for the Lichess Tablebase API
 * specifically designed for end-to-end testing. Contains pre-defined
 * responses for common chess endgame positions used in E2E test scenarios.
 *
 * @remarks
 * Key features:
 * - Realistic Lichess API response simulation
 * - Pre-defined responses for specific test positions
 * - Pattern-based matching for position variations
 * - Browser environment fetch mocking
 * - Comprehensive logging for test debugging
 * - Fallback handling for unmocked positions
 *
 * The mocks are based on actual E2E test patterns and provide accurate
 * tablebase evaluations for king and pawn endgame scenarios, ensuring
 * predictable test behavior across different test runs.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get E2E_TABLEBASE_MOCKS () {
        return E2E_TABLEBASE_MOCKS;
    },
    get createE2ETablebaseFetchMock () {
        return createE2ETablebaseFetchMock;
    },
    get setupE2ETablebaseMocks () {
        return setupE2ETablebaseMocks;
    }
});
const _logging = require("./logging");
const logger = (0, _logging.getLogger)().setContext("TablebaseE2EMocks");
const E2E_TABLEBASE_MOCKS = {
    // Initial position: King and pawn vs King (White to move)
    // FEN: "4k3/8/4K3/4P3/8/8/8/8 w - - 0 1" (matches test line 66)
    "4k3/8/4K3/4P3/8/8/8/8 w - - 0 1": {
        category: "win",
        wdl: 2,
        dtz: 17,
        dtm: null,
        precise: true,
        moves: [
            {
                uci: "e6d6",
                move: "e6d6",
                san: "Kd6",
                dtz: 14,
                dtm: null,
                wdl: 2,
                category: "win"
            },
            {
                uci: "e6f6",
                move: "e6f6",
                san: "Kf6",
                dtz: 18,
                dtm: null,
                wdl: 2,
                category: "win"
            }
        ]
    },
    // After Kd6 (Black to move) - should be loss for Black = win for White
    // FEN: "4k3/8/3K4/4P3/8/8/8/8 b - - 1 1" (matches test line 47)
    "4k3/8/3K4/4P3/8/8/8/8 b - - 1 1": {
        category: "loss",
        wdl: -2,
        dtz: -14,
        dtm: null,
        precise: true,
        moves: [
            {
                uci: "e8d7",
                move: "e8d7",
                san: "Kd7",
                dtz: -13,
                dtm: null,
                wdl: -2,
                category: "loss"
            },
            {
                uci: "e8f8",
                move: "e8f8",
                san: "Kf8",
                dtz: -15,
                dtm: null,
                wdl: -2,
                category: "loss"
            }
        ]
    },
    // After Kf6 (Black to move) - should also be loss for Black = win for White
    // FEN: "4k3/8/5K2/4P3/8/8/8/8 b - - 1 1"
    "4k3/8/5K2/4P3/8/8/8/8 b - - 1 1": {
        category: "loss",
        wdl: -2,
        dtz: -18,
        dtm: null,
        precise: true,
        moves: [
            {
                uci: "e8d8",
                move: "e8d8",
                san: "Kd8",
                dtz: -17,
                dtm: null,
                wdl: -2,
                category: "loss"
            },
            {
                uci: "e8f7",
                move: "e8f7",
                san: "Kf7",
                dtz: -19,
                dtm: null,
                wdl: -2,
                category: "loss"
            }
        ]
    },
    // After Kd5 (Black to move) - should be draw
    // FEN: "4k3/8/8/3K1P2/8/8/8/8 b - - 1 1"
    "4k3/8/8/3K1P2/8/8/8/8 b - - 1 1": {
        category: "draw",
        wdl: 0,
        dtz: 0,
        dtm: null,
        precise: true,
        moves: [
            {
                uci: "e8d7",
                move: "e8d7",
                san: "Kd7",
                dtz: 0,
                dtm: null,
                wdl: 0,
                category: "draw"
            },
            {
                uci: "e8e7",
                move: "e8e7",
                san: "Ke7",
                dtz: 0,
                dtm: null,
                wdl: 0,
                category: "draw"
            },
            {
                uci: "e8f7",
                move: "e8f7",
                san: "Kf7",
                dtz: 0,
                dtm: null,
                wdl: 0,
                category: "draw"
            }
        ]
    },
    // After Kf5 (Black to move) - should be draw
    // FEN: "4k3/8/8/4PK2/8/8/8/8 b - - 1 1"
    "4k3/8/8/4PK2/8/8/8/8 b - - 1 1": {
        category: "draw",
        wdl: 0,
        dtz: 0,
        dtm: null,
        precise: true,
        moves: [
            {
                uci: "e8d7",
                move: "e8d7",
                san: "Kd7",
                dtz: 0,
                dtm: null,
                wdl: 0,
                category: "draw"
            },
            {
                uci: "e8e7",
                move: "e8e7",
                san: "Ke7",
                dtz: 0,
                dtm: null,
                wdl: 0,
                category: "draw"
            },
            {
                uci: "e8f7",
                move: "e8f7",
                san: "Kf7",
                dtz: 0,
                dtm: null,
                wdl: 0,
                category: "draw"
            }
        ]
    }
};
function createE2ETablebaseFetchMock() {
    return jest.fn((url)=>{
        if (url.includes("lichess.org/api/tablebase/standard")) {
            // Extract FEN from URL
            const urlObj = new URL(url);
            const fen = urlObj.searchParams.get("fen");
            if (fen && E2E_TABLEBASE_MOCKS[fen]) {
                const mockData = E2E_TABLEBASE_MOCKS[fen];
                return Promise.resolve({
                    ok: true,
                    /**
           *
           */ json: ()=>Promise.resolve(mockData),
                    status: 200,
                    statusText: "OK"
                });
            }
        }
        // Fallback for unmocked positions
        return Promise.resolve({
            ok: false,
            status: 404,
            statusText: "Not Found",
            /**
       *
       */ json: ()=>Promise.resolve({
                    error: "Position not found"
                })
        });
    });
}
function setupE2ETablebaseMocks() {
    if (typeof window !== "undefined" && process.env.NEXT_PUBLIC_IS_E2E_TEST === "true") {
        logger.info("ðŸ§ª Setting up E2E Tablebase mocks");
        // Override fetch for E2E tests
        const originalFetch = window.fetch;
        window.fetch = (url, init)=>{
            const urlString = typeof url === "string" ? url : url.url;
            if (urlString.includes("lichess.org/api/tablebase/standard") || urlString.includes("tablebase.lichess.ovh/standard")) {
                const urlObj = new URL(urlString);
                const fen = urlObj.searchParams.get("fen");
                logger.debug("ðŸ§ª E2E Tablebase mock intercepted FEN:", fen);
                if (fen) {
                    // First try exact match
                    if (E2E_TABLEBASE_MOCKS[fen]) {
                        const mockData = E2E_TABLEBASE_MOCKS[fen];
                        logger.debug("ðŸ§ª E2E Tablebase mock returning (exact):", mockData);
                        return Promise.resolve(new Response(JSON.stringify(mockData), {
                            status: 200,
                            statusText: "OK",
                            headers: {
                                "Content-Type": "application/json"
                            }
                        }));
                    }
                    // Then try partial match based on the patterns from E2E test
                    let mockData = null;
                    // After Kd6 pattern (test line 47)
                    if (fen.includes("4k3/8/3K4/4P3")) {
                        mockData = {
                            category: "loss",
                            wdl: -2,
                            dtz: -14,
                            dtm: null,
                            precise: true,
                            moves: [
                                {
                                    uci: "e8d7",
                                    move: "e8d7",
                                    san: "Kd7",
                                    dtz: -13,
                                    dtm: null,
                                    wdl: -2,
                                    category: "loss"
                                },
                                {
                                    uci: "e8f8",
                                    move: "e8f8",
                                    san: "Kf8",
                                    dtz: -15,
                                    dtm: null,
                                    wdl: -2,
                                    category: "loss"
                                }
                            ]
                        };
                    } else if (fen.includes("4k3/8/4K3/4P3")) {
                        mockData = {
                            category: "win",
                            wdl: 2,
                            dtz: 17,
                            dtm: null,
                            precise: true,
                            moves: [
                                {
                                    uci: "e6d6",
                                    move: "e6d6",
                                    san: "Kd6",
                                    dtz: 14,
                                    dtm: null,
                                    wdl: 2,
                                    category: "win"
                                },
                                {
                                    uci: "e6f6",
                                    move: "e6f6",
                                    san: "Kf6",
                                    dtz: 18,
                                    dtm: null,
                                    wdl: 2,
                                    category: "win"
                                }
                            ]
                        };
                    } else if (fen.includes("4k3/8/5K2/4P3")) {
                        mockData = {
                            category: "loss",
                            wdl: -2,
                            dtz: -18,
                            dtm: null,
                            precise: true,
                            moves: [
                                {
                                    uci: "e8d8",
                                    move: "e8d8",
                                    san: "Kd8",
                                    dtz: -17,
                                    dtm: null,
                                    wdl: -2,
                                    category: "loss"
                                },
                                {
                                    uci: "e8f7",
                                    move: "e8f7",
                                    san: "Kf7",
                                    dtz: -19,
                                    dtm: null,
                                    wdl: -2,
                                    category: "loss"
                                }
                            ]
                        };
                    }
                    if (mockData) {
                        logger.debug("ðŸ§ª E2E Tablebase mock returning (pattern):", mockData);
                        return Promise.resolve(new Response(JSON.stringify(mockData), {
                            status: 200,
                            statusText: "OK",
                            headers: {
                                "Content-Type": "application/json"
                            }
                        }));
                    }
                }
                // Fallback for unmocked positions
                logger.debug("ðŸ§ª E2E Tablebase mock - no match found for FEN:", fen);
                return Promise.resolve(new Response(JSON.stringify({
                    category: "unknown",
                    wdl: 0,
                    dtz: 0,
                    dtm: null,
                    error: "Position not found in E2E mocks"
                }), {
                    status: 404,
                    statusText: "Not Found"
                }));
            }
            // Use original fetch for other requests
            return originalFetch(url, init);
        };
    }
}

//# sourceMappingURL=data:application/json;base64,