{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/TablebaseService.e2e.mocks.ts"],"sourcesContent":["/**\n * @file E2E-specific mocks for TablebaseService\n * @module services/TablebaseService.e2e.mocks\n *\n * @description\n * Provides realistic mock implementations for the Lichess Tablebase API\n * specifically designed for end-to-end testing. Contains pre-defined\n * responses for common chess endgame positions used in E2E test scenarios.\n *\n * @remarks\n * Key features:\n * - Realistic Lichess API response simulation\n * - Pre-defined responses for specific test positions\n * - Pattern-based matching for position variations\n * - Browser environment fetch mocking\n * - Comprehensive logging for test debugging\n * - Fallback handling for unmocked positions\n *\n * The mocks are based on actual E2E test patterns and provide accurate\n * tablebase evaluations for king and pawn endgame scenarios, ensuring\n * predictable test behavior across different test runs.\n */\n\nimport { getLogger } from \"./logging\";\n\nconst logger = getLogger().setContext(\"TablebaseE2EMocks\");\n\n/**\n * E2E tablebase mock responses for specific chess positions\n *\n * @description\n * Pre-defined mock responses that match real Lichess API data structure.\n * Based on E2E test patterns from actual-position-test.spec.ts and provides\n * accurate tablebase evaluations for king and pawn endgame scenarios.\n *\n * @remarks\n * Response structure matches Lichess API:\n * - category: 'win', 'loss', 'draw', or 'unknown'\n * - wdl: Win/Draw/Loss value (-2 to +2)\n * - dtz: Distance to zero (moves to conversion or mate)\n * - dtm: Distance to mate (usually null for endgames)\n * - precise: Whether the evaluation is exact\n *\n * @example\n * ```typescript\n * const response = E2E_TABLEBASE_MOCKS['4k3/8/4K3/4P3/8/8/8/8 w - - 0 1'];\n * // { category: 'win', wdl: 2, dtz: 17, dtm: null, precise: true }\n * ```\n */\nexport const E2E_TABLEBASE_MOCKS: Record<string, any> = {\n  // Initial position: King and pawn vs King (White to move)\n  // FEN: \"4k3/8/4K3/4P3/8/8/8/8 w - - 0 1\" (matches test line 66)\n  \"4k3/8/4K3/4P3/8/8/8/8 w - - 0 1\": {\n    category: \"win\",\n    wdl: 2,\n    dtz: 17,\n    dtm: null,\n    precise: true,\n    moves: [\n      {\n        uci: \"e6d6\",\n        move: \"e6d6\",\n        san: \"Kd6\",\n        dtz: 14,\n        dtm: null,\n        wdl: 2,\n        category: \"win\"\n      },\n      {\n        uci: \"e6f6\",\n        move: \"e6f6\",\n        san: \"Kf6\",\n        dtz: 18,\n        dtm: null,\n        wdl: 2,\n        category: \"win\"\n      }\n    ]\n  },\n\n  // After Kd6 (Black to move) - should be loss for Black = win for White\n  // FEN: \"4k3/8/3K4/4P3/8/8/8/8 b - - 1 1\" (matches test line 47)\n  \"4k3/8/3K4/4P3/8/8/8/8 b - - 1 1\": {\n    category: \"loss\", // Loss for Black (current player) = Win for White\n    wdl: -2,\n    dtz: -14,\n    dtm: null,\n    precise: true,\n    moves: [\n      {\n        uci: \"e8d7\",\n        move: \"e8d7\",\n        san: \"Kd7\",\n        dtz: -13,\n        dtm: null,\n        wdl: -2,\n        category: \"loss\"\n      },\n      {\n        uci: \"e8f8\",\n        move: \"e8f8\",\n        san: \"Kf8\",\n        dtz: -15,\n        dtm: null,\n        wdl: -2,\n        category: \"loss\"\n      }\n    ]\n  },\n\n  // After Kf6 (Black to move) - should also be loss for Black = win for White\n  // FEN: \"4k3/8/5K2/4P3/8/8/8/8 b - - 1 1\"\n  \"4k3/8/5K2/4P3/8/8/8/8 b - - 1 1\": {\n    category: \"loss\", // Loss for Black (current player) = Win for White\n    wdl: -2,\n    dtz: -18,\n    dtm: null,\n    precise: true,\n    moves: [\n      {\n        uci: \"e8d8\",\n        move: \"e8d8\",\n        san: \"Kd8\",\n        dtz: -17,\n        dtm: null,\n        wdl: -2,\n        category: \"loss\"\n      },\n      {\n        uci: \"e8f7\",\n        move: \"e8f7\",\n        san: \"Kf7\",\n        dtz: -19,\n        dtm: null,\n        wdl: -2,\n        category: \"loss\"\n      }\n    ]\n  },\n\n  // After Kd5 (Black to move) - should be draw\n  // FEN: \"4k3/8/8/3K1P2/8/8/8/8 b - - 1 1\"\n  \"4k3/8/8/3K1P2/8/8/8/8 b - - 1 1\": {\n    category: \"draw\",\n    wdl: 0,\n    dtz: 0,\n    dtm: null,\n    precise: true,\n    moves: [\n      {\n        uci: \"e8d7\",\n        move: \"e8d7\",\n        san: \"Kd7\",\n        dtz: 0,\n        dtm: null,\n        wdl: 0,\n        category: \"draw\"\n      },\n      {\n        uci: \"e8e7\",\n        move: \"e8e7\",\n        san: \"Ke7\",\n        dtz: 0,\n        dtm: null,\n        wdl: 0,\n        category: \"draw\"\n      },\n      {\n        uci: \"e8f7\",\n        move: \"e8f7\",\n        san: \"Kf7\",\n        dtz: 0,\n        dtm: null,\n        wdl: 0,\n        category: \"draw\"\n      }\n    ]\n  },\n\n  // After Kf5 (Black to move) - should be draw\n  // FEN: \"4k3/8/8/4PK2/8/8/8/8 b - - 1 1\"\n  \"4k3/8/8/4PK2/8/8/8/8 b - - 1 1\": {\n    category: \"draw\",\n    wdl: 0,\n    dtz: 0,\n    dtm: null,\n    precise: true,\n    moves: [\n      {\n        uci: \"e8d7\",\n        move: \"e8d7\",\n        san: \"Kd7\",\n        dtz: 0,\n        dtm: null,\n        wdl: 0,\n        category: \"draw\"\n      },\n      {\n        uci: \"e8e7\",\n        move: \"e8e7\",\n        san: \"Ke7\",\n        dtz: 0,\n        dtm: null,\n        wdl: 0,\n        category: \"draw\"\n      },\n      {\n        uci: \"e8f7\",\n        move: \"e8f7\",\n        san: \"Kf7\",\n        dtz: 0,\n        dtm: null,\n        wdl: 0,\n        category: \"draw\"\n      }\n    ]\n  },\n};\n\n/**\n * Create fetch mock for E2E tests that returns realistic tablebase data\n *\n * @description\n * Creates a Jest mock function that intercepts fetch requests to the\n * Lichess tablebase API and returns pre-defined mock responses. Designed\n * specifically for unit and integration testing environments.\n *\n * @returns {jest.Mock} Jest mock function configured for tablebase API testing\n *\n * @example\n * ```typescript\n * // In test setup\n * global.fetch = createE2ETablebaseFetchMock();\n *\n * // Test will use mock responses\n * const response = await fetch('https://lichess.org/api/tablebase/standard?fen=...');\n * expect(response.ok).toBe(true);\n * ```\n */\nexport function createE2ETablebaseFetchMock() {\n  return jest.fn((url: string) => {\n    if (url.includes(\"lichess.org/api/tablebase/standard\")) {\n      // Extract FEN from URL\n      const urlObj = new URL(url);\n      const fen = urlObj.searchParams.get(\"fen\");\n\n      if (fen && E2E_TABLEBASE_MOCKS[fen]) {\n        const mockData = E2E_TABLEBASE_MOCKS[fen];\n        return Promise.resolve({\n          ok: true,\n          /**\n           *\n           */\n          json: () => Promise.resolve(mockData),\n          status: 200,\n          statusText: \"OK\",\n        });\n      }\n    }\n\n    // Fallback for unmocked positions\n    return Promise.resolve({\n      ok: false,\n      status: 404,\n      statusText: \"Not Found\",\n      /**\n       *\n       */\n      json: () => Promise.resolve({ error: \"Position not found\" }),\n    });\n  });\n}\n\n/**\n * Setup E2E mocks for browser environment\n *\n * @description\n * Sets up fetch mocking in the browser environment for E2E tests.\n * Intercepts requests to Lichess tablebase API and returns mock responses\n * based on pre-defined position data. Only activates in E2E test mode.\n *\n * @remarks\n * Browser environment setup:\n * - Only runs when NEXT_PUBLIC_IS_E2E_TEST is true\n * - Preserves original fetch for non-tablebase requests\n * - Provides comprehensive logging for debugging\n * - Supports both exact and pattern-based FEN matching\n * - Graceful fallback for unmocked positions\n *\n * @example\n * ```typescript\n * // Call during app initialization in E2E mode\n * setupE2ETablebaseMocks();\n *\n * // Now all tablebase API calls will use mocks\n * const evaluation = await tablebaseService.getEvaluation(fen);\n * ```\n */\nexport function setupE2ETablebaseMocks() {\n  if (\n    typeof window !== \"undefined\" &&\n    process.env.NEXT_PUBLIC_IS_E2E_TEST === \"true\"\n  ) {\n    logger.info(\"ðŸ§ª Setting up E2E Tablebase mocks\");\n\n    // Override fetch for E2E tests\n    const originalFetch = window.fetch;\n\n    window.fetch = ((url: string | Request, init?: RequestInit) => {\n      const urlString = typeof url === \"string\" ? url : url.url;\n\n      if (\n        urlString.includes(\"lichess.org/api/tablebase/standard\") ||\n        urlString.includes(\"tablebase.lichess.ovh/standard\")\n      ) {\n        const urlObj = new URL(urlString);\n        const fen = urlObj.searchParams.get(\"fen\");\n\n        logger.debug(\"ðŸ§ª E2E Tablebase mock intercepted FEN:\", fen);\n\n        if (fen) {\n          // First try exact match\n          if (E2E_TABLEBASE_MOCKS[fen]) {\n            const mockData = E2E_TABLEBASE_MOCKS[fen];\n            logger.debug(\"ðŸ§ª E2E Tablebase mock returning (exact):\", mockData);\n            return Promise.resolve(\n              new Response(JSON.stringify(mockData), {\n                status: 200,\n                statusText: \"OK\",\n                headers: { \"Content-Type\": \"application/json\" },\n              }),\n            );\n          }\n\n          // Then try partial match based on the patterns from E2E test\n          let mockData: any = null;\n\n          // After Kd6 pattern (test line 47)\n          if (fen.includes(\"4k3/8/3K4/4P3\")) {\n            mockData = {\n              category: \"loss\", // Loss for Black = Win for White\n              wdl: -2,\n              dtz: -14,\n              dtm: null,\n              precise: true,\n              moves: [\n                {\n                  uci: \"e8d7\",\n                  move: \"e8d7\",\n                  san: \"Kd7\",\n                  dtz: -13,\n                  dtm: null,\n                  wdl: -2,\n                  category: \"loss\"\n                },\n                {\n                  uci: \"e8f8\",\n                  move: \"e8f8\",\n                  san: \"Kf8\",\n                  dtz: -15,\n                  dtm: null,\n                  wdl: -2,\n                  category: \"loss\"\n                }\n              ]\n            };\n          }\n          // Initial position pattern (test line 66)\n          else if (fen.includes(\"4k3/8/4K3/4P3\")) {\n            mockData = {\n              category: \"win\",\n              wdl: 2,\n              dtz: 17,\n              dtm: null,\n              precise: true,\n              moves: [\n                {\n                  uci: \"e6d6\",\n                  move: \"e6d6\",\n                  san: \"Kd6\",\n                  dtz: 14,\n                  dtm: null,\n                  wdl: 2,\n                  category: \"win\"\n                },\n                {\n                  uci: \"e6f6\",\n                  move: \"e6f6\",\n                  san: \"Kf6\",\n                  dtz: 18,\n                  dtm: null,\n                  wdl: 2,\n                  category: \"win\"\n                }\n              ]\n            };\n          }\n          // After Kf6 pattern\n          else if (fen.includes(\"4k3/8/5K2/4P3\")) {\n            mockData = {\n              category: \"loss\", // Loss for Black = Win for White\n              wdl: -2,\n              dtz: -18,\n              dtm: null,\n              precise: true,\n              moves: [\n                {\n                  uci: \"e8d8\",\n                  move: \"e8d8\",\n                  san: \"Kd8\",\n                  dtz: -17,\n                  dtm: null,\n                  wdl: -2,\n                  category: \"loss\"\n                },\n                {\n                  uci: \"e8f7\",\n                  move: \"e8f7\",\n                  san: \"Kf7\",\n                  dtz: -19,\n                  dtm: null,\n                  wdl: -2,\n                  category: \"loss\"\n                }\n              ]\n            };\n          }\n\n          if (mockData) {\n            logger.debug(\n              \"ðŸ§ª E2E Tablebase mock returning (pattern):\",\n              mockData,\n            );\n            return Promise.resolve(\n              new Response(JSON.stringify(mockData), {\n                status: 200,\n                statusText: \"OK\",\n                headers: { \"Content-Type\": \"application/json\" },\n              }),\n            );\n          }\n        }\n\n        // Fallback for unmocked positions\n        logger.debug(\"ðŸ§ª E2E Tablebase mock - no match found for FEN:\", fen);\n        return Promise.resolve(\n          new Response(\n            JSON.stringify({\n              category: \"unknown\",\n              wdl: 0,\n              dtz: 0,\n              dtm: null,\n              error: \"Position not found in E2E mocks\",\n            }),\n            {\n              status: 404,\n              statusText: \"Not Found\",\n            },\n          ),\n        );\n      }\n\n      // Use original fetch for other requests\n      return originalFetch(url, init);\n    }) as typeof fetch;\n  }\n}\n"],"names":["E2E_TABLEBASE_MOCKS","createE2ETablebaseFetchMock","setupE2ETablebaseMocks","logger","getLogger","setContext","category","wdl","dtz","dtm","precise","moves","uci","move","san","jest","fn","url","includes","urlObj","URL","fen","searchParams","get","mockData","Promise","resolve","ok","json","status","statusText","error","window","process","env","NEXT_PUBLIC_IS_E2E_TEST","info","originalFetch","fetch","init","urlString","debug","Response","JSON","stringify","headers"],"mappings":"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"}