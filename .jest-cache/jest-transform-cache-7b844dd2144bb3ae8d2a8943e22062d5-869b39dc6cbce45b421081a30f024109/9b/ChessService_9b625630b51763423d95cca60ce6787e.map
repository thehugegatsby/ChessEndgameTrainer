{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/__mocks__/ChessService.ts"],"sourcesContent":["/**\n * Mock ChessService for testing\n * Simulates chess move validation and game state management\n */\n\nimport { EventEmitter } from \"events\";\nimport type { ValidatedMove, Square } from \"@shared/types\";\n\nclass MockChessService extends EventEmitter {\n  private fen: string =\n    \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n  private pgn: string = \"\";\n  private moveHistory: ValidatedMove[] = [];\n  private isFinished: boolean = false;\n  private currentMoveIndex: number = -1;\n\n  constructor() {\n    super();\n    // Increase max listeners to prevent warnings in tests\n    this.setMaxListeners(50);\n  }\n\n  initialize(fen: string): boolean {\n    this.fen = fen;\n    this.pgn = \"\";\n    this.moveHistory = [];\n    this.isFinished = false;\n    this.currentMoveIndex = -1;\n\n    // Emit stateUpdate event with proper payload\n    this.emit(\"stateUpdate\", {\n      type: \"stateUpdate\",\n      payload: {\n        fen: this.fen,\n        pgn: this.pgn,\n        moveHistory: this.moveHistory,\n        currentMoveIndex: this.currentMoveIndex,\n        isGameOver: this.isFinished,\n        gameResult: null,\n      },\n    });\n\n    return true;\n  }\n\n  move(\n    move: { from: string; to: string; promotion?: string } | string,\n  ): ValidatedMove | null {\n    // Generate SAN based on the actual move\n    let san: string;\n    let from: string;\n    let to: string;\n\n    if (typeof move === \"string\") {\n      san = move;\n      from = \"e2\";\n      to = \"e4\";\n    } else {\n      from = move.from;\n      to = move.to;\n\n      // Generate proper SAN based on the move\n      // For simplicity in tests, assume King moves (most common in endgames)\n      // Generate SAN like \"Ke2\" where the destination square is used\n      san = `K${to}`;\n    }\n\n    // Simulate a successful move\n    const validatedMove: ValidatedMove = {\n      from: from as Square,\n      to: to as Square,\n      san: san,\n      piece: \"k\",\n      color: \"w\",\n      flags: \"\",\n      lan: `${from}${to}`,\n      fenBefore: this.fen,\n      fenAfter: this.fen, // In reality this would change\n      // Helper methods\n      isCapture: () => false,\n      isPromotion: () => false,\n      isEnPassant: () => false,\n      isKingsideCastle: () => false,\n      isQueensideCastle: () => false,\n      isBigPawn: () => false,\n    } as ValidatedMove;\n\n    // Create a new array to avoid mutation issues with Immer\n    this.moveHistory = [...this.moveHistory, validatedMove];\n    this.currentMoveIndex = this.moveHistory.length - 1;\n\n    // Emit stateUpdate event with proper payload\n    this.emit(\"stateUpdate\", {\n      type: \"stateUpdate\",\n      payload: {\n        fen: this.fen,\n        pgn: this.getPgn(),\n        moveHistory: this.moveHistory,\n        currentMoveIndex: this.currentMoveIndex,\n        isGameOver: this.isFinished,\n        gameResult: null,\n      },\n    });\n\n    return validatedMove;\n  }\n\n  undo(): ValidatedMove | null {\n    if (this.moveHistory.length === 0) return null;\n\n    const lastMove = this.moveHistory.pop();\n    this.emit(\"undo\", lastMove);\n    this.emit(\"stateChange\");\n    return lastMove || null;\n  }\n\n  reset(): void {\n    this.moveHistory = [];\n    this.currentMoveIndex = -1;\n    this.isFinished = false;\n\n    // Emit stateUpdate event with proper payload\n    this.emit(\"stateUpdate\", {\n      type: \"stateUpdate\",\n      payload: {\n        fen: this.fen,\n        pgn: \"\",\n        moveHistory: this.moveHistory,\n        currentMoveIndex: this.currentMoveIndex,\n        isGameOver: this.isFinished,\n        gameResult: null,\n      },\n    });\n  }\n\n  goToMove(index: number): void {\n    // Simulate going to a specific move\n    this.currentMoveIndex = index;\n\n    // Emit stateUpdate event with proper payload\n    this.emit(\"stateUpdate\", {\n      type: \"stateUpdate\",\n      payload: {\n        fen: this.fen,\n        pgn: this.getPgn(),\n        moveHistory: this.moveHistory,\n        currentMoveIndex: this.currentMoveIndex,\n        isGameOver: this.isFinished,\n        gameResult: null,\n      },\n    });\n  }\n\n  getFen(): string {\n    return this.fen;\n  }\n\n  getPgn(): string {\n    // Generate simple PGN from move history\n    if (this.moveHistory.length > 0) {\n      const moves = this.moveHistory\n        .map((m, i) => {\n          const moveNum = Math.floor(i / 2) + 1;\n          return i % 2 === 0 ? `${moveNum}. ${m.san}` : m.san;\n        })\n        .join(\" \");\n      // Return formatted PGN with starting position\n      return `[FEN \"${this.fen}\"] ${moves}`;\n    }\n    return this.pgn || \"\";\n  }\n\n  getHistory(): ValidatedMove[] {\n    return this.moveHistory;\n  }\n\n  isGameOver(): boolean {\n    return this.isFinished;\n  }\n\n  isCheck(): boolean {\n    return false;\n  }\n\n  isCheckmate(): boolean {\n    return false;\n  }\n\n  isStalemate(): boolean {\n    return false;\n  }\n\n  isDraw(): boolean {\n    return false;\n  }\n\n  turn(): \"w\" | \"b\" {\n    return \"w\";\n  }\n\n  getCurrentMoveIndex(): number {\n    return this.currentMoveIndex !== undefined\n      ? this.currentMoveIndex\n      : this.moveHistory.length - 1;\n  }\n\n  validateFen(_fen: string): boolean {\n    return true;\n  }\n\n  validateMove(_move: any): boolean {\n    return true;\n  }\n\n  redo(): ValidatedMove | null {\n    // Simple redo implementation\n    return null;\n  }\n\n  moves(options?: { square?: string; verbose?: boolean }): any[] {\n    // Simple implementation for testing\n    if (options?.verbose) {\n      return [];\n    }\n    return [];\n  }\n\n  getSquare(_square: string): { type: string; color: \"w\" | \"b\" } | null {\n    return null;\n  }\n\n  getLegalMoves(_square?: string): string[] {\n    return [];\n  }\n\n  onMove(callback: (move: ValidatedMove) => void): void {\n    this.on(\"move\", callback);\n  }\n\n  onUndo(callback: (move: ValidatedMove) => void): void {\n    this.on(\"undo\", callback);\n  }\n\n  onStateChange(callback: () => void): void {\n    this.on(\"stateChange\", callback);\n  }\n\n  removeAllListeners(): this {\n    super.removeAllListeners();\n    return this;\n  }\n\n  // Subscribe method for rootStore\n  subscribe(callback: (event: any) => void): () => void {\n    // Forward stateUpdate events properly\n    const handleStateUpdate = (event: any) => {\n      // If event already has the correct structure, pass it through\n      if (event && event.type === \"stateUpdate\") {\n        callback(event);\n      } else {\n        // Otherwise create the proper structure\n        callback({\n          type: \"stateUpdate\",\n          payload: {\n            fen: this.fen,\n            pgn: this.getPgn(),\n            moveHistory: this.moveHistory,\n            currentMoveIndex: this.getCurrentMoveIndex(),\n            isGameOver: this.isFinished,\n            gameResult: null,\n          },\n        });\n      }\n    };\n\n    this.on(\"stateUpdate\", handleStateUpdate);\n\n    // Return unsubscribe function\n    return () => {\n      this.off(\"stateUpdate\", handleStateUpdate);\n    };\n  }\n}\n\n// Export singleton instance\nexport const chessService = new MockChessService();\nexport default chessService;\n"],"names":["chessService","MockChessService","EventEmitter","initialize","fen","pgn","moveHistory","isFinished","currentMoveIndex","emit","type","payload","isGameOver","gameResult","move","san","from","to","validatedMove","piece","color","flags","lan","fenBefore","fenAfter","isCapture","isPromotion","isEnPassant","isKingsideCastle","isQueensideCastle","isBigPawn","length","getPgn","undo","lastMove","pop","reset","goToMove","index","getFen","moves","map","m","i","moveNum","Math","floor","join","getHistory","isCheck","isCheckmate","isStalemate","isDraw","turn","getCurrentMoveIndex","undefined","validateFen","_fen","validateMove","_move","redo","options","verbose","getSquare","_square","getLegalMoves","onMove","callback","on","onUndo","onStateChange","removeAllListeners","subscribe","handleStateUpdate","event","off","setMaxListeners"],"mappings":"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"}