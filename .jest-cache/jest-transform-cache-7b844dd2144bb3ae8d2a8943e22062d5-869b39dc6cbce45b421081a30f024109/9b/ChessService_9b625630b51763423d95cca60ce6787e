b60902de8c9386538d34dddf3781c4aa
/**
 * Mock ChessService for testing
 * Simulates chess move validation and game state management
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get chessService () {
        return chessService;
    },
    get default () {
        return _default;
    }
});
const _events = require("events");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
class MockChessService extends _events.EventEmitter {
    initialize(fen) {
        this.fen = fen;
        this.pgn = "";
        this.moveHistory = [];
        this.isFinished = false;
        this.currentMoveIndex = -1;
        // Emit stateUpdate event with proper payload
        this.emit("stateUpdate", {
            type: "stateUpdate",
            payload: {
                fen: this.fen,
                pgn: this.pgn,
                moveHistory: this.moveHistory,
                currentMoveIndex: this.currentMoveIndex,
                isGameOver: this.isFinished,
                gameResult: null
            }
        });
        return true;
    }
    move(move) {
        // Generate SAN based on the actual move
        let san;
        let from;
        let to;
        if (typeof move === "string") {
            san = move;
            from = "e2";
            to = "e4";
        } else {
            from = move.from;
            to = move.to;
            // Generate proper SAN based on the move
            // For simplicity in tests, assume King moves (most common in endgames)
            // Generate SAN like "Ke2" where the destination square is used
            san = `K${to}`;
        }
        // Simulate a successful move
        const validatedMove = {
            from: from,
            to: to,
            san: san,
            piece: "k",
            color: "w",
            flags: "",
            lan: `${from}${to}`,
            fenBefore: this.fen,
            fenAfter: this.fen,
            // Helper methods
            isCapture: ()=>false,
            isPromotion: ()=>false,
            isEnPassant: ()=>false,
            isKingsideCastle: ()=>false,
            isQueensideCastle: ()=>false,
            isBigPawn: ()=>false
        };
        // Create a new array to avoid mutation issues with Immer
        this.moveHistory = [
            ...this.moveHistory,
            validatedMove
        ];
        this.currentMoveIndex = this.moveHistory.length - 1;
        // Emit stateUpdate event with proper payload
        this.emit("stateUpdate", {
            type: "stateUpdate",
            payload: {
                fen: this.fen,
                pgn: this.getPgn(),
                moveHistory: this.moveHistory,
                currentMoveIndex: this.currentMoveIndex,
                isGameOver: this.isFinished,
                gameResult: null
            }
        });
        return validatedMove;
    }
    undo() {
        if (this.moveHistory.length === 0) return null;
        const lastMove = this.moveHistory.pop();
        this.emit("undo", lastMove);
        this.emit("stateChange");
        return lastMove || null;
    }
    reset() {
        this.moveHistory = [];
        this.currentMoveIndex = -1;
        this.isFinished = false;
        // Emit stateUpdate event with proper payload
        this.emit("stateUpdate", {
            type: "stateUpdate",
            payload: {
                fen: this.fen,
                pgn: "",
                moveHistory: this.moveHistory,
                currentMoveIndex: this.currentMoveIndex,
                isGameOver: this.isFinished,
                gameResult: null
            }
        });
    }
    goToMove(index) {
        // Simulate going to a specific move
        this.currentMoveIndex = index;
        // Emit stateUpdate event with proper payload
        this.emit("stateUpdate", {
            type: "stateUpdate",
            payload: {
                fen: this.fen,
                pgn: this.getPgn(),
                moveHistory: this.moveHistory,
                currentMoveIndex: this.currentMoveIndex,
                isGameOver: this.isFinished,
                gameResult: null
            }
        });
    }
    getFen() {
        return this.fen;
    }
    getPgn() {
        // Generate simple PGN from move history
        if (this.moveHistory.length > 0) {
            const moves = this.moveHistory.map((m, i)=>{
                const moveNum = Math.floor(i / 2) + 1;
                return i % 2 === 0 ? `${moveNum}. ${m.san}` : m.san;
            }).join(" ");
            // Return formatted PGN with starting position
            return `[FEN "${this.fen}"] ${moves}`;
        }
        return this.pgn || "";
    }
    getHistory() {
        return this.moveHistory;
    }
    isGameOver() {
        return this.isFinished;
    }
    isCheck() {
        return false;
    }
    isCheckmate() {
        return false;
    }
    isStalemate() {
        return false;
    }
    isDraw() {
        return false;
    }
    turn() {
        return "w";
    }
    getCurrentMoveIndex() {
        return this.currentMoveIndex !== undefined ? this.currentMoveIndex : this.moveHistory.length - 1;
    }
    validateFen(_fen) {
        return true;
    }
    validateMove(_move) {
        return true;
    }
    redo() {
        // Simple redo implementation
        return null;
    }
    moves(options) {
        // Simple implementation for testing
        if (options === null || options === void 0 ? void 0 : options.verbose) {
            return [];
        }
        return [];
    }
    getSquare(_square) {
        return null;
    }
    getLegalMoves(_square) {
        return [];
    }
    onMove(callback) {
        this.on("move", callback);
    }
    onUndo(callback) {
        this.on("undo", callback);
    }
    onStateChange(callback) {
        this.on("stateChange", callback);
    }
    removeAllListeners() {
        super.removeAllListeners();
        return this;
    }
    // Subscribe method for rootStore
    subscribe(callback) {
        // Forward stateUpdate events properly
        const handleStateUpdate = (event)=>{
            // If event already has the correct structure, pass it through
            if (event && event.type === "stateUpdate") {
                callback(event);
            } else {
                // Otherwise create the proper structure
                callback({
                    type: "stateUpdate",
                    payload: {
                        fen: this.fen,
                        pgn: this.getPgn(),
                        moveHistory: this.moveHistory,
                        currentMoveIndex: this.getCurrentMoveIndex(),
                        isGameOver: this.isFinished,
                        gameResult: null
                    }
                });
            }
        };
        this.on("stateUpdate", handleStateUpdate);
        // Return unsubscribe function
        return ()=>{
            this.off("stateUpdate", handleStateUpdate);
        };
    }
    constructor(){
        super(), _define_property(this, "fen", "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"), _define_property(this, "pgn", ""), _define_property(this, "moveHistory", []), _define_property(this, "isFinished", false), _define_property(this, "currentMoveIndex", -1);
        // Increase max listeners to prevent warnings in tests
        this.setMaxListeners(50);
    }
}
const chessService = new MockChessService();
const _default = chessService;

//# sourceMappingURL=data:application/json;base64,