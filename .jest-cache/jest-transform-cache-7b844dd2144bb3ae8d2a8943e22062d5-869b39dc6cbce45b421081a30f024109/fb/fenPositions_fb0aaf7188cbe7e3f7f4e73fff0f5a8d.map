{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/fixtures/fenPositions.ts"],"sourcesContent":["/**\n * Centralized Test FEN Database\n *\n * This file contains all FEN positions used across the test suite with metadata\n * for expected tablebase values, test scenarios, and usage patterns.\n * \n * Benefits:\n * - Single source of truth for all test positions\n * - Reduces duplication across test files  \n * - Self-documenting with metadata and expected outcomes\n * - Type-safe FEN access with validation\n * - Easy to discover existing positions for reuse\n */\n\n/**\n * Standard chess positions\n */\nexport /**\n *\n */\nconst StandardPositions = {\n  /** Initial chess position */\n  STARTING: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n\n  /** After 1.e4 */\n  AFTER_E4: \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\",\n\n  /** After 1.e4 e5 */\n  AFTER_E4_E5: \"rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2\",\n\n  /** After 1.e4 e5 2.Nf3 */\n  AFTER_E4_E5_NF3:\n    \"rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2\",\n\n  /** Position with castling rights */\n  CASTLING_AVAILABLE: \"r3k2r/pppppppp/8/8/8/8/PPPPPPPP/R3K2R w KQkq - 0 1\",\n\n  /** En passant possible */\n  EN_PASSANT: \"rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 3\",\n\n  /** En passant with pawn on d5 and c5 */\n  EN_PASSANT_COMPLEX: \"8/8/8/2pP4/8/8/8/4K2k w - c6 0 1\",\n} as const;\n\n/**\n * Basic endgame positions\n */\nexport /**\n *\n */\nconst EndgamePositions = {\n  /** King vs King - theoretical draw */\n  KK_DRAW: \"4k3/8/4K3/8/8/8/8/8 w - - 0 1\",\n\n  /** King vs King (alternative) */\n  KK_DRAW_ALT: \"8/8/8/8/8/8/8/K3k3 w - - 0 1\",\n\n  /** King and Pawn vs King - winning for white */\n  KPK_WIN: \"K7/P7/k7/8/8/8/8/8 w - - 0 1\",\n\n  /** King and Pawn vs King - central pawn */\n  KPK_CENTRAL: \"4k3/8/4K3/4P3/8/8/8/8 w - - 0 1\",\n\n  /** King and Pawn vs King - various positions */\n  KPK_VARIANTS: {\n    SIDE_PAWN: \"8/8/8/8/8/8/P7/K2k4 w - - 0 1\",\n    CENTER_ADVANCED: \"8/2k5/8/2K5/2P5/8/8/8 w - - 0 1\",\n    ENDGAME_PAWN: \"8/8/8/8/8/8/P7/K3k3 w - - 0 1\",\n    DRAW_POSITION: \"8/8/8/3k4/8/2KP4/8/8 w - - 0 1\",\n    BLACK_TO_MOVE: \"8/8/8/3k4/3P4/3K4/8/8 b - - 0 1\",\n  },\n\n  /** King and Queen vs King - winning */\n  KQK_WIN: \"4k3/8/8/8/8/8/8/4K2Q w - - 0 1\",\n\n  /** King and Queen vs King - black to move */\n  KQK_BLACK_TO_MOVE: \"4k3/8/8/8/8/8/8/4K2Q b - - 0 1\",\n\n  /** King and Queen vs King (alternative) */\n  KQK_WIN_ALT: \"8/8/8/8/8/8/1Q6/K3k3 w - - 0 1\",\n\n  /** King and Rook vs King - winning */\n  KRK_WIN: \"8/8/8/8/8/8/R7/K3k3 w - - 0 1\",\n\n  /** King and Rook vs King (alternative) */\n  KRK_WIN_ALT: \"4k3/R7/8/8/8/8/8/4K3 w - - 0 1\",\n\n  /** King and Rook vs King (another variant) */\n  KRK_WIN_VAR: \"R7/8/8/8/8/8/8/K2k4 w - - 0 1\",\n\n  /** King and Rook vs King (center) */\n  KRK_CENTER: \"8/8/8/8/8/3k4/8/R3K3 w - - 0 1\",\n\n  /** King and Knight vs King - insufficient material */\n  KNK_DRAW: \"8/8/8/8/8/8/k7/K6N w - - 0 1\",\n\n  /** Lucena position */\n  LUCENA: \"1K6/1P6/8/8/8/8/r7/1k6 b - - 0 1\",\n\n  /** Promotion position */\n  PROMOTION: \"8/P7/8/8/8/8/8/k6K w - - 0 1\",\n} as const;\n\n/**\n * Special game states\n */\nexport /**\n *\n */\nconst SpecialPositions = {\n  /** Checkmate position - Queen on e7, black king trapped on e8 */\n  CHECKMATE: \"4k3/4Q3/3K4/8/8/8/8/8 b - - 0 1\",\n\n  /** Stalemate position */\n  STALEMATE: \"k7/P7/K7/8/8/8/8/8 b - - 0 1\",\n\n  /** Checkmate in 1 move */\n  MATE_IN_1: \"6k1/5ppp/8/8/8/8/5PPP/R5K1 w - - 0 1\",\n\n  /** Draw by insufficient material */\n  INSUFFICIENT_MATERIAL: {\n    KK: \"8/8/8/8/8/8/8/K2k4 w - - 0 1\",\n    KNK: \"8/8/8/8/8/8/8/K2k2N1 w - - 0 1\",\n    KBK: \"8/8/8/8/8/8/8/K2k2B1 w - - 0 1\",\n  },\n\n  /** Complex middle game position */\n  COMPLEX_MIDGAME:\n    \"rnbqkbnr/pppp1ppp/8/4p3/6P1/5P2/PPPPP2P/RNBQKBNR b KQkq - 0 2\",\n\n  /** Too many pieces for tablebase (starting position) */\n  TOO_MANY_PIECES: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n\n  /** Empty board (for error testing) */\n  EMPTY_BOARD: \"8/8/8/8/8/8/8/8 w - - 0 1\",\n\n  /** Pawn promotion position - white pawn on f7 ready to promote */\n  PROMOTION: \"8/5P2/8/8/k7/8/K7/8 w - - 0 1\",\n\n  /** Position with black king in check from white queen on g5 */\n  BLACK_IN_CHECK:\n    \"rnbkqbnr/pppp1ppp/8/4p1Q1/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1\",\n\n  /** Invalid position with wrong pawn structure */\n  INVALID_TOO_MANY_PAWNS:\n    \"rnbqkbnr/ppppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n\n  /** Position with wrong ranks */\n  INVALID_WRONG_RANKS: \"9/8/8/8/8/8/8/8 w - - 0 1\",\n\n  /** Position with insufficient ranks */\n  INVALID_INSUFFICIENT_RANKS: \"8/8/8/8/8/8/8/7 w - - 0 1\",\n} as const;\n\n/**\n * KPK endgame progression for integration tests\n */\nexport /**\n *\n */\nconst KPKProgression = {\n  /** Initial winning position */\n  INITIAL: \"K7/P7/k7/8/8/8/8/8 w - - 0 1\",\n\n  /** After Kb8 (still winning) */\n  AFTER_KB8: \"1K6/P7/k7/8/8/8/8/8 b - - 1 1\",\n\n  /** After Kd6 (suboptimal but still winning) */\n  AFTER_KD6: \"4k3/8/3K4/4P3/8/8/8/8 b - - 1 1\",\n\n  /** After Kd6 Kf8 (white to move) */\n  AFTER_KD6_KF8: \"5k2/8/3K4/4P3/8/8/8/8 w - - 2 2\",\n\n  /** After Kc7 from setup position */\n  AFTER_KC7: \"5k2/2K5/8/4P3/8/8/8/8 b - - 3 2\",\n} as const;\n\n/**\n * Test move sequences\n */\nexport /**\n *\n */\nconst MoveSequences = {\n  /** Positions after specific moves */\n  e4: {\n    before: StandardPositions.STARTING,\n    after: StandardPositions.AFTER_E4,\n  },\n  e4_e5: {\n    before: StandardPositions.AFTER_E4,\n    after: StandardPositions.AFTER_E4_E5,\n  },\n  e4_e5_Nf3: {\n    before: StandardPositions.AFTER_E4_E5,\n    after: StandardPositions.AFTER_E4_E5_NF3,\n  },\n} as const;\n\n/**\n * E2E test move sequences for complex scenarios\n */\nexport /**\n *\n */\nconst E2EMoveSequences = {\n  /** Pawn promotion sequence leading to automatic win */\n  PAWN_PROMOTION_TO_WIN: {\n    startPosition: \"4k3/8/4K3/4P3/8/8/8/8 w - - 0 1\",\n    moves: [\n      \"e6-d6\", // 1. Kd6\n      \"e8-f7\", // 1... Kf7 (opponent move)\n      \"d6-d7\", // 2. Kd7\n      \"f7-f8\", // 2... Kf8 (opponent move)\n      \"e5-e6\", // 3. e6\n      \"f8-g8\", // 3... Kg8 (opponent move)\n      \"e6-e7\", // 4. e7\n      \"g8-f7\", // 4... Kf7 (opponent move)\n      \"e7-e8=Q\", // 5. e8=Q+ (promotion!)\n    ],\n    description:\n      \"King and pawn endgame leading to promotion and auto-win detection\",\n    expectedResult: \"win\", // Should trigger auto-completion\n  },\n\n  /** Pawn promotion sequence leading to draw (no auto-win) */\n  PAWN_PROMOTION_TO_DRAW: {\n    startPosition: \"4k3/8/4K3/4P3/8/8/8/8 w - - 0 1\",\n    moves: [\n      \"e6-d6\", // 1. Kd6\n      \"e8-f7\", // 1... Kf7 (opponent move)\n      \"d6-c7\", // 2. Kc7\n      \"f7-g7\", // 2... Kg7 (opponent move)\n      \"e5-e6\", // 3. e6\n      \"g7-f6\", // 3... Kf6 (opponent move)\n      \"e6-e7\", // 4. e7\n      \"f6-f7\", // 4... Kf7 (opponent move)\n      \"e7-e8=Q\", // 5. e8=Q+ (promotion but no auto-win!)\n    ],\n    description:\n      \"King and pawn endgame leading to promotion but NOT immediate win\",\n    expectedResult: \"continue\", // Should NOT trigger auto-completion\n  },\n} as const;\n\n/**\n * Helper function to get all FEN positions for validation tests\n */\nexport function getAllTestFENs(): string[] {\n  const positions: string[] = [];\n\n  // Add standard positions\n  Object.values(StandardPositions).forEach((pos) => {\n    if (typeof pos === \"string\") positions.push(pos);\n  });\n\n  // Add endgame positions\n  Object.values(EndgamePositions).forEach((pos) => {\n    if (typeof pos === \"string\") {\n      positions.push(pos);\n    } else if (typeof pos === \"object\") {\n      Object.values(pos).forEach((subPos) => {\n        if (typeof subPos === \"string\") positions.push(subPos);\n      });\n    }\n  });\n\n  // Add special positions\n  Object.values(SpecialPositions).forEach((pos) => {\n    if (typeof pos === \"string\") {\n      positions.push(pos);\n    } else if (typeof pos === \"object\") {\n      Object.values(pos).forEach((subPos) => {\n        if (typeof subPos === \"string\") positions.push(subPos);\n      });\n    }\n  });\n\n  // Add KPK progression\n  Object.values(KPKProgression).forEach((pos) => {\n    if (typeof pos === \"string\") positions.push(pos);\n  });\n\n  return positions;\n}\n\n/**\n * Get a random endgame position for testing\n */\nexport function getRandomEndgamePosition(): string {\n  const endgames = [\n    EndgamePositions.KPK_WIN,\n    EndgamePositions.KPK_CENTRAL,\n    EndgamePositions.KPK_VARIANTS.SIDE_PAWN,\n    EndgamePositions.KPK_VARIANTS.CENTER_ADVANCED,\n    EndgamePositions.KQK_WIN,\n    EndgamePositions.KRK_WIN,\n    EndgamePositions.KRK_WIN_ALT,\n  ];\n  return endgames[Math.floor(Math.random() * endgames.length)];\n}\n\n// =============================================================================\n// ENHANCED DATABASE WITH METADATA AND SCENARIOS\n// =============================================================================\n\n/**\n * Enhanced FEN entry with metadata for comprehensive testing\n */\nexport interface TestFenEntry {\n  fen: string;\n  description: string;\n  expectedWdl?: number;\n  expectedDtm?: number;\n  expectedCategory?: 'win' | 'draw' | 'loss' | 'unknown';\n  tags: readonly string[];\n  difficulty: 'basic' | 'intermediate' | 'advanced';\n  endgameType: string;\n  usage: 'unit' | 'integration' | 'e2e' | 'all';\n}\n\n/**\n * Move sequence for testing complete game flows\n */\nexport interface TestMoveSequence {\n  startPosition: string;\n  moves: string[];\n  description: string;\n  expectedResult: 'win' | 'draw' | 'loss' | 'continue';\n  tags: string[];\n}\n\n/**\n * FEN pair for before/after move testing\n */\nexport interface FenPair {\n  before: string;\n  after: string;\n  move: string;\n  description: string;\n}\n\n// =============================================================================\n// TABLEBASE DEFENSE SCENARIOS \n// =============================================================================\n\n/**\n * Positions specifically for testing tablebase defense and DTM sorting\n */\nexport const TablebaseDefensePositions = {\n  /** \n   * Black to move, losing position - tests DTM sorting for defense\n   * Expected: Kd7 (DTM -27) should be ranked first as best defense\n   */\n  BLACK_LOSES_DTM_TEST: {\n    fen: \"2k5/8/8/4PK2/8/8/8/8 b - - 2 3\",\n    description: \"Black to move in losing KPK position - DTM defense sorting test\",\n    expectedWdl: -2,\n    expectedDtm: -27,\n    expectedCategory: 'loss' as const,\n    tags: ['tablebase', 'defense', 'dtm-sorting', 'kpk'],\n    difficulty: 'intermediate' as const,\n    endgameType: 'KPK',\n    usage: 'integration' as const,\n  },\n  \n  /**\n   * Complex KPK position from mock tests\n   */\n  KPK_MOCK_POSITION: {\n    fen: \"5k2/2K5/8/4P3/8/8/8/8 b - - 3 2\",\n    description: \"KPK position used in service mock tests\",\n    expectedWdl: -2,\n    expectedCategory: 'loss' as const,\n    tags: ['kpk', 'mock', 'service-test'],\n    difficulty: 'advanced' as const,\n    endgameType: 'KPK',\n    usage: 'integration' as const,\n  },\n} as const;\n\n// =============================================================================\n// OPENING MOVE SEQUENCES\n// =============================================================================\n\n/**\n * Complete opening sequences for move flow testing\n */\nexport const OpeningSequences = {\n  /** Classic 1.e4 e5 2.Nf3 sequence */\n  E4_E5_NF3_SEQUENCE: {\n    startPosition: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n    moves: [\"e2-e4\", \"e7-e5\", \"g1-f3\"],\n    description: \"Classic opening sequence: 1.e4 e5 2.Nf3\",\n    expectedResult: 'continue' as const,\n    tags: ['opening', 'ui-test', 'move-flow'],\n    positions: [\n      {\n        after: \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\",\n        move: \"e4\",\n        description: \"After 1.e4\"\n      },\n      {\n        after: \"rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2\", \n        move: \"e5\",\n        description: \"After 1...e5\"\n      },\n      {\n        after: \"rnbqkbnr/pppp1ppp/8/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2\",\n        move: \"Nf3\", \n        description: \"After 2.Nf3\"\n      }\n    ]\n  },\n} as const;\n\n// =============================================================================\n// KPK ENDGAME PROGRESSIONS\n// =============================================================================\n\n/**\n * Extended KPK progression scenarios with expected outcomes\n */\nexport const KPKProgressions = {\n  /** Classic winning KPK progression */\n  WINNING_PROGRESSION: {\n    startPosition: \"K7/P7/k7/8/8/8/8/8 w - - 0 1\",\n    description: \"Classic winning KPK endgame progression\",\n    moves: [\"Kb8\", \"Kd6\", \"Kc7\"], // Example progression\n    expectedResult: 'win' as const,\n    tags: ['kpk', 'endgame', 'winning', 'progression'],\n    positions: [\n      {\n        fen: \"K7/P7/k7/8/8/8/8/8 w - - 0 1\",\n        description: \"Initial winning position\",\n        expectedDtm: 28,\n        expectedWdl: 2,\n      },\n      {\n        fen: \"1K6/P7/k7/8/8/8/8/8 b - - 1 1\", \n        description: \"After Kb8 (still winning)\",\n        expectedDtm: 27,\n        expectedWdl: 2,\n      },\n      {\n        fen: \"4k3/8/3K4/4P3/8/8/8/8 b - - 1 1\",\n        description: \"After Kd6 (suboptimal but winning)\", \n        expectedDtm: 25,\n        expectedWdl: 2,\n      }\n    ]\n  },\n} as const;\n\n// =============================================================================\n// E2E TEST SCENARIOS\n// =============================================================================\n\n/**\n * Complete E2E test scenarios with pawn promotion\n */\nexport const E2EScenarios = {\n  /** Pawn promotion leading to automatic win */\n  PAWN_PROMOTION_AUTO_WIN: {\n    startPosition: \"4k3/8/4K3/4P3/8/8/8/8 w - - 0 1\",\n    moves: [\n      \"Kd6\", \"Kf7\", \"Kd7\", \"Kf8\", \"e6\", \"Kg8\", \"e7\", \"Kf7\", \"e8=Q\"\n    ],\n    description: \"KPK endgame leading to pawn promotion with auto-win detection\",\n    expectedResult: 'win' as const,\n    tags: ['e2e', 'promotion', 'auto-win', 'kpk'],\n  },\n\n  /** Pawn promotion without auto-win */  \n  PAWN_PROMOTION_CONTINUE: {\n    startPosition: \"4k3/8/4K3/4P3/8/8/8/8 w - - 0 1\",\n    moves: [\n      \"Kd6\", \"Kf7\", \"Kc7\", \"Kg7\", \"e6\", \"Kf6\", \"e7\", \"Kf7\", \"e8=Q\"\n    ],\n    description: \"KPK endgame with promotion but no immediate auto-win\",\n    expectedResult: 'continue' as const, \n    tags: ['e2e', 'promotion', 'continue', 'kpk'],\n  },\n} as const;\n\n// =============================================================================\n// INTEGRATION TEST POSITIONS\n// =============================================================================\n\n/**\n * Positions from integration tests with expected API responses\n */\nexport const IntegrationTestPositions = {\n  /** Real API integration test position */\n  REAL_API_KPK: {\n    fen: \"1K6/P7/k7/8/8/8/8/8 b - - 1 1\",\n    description: \"KPK position for real Lichess API integration testing\",\n    expectedWdl: -2,\n    expectedCategory: 'loss' as const,\n    tags: ['integration', 'real-api', 'kpk'],\n    difficulty: 'basic' as const,\n    endgameType: 'KPK',\n    usage: 'integration' as const,\n  },\n\n  /** Complex endgame test position */\n  COMPLEX_ENDGAME: {\n    fen: \"8/8/8/8/4k3/4P3/5K2/8 b - - 1 2\", \n    description: \"Complex endgame position from page tests\",\n    expectedCategory: 'unknown' as const,\n    tags: ['integration', 'complex', 'ui-test'],\n    difficulty: 'advanced' as const,\n    endgameType: 'KPK',\n    usage: 'unit' as const,\n  },\n} as const;\n\n// =============================================================================\n// VALIDATION AND ERROR TEST POSITIONS\n// =============================================================================\n\n/**\n * Positions for testing validation and error handling\n */\nexport const ValidationTestPositions = {\n  /** Empty position for error testing */\n  EMPTY_POSITION: {\n    fen: \"8/8/8/8/8/8/8/8\",\n    description: \"Empty board position for validation testing\",\n    expectedCategory: 'unknown' as const,\n    tags: ['validation', 'error-test', 'empty'],\n    difficulty: 'basic' as const,\n    endgameType: 'None',\n    usage: 'unit' as const,\n  },\n\n  /** Mock service position */\n  MOCK_SERVICE_POSITION: {\n    fen: \"2K5/2P2k2/8/8/4R3/8/1r6/8\",\n    description: \"Complex position from jest setup mocks\",\n    tags: ['mock', 'service', 'complex'],\n    difficulty: 'advanced' as const, \n    endgameType: 'KRPKR',\n    usage: 'unit' as const,\n  },\n} as const;\n\n// =============================================================================\n// HELPER FUNCTIONS\n// =============================================================================\n\n/**\n * Get all FEN positions from enhanced database\n */\nexport function getAllTestFENsEnhanced(): TestFenEntry[] {\n  const positions: TestFenEntry[] = [];\n\n  // Add tablebase defense positions\n  Object.values(TablebaseDefensePositions).forEach(pos => positions.push(pos));\n  \n  // Add integration test positions  \n  Object.values(IntegrationTestPositions).forEach(pos => positions.push(pos));\n  \n  // Add validation test positions\n  Object.values(ValidationTestPositions).forEach(pos => positions.push(pos));\n\n  return positions;\n}\n\n/**\n * Get FENs by tag for targeted testing\n */\nexport function getFensByTag(tag: string): TestFenEntry[] {\n  return getAllTestFENsEnhanced().filter(pos => pos.tags.includes(tag));\n}\n\n/**\n * Get FENs by difficulty level\n */\nexport function getFensByDifficulty(difficulty: 'basic' | 'intermediate' | 'advanced'): TestFenEntry[] {\n  return getAllTestFENsEnhanced().filter(pos => pos.difficulty === difficulty);\n}\n\n/**\n * Get FENs by usage type\n */\nexport function getFensByUsage(usage: 'unit' | 'integration' | 'e2e' | 'all'): TestFenEntry[] {\n  return getAllTestFENsEnhanced().filter(pos => pos.usage === usage || pos.usage === 'all');\n}\n\n/**\n * Get FENs by endgame type  \n */\nexport function getFensByEndgameType(endgameType: string): TestFenEntry[] {\n  return getAllTestFENsEnhanced().filter(pos => pos.endgameType === endgameType);\n}\n\n/**\n * Get a specific position for tablebase defense testing\n */\nexport function getTablebaseDefensePosition(): TestFenEntry {\n  return TablebaseDefensePositions.BLACK_LOSES_DTM_TEST;\n}\n\n/**\n * Get opening sequence for UI testing\n */  \nexport function getOpeningSequence() {\n  return OpeningSequences.E4_E5_NF3_SEQUENCE;\n}\n\n/**\n * Get KPK progression for endgame testing\n */\nexport function getKPKProgression() {\n  return KPKProgressions.WINNING_PROGRESSION;\n}\n\n/**\n * Validate all FEN strings in database\n */\nexport function validateAllTestFens(): { valid: number; invalid: string[] } {\n  const allFens = getAllTestFENsEnhanced();\n  const invalid: string[] = [];\n  let valid = 0;\n\n  allFens.forEach(entry => {\n    // Basic FEN validation - should have 6 space-separated parts\n    const parts = entry.fen.split(' ');\n    if (parts.length === 6) {\n      valid++;\n    } else {\n      invalid.push(entry.fen);\n    }\n  });\n\n  return { valid, invalid };\n}\n\n// =============================================================================\n// LEGACY COMPATIBILITY - Keep existing exports\n// =============================================================================\n\n/**\n * Type-safe FEN position type (legacy compatibility)\n */\nexport type TestFEN =\n  | (typeof StandardPositions)[keyof typeof StandardPositions]\n  | (typeof EndgamePositions)[keyof typeof EndgamePositions]\n  | (typeof SpecialPositions)[keyof typeof SpecialPositions]\n  | (typeof KPKProgression)[keyof typeof KPKProgression];\n"],"names":["E2EMoveSequences","E2EScenarios","EndgamePositions","IntegrationTestPositions","KPKProgression","KPKProgressions","MoveSequences","OpeningSequences","SpecialPositions","StandardPositions","TablebaseDefensePositions","ValidationTestPositions","getAllTestFENs","getAllTestFENsEnhanced","getFensByDifficulty","getFensByEndgameType","getFensByTag","getFensByUsage","getKPKProgression","getOpeningSequence","getRandomEndgamePosition","getTablebaseDefensePosition","validateAllTestFens","STARTING","AFTER_E4","AFTER_E4_E5","AFTER_E4_E5_NF3","CASTLING_AVAILABLE","EN_PASSANT","EN_PASSANT_COMPLEX","KK_DRAW","KK_DRAW_ALT","KPK_WIN","KPK_CENTRAL","KPK_VARIANTS","SIDE_PAWN","CENTER_ADVANCED","ENDGAME_PAWN","DRAW_POSITION","BLACK_TO_MOVE","KQK_WIN","KQK_BLACK_TO_MOVE","KQK_WIN_ALT","KRK_WIN","KRK_WIN_ALT","KRK_WIN_VAR","KRK_CENTER","KNK_DRAW","LUCENA","PROMOTION","CHECKMATE","STALEMATE","MATE_IN_1","INSUFFICIENT_MATERIAL","KK","KNK","KBK","COMPLEX_MIDGAME","TOO_MANY_PIECES","EMPTY_BOARD","BLACK_IN_CHECK","INVALID_TOO_MANY_PAWNS","INVALID_WRONG_RANKS","INVALID_INSUFFICIENT_RANKS","INITIAL","AFTER_KB8","AFTER_KD6","AFTER_KD6_KF8","AFTER_KC7","e4","before","after","e4_e5","e4_e5_Nf3","PAWN_PROMOTION_TO_WIN","startPosition","moves","description","expectedResult","PAWN_PROMOTION_TO_DRAW","positions","Object","values","forEach","pos","push","subPos","endgames","Math","floor","random","length","BLACK_LOSES_DTM_TEST","fen","expectedWdl","expectedDtm","expectedCategory","tags","difficulty","endgameType","usage","KPK_MOCK_POSITION","E4_E5_NF3_SEQUENCE","move","WINNING_PROGRESSION","PAWN_PROMOTION_AUTO_WIN","PAWN_PROMOTION_CONTINUE","REAL_API_KPK","COMPLEX_ENDGAME","EMPTY_POSITION","MOCK_SERVICE_POSITION","tag","filter","includes","allFens","invalid","valid","entry","parts","split"],"mappings":"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"}