37184fe8cb786c3117c14180b19e1faa
/**
 * @file E2E Test Helper for automated move execution
 * @module components/testing/E2ETestHelper
 * 
 * @description
 * Extracted from TrainingBoard to separate E2E testing concerns from business logic.
 * Handles automated move execution via URL parameters for E2E test scenarios.
 * 
 * @example
 * // URL: /train/position?moves=e2-e4,Nf3,d5
 * <E2ETestHelper 
 *   currentFen={fen} 
 *   isGameFinished={finished}
 *   onMove={handleMove}
 *   moveHistory={history}
 * />
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "E2ETestHelper", {
    enumerable: true,
    get: function() {
        return E2ETestHelper;
    }
});
const _react = require("react");
const _chess = require("chess.js");
const _ChessService = require("../../services/ChessService");
const _logging = require("../../services/logging");
const _constants = require("../../constants");
const E2ETestHelper = ({ currentFen, isGameFinished, onMove, moveHistory })=>{
    const [testMoveProcessed, setTestMoveProcessed] = (0, _react.useState)(false);
    (0, _react.useEffect)(()=>{
        if (typeof window !== "undefined" && !testMoveProcessed) {
            const urlParams = new URLSearchParams(window.location.search);
            const testMoves = urlParams.get("moves");
            // Debug logging
            const logger = (0, _logging.getLogger)().setContext("E2ETestHelper");
            logger.debug("URL check", {
                url: window.location.href,
                search: window.location.search,
                testMoves,
                gameReady: !!currentFen,
                isGameFinished,
                historyLength: moveHistory.length,
                testMoveProcessed
            });
            if (testMoves && currentFen && !isGameFinished) {
                setTestMoveProcessed(true);
                const moves = testMoves.split(",");
                let moveIndex = 0;
                logger.info("Starting automated moves", {
                    moves,
                    totalMoves: moves.length
                });
                /**
         * Recursively plays moves from URL parameter for automated testing
         *
         * @description
         * Internal function that processes a sequence of moves provided
         * via URL parameter. Supports multiple notation formats and
         * includes error recovery.
         *
         * @remarks
         * Moves are played with animation delays to simulate user interaction.
         * Failed moves are skipped and the sequence continues.
         */ const playNextMove = async ()=>{
                    if (moveIndex < moves.length) {
                        const moveNotation = moves[moveIndex];
                        logger.debug("Attempting move", {
                            moveIndex,
                            moveNotation,
                            currentHistoryLength: moveHistory.length
                        });
                        try {
                            // Parse move notation to standardized format
                            let move;
                            if (moveNotation.includes("-")) {
                                // Format: e2-e4
                                const [from, to] = moveNotation.split("-");
                                move = {
                                    from: from,
                                    to: to,
                                    promotion: "q"
                                };
                            } else {
                                // Format: e4 (SAN) - parse it properly
                                const tempGame = new _chess.Chess(_ChessService.chessService.getFen());
                                const parsedMove = tempGame.move(moveNotation);
                                if (parsedMove) {
                                    move = {
                                        from: parsedMove.from,
                                        to: parsedMove.to,
                                        promotion: parsedMove.promotion || "q"
                                    };
                                }
                            }
                            if (move) {
                                logger.debug("Move parsed successfully", {
                                    move
                                });
                                const result = await onMove(move);
                                if (result) {
                                    moveIndex++;
                                    logger.debug("Move executed successfully", {
                                        moveIndex,
                                        newHistoryLength: moveHistory.length
                                    });
                                    // Wait and then next move
                                    setTimeout(playNextMove, _constants.ANIMATION.MOVE_PLAY_DELAY_NORMAL);
                                } else {
                                    logger.warn("Move execution failed", {
                                        moveNotation
                                    });
                                    // Try next move
                                    moveIndex++;
                                    setTimeout(playNextMove, _constants.ANIMATION.MOVE_PLAY_DELAY_FAST);
                                }
                            } else {
                                logger.warn("Move parsing returned null", {
                                    moveNotation
                                });
                                // Try next move
                                moveIndex++;
                                setTimeout(playNextMove, _constants.ANIMATION.MOVE_PLAY_DELAY_FAST);
                            }
                        } catch (error) {
                            logger.error("Test move failed", error, {
                                moveNotation
                            });
                            // Try next move
                            moveIndex++;
                            setTimeout(playNextMove, _constants.ANIMATION.MOVE_PLAY_DELAY_FAST);
                        }
                    } else {
                        logger.info("Automated moves completed", {
                            finalMoveIndex: moveIndex,
                            finalHistoryLength: moveHistory.length
                        });
                    }
                };
                // Start after initial render
                setTimeout(playNextMove, _constants.ANIMATION.MOVE_PLAY_DELAY_SLOW);
            }
        }
    }, [
        currentFen,
        isGameFinished,
        onMove,
        testMoveProcessed,
        moveHistory
    ]);
    // Headless component - no rendering
    return null;
};

//# sourceMappingURL=data:application/json;base64,