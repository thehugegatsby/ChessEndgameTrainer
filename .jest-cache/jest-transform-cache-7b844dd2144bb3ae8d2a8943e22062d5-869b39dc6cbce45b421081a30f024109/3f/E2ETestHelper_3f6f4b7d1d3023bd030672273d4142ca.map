{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/testing/E2ETestHelper.tsx"],"sourcesContent":["/**\n * @file E2E Test Helper for automated move execution\n * @module components/testing/E2ETestHelper\n * \n * @description\n * Extracted from TrainingBoard to separate E2E testing concerns from business logic.\n * Handles automated move execution via URL parameters for E2E test scenarios.\n * \n * @example\n * // URL: /train/position?moves=e2-e4,Nf3,d5\n * <E2ETestHelper \n *   currentFen={fen} \n *   isGameFinished={finished}\n *   onMove={handleMove}\n *   moveHistory={history}\n * />\n */\n\nimport { useState, useEffect } from 'react';\nimport { Chess } from 'chess.js';\nimport { chessService } from '@shared/services/ChessService';\nimport { getLogger } from '@shared/services/logging';\nimport { ANIMATION } from '@shared/constants';\n\n/**\n * Props for E2ETestHelper component\n */\ninterface E2ETestHelperProps {\n  /** Current position in FEN notation */\n  currentFen: string;\n  /** Whether the game has finished */\n  isGameFinished: boolean;\n  /** Callback to execute moves - should match TrainingBoard's handleMove signature */\n  onMove: (move: any) => Promise<boolean | null>;\n  /** Move history for logging/debugging */\n  moveHistory: any[];\n}\n\n/**\n * E2E Test Helper Component\n * \n * Automatically executes moves from URL parameters for E2E testing.\n * Only activates when \"moves\" parameter is present in URL.\n * \n * @param props Configuration for automated test execution\n * @returns null (headless component for side effects only)\n * \n * @remarks\n * This component:\n * - Parses moves from URL parameter \"moves\" (comma-separated)\n * - Supports multiple notation formats (e2-e4, e4, Nf3)\n * - Includes error recovery (skips invalid moves)\n * - Uses delays to simulate realistic user interaction\n * - Provides comprehensive logging for test debugging\n * \n * URL Format: ?moves=e2-e4,Nf3,d5\n * Move Formats Supported:\n * - Coordinate notation: e2-e4, g1-f3\n * - SAN notation: e4, Nf3, O-O\n * - Auto-promotion to Queen for pawn moves\n */\nexport const E2ETestHelper: React.FC<E2ETestHelperProps> = ({\n  currentFen,\n  isGameFinished,\n  onMove,\n  moveHistory,\n}) => {\n  const [testMoveProcessed, setTestMoveProcessed] = useState(false);\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\" && !testMoveProcessed) {\n      const urlParams = new URLSearchParams(window.location.search);\n      const testMoves = urlParams.get(\"moves\");\n\n      // Debug logging\n      const logger = getLogger().setContext(\"E2ETestHelper\");\n      logger.debug(\"URL check\", {\n        url: window.location.href,\n        search: window.location.search,\n        testMoves,\n        gameReady: !!currentFen,\n        isGameFinished,\n        historyLength: moveHistory.length,\n        testMoveProcessed,\n      });\n\n      if (testMoves && currentFen && !isGameFinished) {\n        setTestMoveProcessed(true);\n        const moves = testMoves.split(\",\");\n        let moveIndex = 0;\n\n        logger.info(\"Starting automated moves\", {\n          moves,\n          totalMoves: moves.length,\n        });\n\n        /**\n         * Recursively plays moves from URL parameter for automated testing\n         *\n         * @description\n         * Internal function that processes a sequence of moves provided\n         * via URL parameter. Supports multiple notation formats and\n         * includes error recovery.\n         *\n         * @remarks\n         * Moves are played with animation delays to simulate user interaction.\n         * Failed moves are skipped and the sequence continues.\n         */\n        const playNextMove = async () => {\n          if (moveIndex < moves.length) {\n            const moveNotation = moves[moveIndex];\n\n            logger.debug(\"Attempting move\", {\n              moveIndex,\n              moveNotation,\n              currentHistoryLength: moveHistory.length,\n            });\n\n            try {\n              // Parse move notation to standardized format\n              let move;\n              if (moveNotation.includes(\"-\")) {\n                // Format: e2-e4\n                const [from, to] = moveNotation.split(\"-\");\n                move = {\n                  from: from,\n                  to: to,\n                  promotion: \"q\",\n                };\n              } else {\n                // Format: e4 (SAN) - parse it properly\n                const tempGame = new Chess(chessService.getFen());\n                const parsedMove = tempGame.move(moveNotation);\n                if (parsedMove) {\n                  move = {\n                    from: parsedMove.from,\n                    to: parsedMove.to,\n                    promotion: parsedMove.promotion || \"q\",\n                  };\n                }\n              }\n\n              if (move) {\n                logger.debug(\"Move parsed successfully\", { move });\n                const result = await onMove(move);\n\n                if (result) {\n                  moveIndex++;\n                  logger.debug(\"Move executed successfully\", {\n                    moveIndex,\n                    newHistoryLength: moveHistory.length,\n                  });\n\n                  // Wait and then next move\n                  setTimeout(playNextMove, ANIMATION.MOVE_PLAY_DELAY_NORMAL);\n                } else {\n                  logger.warn(\"Move execution failed\", { moveNotation });\n                  // Try next move\n                  moveIndex++;\n                  setTimeout(playNextMove, ANIMATION.MOVE_PLAY_DELAY_FAST);\n                }\n              } else {\n                logger.warn(\"Move parsing returned null\", { moveNotation });\n                // Try next move\n                moveIndex++;\n                setTimeout(playNextMove, ANIMATION.MOVE_PLAY_DELAY_FAST);\n              }\n            } catch (error) {\n              logger.error(\"Test move failed\", error, { moveNotation });\n              // Try next move\n              moveIndex++;\n              setTimeout(playNextMove, ANIMATION.MOVE_PLAY_DELAY_FAST);\n            }\n          } else {\n            logger.info(\"Automated moves completed\", {\n              finalMoveIndex: moveIndex,\n              finalHistoryLength: moveHistory.length,\n            });\n          }\n        };\n\n        // Start after initial render\n        setTimeout(playNextMove, ANIMATION.MOVE_PLAY_DELAY_SLOW);\n      }\n    }\n  }, [currentFen, isGameFinished, onMove, testMoveProcessed, moveHistory]);\n\n  // Headless component - no rendering\n  return null;\n};"],"names":["E2ETestHelper","currentFen","isGameFinished","onMove","moveHistory","testMoveProcessed","setTestMoveProcessed","useState","useEffect","window","urlParams","URLSearchParams","location","search","testMoves","get","logger","getLogger","setContext","debug","url","href","gameReady","historyLength","length","moves","split","moveIndex","info","totalMoves","playNextMove","moveNotation","currentHistoryLength","move","includes","from","to","promotion","tempGame","Chess","chessService","getFen","parsedMove","result","newHistoryLength","setTimeout","ANIMATION","MOVE_PLAY_DELAY_NORMAL","warn","MOVE_PLAY_DELAY_FAST","error","finalMoveIndex","finalHistoryLength","MOVE_PLAY_DELAY_SLOW"],"mappings":"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"}