3c5ae0eed7fb562059963d69e4ab6a96
/**
 * @file Training store hooks with state/action separation
 * @module store/hooks/useTrainingStore
 *
 * @description
 * Provides optimized hooks for training-related state and actions with proper separation.
 * This pattern prevents unnecessary re-renders in action-only components while
 * maintaining excellent developer experience.
 *
 * Three hooks are exported:
 * - useTrainingState(): For components that need reactive state
 * - useTrainingActions(): For components that only dispatch actions (no re-renders)
 * - useTrainingStore(): Convenience hook returning [state, actions] tuple
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useTrainingActions () {
        return useTrainingActions;
    },
    get useTrainingState () {
        return useTrainingState;
    },
    get useTrainingStore () {
        return useTrainingStore;
    }
});
const _react = require("react");
const _StoreContext = require("../StoreContext");
const _shallow = require("zustand/react/shallow");
const useTrainingState = ()=>{
    return (0, _StoreContext.useStore)((0, _shallow.useShallow)((state)=>({
            // Training session state from nested structure
            currentPosition: state.training.currentPosition,
            nextPosition: state.training.nextPosition,
            previousPosition: state.training.previousPosition,
            isLoadingNavigation: state.training.isLoadingNavigation,
            navigationError: state.training.navigationError,
            chapterProgress: state.training.chapterProgress,
            isPlayerTurn: state.training.isPlayerTurn,
            isOpponentThinking: state.training.isOpponentThinking,
            isSuccess: state.training.isSuccess,
            sessionStartTime: state.training.sessionStartTime,
            sessionEndTime: state.training.sessionEndTime,
            hintsUsed: state.training.hintsUsed,
            mistakeCount: state.training.mistakeCount,
            moveErrorDialog: state.training.moveErrorDialog,
            moveSuccessDialog: state.training.moveSuccessDialog,
            evaluationBaseline: state.training.evaluationBaseline
        })));
};
const useTrainingActions = ()=>{
    // Get actions dynamically to ensure they exist
    const storeApi = (0, _StoreContext.useStoreApi)();
    return (0, _react.useMemo)(()=>{
        const state = storeApi.getState();
        // Clean access: actions are directly available in training slice
        return {
            // Training actions - directly from slice (no CRITICAL FIX workaround needed)
            setPosition: state.training.setPosition,
            setNavigationPositions: state.training.setNavigationPositions,
            setNavigationLoading: state.training.setNavigationLoading,
            setNavigationError: state.training.setNavigationError,
            setChapterProgress: state.training.setChapterProgress,
            setPlayerTurn: state.training.setPlayerTurn,
            clearOpponentThinking: state.training.clearOpponentThinking,
            completeTraining: state.training.completeTraining,
            incrementHint: state.training.incrementHint,
            incrementMistake: state.training.incrementMistake,
            setMoveErrorDialog: state.training.setMoveErrorDialog,
            setMoveSuccessDialog: state.training.setMoveSuccessDialog,
            addTrainingMove: state.training.addTrainingMove,
            resetTraining: state.training.resetTraining,
            resetPosition: state.training.resetPosition,
            setEvaluationBaseline: state.training.setEvaluationBaseline,
            clearEvaluationBaseline: state.training.clearEvaluationBaseline,
            // Orchestrated actions (from root level)
            handlePlayerMove: state.handlePlayerMove,
            loadTrainingContext: state.loadTrainingContext
        };
    }, [
        storeApi
    ]);
};
const useTrainingStore = ()=>{
    return [
        useTrainingState(),
        useTrainingActions()
    ];
};

//# sourceMappingURL=data:application/json;base64,