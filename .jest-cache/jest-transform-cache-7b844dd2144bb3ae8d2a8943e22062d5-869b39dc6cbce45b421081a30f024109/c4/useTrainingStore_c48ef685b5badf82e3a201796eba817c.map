{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/hooks/useTrainingStore.ts"],"sourcesContent":["/**\n * @file Training store hooks with state/action separation\n * @module store/hooks/useTrainingStore\n *\n * @description\n * Provides optimized hooks for training-related state and actions with proper separation.\n * This pattern prevents unnecessary re-renders in action-only components while\n * maintaining excellent developer experience.\n *\n * Three hooks are exported:\n * - useTrainingState(): For components that need reactive state\n * - useTrainingActions(): For components that only dispatch actions (no re-renders)\n * - useTrainingStore(): Convenience hook returning [state, actions] tuple\n */\n\nimport { useMemo } from \"react\";\nimport { useStore, useStoreApi } from \"../StoreContext\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport type {\n  RootState,\n  TrainingState as TrainingStateType,\n  TrainingActions as TrainingActionsType,\n} from \"../slices/types\";\nimport type { AsyncActions } from \"../slices/types\";\n\n// Extend training actions with relevant async actions\ntype ExtendedTrainingActions = TrainingActionsType &\n  Pick<AsyncActions, \"handlePlayerMove\" | \"loadTrainingContext\">;\n\n/**\n * Hook for reactive training state properties\n *\n * @description\n * Subscribes components to training state changes. Use this in components\n * that need to display or react to training data. Will re-render when any\n * selected training state changes.\n *\n * @returns {TrainingStateType} Training state properties\n *\n * @example\n * ```tsx\n * const { currentPosition, isPlayerTurn, mistakeCount } = useTrainingState();\n *\n * // Component will re-render when these values change\n * return <div>Mistakes: {mistakeCount}</div>;\n * ```\n */\nexport const useTrainingState = (): TrainingStateType => {\n  return useStore(\n    useShallow((state: RootState) => ({\n      // Training session state from nested structure\n      currentPosition: state.training.currentPosition,\n      nextPosition: state.training.nextPosition,\n      previousPosition: state.training.previousPosition,\n      isLoadingNavigation: state.training.isLoadingNavigation,\n      navigationError: state.training.navigationError,\n      chapterProgress: state.training.chapterProgress,\n      isPlayerTurn: state.training.isPlayerTurn,\n      isOpponentThinking: state.training.isOpponentThinking,\n      isSuccess: state.training.isSuccess,\n      sessionStartTime: state.training.sessionStartTime,\n      sessionEndTime: state.training.sessionEndTime,\n      hintsUsed: state.training.hintsUsed,\n      mistakeCount: state.training.mistakeCount,\n      moveErrorDialog: state.training.moveErrorDialog,\n      moveSuccessDialog: state.training.moveSuccessDialog,\n      evaluationBaseline: state.training.evaluationBaseline,\n    })),\n  );\n};\n\n/**\n * Hook for training action functions\n *\n * @description\n * Returns stable action functions that never cause re-renders.\n * Use this in components that only need to trigger training actions\n * without subscribing to state changes.\n *\n * @returns {ExtendedTrainingActions} Training action functions\n *\n * @example\n * ```tsx\n * const { completeTraining, incrementHint } = useTrainingActions();\n *\n * // This component will never re-render due to training state changes\n * return <button onClick={incrementHint}>Use Hint</button>;\n * ```\n */\nexport const useTrainingActions = (): ExtendedTrainingActions => {\n  // Get actions dynamically to ensure they exist\n  const storeApi = useStoreApi();\n  return useMemo(() => {\n    const state = storeApi.getState();\n    \n    // Clean access: actions are directly available in training slice\n    return {\n      // Training actions - directly from slice (no CRITICAL FIX workaround needed)\n      setPosition: state.training.setPosition,\n      setNavigationPositions: state.training.setNavigationPositions,\n      setNavigationLoading: state.training.setNavigationLoading,\n      setNavigationError: state.training.setNavigationError,\n      setChapterProgress: state.training.setChapterProgress,\n      setPlayerTurn: state.training.setPlayerTurn,\n      clearOpponentThinking: state.training.clearOpponentThinking,\n      completeTraining: state.training.completeTraining,\n      incrementHint: state.training.incrementHint,\n      incrementMistake: state.training.incrementMistake,\n      setMoveErrorDialog: state.training.setMoveErrorDialog,\n      setMoveSuccessDialog: state.training.setMoveSuccessDialog,\n      addTrainingMove: state.training.addTrainingMove,\n      resetTraining: state.training.resetTraining,\n      resetPosition: state.training.resetPosition,\n      setEvaluationBaseline: state.training.setEvaluationBaseline,\n      clearEvaluationBaseline: state.training.clearEvaluationBaseline,\n\n      // Orchestrated actions (from root level)\n      handlePlayerMove: state.handlePlayerMove,\n      loadTrainingContext: state.loadTrainingContext,\n    };\n  }, [storeApi]);\n};\n\n/**\n * Convenience hook for components that need both state and actions\n *\n * @description\n * Returns a tuple of [state, actions] for components that need both.\n * This maintains the familiar pattern while benefiting from the\n * optimized separation under the hood.\n *\n * @returns {[TrainingStateType, ExtendedTrainingActions]} Tuple of training state and actions\n *\n * @example\n * ```tsx\n * const [trainingState, trainingActions] = useTrainingStore();\n *\n * const handleMove = async (move: string) => {\n *   if (trainingState.isPlayerTurn) {\n *     await trainingActions.handlePlayerMove(move);\n *   }\n * };\n * ```\n */\nexport const useTrainingStore = (): [\n  TrainingStateType,\n  ExtendedTrainingActions,\n] => {\n  return [useTrainingState(), useTrainingActions()];\n};\n"],"names":["useTrainingActions","useTrainingState","useTrainingStore","useStore","useShallow","state","currentPosition","training","nextPosition","previousPosition","isLoadingNavigation","navigationError","chapterProgress","isPlayerTurn","isOpponentThinking","isSuccess","sessionStartTime","sessionEndTime","hintsUsed","mistakeCount","moveErrorDialog","moveSuccessDialog","evaluationBaseline","storeApi","useStoreApi","useMemo","getState","setPosition","setNavigationPositions","setNavigationLoading","setNavigationError","setChapterProgress","setPlayerTurn","clearOpponentThinking","completeTraining","incrementHint","incrementMistake","setMoveErrorDialog","setMoveSuccessDialog","addTrainingMove","resetTraining","resetPosition","setEvaluationBaseline","clearEvaluationBaseline","handlePlayerMove","loadTrainingContext"],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;;;;;;;;QA4EYA;eAAAA;;QA1CAC;eAAAA;;QAiGAC;eAAAA;;;uBAjIW;8BACc;yBACX;AA8BpB,MAAMD,mBAAmB;IAC9B,OAAOE,IAAAA,sBAAQ,EACbC,IAAAA,mBAAU,EAAC,CAACC,QAAsB,CAAA;YAChC,+CAA+C;YAC/CC,iBAAiBD,MAAME,QAAQ,CAACD,eAAe;YAC/CE,cAAcH,MAAME,QAAQ,CAACC,YAAY;YACzCC,kBAAkBJ,MAAME,QAAQ,CAACE,gBAAgB;YACjDC,qBAAqBL,MAAME,QAAQ,CAACG,mBAAmB;YACvDC,iBAAiBN,MAAME,QAAQ,CAACI,eAAe;YAC/CC,iBAAiBP,MAAME,QAAQ,CAACK,eAAe;YAC/CC,cAAcR,MAAME,QAAQ,CAACM,YAAY;YACzCC,oBAAoBT,MAAME,QAAQ,CAACO,kBAAkB;YACrDC,WAAWV,MAAME,QAAQ,CAACQ,SAAS;YACnCC,kBAAkBX,MAAME,QAAQ,CAACS,gBAAgB;YACjDC,gBAAgBZ,MAAME,QAAQ,CAACU,cAAc;YAC7CC,WAAWb,MAAME,QAAQ,CAACW,SAAS;YACnCC,cAAcd,MAAME,QAAQ,CAACY,YAAY;YACzCC,iBAAiBf,MAAME,QAAQ,CAACa,eAAe;YAC/CC,mBAAmBhB,MAAME,QAAQ,CAACc,iBAAiB;YACnDC,oBAAoBjB,MAAME,QAAQ,CAACe,kBAAkB;QACvD,CAAA;AAEJ;AAoBO,MAAMtB,qBAAqB;IAChC,+CAA+C;IAC/C,MAAMuB,WAAWC,IAAAA,yBAAW;IAC5B,OAAOC,IAAAA,cAAO,EAAC;QACb,MAAMpB,QAAQkB,SAASG,QAAQ;QAE/B,iEAAiE;QACjE,OAAO;YACL,6EAA6E;YAC7EC,aAAatB,MAAME,QAAQ,CAACoB,WAAW;YACvCC,wBAAwBvB,MAAME,QAAQ,CAACqB,sBAAsB;YAC7DC,sBAAsBxB,MAAME,QAAQ,CAACsB,oBAAoB;YACzDC,oBAAoBzB,MAAME,QAAQ,CAACuB,kBAAkB;YACrDC,oBAAoB1B,MAAME,QAAQ,CAACwB,kBAAkB;YACrDC,eAAe3B,MAAME,QAAQ,CAACyB,aAAa;YAC3CC,uBAAuB5B,MAAME,QAAQ,CAAC0B,qBAAqB;YAC3DC,kBAAkB7B,MAAME,QAAQ,CAAC2B,gBAAgB;YACjDC,eAAe9B,MAAME,QAAQ,CAAC4B,aAAa;YAC3CC,kBAAkB/B,MAAME,QAAQ,CAAC6B,gBAAgB;YACjDC,oBAAoBhC,MAAME,QAAQ,CAAC8B,kBAAkB;YACrDC,sBAAsBjC,MAAME,QAAQ,CAAC+B,oBAAoB;YACzDC,iBAAiBlC,MAAME,QAAQ,CAACgC,eAAe;YAC/CC,eAAenC,MAAME,QAAQ,CAACiC,aAAa;YAC3CC,eAAepC,MAAME,QAAQ,CAACkC,aAAa;YAC3CC,uBAAuBrC,MAAME,QAAQ,CAACmC,qBAAqB;YAC3DC,yBAAyBtC,MAAME,QAAQ,CAACoC,uBAAuB;YAE/D,yCAAyC;YACzCC,kBAAkBvC,MAAMuC,gBAAgB;YACxCC,qBAAqBxC,MAAMwC,mBAAmB;QAChD;IACF,GAAG;QAACtB;KAAS;AACf;AAuBO,MAAMrB,mBAAmB;IAI9B,OAAO;QAACD;QAAoBD;KAAqB;AACnD"}