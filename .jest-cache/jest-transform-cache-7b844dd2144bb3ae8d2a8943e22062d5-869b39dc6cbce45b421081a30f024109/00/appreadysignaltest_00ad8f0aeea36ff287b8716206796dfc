c97a017c6cfcca0e52536d08f210515f
/**
 * @file Unit test for app-ready signal in App Router providers
 * @description Tests that the app-ready attribute is correctly set based on pathname and engine status
 */ "use strict";
// Mock Next.js navigation
jest.mock("next/navigation", ()=>({
        usePathname: jest.fn()
    }));
// Mock the StoreContext to provide useStore
jest.mock("@shared/store/StoreContext", ()=>({
        useStore: jest.fn(),
        StoreProvider: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                children: children
            })
    }));
// Mock hydration hook
jest.mock("@shared/hooks/useHydration", ()=>({
        useStoreHydration: jest.fn().mockReturnValue(true)
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _navigation = require("next/navigation");
const _StoreContext = require("../../../shared/store/StoreContext");
const _providers = require("../../../app/providers");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("App Ready Signal (App Router)", ()=>{
    const mockUsePathname = _navigation.usePathname;
    beforeEach(()=>{
        // Setup pathname mock
        mockUsePathname.mockReturnValue("/dashboard");
        // Default store mock - analysisStatus is now nested in tablebase slice
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "loading"
                }
            };
            return selector ? selector(state) : state;
        });
        // Clear body attributes
        document.body.removeAttribute("data-app-ready");
    });
    afterEach(()=>{
        jest.clearAllMocks();
    });
    test("should set data-app-ready to true when engine is initializing on non-training page", async ()=>{
        mockUsePathname.mockReturnValue("/dashboard");
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "loading"
                }
            };
            return selector ? selector(state) : state;
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_providers.AppProviders, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Page"
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(document.body.getAttribute("data-app-ready")).toBe("true");
        });
    });
    test("should set data-app-ready to false when engine is initializing on training page", async ()=>{
        mockUsePathname.mockReturnValue("/train/1");
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "loading"
                }
            };
            return selector ? selector(state) : state;
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_providers.AppProviders, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Page"
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(document.body.getAttribute("data-app-ready")).toBe("false");
        });
    });
    test("should set data-app-ready to true when engine is ready on non-training page", async ()=>{
        mockUsePathname.mockReturnValue("/dashboard");
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "idle"
                }
            };
            return selector ? selector(state) : state;
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_providers.AppProviders, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Page"
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(document.body.getAttribute("data-app-ready")).toBe("true");
        });
    });
    test("should set data-app-ready to true when engine is ready on training page", async ()=>{
        mockUsePathname.mockReturnValue("/train/1");
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "idle"
                }
            };
            return selector ? selector(state) : state;
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_providers.AppProviders, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Page"
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(document.body.getAttribute("data-app-ready")).toBe("true");
        });
    });
    test("should set data-app-ready to error when engine has error", async ()=>{
        mockUsePathname.mockReturnValue("/train/1");
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "error"
                }
            };
            return selector ? selector(state) : state;
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_providers.AppProviders, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Page"
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(document.body.getAttribute("data-app-ready")).toBe("error");
        });
    });
    test("should set data-app-ready to error when engine has error on non-training page", async ()=>{
        mockUsePathname.mockReturnValue("/dashboard");
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "error"
                }
            };
            return selector ? selector(state) : state;
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_providers.AppProviders, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Page"
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(document.body.getAttribute("data-app-ready")).toBe("error");
        });
    });
    test("should update data-app-ready when pathname changes", async ()=>{
        // Start on dashboard page
        mockUsePathname.mockReturnValue("/dashboard");
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "idle"
                }
            };
            return selector ? selector(state) : state;
        });
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_providers.AppProviders, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Page"
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(document.body.getAttribute("data-app-ready")).toBe("true");
        });
        // Change to training page with initializing engine
        mockUsePathname.mockReturnValue("/train/1");
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "loading"
                }
            };
            return selector ? selector(state) : state;
        });
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_providers.AppProviders, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Page"
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(document.body.getAttribute("data-app-ready")).toBe("false");
        });
    });
    test("should update data-app-ready when engine status changes", async ()=>{
        mockUsePathname.mockReturnValue("/train/1");
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "loading"
                }
            };
            return selector ? selector(state) : state;
        });
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_providers.AppProviders, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Page"
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(document.body.getAttribute("data-app-ready")).toBe("false");
        });
        // Engine becomes ready
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "idle"
                }
            };
            return selector ? selector(state) : state;
        });
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_providers.AppProviders, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Page"
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(document.body.getAttribute("data-app-ready")).toBe("true");
        });
    });
    test("should handle null pathname gracefully", async ()=>{
        mockUsePathname.mockReturnValue(null);
        _StoreContext.useStore.mockImplementation((selector)=>{
            const state = {
                tablebase: {
                    analysisStatus: "idle"
                }
            };
            return selector ? selector(state) : state;
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_providers.AppProviders, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Page"
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(document.body.getAttribute("data-app-ready")).toBe("false");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,