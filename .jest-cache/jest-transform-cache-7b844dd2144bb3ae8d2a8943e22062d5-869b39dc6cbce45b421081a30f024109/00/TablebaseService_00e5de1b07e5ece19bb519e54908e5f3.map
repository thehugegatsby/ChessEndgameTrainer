{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/__mocks__/TablebaseService.ts"],"sourcesContent":["/**\n * Central Mock for TablebaseService\n *\n * This mock provides a consistent, centralized mock implementation for the TablebaseService\n * that can be used across all test files. It follows Jest's manual mock pattern.\n *\n * Usage:\n * - Jest will automatically use this mock when `jest.mock('@shared/services/TablebaseService')` is called\n * - Test files can import helper methods to customize mock behavior\n * - Default implementations return sensible test data\n */\n\nimport {\n  TablebaseEvaluation,\n  TablebaseMovesResult,\n  TablebaseMove,\n  TablebaseResult,\n} from \"@shared/types/tablebase\";\n\n/**\n * Default mock tablebase result\n */\nconst createDefaultResult = (): TablebaseResult => ({\n  wdl: 0,\n  dtz: 0,\n  dtm: null,\n  category: \"draw\",\n  precise: false,\n  evaluation: \"Remis\",\n});\n\n/**\n * Default mock tablebase move\n */\nconst createDefaultMove = (): TablebaseMove => ({\n  uci: \"e2e4\",\n  san: \"e4\",\n  wdl: 0,\n  dtz: 0,\n  dtm: null,\n  category: \"draw\",\n});\n\n/**\n * Mock TablebaseService implementation\n */\nclass MockTablebaseService {\n  // Mock methods as jest functions\n  getEvaluation = jest.fn<Promise<TablebaseEvaluation>, [string]>();\n  getTopMoves = jest.fn<Promise<TablebaseMovesResult>, [string, number?]>();\n  clearCache = jest.fn<void, []>();\n  getMetrics = jest.fn();\n\n  constructor() {\n    // Set up default implementations\n    this.setupDefaults();\n  }\n\n  /**\n   * Setup default mock implementations\n   */\n  setupDefaults() {\n    // Default getEvaluation - returns draw position\n    this.getEvaluation.mockImplementation(async (_fen: string) => ({\n      isAvailable: true,\n      result: createDefaultResult(),\n    }));\n\n    // Default getTopMoves - returns one draw move\n    this.getTopMoves.mockImplementation(\n      async (_fen: string, _limit?: number) => ({\n        isAvailable: true,\n        moves: [createDefaultMove()],\n      }),\n    );\n\n    // Default clearCache - does nothing\n    this.clearCache.mockImplementation(() => undefined);\n\n    // Default getMetrics\n    this.getMetrics.mockReturnValue({\n      cacheHitRate: 0,\n      totalApiCalls: 0,\n      cacheSize: 0,\n      maxCacheSize: 200,\n    });\n  }\n\n  /**\n   * Helper: Mock a winning position\n   */\n  mockWinPosition(fen?: string, dtm: number = 5) {\n    const result: TablebaseResult = {\n      wdl: 2,\n      dtz: dtm * 2,\n      dtm: dtm,\n      category: \"win\",\n      precise: true,\n      evaluation: `Gewinn in ${dtm} Zügen`,\n    };\n\n    const move: TablebaseMove = {\n      uci: \"e2e3\",\n      san: \"Ke3\",\n      wdl: 2,\n      dtz: (dtm - 1) * 2,\n      dtm: dtm - 1,\n      category: \"win\",\n    };\n\n    if (fen) {\n      this.getEvaluation.mockImplementation(async (f: string) =>\n        f === fen ? { isAvailable: true, result } : { isAvailable: false },\n      );\n      this.getTopMoves.mockImplementation(async (f: string) =>\n        f === fen\n          ? { isAvailable: true, moves: [move] }\n          : { isAvailable: false },\n      );\n    } else {\n      this.getEvaluation.mockResolvedValue({ isAvailable: true, result });\n      this.getTopMoves.mockResolvedValue({ isAvailable: true, moves: [move] });\n    }\n  }\n\n  /**\n   * Helper: Mock a draw position\n   */\n  mockDrawPosition(fen?: string) {\n    const result: TablebaseResult = {\n      wdl: 0,\n      dtz: 0,\n      dtm: null,\n      category: \"draw\",\n      precise: true,\n      evaluation: \"Remis\",\n    };\n\n    const move: TablebaseMove = {\n      uci: \"e2e3\",\n      san: \"Ke3\",\n      wdl: 0,\n      dtz: 0,\n      dtm: null,\n      category: \"draw\",\n    };\n\n    if (fen) {\n      this.getEvaluation.mockImplementation(async (f: string) =>\n        f === fen ? { isAvailable: true, result } : { isAvailable: false },\n      );\n      this.getTopMoves.mockImplementation(async (f: string) =>\n        f === fen\n          ? { isAvailable: true, moves: [move] }\n          : { isAvailable: false },\n      );\n    } else {\n      this.getEvaluation.mockResolvedValue({ isAvailable: true, result });\n      this.getTopMoves.mockResolvedValue({ isAvailable: true, moves: [move] });\n    }\n  }\n\n  /**\n   * Helper: Mock a losing position\n   */\n  mockLossPosition(fen?: string, dtm: number = -5) {\n    const result: TablebaseResult = {\n      wdl: -2,\n      dtz: dtm * 2,\n      dtm: dtm,\n      category: \"loss\",\n      precise: true,\n      evaluation: `Verlust in ${Math.abs(dtm)} Zügen`,\n    };\n\n    const move: TablebaseMove = {\n      uci: \"e8d7\",\n      san: \"Kd7\",\n      wdl: -2,\n      dtz: (dtm + 1) * 2,\n      dtm: dtm + 1,\n      category: \"loss\",\n    };\n\n    if (fen) {\n      this.getEvaluation.mockImplementation(async (f: string) =>\n        f === fen ? { isAvailable: true, result } : { isAvailable: false },\n      );\n      this.getTopMoves.mockImplementation(async (f: string) =>\n        f === fen\n          ? { isAvailable: true, moves: [move] }\n          : { isAvailable: false },\n      );\n    } else {\n      this.getEvaluation.mockResolvedValue({ isAvailable: true, result });\n      this.getTopMoves.mockResolvedValue({ isAvailable: true, moves: [move] });\n    }\n  }\n\n  /**\n   * Helper: Mock API error\n   */\n  mockApiError(errorMessage: string = \"Tablebase API unavailable\") {\n    this.getEvaluation.mockRejectedValue(new Error(errorMessage));\n    this.getTopMoves.mockRejectedValue(new Error(errorMessage));\n  }\n\n  /**\n   * Helper: Mock position not in tablebase\n   */\n  mockNotAvailable(fen?: string) {\n    const response: TablebaseEvaluation = {\n      isAvailable: false,\n      error: \"Position not in tablebase\",\n    };\n\n    const movesResponse: TablebaseMovesResult = {\n      isAvailable: false,\n      error: \"Position not in tablebase\",\n    };\n\n    if (fen) {\n      this.getEvaluation.mockImplementation(async (f: string) =>\n        f === fen\n          ? response\n          : { isAvailable: true, result: createDefaultResult() },\n      );\n      this.getTopMoves.mockImplementation(async (f: string) =>\n        f === fen\n          ? movesResponse\n          : { isAvailable: true, moves: [createDefaultMove()] },\n      );\n    } else {\n      this.getEvaluation.mockResolvedValue(response);\n      this.getTopMoves.mockResolvedValue(movesResponse);\n    }\n  }\n\n  /**\n   * Helper: Mock loading state\n   */\n  mockLoading(delayMs: number = 1000) {\n    this.getEvaluation.mockImplementation(\n      () =>\n        new Promise((resolve) =>\n          setTimeout(\n            () =>\n              resolve({\n                isAvailable: true,\n                result: {\n                  wdl: 2,\n                  dtz: 10,\n                  dtm: 5,\n                  category: \"win\",\n                  precise: true,\n                  evaluation: \"Gewinn in 5 Zügen\",\n                },\n              }),\n            delayMs,\n          ),\n        ),\n    );\n\n    this.getTopMoves.mockImplementation(\n      () =>\n        new Promise((resolve) =>\n          setTimeout(\n            () =>\n              resolve({\n                isAvailable: true,\n                moves: [\n                  {\n                    uci: \"e2e3\",\n                    san: \"Ke3\",\n                    wdl: 2,\n                    dtz: 8,\n                    dtm: 4,\n                    category: \"win\",\n                  },\n                ],\n              }),\n            delayMs,\n          ),\n        ),\n    );\n  }\n\n  /**\n   * Helper: Reset all mocks to defaults\n   */\n  reset() {\n    this.getEvaluation.mockClear();\n    this.getTopMoves.mockClear();\n    this.clearCache.mockClear();\n    this.getMetrics.mockClear();\n    this.setupDefaults();\n  }\n\n  /**\n   * Helper: Clear mock calls but keep implementations\n   */\n  clearCalls() {\n    this.getEvaluation.mockClear();\n    this.getTopMoves.mockClear();\n    this.clearCache.mockClear();\n    this.getMetrics.mockClear();\n  }\n}\n\n// Create singleton instance\nconst mockTablebaseService = new MockTablebaseService();\n\n// Export as named export to match the real module\nexport const tablebaseService = mockTablebaseService;\n\n// Export helper functions for easy test setup\nexport const mockWinPosition = (fen?: string, dtm?: number) =>\n  mockTablebaseService.mockWinPosition(fen, dtm);\n\nexport const mockDrawPosition = (fen?: string) =>\n  mockTablebaseService.mockDrawPosition(fen);\n\nexport const mockLossPosition = (fen?: string, dtm?: number) =>\n  mockTablebaseService.mockLossPosition(fen, dtm);\n\nexport const mockApiError = (message?: string) =>\n  mockTablebaseService.mockApiError(message);\n\nexport const mockNotAvailable = (fen?: string) =>\n  mockTablebaseService.mockNotAvailable(fen);\n\nexport const mockLoading = (delayMs?: number) =>\n  mockTablebaseService.mockLoading(delayMs);\n\nexport const resetMock = () => mockTablebaseService.reset();\n\nexport const clearMockCalls = () => mockTablebaseService.clearCalls();\n"],"names":["clearMockCalls","mockApiError","mockDrawPosition","mockLoading","mockLossPosition","mockNotAvailable","mockWinPosition","resetMock","tablebaseService","createDefaultResult","wdl","dtz","dtm","category","precise","evaluation","createDefaultMove","uci","san","MockTablebaseService","setupDefaults","getEvaluation","mockImplementation","_fen","isAvailable","result","getTopMoves","_limit","moves","clearCache","undefined","getMetrics","mockReturnValue","cacheHitRate","totalApiCalls","cacheSize","maxCacheSize","fen","move","f","mockResolvedValue","Math","abs","errorMessage","mockRejectedValue","Error","response","error","movesResponse","delayMs","Promise","resolve","setTimeout","reset","mockClear","clearCalls","jest","fn","mockTablebaseService","message"],"mappings":"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"}