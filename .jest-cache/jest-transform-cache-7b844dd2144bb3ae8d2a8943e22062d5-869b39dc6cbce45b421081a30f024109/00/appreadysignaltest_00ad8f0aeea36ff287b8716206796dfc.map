{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/app/app-ready-signal.test.tsx"],"sourcesContent":["/**\n * @file Unit test for app-ready signal in App Router providers\n * @description Tests that the app-ready attribute is correctly set based on pathname and engine status\n */\n\nimport React from \"react\";\nimport { render, waitFor } from \"@testing-library/react\";\nimport { usePathname } from \"next/navigation\";\n\n// Mock Next.js navigation\njest.mock(\"next/navigation\", () => ({\n  usePathname: jest.fn(),\n}));\n\n// Mock the StoreContext to provide useStore\njest.mock(\"@shared/store/StoreContext\", () => ({\n  useStore: jest.fn(),\n  StoreProvider: ({ children }: { children: React.ReactNode }) => <>{children}</>,\n}));\n\n// Mock hydration hook\njest.mock(\"@shared/hooks/useHydration\", () => ({\n  useStoreHydration: jest.fn().mockReturnValue(true),\n}));\n\nimport { useStore } from \"@shared/store/StoreContext\";\n\n// Import component after mocks are set up\nimport { AppProviders } from \"../../../app/providers\";\n\ndescribe(\"App Ready Signal (App Router)\", () => {\n  const mockUsePathname = usePathname as jest.Mock;\n\n  beforeEach(() => {\n    // Setup pathname mock\n    mockUsePathname.mockReturnValue(\"/dashboard\");\n\n    // Default store mock - analysisStatus is now nested in tablebase slice\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"loading\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    // Clear body attributes\n    document.body.removeAttribute(\"data-app-ready\");\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test(\"should set data-app-ready to true when engine is initializing on non-training page\", async () => {\n    mockUsePathname.mockReturnValue(\"/dashboard\");\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"loading\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    render(\n      <AppProviders>\n        <div>Test Page</div>\n      </AppProviders>,\n    );\n\n    await waitFor(() => {\n      expect(document.body.getAttribute(\"data-app-ready\")).toBe(\"true\");\n    });\n  });\n\n  test(\"should set data-app-ready to false when engine is initializing on training page\", async () => {\n    mockUsePathname.mockReturnValue(\"/train/1\");\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"loading\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    render(\n      <AppProviders>\n        <div>Test Page</div>\n      </AppProviders>,\n    );\n\n    await waitFor(() => {\n      expect(document.body.getAttribute(\"data-app-ready\")).toBe(\"false\");\n    });\n  });\n\n  test(\"should set data-app-ready to true when engine is ready on non-training page\", async () => {\n    mockUsePathname.mockReturnValue(\"/dashboard\");\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"idle\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    render(\n      <AppProviders>\n        <div>Test Page</div>\n      </AppProviders>,\n    );\n\n    await waitFor(() => {\n      expect(document.body.getAttribute(\"data-app-ready\")).toBe(\"true\");\n    });\n  });\n\n  test(\"should set data-app-ready to true when engine is ready on training page\", async () => {\n    mockUsePathname.mockReturnValue(\"/train/1\");\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"idle\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    render(\n      <AppProviders>\n        <div>Test Page</div>\n      </AppProviders>,\n    );\n\n    await waitFor(() => {\n      expect(document.body.getAttribute(\"data-app-ready\")).toBe(\"true\");\n    });\n  });\n\n  test(\"should set data-app-ready to error when engine has error\", async () => {\n    mockUsePathname.mockReturnValue(\"/train/1\");\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"error\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    render(\n      <AppProviders>\n        <div>Test Page</div>\n      </AppProviders>,\n    );\n\n    await waitFor(() => {\n      expect(document.body.getAttribute(\"data-app-ready\")).toBe(\"error\");\n    });\n  });\n\n  test(\"should set data-app-ready to error when engine has error on non-training page\", async () => {\n    mockUsePathname.mockReturnValue(\"/dashboard\");\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"error\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    render(\n      <AppProviders>\n        <div>Test Page</div>\n      </AppProviders>,\n    );\n\n    await waitFor(() => {\n      expect(document.body.getAttribute(\"data-app-ready\")).toBe(\"error\");\n    });\n  });\n\n  test(\"should update data-app-ready when pathname changes\", async () => {\n    // Start on dashboard page\n    mockUsePathname.mockReturnValue(\"/dashboard\");\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"idle\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    const { rerender } = render(\n      <AppProviders>\n        <div>Test Page</div>\n      </AppProviders>,\n    );\n\n    await waitFor(() => {\n      expect(document.body.getAttribute(\"data-app-ready\")).toBe(\"true\");\n    });\n\n    // Change to training page with initializing engine\n    mockUsePathname.mockReturnValue(\"/train/1\");\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"loading\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    rerender(\n      <AppProviders>\n        <div>Test Page</div>\n      </AppProviders>,\n    );\n\n    await waitFor(() => {\n      expect(document.body.getAttribute(\"data-app-ready\")).toBe(\"false\");\n    });\n  });\n\n  test(\"should update data-app-ready when engine status changes\", async () => {\n    mockUsePathname.mockReturnValue(\"/train/1\");\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"loading\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    const { rerender } = render(\n      <AppProviders>\n        <div>Test Page</div>\n      </AppProviders>,\n    );\n\n    await waitFor(() => {\n      expect(document.body.getAttribute(\"data-app-ready\")).toBe(\"false\");\n    });\n\n    // Engine becomes ready\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"idle\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    rerender(\n      <AppProviders>\n        <div>Test Page</div>\n      </AppProviders>,\n    );\n\n    await waitFor(() => {\n      expect(document.body.getAttribute(\"data-app-ready\")).toBe(\"true\");\n    });\n  });\n\n  test(\"should handle null pathname gracefully\", async () => {\n    mockUsePathname.mockReturnValue(null);\n    (useStore as unknown as jest.Mock).mockImplementation((selector) => {\n      const state = {\n        tablebase: {\n          analysisStatus: \"idle\",\n        },\n      };\n      return selector ? selector(state) : state;\n    });\n\n    render(\n      <AppProviders>\n        <div>Test Page</div>\n      </AppProviders>,\n    );\n\n    await waitFor(() => {\n      expect(document.body.getAttribute(\"data-app-ready\")).toBe(\"false\");\n    });\n  });\n});\n"],"names":["jest","mock","usePathname","fn","useStore","StoreProvider","children","useStoreHydration","mockReturnValue","describe","mockUsePathname","beforeEach","mockImplementation","selector","state","tablebase","analysisStatus","document","body","removeAttribute","afterEach","clearAllMocks","test","render","AppProviders","div","waitFor","expect","getAttribute","toBe","rerender"],"mappings":"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"}