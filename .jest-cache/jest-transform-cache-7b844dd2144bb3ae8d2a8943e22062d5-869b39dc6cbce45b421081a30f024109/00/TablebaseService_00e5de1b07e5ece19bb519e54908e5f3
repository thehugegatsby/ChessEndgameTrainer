81c2aebd2b2a1c112f662188ffbf185a
/**
 * Central Mock for TablebaseService
 *
 * This mock provides a consistent, centralized mock implementation for the TablebaseService
 * that can be used across all test files. It follows Jest's manual mock pattern.
 *
 * Usage:
 * - Jest will automatically use this mock when `jest.mock('@shared/services/TablebaseService')` is called
 * - Test files can import helper methods to customize mock behavior
 * - Default implementations return sensible test data
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get clearMockCalls () {
        return clearMockCalls;
    },
    get mockApiError () {
        return mockApiError;
    },
    get mockDrawPosition () {
        return mockDrawPosition;
    },
    get mockLoading () {
        return mockLoading;
    },
    get mockLossPosition () {
        return mockLossPosition;
    },
    get mockNotAvailable () {
        return mockNotAvailable;
    },
    get mockWinPosition () {
        return mockWinPosition;
    },
    get resetMock () {
        return resetMock;
    },
    get tablebaseService () {
        return tablebaseService;
    }
});
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
/**
 * Default mock tablebase result
 */ const createDefaultResult = ()=>({
        wdl: 0,
        dtz: 0,
        dtm: null,
        category: "draw",
        precise: false,
        evaluation: "Remis"
    });
/**
 * Default mock tablebase move
 */ const createDefaultMove = ()=>({
        uci: "e2e4",
        san: "e4",
        wdl: 0,
        dtz: 0,
        dtm: null,
        category: "draw"
    });
/**
 * Mock TablebaseService implementation
 */ class MockTablebaseService {
    /**
   * Setup default mock implementations
   */ setupDefaults() {
        // Default getEvaluation - returns draw position
        this.getEvaluation.mockImplementation(async (_fen)=>({
                isAvailable: true,
                result: createDefaultResult()
            }));
        // Default getTopMoves - returns one draw move
        this.getTopMoves.mockImplementation(async (_fen, _limit)=>({
                isAvailable: true,
                moves: [
                    createDefaultMove()
                ]
            }));
        // Default clearCache - does nothing
        this.clearCache.mockImplementation(()=>undefined);
        // Default getMetrics
        this.getMetrics.mockReturnValue({
            cacheHitRate: 0,
            totalApiCalls: 0,
            cacheSize: 0,
            maxCacheSize: 200
        });
    }
    /**
   * Helper: Mock a winning position
   */ mockWinPosition(fen, dtm = 5) {
        const result = {
            wdl: 2,
            dtz: dtm * 2,
            dtm: dtm,
            category: "win",
            precise: true,
            evaluation: `Gewinn in ${dtm} Zügen`
        };
        const move = {
            uci: "e2e3",
            san: "Ke3",
            wdl: 2,
            dtz: (dtm - 1) * 2,
            dtm: dtm - 1,
            category: "win"
        };
        if (fen) {
            this.getEvaluation.mockImplementation(async (f)=>f === fen ? {
                    isAvailable: true,
                    result
                } : {
                    isAvailable: false
                });
            this.getTopMoves.mockImplementation(async (f)=>f === fen ? {
                    isAvailable: true,
                    moves: [
                        move
                    ]
                } : {
                    isAvailable: false
                });
        } else {
            this.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result
            });
            this.getTopMoves.mockResolvedValue({
                isAvailable: true,
                moves: [
                    move
                ]
            });
        }
    }
    /**
   * Helper: Mock a draw position
   */ mockDrawPosition(fen) {
        const result = {
            wdl: 0,
            dtz: 0,
            dtm: null,
            category: "draw",
            precise: true,
            evaluation: "Remis"
        };
        const move = {
            uci: "e2e3",
            san: "Ke3",
            wdl: 0,
            dtz: 0,
            dtm: null,
            category: "draw"
        };
        if (fen) {
            this.getEvaluation.mockImplementation(async (f)=>f === fen ? {
                    isAvailable: true,
                    result
                } : {
                    isAvailable: false
                });
            this.getTopMoves.mockImplementation(async (f)=>f === fen ? {
                    isAvailable: true,
                    moves: [
                        move
                    ]
                } : {
                    isAvailable: false
                });
        } else {
            this.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result
            });
            this.getTopMoves.mockResolvedValue({
                isAvailable: true,
                moves: [
                    move
                ]
            });
        }
    }
    /**
   * Helper: Mock a losing position
   */ mockLossPosition(fen, dtm = -5) {
        const result = {
            wdl: -2,
            dtz: dtm * 2,
            dtm: dtm,
            category: "loss",
            precise: true,
            evaluation: `Verlust in ${Math.abs(dtm)} Zügen`
        };
        const move = {
            uci: "e8d7",
            san: "Kd7",
            wdl: -2,
            dtz: (dtm + 1) * 2,
            dtm: dtm + 1,
            category: "loss"
        };
        if (fen) {
            this.getEvaluation.mockImplementation(async (f)=>f === fen ? {
                    isAvailable: true,
                    result
                } : {
                    isAvailable: false
                });
            this.getTopMoves.mockImplementation(async (f)=>f === fen ? {
                    isAvailable: true,
                    moves: [
                        move
                    ]
                } : {
                    isAvailable: false
                });
        } else {
            this.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result
            });
            this.getTopMoves.mockResolvedValue({
                isAvailable: true,
                moves: [
                    move
                ]
            });
        }
    }
    /**
   * Helper: Mock API error
   */ mockApiError(errorMessage = "Tablebase API unavailable") {
        this.getEvaluation.mockRejectedValue(new Error(errorMessage));
        this.getTopMoves.mockRejectedValue(new Error(errorMessage));
    }
    /**
   * Helper: Mock position not in tablebase
   */ mockNotAvailable(fen) {
        const response = {
            isAvailable: false,
            error: "Position not in tablebase"
        };
        const movesResponse = {
            isAvailable: false,
            error: "Position not in tablebase"
        };
        if (fen) {
            this.getEvaluation.mockImplementation(async (f)=>f === fen ? response : {
                    isAvailable: true,
                    result: createDefaultResult()
                });
            this.getTopMoves.mockImplementation(async (f)=>f === fen ? movesResponse : {
                    isAvailable: true,
                    moves: [
                        createDefaultMove()
                    ]
                });
        } else {
            this.getEvaluation.mockResolvedValue(response);
            this.getTopMoves.mockResolvedValue(movesResponse);
        }
    }
    /**
   * Helper: Mock loading state
   */ mockLoading(delayMs = 1000) {
        this.getEvaluation.mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                        isAvailable: true,
                        result: {
                            wdl: 2,
                            dtz: 10,
                            dtm: 5,
                            category: "win",
                            precise: true,
                            evaluation: "Gewinn in 5 Zügen"
                        }
                    }), delayMs)));
        this.getTopMoves.mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                        isAvailable: true,
                        moves: [
                            {
                                uci: "e2e3",
                                san: "Ke3",
                                wdl: 2,
                                dtz: 8,
                                dtm: 4,
                                category: "win"
                            }
                        ]
                    }), delayMs)));
    }
    /**
   * Helper: Reset all mocks to defaults
   */ reset() {
        this.getEvaluation.mockClear();
        this.getTopMoves.mockClear();
        this.clearCache.mockClear();
        this.getMetrics.mockClear();
        this.setupDefaults();
    }
    /**
   * Helper: Clear mock calls but keep implementations
   */ clearCalls() {
        this.getEvaluation.mockClear();
        this.getTopMoves.mockClear();
        this.clearCache.mockClear();
        this.getMetrics.mockClear();
    }
    constructor(){
        // Mock methods as jest functions
        _define_property(this, "getEvaluation", jest.fn());
        _define_property(this, "getTopMoves", jest.fn());
        _define_property(this, "clearCache", jest.fn());
        _define_property(this, "getMetrics", jest.fn());
        // Set up default implementations
        this.setupDefaults();
    }
}
// Create singleton instance
const mockTablebaseService = new MockTablebaseService();
const tablebaseService = mockTablebaseService;
const mockWinPosition = (fen, dtm)=>mockTablebaseService.mockWinPosition(fen, dtm);
const mockDrawPosition = (fen)=>mockTablebaseService.mockDrawPosition(fen);
const mockLossPosition = (fen, dtm)=>mockTablebaseService.mockLossPosition(fen, dtm);
const mockApiError = (message)=>mockTablebaseService.mockApiError(message);
const mockNotAvailable = (fen)=>mockTablebaseService.mockNotAvailable(fen);
const mockLoading = (delayMs)=>mockTablebaseService.mockLoading(delayMs);
const resetMock = ()=>mockTablebaseService.reset();
const clearMockCalls = ()=>mockTablebaseService.clearCalls();

//# sourceMappingURL=data:application/json;base64,