{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/testing/TestScenarios.ts"],"sourcesContent":["/**\n * @file Test scenario definitions for chess endgame training\n * @module testing/TestScenarios\n *\n * @description\n * Provides comprehensive test scenarios for chess endgame training with verified\n * positions from the Firebase database. Contains real training positions with\n * correct FEN strings, solutions, hints, and difficulty classifications.\n *\n * @remarks\n * Key features:\n * - Verified FEN positions from actual Firebase data\n * - Complete solutions with move sequences\n * - Progressive difficulty levels (beginner to intermediate)\n * - Bridge building technique scenarios (Zickzack, positioning, deflection)\n * - Opposition fundamentals for pawn endgames\n * - Conversion utilities between TestScenario and EndgamePosition types\n *\n * All positions have been tested and validated for correctness and include\n * realistic move targets and German language hints for training purposes.\n */\n\nimport { EndgamePosition } from \"@shared/types/endgame\";\n\n// REMOVED: EngineMove and TestInteraction interfaces\n// These were unused legacy code. Use TablebaseMove from TablebaseService instead.\n\n// DELETED: TestScenario interface - use EndgamePosition instead\n// If you need TestScenario compatibility, use the conversion functions below\n\n/**\n * Real test positions from Firebase database\n *\n * @description\n * Collection of verified chess endgame positions with complete training data.\n * Each position includes FEN string, solution moves, hints, and metadata\n * required for comprehensive endgame training scenarios.\n *\n * @remarks\n * Position categories:\n * - Opposition fundamentals (king and pawn endgames)\n * - Bridge building techniques (rook and pawn endgames)\n * - Zickzack technique for king advancement\n * - Rook positioning and deflection strategies\n *\n * All positions use the TestScenario interface which extends EndgamePosition\n * with string IDs for test-specific compatibility.\n */\nexport const TestPositions: Record<string, TestScenario> = {\n  // Position 1: \"Opposition Grundlagen\" from Firebase\n  // FEN: \"4k3/8/4K3/4P3/8/8/8/8 w - - 0 1\"\n  // White K+P vs Black K, White to move, goal: win, mate in #11\n  POSITION_1_OPPOSITION_BASICS: {\n    id: \"1\", // TestScenario uses string IDs\n    title: \"Opposition Grundlagen\",\n    description:\n      \"Opposition Grundlagen - Lerne das fundamentale Konzept der Opposition in Bauernendspielen\",\n    fen: \"4k3/8/4K3/4P3/8/8/8/8 w - - 0 1\", // REAL FEN from Firebase\n    category: \"endgame\",\n    difficulty: \"beginner\",\n    targetMoves: 11, // Mate in 11 moves\n    sideToMove: \"white\",\n    goal: \"win\",\n    hints: [\n      \"Verwende die Opposition um den gegnerischen König zu verdrängen\",\n      \"Kf6 oder Kd6 sind gleichwertige Züge\",\n      \"Der Bauer auf e5 entscheidet das Spiel\",\n    ],\n    solution: [\n      \"Kf6\",\n      \"Kf8\",\n      \"e6\",\n      \"Ke8\",\n      \"e7\",\n      \"Kd7\",\n      \"Kf7\",\n      \"Kd6\",\n      \"e8=Q\",\n      \"Kd5\",\n      \"Qe7\",\n      \"mate\",\n    ],\n    // nextPositionId is omitted (undefined) for JSON serialization compatibility\n  },\n\n  // Position 9: \"Zickzack-Technik\" Brückenbau-Trainer (was 12)\n  // FEN: \"2K5/2P2k2/8/8/4R3/8/1r6/8 w - - 0 1\"\n  // White K+P+R vs Black K+R, White to move, goal: win using bridge technique\n  POSITION_9_BRIDGE_ZICKZACK: {\n    id: \"9\", // TestScenario uses string IDs\n    title: \"Zickzack-Technik\",\n    description: \"König läuft im Zickzack nach vorne, Turm schützt von hinten\",\n    fen: \"2K5/2P2k2/8/8/4R3/8/1r6/8 w - - 0 1\", // From homepage bridgeTrainerLessons\n    category: \"endgame\",\n    difficulty: \"beginner\",\n    targetMoves: 8, // Estimated moves to win\n    sideToMove: \"white\",\n    goal: \"win\",\n    hints: [\n      \"König läuft im Zickzack nach vorne\",\n      \"Turm schützt von hinten\",\n      \"Kd7, Kc6, Kb5 sind die Schlüsselzüge\",\n    ],\n    solution: [\"Kd7\", \"Kf8\", \"Kc6\", \"Ke7\", \"Kb5\", \"Kd6\", \"Re6+\", \"Kd5\", \"c8=Q\"],\n  },\n\n  // Position 10: \"Turm positionieren\" Brückenbau-Trainer (was 13)\n  // FEN: \"2K2k2/2P5/8/8/8/8/1r6/4R3 w - - 0 1\"\n  // White K+P+R vs Black K+R, White to move, goal: win by positioning rook first\n  POSITION_10_BRIDGE_POSITIONING: {\n    id: \"10\", // TestScenario uses string IDs\n    title: \"Turm positionieren\",\n    description:\n      \"Turm erst auf die 4. oder 5. Reihe bringen, dann Brücke bauen\",\n    fen: \"2K2k2/2P5/8/8/8/8/1r6/4R3 w - - 0 1\", // From homepage bridgeTrainerLessons\n    category: \"endgame\",\n    difficulty: \"beginner\",\n    targetMoves: 10, // Estimated moves to win\n    sideToMove: \"white\",\n    goal: \"win\",\n    hints: [\n      \"Turm auf die 4. oder 5. Reihe positionieren\",\n      \"Re4 oder Re5 sind gute Züge\",\n      \"Dann normale Brückenbau-Technik anwenden\",\n    ],\n    solution: [\n      \"Re4\",\n      \"Kd8\",\n      \"Kd7\",\n      \"Kc8\",\n      \"Kc6\",\n      \"Kd8\",\n      \"Kb5\",\n      \"Kc7\",\n      \"Re7+\",\n      \"Kd6\",\n      \"c8=Q\",\n    ],\n  },\n\n  // Position 11: \"König abdrängen\" Brückenbau-Trainer (was 14)\n  // FEN: \"2K1k3/2P5/8/8/8/8/1r6/7R w - - 0 1\"\n  // White K+P+R vs Black K+R, White to move, goal: win by deflecting king first\n  POSITION_11_BRIDGE_DEFLECTION: {\n    id: \"11\", // TestScenario uses string IDs\n    title: \"König abdrängen\",\n    description: \"König steht noch zentral - erst abdrängen, dann Brücke bauen\",\n    fen: \"2K1k3/2P5/8/8/8/8/1r6/7R w - - 0 1\", // From homepage bridgeTrainerLessons\n    category: \"endgame\",\n    difficulty: \"intermediate\",\n    targetMoves: 12, // Estimated moves to win\n    sideToMove: \"white\",\n    goal: \"win\",\n    hints: [\n      \"König mit einem Turmschach abdrängen\",\n      \"Re1+ zwingt den König auf f8\",\n      \"Dann Turm positionieren und Brücke bauen\",\n    ],\n    solution: [\n      \"Re1+\",\n      \"Kf8\",\n      \"Re4\",\n      \"Kf7\",\n      \"Kd7\",\n      \"Kf8\",\n      \"Kc6\",\n      \"Ke7\",\n      \"Kb5\",\n      \"Kd6\",\n      \"Re6+\",\n      \"Kd5\",\n      \"c8=Q\",\n    ],\n  },\n};\n\n/**\n * Legacy position ID mapping\n */\nexport /**\n *\n */\nconst PositionIdMap = new Map<number, keyof typeof TestPositions>([\n  [1, \"POSITION_1_OPPOSITION_BASICS\"],\n  [9, \"POSITION_9_BRIDGE_ZICKZACK\"], // Was 12\n  [10, \"POSITION_10_BRIDGE_POSITIONING\"], // Was 13\n  [11, \"POSITION_11_BRIDGE_DEFLECTION\"], // Was 14\n]);\n\n/**\n * Get test position by legacy position ID\n *\n * @param {number} positionId - The numeric position ID to look up\n * @returns {EndgamePosition | null} The endgame position or null if not found\n *\n * @description\n * Converts TestScenario to EndgamePosition by removing test-specific fields\n * and transforming string ID to numeric ID. Provides compatibility with\n * legacy position ID mapping system.\n *\n * @example\n * ```typescript\n * const position = getPositionByPositionId(1);\n * // Returns position with opposition fundamentals\n *\n * const unknown = getPositionByPositionId(999);\n * // Returns null\n * ```\n */\nexport function getPositionByPositionId(\n  positionId: number,\n): EndgamePosition | null {\n  const positionKey = PositionIdMap.get(positionId);\n  if (!positionKey) return null;\n\n  const scenario = TestPositions[positionKey];\n  // Convert TestScenario to EndgamePosition\n  return {\n    id: parseInt(scenario.id),\n    title: scenario.title,\n    description: scenario.description,\n    fen: scenario.fen,\n    category: scenario.category,\n    difficulty: scenario.difficulty,\n    targetMoves: scenario.targetMoves,\n    hints: scenario.hints,\n    solution: scenario.solution,\n    sideToMove: scenario.sideToMove,\n    goal: scenario.goal,\n    nextPositionId: scenario.nextPositionId,\n  };\n}\n\n/**\n * Test-specific scenario interface\n *\n * @interface TestScenario\n * @extends {Omit<EndgamePosition, \"id\">}\n *\n * @description\n * Extended version of EndgamePosition that uses string IDs instead of numeric IDs\n * for test scenario compatibility. Provides same functionality as EndgamePosition\n * but with test-friendly string identifiers.\n *\n * @property {string} id - String identifier for test scenarios (overrides numeric ID)\n */\nexport interface TestScenario extends Omit<EndgamePosition, \"id\"> {\n  id: string; // Override to be string for test scenarios\n}\n\n/**\n * Get test scenario by legacy position ID (DEPRECATED - use getPositionByPositionId)\n * @param positionId\n */\nexport function getScenarioByPositionId(\n  positionId: number,\n): TestScenario | null {\n  const positionKey = PositionIdMap.get(positionId);\n  if (!positionKey) return null;\n  const position = TestPositions[positionKey];\n\n  // Return the complete TestScenario (TestPositions already stores TestScenario objects)\n  return position;\n}\n\n/**\n * Utility functions for test position management\n *\n * @class TestPositionUtils\n * @description\n * Provides static utility methods for working with test positions and scenarios.\n * Includes FEN normalization, position lookup by ID or FEN, and conversion\n * between TestScenario and EndgamePosition formats.\n */\nexport class TestPositionUtils {\n  /**\n   * Normalize a FEN string by removing move counters\n   *\n   * @param {string} fen - The FEN string to normalize\n   * @returns {string} Normalized FEN string (first 4 parts only)\n   *\n   * @description\n   * Removes halfmove and fullmove counters from FEN string for consistent\n   * position comparison. Keeps only piece placement, active color, castling\n   * availability, and en passant target square.\n   *\n   * @example\n   * ```typescript\n   * const normalized = TestPositionUtils.normalizeFen('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1');\n   * // Returns: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq -'\n   * ```\n   */\n  static normalizeFen(fen: string): string {\n    const parts = fen.trim().split(/\\s+/);\n    if (parts.length >= 4) {\n      return parts.slice(0, 4).join(\" \");\n    }\n    return fen;\n  }\n\n  /**\n   * Get endgame position by test position key\n   *\n   * @param {keyof typeof TestPositions} id - The test position key\n   * @returns {EndgamePosition} The endgame position\n   * @throws {Error} If the position is not found\n   *\n   * @description\n   * Retrieves a test position by its key and converts from TestScenario\n   * to EndgamePosition format. Throws an error if the position doesn't exist.\n   *\n   * @example\n   * ```typescript\n   * const position = TestPositionUtils.getPosition('POSITION_1_OPPOSITION_BASICS');\n   * // Returns opposition fundamentals position\n   * ```\n   */\n  static getPosition(id: keyof typeof TestPositions): EndgamePosition {\n    const scenario = TestPositions[id];\n    if (!scenario) {\n      throw new Error(`Test position not found: ${id}`);\n    }\n\n    // Convert TestScenario to EndgamePosition\n    return {\n      id: parseInt(scenario.id),\n      title: scenario.title,\n      description: scenario.description,\n      fen: scenario.fen,\n      category: scenario.category,\n      difficulty: scenario.difficulty,\n      targetMoves: scenario.targetMoves,\n      hints: scenario.hints,\n      solution: scenario.solution,\n      sideToMove: scenario.sideToMove,\n      goal: scenario.goal,\n      nextPositionId: scenario.nextPositionId,\n    };\n  }\n\n  /**\n   * Get endgame position by FEN string\n   *\n   * @param {string} fen - The FEN string to match\n   * @returns {EndgamePosition | null} The matching position or null if not found\n   *\n   * @description\n   * Searches for a test position matching the given FEN string and returns\n   * it as an EndgamePosition. Uses exact FEN matching for position lookup.\n   *\n   * @example\n   * ```typescript\n   * const position = TestPositionUtils.getPositionByFen('4k3/8/4K3/4P3/8/8/8/8 w - - 0 1');\n   * // Returns opposition fundamentals position\n   *\n   * const notFound = TestPositionUtils.getPositionByFen('invalid-fen');\n   * // Returns null\n   * ```\n   */\n  static getPositionByFen(fen: string): EndgamePosition | null {\n    const scenario = Object.values(TestPositions).find(\n      (position) => position.fen === fen,\n    );\n    if (!scenario) return null;\n\n    // Convert TestScenario to EndgamePosition\n    return {\n      id: parseInt(scenario.id),\n      title: scenario.title,\n      description: scenario.description,\n      fen: scenario.fen,\n      category: scenario.category,\n      difficulty: scenario.difficulty,\n      targetMoves: scenario.targetMoves,\n      hints: scenario.hints,\n      solution: scenario.solution,\n      sideToMove: scenario.sideToMove,\n      goal: scenario.goal,\n      nextPositionId: scenario.nextPositionId,\n    };\n  }\n}\n\n/**\n * Reverse lookup map for fast FEN-to-position mapping\n */\nexport /**\n *\n */\nconst FenToPositionMap = new Map<string, EndgamePosition>(\n  Object.values(TestPositions).map((scenario) => [\n    scenario.fen,\n    {\n      id: parseInt(scenario.id),\n      title: scenario.title,\n      description: scenario.description,\n      fen: scenario.fen,\n      category: scenario.category,\n      difficulty: scenario.difficulty,\n      targetMoves: scenario.targetMoves,\n      hints: scenario.hints,\n      solution: scenario.solution,\n      sideToMove: scenario.sideToMove,\n      goal: scenario.goal,\n      nextPositionId: scenario.nextPositionId,\n    },\n  ]),\n);\n\n/**\n * Reverse lookup map for fast FEN-to-scenario mapping (DEPRECATED - use FenToPositionMap)\n */\nexport /**\n *\n */\nconst FenToScenarioMap = new Map<string, TestScenario>(\n  Object.values(TestPositions).map((position) => [position.fen, position]),\n);\n"],"names":["FenToPositionMap","FenToScenarioMap","PositionIdMap","TestPositionUtils","TestPositions","getPositionByPositionId","getScenarioByPositionId","POSITION_1_OPPOSITION_BASICS","id","title","description","fen","category","difficulty","targetMoves","sideToMove","goal","hints","solution","POSITION_9_BRIDGE_ZICKZACK","POSITION_10_BRIDGE_POSITIONING","POSITION_11_BRIDGE_DEFLECTION","Map","positionId","positionKey","get","scenario","parseInt","nextPositionId","position","normalizeFen","parts","trim","split","length","slice","join","getPosition","Error","getPositionByFen","Object","values","find","map"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;CAoBC;;;;;;;;;;;QAiXKA;eAAAA;;QA0BAC;eAAAA;;QAzOAC;eAAAA;;QA4FOC;eAAAA;;QAlOAC;eAAAA;;QAiKGC;eAAAA;;QA6CAC;eAAAA;;;AA9MT,MAAMF,gBAA8C;IACzD,oDAAoD;IACpD,yCAAyC;IACzC,8DAA8D;IAC9DG,8BAA8B;QAC5BC,IAAI;QACJC,OAAO;QACPC,aACE;QACFC,KAAK;QACLC,UAAU;QACVC,YAAY;QACZC,aAAa;QACbC,YAAY;QACZC,MAAM;QACNC,OAAO;YACL;YACA;YACA;SACD;QACDC,UAAU;YACR;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IAEH;IAEA,6DAA6D;IAC7D,6CAA6C;IAC7C,4EAA4E;IAC5EC,4BAA4B;QAC1BX,IAAI;QACJC,OAAO;QACPC,aAAa;QACbC,KAAK;QACLC,UAAU;QACVC,YAAY;QACZC,aAAa;QACbC,YAAY;QACZC,MAAM;QACNC,OAAO;YACL;YACA;YACA;SACD;QACDC,UAAU;YAAC;YAAO;YAAO;YAAO;YAAO;YAAO;YAAO;YAAQ;YAAO;SAAO;IAC7E;IAEA,gEAAgE;IAChE,6CAA6C;IAC7C,+EAA+E;IAC/EE,gCAAgC;QAC9BZ,IAAI;QACJC,OAAO;QACPC,aACE;QACFC,KAAK;QACLC,UAAU;QACVC,YAAY;QACZC,aAAa;QACbC,YAAY;QACZC,MAAM;QACNC,OAAO;YACL;YACA;YACA;SACD;QACDC,UAAU;YACR;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IACH;IAEA,6DAA6D;IAC7D,4CAA4C;IAC5C,8EAA8E;IAC9EG,+BAA+B;QAC7Bb,IAAI;QACJC,OAAO;QACPC,aAAa;QACbC,KAAK;QACLC,UAAU;QACVC,YAAY;QACZC,aAAa;QACbC,YAAY;QACZC,MAAM;QACNC,OAAO;YACL;YACA;YACA;SACD;QACDC,UAAU;YACR;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IACH;AACF;AAKO;;CAEN,GACD,MAAMhB,gBAAgB,IAAIoB,IAAwC;IAChE;QAAC;QAAG;KAA+B;IACnC;QAAC;QAAG;KAA6B;IACjC;QAAC;QAAI;KAAiC;IACtC;QAAC;QAAI;KAAgC;CACtC;AAsBM,SAASjB,wBACdkB,UAAkB;IAElB,MAAMC,cAActB,cAAcuB,GAAG,CAACF;IACtC,IAAI,CAACC,aAAa,OAAO;IAEzB,MAAME,WAAWtB,aAAa,CAACoB,YAAY;IAC3C,0CAA0C;IAC1C,OAAO;QACLhB,IAAImB,SAASD,SAASlB,EAAE;QACxBC,OAAOiB,SAASjB,KAAK;QACrBC,aAAagB,SAAShB,WAAW;QACjCC,KAAKe,SAASf,GAAG;QACjBC,UAAUc,SAASd,QAAQ;QAC3BC,YAAYa,SAASb,UAAU;QAC/BC,aAAaY,SAASZ,WAAW;QACjCG,OAAOS,SAAST,KAAK;QACrBC,UAAUQ,SAASR,QAAQ;QAC3BH,YAAYW,SAASX,UAAU;QAC/BC,MAAMU,SAASV,IAAI;QACnBY,gBAAgBF,SAASE,cAAc;IACzC;AACF;AAuBO,SAAStB,wBACdiB,UAAkB;IAElB,MAAMC,cAActB,cAAcuB,GAAG,CAACF;IACtC,IAAI,CAACC,aAAa,OAAO;IACzB,MAAMK,WAAWzB,aAAa,CAACoB,YAAY;IAE3C,uFAAuF;IACvF,OAAOK;AACT;AAWO,MAAM1B;IACX;;;;;;;;;;;;;;;;GAgBC,GACD,OAAO2B,aAAanB,GAAW,EAAU;QACvC,MAAMoB,QAAQpB,IAAIqB,IAAI,GAAGC,KAAK,CAAC;QAC/B,IAAIF,MAAMG,MAAM,IAAI,GAAG;YACrB,OAAOH,MAAMI,KAAK,CAAC,GAAG,GAAGC,IAAI,CAAC;QAChC;QACA,OAAOzB;IACT;IAEA;;;;;;;;;;;;;;;;GAgBC,GACD,OAAO0B,YAAY7B,EAA8B,EAAmB;QAClE,MAAMkB,WAAWtB,aAAa,CAACI,GAAG;QAClC,IAAI,CAACkB,UAAU;YACb,MAAM,IAAIY,MAAM,CAAC,yBAAyB,EAAE9B,IAAI;QAClD;QAEA,0CAA0C;QAC1C,OAAO;YACLA,IAAImB,SAASD,SAASlB,EAAE;YACxBC,OAAOiB,SAASjB,KAAK;YACrBC,aAAagB,SAAShB,WAAW;YACjCC,KAAKe,SAASf,GAAG;YACjBC,UAAUc,SAASd,QAAQ;YAC3BC,YAAYa,SAASb,UAAU;YAC/BC,aAAaY,SAASZ,WAAW;YACjCG,OAAOS,SAAST,KAAK;YACrBC,UAAUQ,SAASR,QAAQ;YAC3BH,YAAYW,SAASX,UAAU;YAC/BC,MAAMU,SAASV,IAAI;YACnBY,gBAAgBF,SAASE,cAAc;QACzC;IACF;IAEA;;;;;;;;;;;;;;;;;;GAkBC,GACD,OAAOW,iBAAiB5B,GAAW,EAA0B;QAC3D,MAAMe,WAAWc,OAAOC,MAAM,CAACrC,eAAesC,IAAI,CAChD,CAACb,WAAaA,SAASlB,GAAG,KAAKA;QAEjC,IAAI,CAACe,UAAU,OAAO;QAEtB,0CAA0C;QAC1C,OAAO;YACLlB,IAAImB,SAASD,SAASlB,EAAE;YACxBC,OAAOiB,SAASjB,KAAK;YACrBC,aAAagB,SAAShB,WAAW;YACjCC,KAAKe,SAASf,GAAG;YACjBC,UAAUc,SAASd,QAAQ;YAC3BC,YAAYa,SAASb,UAAU;YAC/BC,aAAaY,SAASZ,WAAW;YACjCG,OAAOS,SAAST,KAAK;YACrBC,UAAUQ,SAASR,QAAQ;YAC3BH,YAAYW,SAASX,UAAU;YAC/BC,MAAMU,SAASV,IAAI;YACnBY,gBAAgBF,SAASE,cAAc;QACzC;IACF;AACF;AAKO;;CAEN,GACD,MAAM5B,mBAAmB,IAAIsB,IAC3BkB,OAAOC,MAAM,CAACrC,eAAeuC,GAAG,CAAC,CAACjB,WAAa;QAC7CA,SAASf,GAAG;QACZ;YACEH,IAAImB,SAASD,SAASlB,EAAE;YACxBC,OAAOiB,SAASjB,KAAK;YACrBC,aAAagB,SAAShB,WAAW;YACjCC,KAAKe,SAASf,GAAG;YACjBC,UAAUc,SAASd,QAAQ;YAC3BC,YAAYa,SAASb,UAAU;YAC/BC,aAAaY,SAASZ,WAAW;YACjCG,OAAOS,SAAST,KAAK;YACrBC,UAAUQ,SAASR,QAAQ;YAC3BH,YAAYW,SAASX,UAAU;YAC/BC,MAAMU,SAASV,IAAI;YACnBY,gBAAgBF,SAASE,cAAc;QACzC;KACD;AAMI;;CAEN,GACD,MAAM3B,mBAAmB,IAAIqB,IAC3BkB,OAAOC,MAAM,CAACrC,eAAeuC,GAAG,CAAC,CAACd,WAAa;QAACA,SAASlB,GAAG;QAAEkB;KAAS"}