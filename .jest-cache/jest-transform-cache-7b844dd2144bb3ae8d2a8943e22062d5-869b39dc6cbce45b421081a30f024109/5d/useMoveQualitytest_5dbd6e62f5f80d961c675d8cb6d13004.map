{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/hooks/useMoveQuality.test.ts"],"sourcesContent":["/**\n * @file Tests for useMoveQuality hook\n * @module tests/unit/hooks/useMoveQuality\n * \n * @description\n * Comprehensive tests for the useMoveQuality hook that handles\n * chess move quality assessment and evaluation.\n * \n * Tests cover:\n * - Move quality classification (excellent, good, inaccurate, mistake, blunder)\n * - WDL (Win/Draw/Loss) analysis\n * - DTM (Distance to Mate) evaluation\n * - Tablebase integration and error handling\n */\n\nimport { renderHook, act } from '@testing-library/react';\nimport { useMoveQuality } from '@shared/hooks/useMoveQuality';\n\n// Mock the logger\njest.mock('@shared/services/logging/Logger', () => ({\n  getLogger: jest.fn(() => ({\n    setContext: jest.fn(() => ({\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n    })),\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  })),\n  Logger: jest.fn().mockImplementation(() => ({\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  })),\n}));\n\ndescribe('useMoveQuality', () => {\n  const mockTablebaseMove = {\n    move: 'Kh1',\n    wdl: 1,\n    dtm: 5,\n    evaluation: 100,\n  };\n\n  const mockPosition = {\n    fen: '8/8/8/8/8/8/8/8 w - - 0 1',\n    moves: [mockTablebaseMove],\n    bestMove: 'Kh1',\n    isAvailable: true,\n  };\n\n  const defaultProps = {\n    currentPosition: mockPosition,\n    playerMove: mockTablebaseMove,\n    evaluationBaseline: { wdl: 0, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n  };\n\n  describe('Hook Initialization', () => {\n    it('returns move quality assessment interface', () => {\n      const { result } = renderHook(() => useMoveQuality(defaultProps));\n\n      expect(result.current).toHaveProperty('moveQuality');\n      expect(result.current).toHaveProperty('isOptimalMove');\n      expect(result.current).toHaveProperty('wdlChange');\n      expect(result.current).toHaveProperty('qualityDescription');\n    });\n\n    it('handles missing position data gracefully', () => {\n      const propsWithoutPosition = {\n        ...defaultProps,\n        currentPosition: null,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(propsWithoutPosition));\n\n      expect(result.current).toBeDefined();\n      expect(result.current.moveQuality).toBe('unknown');\n    });\n\n    it('handles missing player move gracefully', () => {\n      const propsWithoutMove = {\n        ...defaultProps,\n        playerMove: null,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(propsWithoutMove));\n\n      expect(result.current).toBeDefined();\n      expect(result.current.moveQuality).toBe('unknown');\n    });\n  });\n\n  describe('Move Quality Classification', () => {\n    it('classifies excellent moves correctly', () => {\n      const excellentMove = {\n        ...mockTablebaseMove,\n        wdl: 1, // Winning move\n        dtm: 3,  // Quick mate\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: excellentMove,\n        evaluationBaseline: { wdl: 1, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.moveQuality).toBe('excellent');\n      expect(result.current.isOptimalMove).toBe(true);\n    });\n\n    it('classifies good moves correctly', () => {\n      const goodMove = {\n        ...mockTablebaseMove,\n        wdl: 1,\n        dtm: 10, // Longer but still winning\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: goodMove,\n        evaluationBaseline: { wdl: 1, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(['good', 'excellent']).toContain(result.current.moveQuality);\n    });\n\n    it('classifies drawing moves correctly', () => {\n      const drawingMove = {\n        ...mockTablebaseMove,\n        wdl: 0,\n        dtm: 0,\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: drawingMove,\n        evaluationBaseline: { wdl: 0, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.moveQuality).toBe('good');\n      expect(result.current.wdlChange).toBe(0);\n    });\n\n    it('classifies mistakes correctly', () => {\n      const mistakeMove = {\n        ...mockTablebaseMove,\n        wdl: 0, // Draw instead of win\n        dtm: 0,\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: mistakeMove,\n        evaluationBaseline: { wdl: 1, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(['mistake', 'inaccurate']).toContain(result.current.moveQuality);\n      expect(result.current.wdlChange).toBe(-1);\n    });\n\n    it('classifies blunders correctly', () => {\n      const blunderMove = {\n        ...mockTablebaseMove,\n        wdl: -1, // Loss instead of win\n        dtm: -5,\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: blunderMove,\n        evaluationBaseline: { wdl: 1, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.moveQuality).toBe('blunder');\n      expect(result.current.wdlChange).toBe(-2);\n    });\n  });\n\n  describe('WDL (Win/Draw/Loss) Analysis', () => {\n    it('calculates positive WDL changes correctly', () => {\n      const improvingMove = {\n        ...mockTablebaseMove,\n        wdl: 1,\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: improvingMove,\n        evaluationBaseline: { wdl: 0, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.wdlChange).toBe(1);\n    });\n\n    it('calculates negative WDL changes correctly', () => {\n      const worseningMove = {\n        ...mockTablebaseMove,\n        wdl: 0,\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: worseningMove,\n        evaluationBaseline: { wdl: 1, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.wdlChange).toBe(-1);\n    });\n\n    it('handles neutral WDL changes', () => {\n      const neutralMove = {\n        ...mockTablebaseMove,\n        wdl: 1,\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: neutralMove,\n        evaluationBaseline: { wdl: 1, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.wdlChange).toBe(0);\n    });\n  });\n\n  describe('DTM (Distance to Mate) Analysis', () => {\n    it('prefers shorter mates in winning positions', () => {\n      const quickMate = {\n        ...mockTablebaseMove,\n        wdl: 1,\n        dtm: 3,\n      };\n\n      const slowMate = {\n        ...mockTablebaseMove,\n        wdl: 1,\n        dtm: 10,\n      };\n\n      const position = {\n        ...mockPosition,\n        moves: [quickMate, slowMate],\n        bestMove: 'Kh1', // Assuming quickMate is Kh1\n      };\n\n      const props = {\n        ...defaultProps,\n        currentPosition: position,\n        playerMove: quickMate,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.moveQuality).toBe('excellent');\n    });\n\n    it('handles negative DTM (being mated) correctly', () => {\n      const forcedMate = {\n        ...mockTablebaseMove,\n        wdl: -1,\n        dtm: -5, // Mated in 5\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: forcedMate,\n        evaluationBaseline: { wdl: 0, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.moveQuality).toBe('blunder');\n      expect(result.current.wdlChange).toBe(-1);\n    });\n\n    it('handles DTM of zero (immediate mate/draw)', () => {\n      const immediateDraw = {\n        ...mockTablebaseMove,\n        wdl: 0,\n        dtm: 0,\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: immediateDraw,\n        evaluationBaseline: { wdl: 0, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.wdlChange).toBe(0);\n    });\n  });\n\n  describe('Optimal Move Detection', () => {\n    it('identifies optimal moves correctly', () => {\n      const bestMove = {\n        ...mockTablebaseMove,\n        move: 'Kh1',\n        wdl: 1,\n        dtm: 3,\n      };\n\n      const position = {\n        ...mockPosition,\n        bestMove: 'Kh1',\n        moves: [bestMove],\n      };\n\n      const props = {\n        ...defaultProps,\n        currentPosition: position,\n        playerMove: bestMove,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.isOptimalMove).toBe(true);\n    });\n\n    it('identifies suboptimal moves correctly', () => {\n      const suboptimalMove = {\n        ...mockTablebaseMove,\n        move: 'Kg1',\n        wdl: 0,\n        dtm: 0,\n      };\n\n      const position = {\n        ...mockPosition,\n        bestMove: 'Kh1', // Different from player move\n        moves: [mockTablebaseMove, suboptimalMove],\n      };\n\n      const props = {\n        ...defaultProps,\n        currentPosition: position,\n        playerMove: suboptimalMove,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.isOptimalMove).toBe(false);\n    });\n\n    it('handles multiple equally good moves', () => {\n      const equalMove1 = {\n        ...mockTablebaseMove,\n        move: 'Kh1',\n        wdl: 1,\n        dtm: 5,\n      };\n\n      const equalMove2 = {\n        ...mockTablebaseMove,\n        move: 'Kg1',\n        wdl: 1,\n        dtm: 5,\n      };\n\n      const position = {\n        ...mockPosition,\n        bestMove: 'Kh1', // Could be either\n        moves: [equalMove1, equalMove2],\n      };\n\n      const props = {\n        ...defaultProps,\n        currentPosition: position,\n        playerMove: equalMove2,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      // Should still be considered good even if not the \"best\"\n      expect(['good', 'excellent']).toContain(result.current.moveQuality);\n    });\n  });\n\n  describe('Quality Descriptions', () => {\n    it('provides meaningful descriptions for excellent moves', () => {\n      const excellentMove = {\n        ...mockTablebaseMove,\n        wdl: 1,\n        dtm: 3,\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: excellentMove,\n        evaluationBaseline: { wdl: 1, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.qualityDescription).toBeDefined();\n      expect(typeof result.current.qualityDescription).toBe('string');\n      expect(result.current.qualityDescription.length).toBeGreaterThan(0);\n    });\n\n    it('provides meaningful descriptions for mistakes', () => {\n      const mistake = {\n        ...mockTablebaseMove,\n        wdl: 0,\n        dtm: 0,\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: mistake,\n        evaluationBaseline: { wdl: 1, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.qualityDescription).toBeDefined();\n      expect(typeof result.current.qualityDescription).toBe('string');\n    });\n\n    it('handles unknown quality gracefully', () => {\n      const props = {\n        ...defaultProps,\n        playerMove: null,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.qualityDescription).toBeDefined();\n      expect(result.current.moveQuality).toBe('unknown');\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('handles missing evaluation baseline', () => {\n      const props = {\n        ...defaultProps,\n        evaluationBaseline: null,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current).toBeDefined();\n      expect(result.current.wdlChange).toBe(0);\n    });\n\n    it('handles positions without tablebase data', () => {\n      const positionWithoutTablebase = {\n        ...mockPosition,\n        isAvailable: false,\n        moves: [],\n      };\n\n      const props = {\n        ...defaultProps,\n        currentPosition: positionWithoutTablebase,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.moveQuality).toBe('unknown');\n    });\n\n    it('handles malformed move data', () => {\n      const malformedMove = {\n        // Missing required fields\n        move: 'Kh1',\n        // wdl and dtm missing\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: malformedMove as any,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current).toBeDefined();\n      expect(result.current.moveQuality).toBe('unknown');\n    });\n\n    it('handles extreme DTM values', () => {\n      const extremeMove = {\n        ...mockTablebaseMove,\n        wdl: 1,\n        dtm: 999, // Very long mate\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: extremeMove,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current).toBeDefined();\n      expect(result.current.moveQuality).toBeDefined();\n    });\n\n    it('handles inconsistent WDL and DTM data', () => {\n      const inconsistentMove = {\n        ...mockTablebaseMove,\n        wdl: 1, // Winning\n        dtm: -5, // But negative DTM (being mated)\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: inconsistentMove,\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      // Should handle inconsistency gracefully\n      expect(result.current).toBeDefined();\n    });\n  });\n\n  describe('Performance and Memoization', () => {\n    it('maintains stable references for same inputs', () => {\n      const { result, rerender } = renderHook(\n        (props) => useMoveQuality(props),\n        { initialProps: defaultProps }\n      );\n\n      const initialResult = { ...result.current };\n\n      // Re-render with same props\n      rerender(defaultProps);\n\n      expect(result.current.moveQuality).toBe(initialResult.moveQuality);\n      expect(result.current.wdlChange).toBe(initialResult.wdlChange);\n    });\n\n    it('updates correctly when inputs change', () => {\n      const { result, rerender } = renderHook(\n        (props) => useMoveQuality(props),\n        { initialProps: defaultProps }\n      );\n\n      const betterMove = {\n        ...mockTablebaseMove,\n        wdl: 1,\n        dtm: 2, // Better than original\n      };\n\n      const newProps = {\n        ...defaultProps,\n        playerMove: betterMove,\n      };\n\n      rerender(newProps);\n\n      // Should recalculate quality\n      expect(result.current.moveQuality).toBeDefined();\n    });\n\n    it('handles rapid prop changes efficiently', () => {\n      const { rerender } = renderHook(\n        (props) => useMoveQuality(props),\n        { initialProps: defaultProps }\n      );\n\n      // Rapidly change moves\n      const moves = [\n        { ...mockTablebaseMove, wdl: 1, dtm: 3 },\n        { ...mockTablebaseMove, wdl: 0, dtm: 0 },\n        { ...mockTablebaseMove, wdl: -1, dtm: -5 },\n      ];\n\n      moves.forEach(move => {\n        rerender({ ...defaultProps, playerMove: move });\n      });\n\n      // Should handle rapid changes without crashing\n      expect(true).toBe(true);\n    });\n  });\n\n  describe('Integration Scenarios', () => {\n    it('works with complex endgame positions', () => {\n      const complexPosition = {\n        fen: '4k3/8/4K3/4P3/8/8/8/8 w - - 0 1', // King and pawn vs king\n        moves: [\n          { move: 'Kd6', wdl: 1, dtm: 15 },\n          { move: 'Kd7', wdl: 1, dtm: 17 },\n          { move: 'e6', wdl: 0, dtm: 0 }, // Stalemate trap\n        ],\n        bestMove: 'Kd6',\n        isAvailable: true,\n      };\n\n      const playerMove = complexPosition.moves[0]; // Best move\n\n      const props = {\n        ...defaultProps,\n        currentPosition: complexPosition,\n        playerMove,\n        evaluationBaseline: { wdl: 1, fen: complexPosition.fen },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      expect(result.current.isOptimalMove).toBe(true);\n      expect(result.current.moveQuality).toBe('excellent');\n    });\n\n    it('integrates with training progress tracking', () => {\n      const trainingMove = {\n        ...mockTablebaseMove,\n        wdl: 0, // Not optimal but acceptable\n        dtm: 0,\n      };\n\n      const props = {\n        ...defaultProps,\n        playerMove: trainingMove,\n        evaluationBaseline: { wdl: 1, fen: '8/8/8/8/8/8/8/8 w - - 0 1' },\n      };\n\n      const { result } = renderHook(() => useMoveQuality(props));\n\n      // Should provide training-relevant feedback\n      expect(['mistake', 'inaccurate']).toContain(result.current.moveQuality);\n      expect(result.current.qualityDescription).toBeDefined();\n    });\n  });\n});"],"names":["jest","mock","getLogger","fn","setContext","debug","info","warn","error","Logger","mockImplementation","describe","mockTablebaseMove","move","wdl","dtm","evaluation","mockPosition","fen","moves","bestMove","isAvailable","defaultProps","currentPosition","playerMove","evaluationBaseline","it","result","renderHook","useMoveQuality","expect","current","toHaveProperty","propsWithoutPosition","toBeDefined","moveQuality","toBe","propsWithoutMove","excellentMove","props","isOptimalMove","goodMove","toContain","drawingMove","wdlChange","mistakeMove","blunderMove","improvingMove","worseningMove","neutralMove","quickMate","slowMate","position","forcedMate","immediateDraw","suboptimalMove","equalMove1","equalMove2","qualityDescription","length","toBeGreaterThan","mistake","positionWithoutTablebase","malformedMove","extremeMove","inconsistentMove","rerender","initialProps","initialResult","betterMove","newProps","forEach","complexPosition","trainingMove"],"mappings":"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"}