ec865bc4d2b8f90111013f615eee3417
/**
 * @file Tests for useMoveQuality hook
 * @module tests/unit/hooks/useMoveQuality
 * 
 * @description
 * Comprehensive tests for the useMoveQuality hook that handles
 * chess move quality assessment and evaluation.
 * 
 * Tests cover:
 * - Move quality classification (excellent, good, inaccurate, mistake, blunder)
 * - WDL (Win/Draw/Loss) analysis
 * - DTM (Distance to Mate) evaluation
 * - Tablebase integration and error handling
 */ "use strict";
// Mock the logger
jest.mock('@shared/services/logging/Logger', ()=>({
        getLogger: jest.fn(()=>({
                setContext: jest.fn(()=>({
                        debug: jest.fn(),
                        info: jest.fn(),
                        warn: jest.fn(),
                        error: jest.fn()
                    })),
                debug: jest.fn(),
                info: jest.fn(),
                warn: jest.fn(),
                error: jest.fn()
            })),
        Logger: jest.fn().mockImplementation(()=>({
                debug: jest.fn(),
                info: jest.fn(),
                warn: jest.fn(),
                error: jest.fn()
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useMoveQuality = require("../../../shared/hooks/useMoveQuality");
describe('useMoveQuality', ()=>{
    const mockTablebaseMove = {
        move: 'Kh1',
        wdl: 1,
        dtm: 5,
        evaluation: 100
    };
    const mockPosition = {
        fen: '8/8/8/8/8/8/8/8 w - - 0 1',
        moves: [
            mockTablebaseMove
        ],
        bestMove: 'Kh1',
        isAvailable: true
    };
    const defaultProps = {
        currentPosition: mockPosition,
        playerMove: mockTablebaseMove,
        evaluationBaseline: {
            wdl: 0,
            fen: '8/8/8/8/8/8/8/8 w - - 0 1'
        }
    };
    describe('Hook Initialization', ()=>{
        it('returns move quality assessment interface', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(defaultProps));
            expect(result.current).toHaveProperty('moveQuality');
            expect(result.current).toHaveProperty('isOptimalMove');
            expect(result.current).toHaveProperty('wdlChange');
            expect(result.current).toHaveProperty('qualityDescription');
        });
        it('handles missing position data gracefully', ()=>{
            const propsWithoutPosition = {
                ...defaultProps,
                currentPosition: null
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(propsWithoutPosition));
            expect(result.current).toBeDefined();
            expect(result.current.moveQuality).toBe('unknown');
        });
        it('handles missing player move gracefully', ()=>{
            const propsWithoutMove = {
                ...defaultProps,
                playerMove: null
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(propsWithoutMove));
            expect(result.current).toBeDefined();
            expect(result.current.moveQuality).toBe('unknown');
        });
    });
    describe('Move Quality Classification', ()=>{
        it('classifies excellent moves correctly', ()=>{
            const excellentMove = {
                ...mockTablebaseMove,
                wdl: 1,
                dtm: 3
            };
            const props = {
                ...defaultProps,
                playerMove: excellentMove,
                evaluationBaseline: {
                    wdl: 1,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.moveQuality).toBe('excellent');
            expect(result.current.isOptimalMove).toBe(true);
        });
        it('classifies good moves correctly', ()=>{
            const goodMove = {
                ...mockTablebaseMove,
                wdl: 1,
                dtm: 10
            };
            const props = {
                ...defaultProps,
                playerMove: goodMove,
                evaluationBaseline: {
                    wdl: 1,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect([
                'good',
                'excellent'
            ]).toContain(result.current.moveQuality);
        });
        it('classifies drawing moves correctly', ()=>{
            const drawingMove = {
                ...mockTablebaseMove,
                wdl: 0,
                dtm: 0
            };
            const props = {
                ...defaultProps,
                playerMove: drawingMove,
                evaluationBaseline: {
                    wdl: 0,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.moveQuality).toBe('good');
            expect(result.current.wdlChange).toBe(0);
        });
        it('classifies mistakes correctly', ()=>{
            const mistakeMove = {
                ...mockTablebaseMove,
                wdl: 0,
                dtm: 0
            };
            const props = {
                ...defaultProps,
                playerMove: mistakeMove,
                evaluationBaseline: {
                    wdl: 1,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect([
                'mistake',
                'inaccurate'
            ]).toContain(result.current.moveQuality);
            expect(result.current.wdlChange).toBe(-1);
        });
        it('classifies blunders correctly', ()=>{
            const blunderMove = {
                ...mockTablebaseMove,
                wdl: -1,
                dtm: -5
            };
            const props = {
                ...defaultProps,
                playerMove: blunderMove,
                evaluationBaseline: {
                    wdl: 1,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.moveQuality).toBe('blunder');
            expect(result.current.wdlChange).toBe(-2);
        });
    });
    describe('WDL (Win/Draw/Loss) Analysis', ()=>{
        it('calculates positive WDL changes correctly', ()=>{
            const improvingMove = {
                ...mockTablebaseMove,
                wdl: 1
            };
            const props = {
                ...defaultProps,
                playerMove: improvingMove,
                evaluationBaseline: {
                    wdl: 0,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.wdlChange).toBe(1);
        });
        it('calculates negative WDL changes correctly', ()=>{
            const worseningMove = {
                ...mockTablebaseMove,
                wdl: 0
            };
            const props = {
                ...defaultProps,
                playerMove: worseningMove,
                evaluationBaseline: {
                    wdl: 1,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.wdlChange).toBe(-1);
        });
        it('handles neutral WDL changes', ()=>{
            const neutralMove = {
                ...mockTablebaseMove,
                wdl: 1
            };
            const props = {
                ...defaultProps,
                playerMove: neutralMove,
                evaluationBaseline: {
                    wdl: 1,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.wdlChange).toBe(0);
        });
    });
    describe('DTM (Distance to Mate) Analysis', ()=>{
        it('prefers shorter mates in winning positions', ()=>{
            const quickMate = {
                ...mockTablebaseMove,
                wdl: 1,
                dtm: 3
            };
            const slowMate = {
                ...mockTablebaseMove,
                wdl: 1,
                dtm: 10
            };
            const position = {
                ...mockPosition,
                moves: [
                    quickMate,
                    slowMate
                ],
                bestMove: 'Kh1'
            };
            const props = {
                ...defaultProps,
                currentPosition: position,
                playerMove: quickMate
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.moveQuality).toBe('excellent');
        });
        it('handles negative DTM (being mated) correctly', ()=>{
            const forcedMate = {
                ...mockTablebaseMove,
                wdl: -1,
                dtm: -5
            };
            const props = {
                ...defaultProps,
                playerMove: forcedMate,
                evaluationBaseline: {
                    wdl: 0,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.moveQuality).toBe('blunder');
            expect(result.current.wdlChange).toBe(-1);
        });
        it('handles DTM of zero (immediate mate/draw)', ()=>{
            const immediateDraw = {
                ...mockTablebaseMove,
                wdl: 0,
                dtm: 0
            };
            const props = {
                ...defaultProps,
                playerMove: immediateDraw,
                evaluationBaseline: {
                    wdl: 0,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.wdlChange).toBe(0);
        });
    });
    describe('Optimal Move Detection', ()=>{
        it('identifies optimal moves correctly', ()=>{
            const bestMove = {
                ...mockTablebaseMove,
                move: 'Kh1',
                wdl: 1,
                dtm: 3
            };
            const position = {
                ...mockPosition,
                bestMove: 'Kh1',
                moves: [
                    bestMove
                ]
            };
            const props = {
                ...defaultProps,
                currentPosition: position,
                playerMove: bestMove
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.isOptimalMove).toBe(true);
        });
        it('identifies suboptimal moves correctly', ()=>{
            const suboptimalMove = {
                ...mockTablebaseMove,
                move: 'Kg1',
                wdl: 0,
                dtm: 0
            };
            const position = {
                ...mockPosition,
                bestMove: 'Kh1',
                moves: [
                    mockTablebaseMove,
                    suboptimalMove
                ]
            };
            const props = {
                ...defaultProps,
                currentPosition: position,
                playerMove: suboptimalMove
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.isOptimalMove).toBe(false);
        });
        it('handles multiple equally good moves', ()=>{
            const equalMove1 = {
                ...mockTablebaseMove,
                move: 'Kh1',
                wdl: 1,
                dtm: 5
            };
            const equalMove2 = {
                ...mockTablebaseMove,
                move: 'Kg1',
                wdl: 1,
                dtm: 5
            };
            const position = {
                ...mockPosition,
                bestMove: 'Kh1',
                moves: [
                    equalMove1,
                    equalMove2
                ]
            };
            const props = {
                ...defaultProps,
                currentPosition: position,
                playerMove: equalMove2
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            // Should still be considered good even if not the "best"
            expect([
                'good',
                'excellent'
            ]).toContain(result.current.moveQuality);
        });
    });
    describe('Quality Descriptions', ()=>{
        it('provides meaningful descriptions for excellent moves', ()=>{
            const excellentMove = {
                ...mockTablebaseMove,
                wdl: 1,
                dtm: 3
            };
            const props = {
                ...defaultProps,
                playerMove: excellentMove,
                evaluationBaseline: {
                    wdl: 1,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.qualityDescription).toBeDefined();
            expect(typeof result.current.qualityDescription).toBe('string');
            expect(result.current.qualityDescription.length).toBeGreaterThan(0);
        });
        it('provides meaningful descriptions for mistakes', ()=>{
            const mistake = {
                ...mockTablebaseMove,
                wdl: 0,
                dtm: 0
            };
            const props = {
                ...defaultProps,
                playerMove: mistake,
                evaluationBaseline: {
                    wdl: 1,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.qualityDescription).toBeDefined();
            expect(typeof result.current.qualityDescription).toBe('string');
        });
        it('handles unknown quality gracefully', ()=>{
            const props = {
                ...defaultProps,
                playerMove: null
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.qualityDescription).toBeDefined();
            expect(result.current.moveQuality).toBe('unknown');
        });
    });
    describe('Error Handling and Edge Cases', ()=>{
        it('handles missing evaluation baseline', ()=>{
            const props = {
                ...defaultProps,
                evaluationBaseline: null
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current).toBeDefined();
            expect(result.current.wdlChange).toBe(0);
        });
        it('handles positions without tablebase data', ()=>{
            const positionWithoutTablebase = {
                ...mockPosition,
                isAvailable: false,
                moves: []
            };
            const props = {
                ...defaultProps,
                currentPosition: positionWithoutTablebase
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.moveQuality).toBe('unknown');
        });
        it('handles malformed move data', ()=>{
            const malformedMove = {
                // Missing required fields
                move: 'Kh1'
            };
            const props = {
                ...defaultProps,
                playerMove: malformedMove
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current).toBeDefined();
            expect(result.current.moveQuality).toBe('unknown');
        });
        it('handles extreme DTM values', ()=>{
            const extremeMove = {
                ...mockTablebaseMove,
                wdl: 1,
                dtm: 999
            };
            const props = {
                ...defaultProps,
                playerMove: extremeMove
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current).toBeDefined();
            expect(result.current.moveQuality).toBeDefined();
        });
        it('handles inconsistent WDL and DTM data', ()=>{
            const inconsistentMove = {
                ...mockTablebaseMove,
                wdl: 1,
                dtm: -5
            };
            const props = {
                ...defaultProps,
                playerMove: inconsistentMove
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            // Should handle inconsistency gracefully
            expect(result.current).toBeDefined();
        });
    });
    describe('Performance and Memoization', ()=>{
        it('maintains stable references for same inputs', ()=>{
            const { result, rerender } = (0, _react.renderHook)((props)=>(0, _useMoveQuality.useMoveQuality)(props), {
                initialProps: defaultProps
            });
            const initialResult = {
                ...result.current
            };
            // Re-render with same props
            rerender(defaultProps);
            expect(result.current.moveQuality).toBe(initialResult.moveQuality);
            expect(result.current.wdlChange).toBe(initialResult.wdlChange);
        });
        it('updates correctly when inputs change', ()=>{
            const { result, rerender } = (0, _react.renderHook)((props)=>(0, _useMoveQuality.useMoveQuality)(props), {
                initialProps: defaultProps
            });
            const betterMove = {
                ...mockTablebaseMove,
                wdl: 1,
                dtm: 2
            };
            const newProps = {
                ...defaultProps,
                playerMove: betterMove
            };
            rerender(newProps);
            // Should recalculate quality
            expect(result.current.moveQuality).toBeDefined();
        });
        it('handles rapid prop changes efficiently', ()=>{
            const { rerender } = (0, _react.renderHook)((props)=>(0, _useMoveQuality.useMoveQuality)(props), {
                initialProps: defaultProps
            });
            // Rapidly change moves
            const moves = [
                {
                    ...mockTablebaseMove,
                    wdl: 1,
                    dtm: 3
                },
                {
                    ...mockTablebaseMove,
                    wdl: 0,
                    dtm: 0
                },
                {
                    ...mockTablebaseMove,
                    wdl: -1,
                    dtm: -5
                }
            ];
            moves.forEach((move)=>{
                rerender({
                    ...defaultProps,
                    playerMove: move
                });
            });
            // Should handle rapid changes without crashing
            expect(true).toBe(true);
        });
    });
    describe('Integration Scenarios', ()=>{
        it('works with complex endgame positions', ()=>{
            const complexPosition = {
                fen: '4k3/8/4K3/4P3/8/8/8/8 w - - 0 1',
                moves: [
                    {
                        move: 'Kd6',
                        wdl: 1,
                        dtm: 15
                    },
                    {
                        move: 'Kd7',
                        wdl: 1,
                        dtm: 17
                    },
                    {
                        move: 'e6',
                        wdl: 0,
                        dtm: 0
                    }
                ],
                bestMove: 'Kd6',
                isAvailable: true
            };
            const playerMove = complexPosition.moves[0]; // Best move
            const props = {
                ...defaultProps,
                currentPosition: complexPosition,
                playerMove,
                evaluationBaseline: {
                    wdl: 1,
                    fen: complexPosition.fen
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            expect(result.current.isOptimalMove).toBe(true);
            expect(result.current.moveQuality).toBe('excellent');
        });
        it('integrates with training progress tracking', ()=>{
            const trainingMove = {
                ...mockTablebaseMove,
                wdl: 0,
                dtm: 0
            };
            const props = {
                ...defaultProps,
                playerMove: trainingMove,
                evaluationBaseline: {
                    wdl: 1,
                    fen: '8/8/8/8/8/8/8/8 w - - 0 1'
                }
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)(props));
            // Should provide training-relevant feedback
            expect([
                'mistake',
                'inaccurate'
            ]).toContain(result.current.moveQuality);
            expect(result.current.qualityDescription).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,