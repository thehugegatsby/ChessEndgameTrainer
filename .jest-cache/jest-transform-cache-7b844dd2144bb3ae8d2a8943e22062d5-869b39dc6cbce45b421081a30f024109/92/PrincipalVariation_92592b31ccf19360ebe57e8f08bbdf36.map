{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/training/PrincipalVariation.tsx"],"sourcesContent":["/**\n * @fileoverview Principal Variation Component\n * @version 1.0.0\n * @description PHASE 2.2: Reusable component for displaying chess engine's principal variation\n *\n * EXPERT CONSENSUS IMPLEMENTATION:\n * - Dedicated, reusable React component (Option C)\n * - Interactive move list with board preview capability\n * - Performance optimized with React.memo and throttling\n * - Mobile-responsive design following industry standards\n */\n\n\"use client\";\n\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport { UI_CONSTANTS } from \"@shared/constants/uiConstants\";\nimport { DIMENSIONS } from \"@shared/constants\";\n\nexport interface PrincipalVariationProps {\n  /** Array of moves in algebraic notation (e.g., ['e2e4', 'e7e5', 'g1f3']) */\n  pv?: string[];\n  /** Raw PV string for debugging */\n  pvString?: string;\n  /** Current evaluation score for context */\n  evaluation?: number;\n  /** Depth of analysis */\n  depth?: number;\n  /** Callback when user clicks a move for board preview */\n  onMoveClick?: (moveIndex: number, move: string) => void;\n  /** Whether the component should be in interactive mode */\n  interactive?: boolean;\n  /** Maximum number of moves to display (for mobile optimization) */\n  maxMoves?: number;\n  /** CSS class name for styling */\n  className?: string;\n}\n\n/**\n * PrincipalVariation Component\n *\n * Displays the engine's best line of play as an interactive move sequence.\n * Following industry standards from Lichess/Chess.com for optimal UX.\n *\n * Features:\n * - Interactive move list with hover/click states\n * - Mobile-responsive with configurable move limit\n * - Performance optimized with React.memo\n * - Accessible keyboard navigation\n */\nexport const PrincipalVariation: React.FC<PrincipalVariationProps> = React.memo(\n  ({\n    pv = [],\n    pvString,\n    evaluation,\n    depth,\n    onMoveClick,\n    interactive = true,\n    maxMoves = UI_CONSTANTS.PRINCIPAL_VARIATION.MAX_MOVES_DISPLAY,\n    className = \"\",\n  }) => {\n    const [hoveredMoveIndex, setHoveredMoveIndex] = useState<number | null>(\n      null,\n    );\n\n    // Memoize processed moves for performance\n    const processedMoves = useMemo(() => {\n      if (!pv || pv.length === 0) return [];\n\n      // Limit moves for mobile performance and UI clarity\n      const limitedMoves = pv.slice(0, maxMoves);\n\n      return limitedMoves.map((move, index) => ({\n        move,\n        index,\n        notation: move, // Could be converted to SAN notation in future\n        isEven: index % 2 === 0, // For alternating white/black styling\n      }));\n    }, [pv, maxMoves]);\n\n    // Handle move click with performance optimization\n    const handleMoveClick = useCallback(\n      (moveIndex: number, move: string) => {\n        if (!interactive || !onMoveClick) return;\n        onMoveClick(moveIndex, move);\n      },\n      [interactive, onMoveClick],\n    );\n\n    // Handle mouse events for hover effects\n    const handleMouseEnter = useCallback(\n      (index: number) => {\n        if (interactive) {\n          setHoveredMoveIndex(index);\n        }\n      },\n      [interactive],\n    );\n\n    const handleMouseLeave = useCallback(() => {\n      if (interactive) {\n        setHoveredMoveIndex(null);\n      }\n    }, [interactive]);\n\n    // Empty state\n    if (!pv || pv.length === 0) {\n      return (\n        <div className={`principal-variation-empty ${className}`}>\n          <div className=\"text-center py-3\">\n            <div className=\"text-gray-400 dark:text-gray-500 mb-1\">\n              <span className=\"text-lg\">ðŸŽ¯</span>\n            </div>\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n              Hauptvariante wird geladen...\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className={`principal-variation ${className}`}>\n        {/* Header */}\n        <div className=\"pv-header flex justify-between items-center mb-2\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">\n              Hauptvariante\n            </span>\n            {depth && (\n              <span className=\"text-xs px-1.5 py-0.5 bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 rounded\">\n                Tiefe {depth}\n              </span>\n            )}\n          </div>\n\n          {evaluation !== undefined && (\n            <span className=\"text-xs font-mono text-gray-700 dark:text-gray-300\">\n              {evaluation > 0\n                ? `+${evaluation.toFixed(2)}`\n                : evaluation.toFixed(2)}\n            </span>\n          )}\n        </div>\n\n        {/* Move List */}\n        <div className=\"pv-moves-container\">\n          <div className=\"pv-moves flex flex-wrap gap-1 items-center\">\n            {processedMoves.map(({ move, index, notation, isEven }) => (\n              <React.Fragment key={`move-${index}`}>\n                {/* Move number for white moves */}\n                {isEven && (\n                  <span\n                    className=\"move-number text-xs text-gray-500 dark:text-gray-400 font-medium\"\n                    style={{\n                      minWidth: `${DIMENSIONS.MOVE_NUMBER_MIN_WIDTH}px`,\n                    }}\n                  >\n                    {Math.floor(index / 2) + 1}.\n                  </span>\n                )}\n\n                {/* Move button */}\n                <button\n                  type=\"button\"\n                  className={`\n                  move-button px-2 py-1 text-xs font-mono rounded transition-all duration-150\n                  ${interactive ? \"cursor-pointer hover:scale-105\" : \"cursor-default\"}\n                  ${\n                    hoveredMoveIndex === index\n                      ? \"bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-300 shadow-sm\"\n                      : \"bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600\"\n                  }\n                  ${isEven ? \"text-gray-800 dark:text-gray-200\" : \"text-gray-600 dark:text-gray-300\"}\n                  focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\n                `}\n                  onClick={() => handleMoveClick(index, move)}\n                  onMouseEnter={() => handleMouseEnter(index)}\n                  onMouseLeave={handleMouseLeave}\n                  disabled={!interactive}\n                  title={\n                    interactive\n                      ? `Klicken um Position nach ${notation} zu sehen`\n                      : undefined\n                  }\n                  aria-label={`Zug ${index + 1}: ${notation}`}\n                >\n                  {notation}\n                </button>\n              </React.Fragment>\n            ))}\n\n            {/* Show indicator if moves were truncated */}\n            {pv.length > maxMoves && (\n              <span className=\"truncation-indicator text-xs text-gray-400 dark:text-gray-500 ml-1\">\n                ... +{pv.length - maxMoves} weitere\n              </span>\n            )}\n          </div>\n        </div>\n\n        {/* Interactive help text */}\n        {interactive && processedMoves.length > 0 && (\n          <div className=\"pv-help mt-2\">\n            <p className=\"text-xs text-gray-400 dark:text-gray-500\">\n              Klicken Sie auf einen Zug, um die Position zu sehen\n            </p>\n          </div>\n        )}\n\n        {/* Debug info in development */}\n        {process.env.NODE_ENV === \"development\" && pvString && (\n          <details className=\"pv-debug mt-2\">\n            <summary className=\"text-xs text-gray-400 cursor-pointer\">\n              Debug Info\n            </summary>\n            <pre className=\"text-xs bg-gray-100 dark:bg-gray-800 p-2 rounded mt-1 overflow-x-auto\">\n              Raw PV: {pvString}\n            </pre>\n          </details>\n        )}\n      </div>\n    );\n  },\n);\n\nPrincipalVariation.displayName = \"PrincipalVariation\";\n"],"names":["PrincipalVariation","React","memo","pv","pvString","evaluation","depth","onMoveClick","interactive","maxMoves","UI_CONSTANTS","PRINCIPAL_VARIATION","MAX_MOVES_DISPLAY","className","hoveredMoveIndex","setHoveredMoveIndex","useState","processedMoves","useMemo","length","limitedMoves","slice","map","move","index","notation","isEven","handleMoveClick","useCallback","moveIndex","handleMouseEnter","handleMouseLeave","div","span","p","undefined","toFixed","Fragment","style","minWidth","DIMENSIONS","MOVE_NUMBER_MIN_WIDTH","Math","floor","button","type","onClick","onMouseEnter","onMouseLeave","disabled","title","aria-label","process","env","NODE_ENV","details","summary","pre","displayName"],"mappings":"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"}