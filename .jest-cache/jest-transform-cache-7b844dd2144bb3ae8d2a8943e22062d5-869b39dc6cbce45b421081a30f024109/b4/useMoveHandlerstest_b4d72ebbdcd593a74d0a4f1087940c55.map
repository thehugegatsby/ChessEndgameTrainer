{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/hooks/useMoveHandlers.test.ts"],"sourcesContent":["/**\n * @file Tests for useMoveHandlers hook\n * @module tests/unit/hooks/useMoveHandlers\n * \n * @description\n * Comprehensive tests for the useMoveHandlers hook that encapsulates\n * all move handling logic for chess training board interactions.\n * \n * Tests cover:\n * - Drag and drop event handling\n * - Click-to-move functionality  \n * - Move validation and execution\n * - Position readiness checks\n * - Pawn promotion detection\n * - Selection state management\n */\n\nimport { renderHook, act } from '@testing-library/react';\nimport { useMoveHandlers } from '@shared/hooks/useMoveHandlers';\nimport { getLogger } from '@shared/services/logging/Logger';\n\n// Mock dependencies\njest.mock('@shared/services/logging/Logger', () => ({\n  getLogger: jest.fn(() => ({\n    setContext: jest.fn(() => ({\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n    })),\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  })),\n}));\n\njest.mock('@shared/store/hooks', () => ({\n  useUIStore: jest.fn(() => [\n    {}, // UI state\n    { showToast: jest.fn() } // UI actions\n  ]),\n}));\n\njest.mock('chess.js', () => ({\n  Chess: jest.fn().mockImplementation((fen) => ({\n    turn: jest.fn(() => 'w'), // Default to white's turn\n    fen: jest.fn(() => fen),\n  })),\n}));\n\ndescribe('useMoveHandlers', () => {\n  const mockTrainingState = {\n    currentPosition: {\n      id: 1,\n      fen: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',\n    },\n    isPlayerTurn: true,\n    isOpponentThinking: false,\n  };\n\n  const defaultProps = {\n    currentFen: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',\n    isGameFinished: false,\n    isPositionReady: true,\n    trainingState: mockTrainingState,\n    onMove: jest.fn(),\n  };\n\n  const mockUIActions = { showToast: jest.fn() };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Reset useUIStore mock\n    const { useUIStore } = require('@shared/store/hooks');\n    useUIStore.mockReturnValue([{}, mockUIActions]);\n  });\n\n  describe('Hook Initialization', () => {\n    it('returns all required interface properties', () => {\n      const { result } = renderHook(() => useMoveHandlers(defaultProps));\n\n      expect(result.current).toHaveProperty('onDrop');\n      expect(result.current).toHaveProperty('onSquareClick');\n      expect(result.current).toHaveProperty('selectedSquare');\n      expect(result.current).toHaveProperty('clearSelection');\n\n      expect(typeof result.current.onDrop).toBe('function');\n      expect(typeof result.current.onSquareClick).toBe('function');\n      expect(typeof result.current.clearSelection).toBe('function');\n      expect(result.current.selectedSquare).toBeNull();\n    });\n\n    it('initializes with null selected square', () => {\n      const { result } = renderHook(() => useMoveHandlers(defaultProps));\n      expect(result.current.selectedSquare).toBeNull();\n    });\n  });\n\n  describe('onDrop Handling', () => {\n    it('executes move when position is ready and game not finished', async () => {\n      const mockOnMove = jest.fn().mockResolvedValue(true);\n      const props = { ...defaultProps, onMove: mockOnMove };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        const dropResult = result.current.onDrop('e2', 'e4', 'wP');\n        expect(dropResult).toBe(true);\n      });\n\n      // Move should be called asynchronously\n      await act(async () => {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      });\n    });\n\n    it('blocks moves when position is not ready', () => {\n      const mockOnMove = jest.fn();\n      const props = { \n        ...defaultProps, \n        isPositionReady: false,\n        onMove: mockOnMove \n      };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        const dropResult = result.current.onDrop('e2', 'e4', 'wP');\n        expect(dropResult).toBe(false);\n      });\n\n      expect(mockOnMove).not.toHaveBeenCalled();\n    });\n\n    it('blocks moves when game is finished', () => {\n      const mockOnMove = jest.fn();\n      const props = { \n        ...defaultProps, \n        isGameFinished: true,\n        onMove: mockOnMove \n      };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        const dropResult = result.current.onDrop('e2', 'e4', 'wP');\n        expect(dropResult).toBe(false);\n      });\n\n      expect(mockOnMove).not.toHaveBeenCalled();\n    });\n\n    it('detects pawn promotion and adds promotion property', async () => {\n      const mockOnMove = jest.fn().mockResolvedValue(true);\n      const props = { ...defaultProps, onMove: mockOnMove };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        result.current.onDrop('e7', 'e8', 'wP');\n      });\n\n      // Wait for async move execution\n      await act(async () => {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      });\n\n      // Should have added promotion to move\n      expect(mockOnMove).toHaveBeenCalledWith({\n        from: 'e7',\n        to: 'e8',\n        promotion: 'q'\n      });\n    });\n\n    it('handles black pawn promotion to first rank', async () => {\n      const mockOnMove = jest.fn().mockResolvedValue(true);\n      const props = { ...defaultProps, onMove: mockOnMove };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        result.current.onDrop('e2', 'e1', 'bP');\n      });\n\n      await act(async () => {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      });\n\n      expect(mockOnMove).toHaveBeenCalledWith({\n        from: 'e2',\n        to: 'e1',\n        promotion: 'q'\n      });\n    });\n\n    it('does not add promotion for non-pawn pieces', async () => {\n      const mockOnMove = jest.fn().mockResolvedValue(true);\n      const props = { ...defaultProps, onMove: mockOnMove };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        result.current.onDrop('d1', 'd8', 'wQ');\n      });\n\n      await act(async () => {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      });\n\n      expect(mockOnMove).toHaveBeenCalledWith({\n        from: 'd1',\n        to: 'd8'\n      });\n    });\n\n    it('does not add promotion for pawn not reaching promotion rank', async () => {\n      const mockOnMove = jest.fn().mockResolvedValue(true);\n      const props = { ...defaultProps, onMove: mockOnMove };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        result.current.onDrop('e2', 'e4', 'wP');\n      });\n\n      await act(async () => {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      });\n\n      expect(mockOnMove).toHaveBeenCalledWith({\n        from: 'e2',\n        to: 'e4'\n      });\n    });\n  });\n\n  describe('onSquareClick Handling', () => {\n    it('selects square with piece when no square is selected', () => {\n      const { result } = renderHook(() => useMoveHandlers(defaultProps));\n\n      act(() => {\n        result.current.onSquareClick({ \n          piece: { pieceType: 'wP' }, \n          square: 'e2' \n        });\n      });\n\n      expect(result.current.selectedSquare).toBe('e2');\n    });\n\n    it('does not select square without piece', () => {\n      const { result } = renderHook(() => useMoveHandlers(defaultProps));\n\n      act(() => {\n        result.current.onSquareClick({ \n          piece: null, \n          square: 'e4' \n        });\n      });\n\n      expect(result.current.selectedSquare).toBeNull();\n    });\n\n    it('deselects square when same square is clicked', () => {\n      const { result } = renderHook(() => useMoveHandlers(defaultProps));\n\n      // First click selects\n      act(() => {\n        result.current.onSquareClick({ \n          piece: { pieceType: 'wP' }, \n          square: 'e2' \n        });\n      });\n\n      expect(result.current.selectedSquare).toBe('e2');\n\n      // Second click deselects\n      act(() => {\n        result.current.onSquareClick({ \n          piece: { pieceType: 'wP' }, \n          square: 'e2' \n        });\n      });\n\n      expect(result.current.selectedSquare).toBeNull();\n    });\n\n    it('attempts move when different square is clicked after selection', async () => {\n      const mockOnMove = jest.fn().mockResolvedValue(true);\n      const props = { ...defaultProps, onMove: mockOnMove };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      // First click selects\n      act(() => {\n        result.current.onSquareClick({ \n          piece: { pieceType: 'wP' }, \n          square: 'e2' \n        });\n      });\n\n      // Second click attempts move\n      act(() => {\n        result.current.onSquareClick({ \n          piece: null, \n          square: 'e4' \n        });\n      });\n\n      // Selection should be cleared after move attempt\n      expect(result.current.selectedSquare).toBeNull();\n    });\n\n    it('blocks clicks when position is not ready', () => {\n      const props = { ...defaultProps, isPositionReady: false };\n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        result.current.onSquareClick({ \n          piece: { pieceType: 'wP' }, \n          square: 'e2' \n        });\n      });\n\n      expect(result.current.selectedSquare).toBeNull();\n    });\n\n    it('blocks clicks when game is finished', () => {\n      const props = { ...defaultProps, isGameFinished: true };\n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        result.current.onSquareClick({ \n          piece: { pieceType: 'wP' }, \n          square: 'e2' \n        });\n      });\n\n      expect(result.current.selectedSquare).toBeNull();\n    });\n\n    it('validates piece color matches current turn', () => {\n      // Mock Chess to return white's turn\n      const { Chess } = require('chess.js');\n      Chess.mockImplementation(() => ({\n        turn: () => 'w',\n      }));\n\n      const { result } = renderHook(() => useMoveHandlers(defaultProps));\n\n      // White piece should be selectable\n      act(() => {\n        result.current.onSquareClick({ \n          piece: { pieceType: 'wP' }, \n          square: 'e2' \n        });\n      });\n\n      expect(result.current.selectedSquare).toBe('e2');\n\n      // Clear selection\n      act(() => {\n        result.current.clearSelection();\n      });\n\n      // Black piece should not be selectable on white's turn\n      act(() => {\n        result.current.onSquareClick({ \n          piece: { pieceType: 'bP' }, \n          square: 'e7' \n        });\n      });\n\n      expect(result.current.selectedSquare).toBeNull();\n    });\n  });\n\n  describe('clearSelection', () => {\n    it('clears the selected square', () => {\n      const { result } = renderHook(() => useMoveHandlers(defaultProps));\n\n      // Select a square\n      act(() => {\n        result.current.onSquareClick({ \n          piece: { pieceType: 'wP' }, \n          square: 'e2' \n        });\n      });\n\n      expect(result.current.selectedSquare).toBe('e2');\n\n      // Clear selection\n      act(() => {\n        result.current.clearSelection();\n      });\n\n      expect(result.current.selectedSquare).toBeNull();\n    });\n\n    it('is safe to call when no square is selected', () => {\n      const { result } = renderHook(() => useMoveHandlers(defaultProps));\n\n      expect(result.current.selectedSquare).toBeNull();\n\n      // Should not throw\n      act(() => {\n        result.current.clearSelection();\n      });\n\n      expect(result.current.selectedSquare).toBeNull();\n    });\n  });\n\n  describe('Move Execution Error Handling', () => {\n    it('shows toast on move execution error', async () => {\n      const mockOnMove = jest.fn().mockRejectedValue(new Error('Invalid move'));\n      const props = { ...defaultProps, onMove: mockOnMove };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        result.current.onDrop('e2', 'e5', 'wP'); // Invalid move\n      });\n\n      // Wait for async error handling\n      await act(async () => {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      });\n\n      expect(mockUIActions.showToast).toHaveBeenCalledWith('Invalid move', 'error');\n    });\n\n    it('handles non-Error exceptions gracefully', async () => {\n      const mockOnMove = jest.fn().mockRejectedValue('String error');\n      const props = { ...defaultProps, onMove: mockOnMove };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        result.current.onDrop('e2', 'e4', 'wP');\n      });\n\n      await act(async () => {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      });\n\n      expect(mockUIActions.showToast).toHaveBeenCalledWith('Move failed', 'error');\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('handles same-square drop (no move)', () => {\n      const mockOnMove = jest.fn();\n      const props = { ...defaultProps, onMove: mockOnMove };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        const dropResult = result.current.onDrop('e2', 'e2', 'wP');\n        // onDrop returns true but handleMove internally checks for same square\n        expect(dropResult).toBe(true);\n      });\n\n      // The move should not be executed due to same-square check in handleMove\n      expect(mockOnMove).not.toHaveBeenCalled();\n    });\n\n    it('handles missing currentPosition gracefully', () => {\n      const trainingStateWithoutPosition = {\n        ...mockTrainingState,\n        currentPosition: null,\n      };\n      \n      const props = { \n        ...defaultProps, \n        trainingState: trainingStateWithoutPosition,\n        isPositionReady: false \n      };\n      \n      const { result } = renderHook(() => useMoveHandlers(props));\n\n      act(() => {\n        const dropResult = result.current.onDrop('e2', 'e4', 'wP');\n        expect(dropResult).toBe(false);\n      });\n    });\n\n    it('handles chess.js validation error in onSquareClick', () => {\n      // Mock Chess to throw error\n      const { Chess } = require('chess.js');\n      Chess.mockImplementation(() => {\n        throw new Error('Invalid FEN');\n      });\n\n      const { result } = renderHook(() => useMoveHandlers(defaultProps));\n\n      // Should not crash on validation error\n      act(() => {\n        result.current.onSquareClick({ \n          piece: { pieceType: 'wP' }, \n          square: 'e2' \n        });\n      });\n\n      // Should not select square due to error\n      expect(result.current.selectedSquare).toBeNull();\n    });\n  });\n\n  describe('Props Dependencies', () => {\n    it('updates when currentFen changes', () => {\n      const { result, rerender } = renderHook(\n        (props) => useMoveHandlers(props),\n        { initialProps: defaultProps }\n      );\n\n      const newFen = 'rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2';\n      const newProps = { ...defaultProps, currentFen: newFen };\n\n      rerender(newProps);\n\n      // Hook should handle the new FEN\n      act(() => {\n        result.current.onDrop('d1', 'd5', 'wQ');\n      });\n\n      expect(defaultProps.onMove).toHaveBeenCalled();\n    });\n\n    it('reacts to isPositionReady changes', () => {\n      const { result, rerender } = renderHook(\n        (props) => useMoveHandlers(props),\n        { initialProps: { ...defaultProps, isPositionReady: false } }\n      );\n\n      // Should block moves initially\n      act(() => {\n        const dropResult = result.current.onDrop('e2', 'e4', 'wP');\n        expect(dropResult).toBe(false);\n      });\n\n      // Update to ready\n      rerender({ ...defaultProps, isPositionReady: true });\n\n      // Should allow moves now\n      act(() => {\n        const dropResult = result.current.onDrop('e2', 'e4', 'wP');\n        expect(dropResult).toBe(true);\n      });\n    });\n  });\n});"],"names":["jest","mock","getLogger","fn","setContext","debug","info","warn","error","useUIStore","showToast","Chess","mockImplementation","fen","turn","describe","mockTrainingState","currentPosition","id","isPlayerTurn","isOpponentThinking","defaultProps","currentFen","isGameFinished","isPositionReady","trainingState","onMove","mockUIActions","beforeEach","clearAllMocks","require","mockReturnValue","it","result","renderHook","useMoveHandlers","expect","current","toHaveProperty","onDrop","toBe","onSquareClick","clearSelection","selectedSquare","toBeNull","mockOnMove","mockResolvedValue","props","act","dropResult","Promise","resolve","setTimeout","not","toHaveBeenCalled","toHaveBeenCalledWith","from","to","promotion","piece","pieceType","square","mockRejectedValue","Error","trainingStateWithoutPosition","rerender","initialProps","newFen","newProps"],"mappings":"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"}