f4a6049efc8b4adaab82be80ffafa893
/**
 * Mock implementation of IPositionRepository for testing
 * Provides in-memory storage with full interface compliance
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MockPositionRepository", {
    enumerable: true,
    get: function() {
        return MockPositionRepository;
    }
});
const _logging = require("../../services/logging");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
const logger = (0, _logging.getLogger)().setContext("MockPositionRepository");
class MockPositionRepository {
    // Test helper methods
    reset() {
        this.positions.clear();
        this.categories.clear();
        this.chapters.clear();
        this.nextId = 1;
    }
    seedData(data) {
        if (data.positions) {
            data.positions.forEach((p)=>this.positions.set(p.id, p));
        }
        if (data.categories) {
            data.categories.forEach((c)=>this.categories.set(c.id, c));
        }
        if (data.chapters) {
            data.chapters.forEach((c)=>this.chapters.set(c.id, c));
        }
    }
    // IPositionRepository implementation
    async getPosition(id) {
        const position = this.positions.get(id) || null;
        if (position) {
            var _this_config_events_onDataFetched, _this_config_events;
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPosition", 1);
        }
        return Promise.resolve(position);
    }
    async createPosition(data) {
        var _this_config_events_onDataModified, _this_config_events;
        const id = this.nextId++;
        const position = {
            ...data,
            id
        };
        this.positions.set(id, position);
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "createPosition", [
            id
        ]);
        return Promise.resolve(position);
    }
    async updatePosition(id, updates) {
        var _this_config_events_onDataModified, _this_config_events;
        const position = this.positions.get(id);
        if (!position) return null;
        const updated = {
            ...position,
            ...updates
        };
        this.positions.set(id, updated);
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "updatePosition", [
            id
        ]);
        return Promise.resolve(updated);
    }
    async deletePosition(id) {
        const deleted = this.positions.delete(id);
        if (deleted) {
            var _this_config_events_onDataModified, _this_config_events;
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "deletePosition", [
                id
            ]);
        }
        return Promise.resolve(deleted);
    }
    async getAllPositions() {
        var _this_config_events_onDataFetched, _this_config_events;
        const positions = Array.from(this.positions.values());
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getAllPositions", positions.length);
        return Promise.resolve(positions);
    }
    async getPositionsByCategory(category) {
        var _this_config_events_onDataFetched, _this_config_events;
        const positions = Array.from(this.positions.values()).filter((p)=>p.category === category);
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionsByCategory", positions.length);
        return Promise.resolve(positions);
    }
    async getPositionsByDifficulty(difficulty) {
        var _this_config_events_onDataFetched, _this_config_events;
        const positions = Array.from(this.positions.values()).filter((p)=>p.difficulty === difficulty);
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionsByDifficulty", positions.length);
        return Promise.resolve(positions);
    }
    async getPositionsByIds(ids) {
        var _this_config_events_onDataFetched, _this_config_events;
        const positions = ids.map((id)=>this.positions.get(id)).filter((p)=>p !== undefined);
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionsByIds", positions.length);
        return Promise.resolve(positions);
    }
    async searchPositions(searchTerm) {
        var _this_config_events_onDataFetched, _this_config_events;
        const lowerSearch = searchTerm.toLowerCase();
        const positions = Array.from(this.positions.values()).filter((p)=>p.title.toLowerCase().includes(lowerSearch) || p.description.toLowerCase().includes(lowerSearch));
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "searchPositions", positions.length);
        return Promise.resolve(positions);
    }
    async getPositionsByTags(_tags) {
        var _this_config_events_onDataFetched, _this_config_events;
        // Tags are not yet implemented in EndgamePosition type
        // Return empty array for now
        logger.warn("getPositionsByTags: tags property not yet implemented in EndgamePosition");
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionsByTags", 0);
        return Promise.resolve([]);
    }
    async getNextPosition(currentId, categoryId) {
        let positions = Array.from(this.positions.values());
        if (categoryId) {
            positions = positions.filter((p)=>p.category === categoryId);
        }
        positions = positions.filter((p)=>p.id > currentId);
        positions.sort((a, b)=>a.id - b.id);
        const next = positions[0] || null;
        if (next) {
            var _this_config_events_onDataFetched, _this_config_events;
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getNextPosition", 1);
        }
        return Promise.resolve(next);
    }
    async getPreviousPosition(currentId, categoryId) {
        let positions = Array.from(this.positions.values());
        if (categoryId) {
            positions = positions.filter((p)=>p.category === categoryId);
        }
        positions = positions.filter((p)=>p.id < currentId);
        positions.sort((a, b)=>b.id - a.id);
        const previous = positions[0] || null;
        if (previous) {
            var _this_config_events_onDataFetched, _this_config_events;
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPreviousPosition", 1);
        }
        return Promise.resolve(previous);
    }
    async getCategories() {
        var _this_config_events_onDataFetched, _this_config_events;
        const categories = Array.from(this.categories.values());
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getCategories", categories.length);
        return Promise.resolve(categories);
    }
    async getCategory(id) {
        const category = this.categories.get(id) || null;
        if (category) {
            var _this_config_events_onDataFetched, _this_config_events;
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getCategory", 1);
        }
        return Promise.resolve(category);
    }
    async getChapters() {
        var _this_config_events_onDataFetched, _this_config_events;
        const chapters = Array.from(this.chapters.values());
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getChapters", chapters.length);
        return Promise.resolve(chapters);
    }
    async getChaptersByCategory(categoryId) {
        var _this_config_events_onDataFetched, _this_config_events;
        const chapters = Array.from(this.chapters.values()).filter((c)=>c.category === categoryId);
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getChaptersByCategory", chapters.length);
        return Promise.resolve(chapters);
    }
    async getTotalPositionCount() {
        var _this_config_events_onDataFetched, _this_config_events;
        const count = this.positions.size;
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getTotalPositionCount", count);
        return Promise.resolve(count);
    }
    async getPositionCountByCategory(categoryId) {
        var _this_config_events_onDataFetched, _this_config_events;
        const count = Array.from(this.positions.values()).filter((p)=>p.category === categoryId).length;
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionCountByCategory", count);
        return Promise.resolve(count);
    }
    async getPositionCountByDifficulty(difficulty) {
        var _this_config_events_onDataFetched, _this_config_events;
        const count = Array.from(this.positions.values()).filter((p)=>p.difficulty === difficulty).length;
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionCountByDifficulty", count);
        return Promise.resolve(count);
    }
    async batchCreatePositions(positions) {
        var _this_config_events_onDataModified, _this_config_events;
        const created = [];
        for (const data of positions){
            const id = this.nextId++;
            const position = {
                ...data,
                id
            };
            this.positions.set(id, position);
            created.push(position);
        }
        const ids = created.map((p)=>p.id);
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "batchCreatePositions", ids);
        return Promise.resolve(created);
    }
    async batchUpdatePositions(updates) {
        var _this_config_events_onDataModified, _this_config_events;
        const updated = [];
        for (const { id, updates: updateData } of updates){
            const position = this.positions.get(id);
            if (position) {
                const updatedPosition = {
                    ...position,
                    ...updateData
                };
                this.positions.set(id, updatedPosition);
                updated.push(updatedPosition);
            }
        }
        const ids = updated.map((p)=>p.id);
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "batchUpdatePositions", ids);
        return Promise.resolve(updated);
    }
    async batchDeletePositions(ids) {
        let allDeleted = true;
        for (const id of ids){
            if (!this.positions.delete(id)) {
                allDeleted = false;
            }
        }
        if (allDeleted) {
            var _this_config_events_onDataModified, _this_config_events;
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "batchDeletePositions", ids);
        }
        return Promise.resolve(allDeleted);
    }
    constructor(config = {}){
        _define_property(this, "positions", new Map());
        _define_property(this, "categories", new Map());
        _define_property(this, "chapters", new Map());
        _define_property(this, "config", void 0);
        _define_property(this, "nextId", 1);
        this.config = config;
    }
}

//# sourceMappingURL=data:application/json;base64,