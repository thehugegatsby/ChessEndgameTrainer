{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/training/DialogManager.tsx"],"sourcesContent":["/**\n * @file Dialog Manager for Training Board\n * @module components/training/DialogManager\n * \n * @description\n * Presentational component that renders move error and success dialogs.\n * Extracted from TrainingBoard to separate UI concerns from business logic.\n * \n * @remarks\n * Key design decisions:\n * - Pure presentational component (no store access)\n * - All state passed via props from parent\n * - All callbacks delegated to parent business logic\n * - No over-engineering - direct dialog rendering only\n * \n * @example\n * ```tsx\n * <DialogManager\n *   errorDialog={moveErrorDialog}\n *   successDialog={moveSuccessDialog}\n *   onErrorTakeBack={handleMoveErrorTakeBack}\n *   onErrorRestart={handleMoveErrorRestart}\n *   onErrorContinue={handleMoveErrorContinue}\n *   onErrorShowBestMove={handleShowBestMove}\n *   onSuccessClose={handleMoveSuccessClose}\n *   onSuccessContinue={handleMoveSuccessContinue}\n * />\n * ```\n */\n\nimport React from 'react';\nimport { MoveErrorDialog } from '@shared/components/ui/MoveErrorDialog';\nimport { MoveSuccessDialog } from '@shared/components/ui/MoveSuccessDialog';\n\n/**\n * Move error dialog state structure\n */\ninterface ErrorDialogState {\n  isOpen: boolean;\n  wdlBefore?: number;\n  wdlAfter?: number;\n  bestMove?: string;\n}\n\n/**\n * Move success dialog state structure\n */\ninterface SuccessDialogState {\n  isOpen: boolean;\n  promotionPiece?: string;\n  moveDescription?: string;\n}\n\n/**\n * Props for DialogManager component\n */\ninterface DialogManagerProps {\n  /** Move error dialog state from training store */\n  errorDialog: ErrorDialogState | null;\n  /** Move success dialog state from training store */\n  successDialog: SuccessDialogState | null;\n  \n  /** Callback for error dialog - take back move (undo) */\n  onErrorTakeBack: () => void;\n  /** Callback for error dialog - restart game */\n  onErrorRestart: () => void;\n  /** Callback for error dialog - continue playing */\n  onErrorContinue: () => void;\n  /** Callback for error dialog - show best move */\n  onErrorShowBestMove?: () => void;\n  \n  /** Callback for success dialog - close dialog */\n  onSuccessClose: () => void;\n  /** Callback for success dialog - continue to next */\n  onSuccessContinue: () => void;\n}\n\n/**\n * Dialog Manager Component\n * \n * Renders training dialogs based on state passed from parent component.\n * Maintains separation between UI rendering and business logic.\n * \n * @param props Dialog state and callback functions\n * @returns Dialog components or null if no dialogs are active\n * \n * @remarks\n * This component:\n * - Renders MoveErrorDialog when error state is open\n * - Renders MoveSuccessDialog when success state is open  \n * - Delegates all actions to parent component callbacks\n * - Has no direct store access (presentational pattern)\n * - Provides clean separation between UI and business logic\n * \n * Design Pattern: Presentational Component\n * - State comes from props (lifted up to parent)\n * - Actions delegated via callbacks\n * - No side effects or store subscriptions\n * - Easy to test in isolation\n */\nexport const DialogManager: React.FC<DialogManagerProps> = ({\n  errorDialog,\n  successDialog,\n  onErrorTakeBack,\n  onErrorRestart, \n  onErrorContinue,\n  onErrorShowBestMove,\n  onSuccessClose,\n  onSuccessContinue,\n}) => {\n  return (\n    <>\n      {/* Move Error Dialog */}\n      {errorDialog?.isOpen && (\n        <MoveErrorDialog\n          isOpen={errorDialog.isOpen}\n          onClose={onErrorContinue}\n          onTakeBack={onErrorTakeBack}\n          onRestart={onErrorRestart}\n          onShowBestMove={\n            errorDialog.bestMove ? onErrorShowBestMove : undefined\n          }\n          wdlBefore={errorDialog.wdlBefore || 0}\n          wdlAfter={errorDialog.wdlAfter || 0}\n          bestMove={errorDialog.bestMove}\n        />\n      )}\n\n      {/* Move Success Dialog */}\n      {successDialog?.isOpen && (\n        <MoveSuccessDialog\n          isOpen={successDialog.isOpen}\n          onClose={onSuccessClose}\n          onContinue={onSuccessContinue}\n          promotionPiece={successDialog.promotionPiece}\n          moveDescription={successDialog.moveDescription}\n        />\n      )}\n    </>\n  );\n};\n\nDialogManager.displayName = 'DialogManager';"],"names":["DialogManager","errorDialog","successDialog","onErrorTakeBack","onErrorRestart","onErrorContinue","onErrorShowBestMove","onSuccessClose","onSuccessContinue","isOpen","MoveErrorDialog","onClose","onTakeBack","onRestart","onShowBestMove","bestMove","undefined","wdlBefore","wdlAfter","MoveSuccessDialog","onContinue","promotionPiece","moveDescription","displayName"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BC;;;;+BAwEYA;;;eAAAA;;;;8DAtEK;iCACc;mCACE;;;;;;AAoE3B,MAAMA,gBAA8C,CAAC,EAC1DC,WAAW,EACXC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,eAAe,EACfC,mBAAmB,EACnBC,cAAc,EACdC,iBAAiB,EAClB;IACC,qBACE;;YAEGP,CAAAA,wBAAAA,kCAAAA,YAAaQ,MAAM,mBAClB,qBAACC,gCAAe;gBACdD,QAAQR,YAAYQ,MAAM;gBAC1BE,SAASN;gBACTO,YAAYT;gBACZU,WAAWT;gBACXU,gBACEb,YAAYc,QAAQ,GAAGT,sBAAsBU;gBAE/CC,WAAWhB,YAAYgB,SAAS,IAAI;gBACpCC,UAAUjB,YAAYiB,QAAQ,IAAI;gBAClCH,UAAUd,YAAYc,QAAQ;;YAKjCb,CAAAA,0BAAAA,oCAAAA,cAAeO,MAAM,mBACpB,qBAACU,oCAAiB;gBAChBV,QAAQP,cAAcO,MAAM;gBAC5BE,SAASJ;gBACTa,YAAYZ;gBACZa,gBAAgBnB,cAAcmB,cAAc;gBAC5CC,iBAAiBpB,cAAcoB,eAAe;;;;AAKxD;AAEAtB,cAAcuB,WAAW,GAAG"}