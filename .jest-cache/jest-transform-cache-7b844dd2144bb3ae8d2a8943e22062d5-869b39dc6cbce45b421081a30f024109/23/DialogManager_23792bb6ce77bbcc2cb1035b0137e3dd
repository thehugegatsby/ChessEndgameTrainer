f9c5983007b0b1cdcb7c6ac5577bf402
/**
 * @file Dialog Manager for Training Board
 * @module components/training/DialogManager
 * 
 * @description
 * Presentational component that renders move error and success dialogs.
 * Extracted from TrainingBoard to separate UI concerns from business logic.
 * 
 * @remarks
 * Key design decisions:
 * - Pure presentational component (no store access)
 * - All state passed via props from parent
 * - All callbacks delegated to parent business logic
 * - No over-engineering - direct dialog rendering only
 * 
 * @example
 * ```tsx
 * <DialogManager
 *   errorDialog={moveErrorDialog}
 *   successDialog={moveSuccessDialog}
 *   onErrorTakeBack={handleMoveErrorTakeBack}
 *   onErrorRestart={handleMoveErrorRestart}
 *   onErrorContinue={handleMoveErrorContinue}
 *   onErrorShowBestMove={handleShowBestMove}
 *   onSuccessClose={handleMoveSuccessClose}
 *   onSuccessContinue={handleMoveSuccessContinue}
 * />
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DialogManager", {
    enumerable: true,
    get: function() {
        return DialogManager;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _MoveErrorDialog = require("../ui/MoveErrorDialog");
const _MoveSuccessDialog = require("../ui/MoveSuccessDialog");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const DialogManager = ({ errorDialog, successDialog, onErrorTakeBack, onErrorRestart, onErrorContinue, onErrorShowBestMove, onSuccessClose, onSuccessContinue })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            (errorDialog === null || errorDialog === void 0 ? void 0 : errorDialog.isOpen) && /*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                isOpen: errorDialog.isOpen,
                onClose: onErrorContinue,
                onTakeBack: onErrorTakeBack,
                onRestart: onErrorRestart,
                onShowBestMove: errorDialog.bestMove ? onErrorShowBestMove : undefined,
                wdlBefore: errorDialog.wdlBefore || 0,
                wdlAfter: errorDialog.wdlAfter || 0,
                bestMove: errorDialog.bestMove
            }),
            (successDialog === null || successDialog === void 0 ? void 0 : successDialog.isOpen) && /*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                isOpen: successDialog.isOpen,
                onClose: onSuccessClose,
                onContinue: onSuccessContinue,
                promotionPiece: successDialog.promotionPiece,
                moveDescription: successDialog.moveDescription
            })
        ]
    });
};
DialogManager.displayName = 'DialogManager';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL2NvbXBvbmVudHMvdHJhaW5pbmcvRGlhbG9nTWFuYWdlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBEaWFsb2cgTWFuYWdlciBmb3IgVHJhaW5pbmcgQm9hcmRcbiAqIEBtb2R1bGUgY29tcG9uZW50cy90cmFpbmluZy9EaWFsb2dNYW5hZ2VyXG4gKiBcbiAqIEBkZXNjcmlwdGlvblxuICogUHJlc2VudGF0aW9uYWwgY29tcG9uZW50IHRoYXQgcmVuZGVycyBtb3ZlIGVycm9yIGFuZCBzdWNjZXNzIGRpYWxvZ3MuXG4gKiBFeHRyYWN0ZWQgZnJvbSBUcmFpbmluZ0JvYXJkIHRvIHNlcGFyYXRlIFVJIGNvbmNlcm5zIGZyb20gYnVzaW5lc3MgbG9naWMuXG4gKiBcbiAqIEByZW1hcmtzXG4gKiBLZXkgZGVzaWduIGRlY2lzaW9uczpcbiAqIC0gUHVyZSBwcmVzZW50YXRpb25hbCBjb21wb25lbnQgKG5vIHN0b3JlIGFjY2VzcylcbiAqIC0gQWxsIHN0YXRlIHBhc3NlZCB2aWEgcHJvcHMgZnJvbSBwYXJlbnRcbiAqIC0gQWxsIGNhbGxiYWNrcyBkZWxlZ2F0ZWQgdG8gcGFyZW50IGJ1c2luZXNzIGxvZ2ljXG4gKiAtIE5vIG92ZXItZW5naW5lZXJpbmcgLSBkaXJlY3QgZGlhbG9nIHJlbmRlcmluZyBvbmx5XG4gKiBcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIDxEaWFsb2dNYW5hZ2VyXG4gKiAgIGVycm9yRGlhbG9nPXttb3ZlRXJyb3JEaWFsb2d9XG4gKiAgIHN1Y2Nlc3NEaWFsb2c9e21vdmVTdWNjZXNzRGlhbG9nfVxuICogICBvbkVycm9yVGFrZUJhY2s9e2hhbmRsZU1vdmVFcnJvclRha2VCYWNrfVxuICogICBvbkVycm9yUmVzdGFydD17aGFuZGxlTW92ZUVycm9yUmVzdGFydH1cbiAqICAgb25FcnJvckNvbnRpbnVlPXtoYW5kbGVNb3ZlRXJyb3JDb250aW51ZX1cbiAqICAgb25FcnJvclNob3dCZXN0TW92ZT17aGFuZGxlU2hvd0Jlc3RNb3ZlfVxuICogICBvblN1Y2Nlc3NDbG9zZT17aGFuZGxlTW92ZVN1Y2Nlc3NDbG9zZX1cbiAqICAgb25TdWNjZXNzQ29udGludWU9e2hhbmRsZU1vdmVTdWNjZXNzQ29udGludWV9XG4gKiAvPlxuICogYGBgXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vdmVFcnJvckRpYWxvZyB9IGZyb20gJ0BzaGFyZWQvY29tcG9uZW50cy91aS9Nb3ZlRXJyb3JEaWFsb2cnO1xuaW1wb3J0IHsgTW92ZVN1Y2Nlc3NEaWFsb2cgfSBmcm9tICdAc2hhcmVkL2NvbXBvbmVudHMvdWkvTW92ZVN1Y2Nlc3NEaWFsb2cnO1xuXG4vKipcbiAqIE1vdmUgZXJyb3IgZGlhbG9nIHN0YXRlIHN0cnVjdHVyZVxuICovXG5pbnRlcmZhY2UgRXJyb3JEaWFsb2dTdGF0ZSB7XG4gIGlzT3BlbjogYm9vbGVhbjtcbiAgd2RsQmVmb3JlPzogbnVtYmVyO1xuICB3ZGxBZnRlcj86IG51bWJlcjtcbiAgYmVzdE1vdmU/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogTW92ZSBzdWNjZXNzIGRpYWxvZyBzdGF0ZSBzdHJ1Y3R1cmVcbiAqL1xuaW50ZXJmYWNlIFN1Y2Nlc3NEaWFsb2dTdGF0ZSB7XG4gIGlzT3BlbjogYm9vbGVhbjtcbiAgcHJvbW90aW9uUGllY2U/OiBzdHJpbmc7XG4gIG1vdmVEZXNjcmlwdGlvbj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBQcm9wcyBmb3IgRGlhbG9nTWFuYWdlciBjb21wb25lbnRcbiAqL1xuaW50ZXJmYWNlIERpYWxvZ01hbmFnZXJQcm9wcyB7XG4gIC8qKiBNb3ZlIGVycm9yIGRpYWxvZyBzdGF0ZSBmcm9tIHRyYWluaW5nIHN0b3JlICovXG4gIGVycm9yRGlhbG9nOiBFcnJvckRpYWxvZ1N0YXRlIHwgbnVsbDtcbiAgLyoqIE1vdmUgc3VjY2VzcyBkaWFsb2cgc3RhdGUgZnJvbSB0cmFpbmluZyBzdG9yZSAqL1xuICBzdWNjZXNzRGlhbG9nOiBTdWNjZXNzRGlhbG9nU3RhdGUgfCBudWxsO1xuICBcbiAgLyoqIENhbGxiYWNrIGZvciBlcnJvciBkaWFsb2cgLSB0YWtlIGJhY2sgbW92ZSAodW5kbykgKi9cbiAgb25FcnJvclRha2VCYWNrOiAoKSA9PiB2b2lkO1xuICAvKiogQ2FsbGJhY2sgZm9yIGVycm9yIGRpYWxvZyAtIHJlc3RhcnQgZ2FtZSAqL1xuICBvbkVycm9yUmVzdGFydDogKCkgPT4gdm9pZDtcbiAgLyoqIENhbGxiYWNrIGZvciBlcnJvciBkaWFsb2cgLSBjb250aW51ZSBwbGF5aW5nICovXG4gIG9uRXJyb3JDb250aW51ZTogKCkgPT4gdm9pZDtcbiAgLyoqIENhbGxiYWNrIGZvciBlcnJvciBkaWFsb2cgLSBzaG93IGJlc3QgbW92ZSAqL1xuICBvbkVycm9yU2hvd0Jlc3RNb3ZlPzogKCkgPT4gdm9pZDtcbiAgXG4gIC8qKiBDYWxsYmFjayBmb3Igc3VjY2VzcyBkaWFsb2cgLSBjbG9zZSBkaWFsb2cgKi9cbiAgb25TdWNjZXNzQ2xvc2U6ICgpID0+IHZvaWQ7XG4gIC8qKiBDYWxsYmFjayBmb3Igc3VjY2VzcyBkaWFsb2cgLSBjb250aW51ZSB0byBuZXh0ICovXG4gIG9uU3VjY2Vzc0NvbnRpbnVlOiAoKSA9PiB2b2lkO1xufVxuXG4vKipcbiAqIERpYWxvZyBNYW5hZ2VyIENvbXBvbmVudFxuICogXG4gKiBSZW5kZXJzIHRyYWluaW5nIGRpYWxvZ3MgYmFzZWQgb24gc3RhdGUgcGFzc2VkIGZyb20gcGFyZW50IGNvbXBvbmVudC5cbiAqIE1haW50YWlucyBzZXBhcmF0aW9uIGJldHdlZW4gVUkgcmVuZGVyaW5nIGFuZCBidXNpbmVzcyBsb2dpYy5cbiAqIFxuICogQHBhcmFtIHByb3BzIERpYWxvZyBzdGF0ZSBhbmQgY2FsbGJhY2sgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyBEaWFsb2cgY29tcG9uZW50cyBvciBudWxsIGlmIG5vIGRpYWxvZ3MgYXJlIGFjdGl2ZVxuICogXG4gKiBAcmVtYXJrc1xuICogVGhpcyBjb21wb25lbnQ6XG4gKiAtIFJlbmRlcnMgTW92ZUVycm9yRGlhbG9nIHdoZW4gZXJyb3Igc3RhdGUgaXMgb3BlblxuICogLSBSZW5kZXJzIE1vdmVTdWNjZXNzRGlhbG9nIHdoZW4gc3VjY2VzcyBzdGF0ZSBpcyBvcGVuICBcbiAqIC0gRGVsZWdhdGVzIGFsbCBhY3Rpb25zIHRvIHBhcmVudCBjb21wb25lbnQgY2FsbGJhY2tzXG4gKiAtIEhhcyBubyBkaXJlY3Qgc3RvcmUgYWNjZXNzIChwcmVzZW50YXRpb25hbCBwYXR0ZXJuKVxuICogLSBQcm92aWRlcyBjbGVhbiBzZXBhcmF0aW9uIGJldHdlZW4gVUkgYW5kIGJ1c2luZXNzIGxvZ2ljXG4gKiBcbiAqIERlc2lnbiBQYXR0ZXJuOiBQcmVzZW50YXRpb25hbCBDb21wb25lbnRcbiAqIC0gU3RhdGUgY29tZXMgZnJvbSBwcm9wcyAobGlmdGVkIHVwIHRvIHBhcmVudClcbiAqIC0gQWN0aW9ucyBkZWxlZ2F0ZWQgdmlhIGNhbGxiYWNrc1xuICogLSBObyBzaWRlIGVmZmVjdHMgb3Igc3RvcmUgc3Vic2NyaXB0aW9uc1xuICogLSBFYXN5IHRvIHRlc3QgaW4gaXNvbGF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBEaWFsb2dNYW5hZ2VyOiBSZWFjdC5GQzxEaWFsb2dNYW5hZ2VyUHJvcHM+ID0gKHtcbiAgZXJyb3JEaWFsb2csXG4gIHN1Y2Nlc3NEaWFsb2csXG4gIG9uRXJyb3JUYWtlQmFjayxcbiAgb25FcnJvclJlc3RhcnQsIFxuICBvbkVycm9yQ29udGludWUsXG4gIG9uRXJyb3JTaG93QmVzdE1vdmUsXG4gIG9uU3VjY2Vzc0Nsb3NlLFxuICBvblN1Y2Nlc3NDb250aW51ZSxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgey8qIE1vdmUgRXJyb3IgRGlhbG9nICovfVxuICAgICAge2Vycm9yRGlhbG9nPy5pc09wZW4gJiYgKFxuICAgICAgICA8TW92ZUVycm9yRGlhbG9nXG4gICAgICAgICAgaXNPcGVuPXtlcnJvckRpYWxvZy5pc09wZW59XG4gICAgICAgICAgb25DbG9zZT17b25FcnJvckNvbnRpbnVlfVxuICAgICAgICAgIG9uVGFrZUJhY2s9e29uRXJyb3JUYWtlQmFja31cbiAgICAgICAgICBvblJlc3RhcnQ9e29uRXJyb3JSZXN0YXJ0fVxuICAgICAgICAgIG9uU2hvd0Jlc3RNb3ZlPXtcbiAgICAgICAgICAgIGVycm9yRGlhbG9nLmJlc3RNb3ZlID8gb25FcnJvclNob3dCZXN0TW92ZSA6IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgICB3ZGxCZWZvcmU9e2Vycm9yRGlhbG9nLndkbEJlZm9yZSB8fCAwfVxuICAgICAgICAgIHdkbEFmdGVyPXtlcnJvckRpYWxvZy53ZGxBZnRlciB8fCAwfVxuICAgICAgICAgIGJlc3RNb3ZlPXtlcnJvckRpYWxvZy5iZXN0TW92ZX1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIHsvKiBNb3ZlIFN1Y2Nlc3MgRGlhbG9nICovfVxuICAgICAge3N1Y2Nlc3NEaWFsb2c/LmlzT3BlbiAmJiAoXG4gICAgICAgIDxNb3ZlU3VjY2Vzc0RpYWxvZ1xuICAgICAgICAgIGlzT3Blbj17c3VjY2Vzc0RpYWxvZy5pc09wZW59XG4gICAgICAgICAgb25DbG9zZT17b25TdWNjZXNzQ2xvc2V9XG4gICAgICAgICAgb25Db250aW51ZT17b25TdWNjZXNzQ29udGludWV9XG4gICAgICAgICAgcHJvbW90aW9uUGllY2U9e3N1Y2Nlc3NEaWFsb2cucHJvbW90aW9uUGllY2V9XG4gICAgICAgICAgbW92ZURlc2NyaXB0aW9uPXtzdWNjZXNzRGlhbG9nLm1vdmVEZXNjcmlwdGlvbn1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC8+XG4gICk7XG59O1xuXG5EaWFsb2dNYW5hZ2VyLmRpc3BsYXlOYW1lID0gJ0RpYWxvZ01hbmFnZXInOyJdLCJuYW1lcyI6WyJEaWFsb2dNYW5hZ2VyIiwiZXJyb3JEaWFsb2ciLCJzdWNjZXNzRGlhbG9nIiwib25FcnJvclRha2VCYWNrIiwib25FcnJvclJlc3RhcnQiLCJvbkVycm9yQ29udGludWUiLCJvbkVycm9yU2hvd0Jlc3RNb3ZlIiwib25TdWNjZXNzQ2xvc2UiLCJvblN1Y2Nlc3NDb250aW51ZSIsImlzT3BlbiIsIk1vdmVFcnJvckRpYWxvZyIsIm9uQ2xvc2UiLCJvblRha2VCYWNrIiwib25SZXN0YXJ0Iiwib25TaG93QmVzdE1vdmUiLCJiZXN0TW92ZSIsInVuZGVmaW5lZCIsIndkbEJlZm9yZSIsIndkbEFmdGVyIiwiTW92ZVN1Y2Nlc3NEaWFsb2ciLCJvbkNvbnRpbnVlIiwicHJvbW90aW9uUGllY2UiLCJtb3ZlRGVzY3JpcHRpb24iLCJkaXNwbGF5TmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E0QkM7Ozs7K0JBd0VZQTs7O2VBQUFBOzs7OzhEQXRFSztpQ0FDYzttQ0FDRTs7Ozs7O0FBb0UzQixNQUFNQSxnQkFBOEMsQ0FBQyxFQUMxREMsV0FBVyxFQUNYQyxhQUFhLEVBQ2JDLGVBQWUsRUFDZkMsY0FBYyxFQUNkQyxlQUFlLEVBQ2ZDLG1CQUFtQixFQUNuQkMsY0FBYyxFQUNkQyxpQkFBaUIsRUFDbEI7SUFDQyxxQkFDRTs7WUFFR1AsQ0FBQUEsd0JBQUFBLGtDQUFBQSxZQUFhUSxNQUFNLG1CQUNsQixxQkFBQ0MsZ0NBQWU7Z0JBQ2RELFFBQVFSLFlBQVlRLE1BQU07Z0JBQzFCRSxTQUFTTjtnQkFDVE8sWUFBWVQ7Z0JBQ1pVLFdBQVdUO2dCQUNYVSxnQkFDRWIsWUFBWWMsUUFBUSxHQUFHVCxzQkFBc0JVO2dCQUUvQ0MsV0FBV2hCLFlBQVlnQixTQUFTLElBQUk7Z0JBQ3BDQyxVQUFVakIsWUFBWWlCLFFBQVEsSUFBSTtnQkFDbENILFVBQVVkLFlBQVljLFFBQVE7O1lBS2pDYixDQUFBQSwwQkFBQUEsb0NBQUFBLGNBQWVPLE1BQU0sbUJBQ3BCLHFCQUFDVSxvQ0FBaUI7Z0JBQ2hCVixRQUFRUCxjQUFjTyxNQUFNO2dCQUM1QkUsU0FBU0o7Z0JBQ1RhLFlBQVlaO2dCQUNaYSxnQkFBZ0JuQixjQUFjbUIsY0FBYztnQkFDNUNDLGlCQUFpQnBCLGNBQWNvQixlQUFlOzs7O0FBS3hEO0FBRUF0QixjQUFjdUIsV0FBVyxHQUFHIn0=