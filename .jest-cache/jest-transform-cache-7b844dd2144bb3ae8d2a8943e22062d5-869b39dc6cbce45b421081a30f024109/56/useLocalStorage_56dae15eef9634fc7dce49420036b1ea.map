{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/hooks/useLocalStorage.ts"],"sourcesContent":["/**\n * @file localStorage hooks with React state management\n * @module hooks/useLocalStorage\n *\n * @description\n * Provides cross-platform localStorage functionality with async support.\n * Uses the PlatformService abstraction to work across web, mobile, and desktop.\n *\n * Three APIs are provided:\n * - useLocalStorage: Backward-compatible API that hides async complexity\n * - useLocalStorageWithState: Full-featured API with loading/error states\n * - useLocalStorageSync: Deprecated sync wrapper\n */\n\nimport { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport { getPlatformService } from \"../services/platform\";\nimport { getLogger } from \"../services/logging\";\n\nconst logger = getLogger().setContext(\"useLocalStorage\");\n\n/**\n * INTERNAL: Full-featured async hook with loading state and error handling\n * Private implementation used by both legacy and new APIs\n *\n * @private\n * @template T - Type of the stored value\n * @param {string} key - Storage key\n * @param {T | (() => T)} initialValue - Initial value or factory function\n * @returns {[T | undefined, Function, boolean, Error | null]} Tuple of [value, setter, isLoading, error]\n */\nfunction useLocalStorageInternal<T>(\n  key: string,\n  initialValue: T | (() => T),\n): [\n  T | undefined,\n  (value: T | ((val: T | undefined) => T)) => void,\n  boolean,\n  Error | null,\n] {\n  const resolvedInitialValue = useMemo(() => {\n    return typeof initialValue === \"function\"\n      ? (initialValue as () => T)()\n      : initialValue;\n  }, [initialValue]);\n\n  const [storedValue, setStoredValue] = useState<T | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n  const [saveError, setSaveError] = useState<Error | null>(null);\n\n  // Effect for initial loading from storage\n  useEffect(() => {\n    let isMounted = true;\n    setIsLoading(true);\n\n    getPlatformService()\n      .storage.load<T>(key)\n      .then((item) => {\n        if (isMounted) {\n          setStoredValue(item !== null ? item : resolvedInitialValue);\n        }\n      })\n      .catch((loadError) => {\n        logger.warn(`Error loading storage key \"${key}\": ${loadError}`);\n        if (isMounted) {\n          setStoredValue(resolvedInitialValue);\n        }\n      })\n      .finally(() => {\n        if (isMounted) {\n          setIsLoading(false);\n        }\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [key, resolvedInitialValue]);\n\n  // Ref to prevent saving the value that was just loaded from storage\n  const isInitialMountAfterLoad = useRef(true);\n\n  // Effect for saving to storage on value change\n  useEffect(() => {\n    if (isLoading) {\n      isInitialMountAfterLoad.current = true; // Reset on re-load\n      return;\n    }\n\n    if (isInitialMountAfterLoad.current) {\n      // This is the first render after loading. Don't save the initial value.\n      isInitialMountAfterLoad.current = false;\n      return;\n    }\n\n    let isMounted = true;\n    getPlatformService()\n      .storage.save(key, storedValue)\n      .then(() => {\n        // On success, clear any previous error\n        if (isMounted && saveError !== null) {\n          setSaveError(null);\n        }\n      })\n      .catch((err) => {\n        logger.error(`Failed to save storage key \"${key}\": ${err}`);\n        if (isMounted) {\n          setSaveError(err instanceof Error ? err : new Error(String(err)));\n        }\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [key, storedValue, isLoading, saveError]);\n\n  const setValue = useCallback(\n    (value: T | ((val: T | undefined) => T)) => {\n      // Clear any previous save error on a new update attempt\n      if (saveError) {\n        setSaveError(null);\n      }\n      setStoredValue(value);\n    },\n    [saveError],\n  );\n\n  return [storedValue, setValue, isLoading, saveError];\n}\n\n/**\n * Custom hook for managing localStorage with React state\n *\n * @description\n * Uses platform abstraction for cross-platform compatibility.\n * This API maintains backward compatibility with a simple [value, setValue] interface\n * while handling async operations internally. Loading states and errors are hidden.\n *\n * @template T - Type of the stored value\n * @param {string} key - Storage key to use\n * @param {T | (() => T)} initialValue - Initial value or factory function\n * @returns {[T, Function]} Tuple of [currentValue, setValue]\n *\n * @example\n * ```tsx\n * const [theme, setTheme] = useLocalStorage('theme', 'light');\n *\n * // Update value\n * setTheme('dark');\n *\n * // Update with function\n * setTheme(prev => prev === 'light' ? 'dark' : 'light');\n * ```\n *\n * @remarks\n * - Returns initialValue while loading from storage\n * - Automatically saves to storage on value changes\n * - Errors are logged but not exposed (use useLocalStorageWithState for error handling)\n * - For new code, consider using useLocalStorageWithState for full async support\n */\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T | (() => T),\n): [T, (value: T | ((val: T) => T)) => void] {\n  const [asyncValue, setAsyncValue, isLoading, saveError] =\n    useLocalStorageInternal(key, initialValue);\n\n  const resolvedInitialValue = useMemo(() => {\n    return typeof initialValue === \"function\"\n      ? (initialValue as () => T)()\n      : initialValue;\n  }, [initialValue]);\n\n  // Return initial value while loading, then switch to loaded value (backward compatible)\n  const currentValue = isLoading\n    ? resolvedInitialValue\n    : (asyncValue ?? resolvedInitialValue);\n\n  // Wrapper for the setter to maintain backward compatible interface\n  const compatSetValue = useCallback(\n    (value: T | ((val: T) => T)) => {\n      const valueToStore =\n        value instanceof Function ? value(currentValue) : value;\n      setAsyncValue(valueToStore);\n\n      // Log save errors (backward compatible - original didn't expose errors)\n      if (saveError) {\n        logger.warn(\n          `Storage save error (backward compatibility mode): ${saveError.message}`,\n        );\n      }\n    },\n    [currentValue, setAsyncValue, saveError],\n  );\n\n  return [currentValue, compatSetValue];\n}\n\n/**\n * Enhanced localStorage hook with full loading state and error handling\n *\n * @description\n * New API that exposes all async behavior and error states.\n * Use this for new code that needs to handle loading states or save errors.\n *\n * @template T - Type of the stored value\n * @param {string} key - Storage key to use\n * @param {T | (() => T)} initialValue - Initial value or factory function\n * @returns {[T | undefined, Function, boolean, Error | null]} Tuple of [value, setValue, isLoading, saveError]\n *\n * @example\n * ```tsx\n * const [settings, setSettings, isLoading, error] = useLocalStorageWithState('settings', {});\n *\n * if (isLoading) return <Spinner />;\n * if (error) return <ErrorMessage error={error} />;\n *\n * return (\n *   <SettingsForm\n *     settings={settings}\n *     onChange={setSettings}\n *   />\n * );\n * ```\n *\n * @remarks\n * - value is undefined during initial load\n * - isLoading is true until first load completes\n * - saveError contains any errors from the last save attempt\n * - Errors are automatically cleared on successful saves\n */\nexport function useLocalStorageWithState<T>(\n  key: string,\n  initialValue: T | (() => T),\n): [\n  T | undefined,\n  (value: T | ((val: T | undefined) => T)) => void,\n  boolean,\n  Error | null,\n] {\n  return useLocalStorageInternal(key, initialValue);\n}\n"],"names":["useLocalStorage","useLocalStorageWithState","logger","getLogger","setContext","useLocalStorageInternal","key","initialValue","resolvedInitialValue","useMemo","storedValue","setStoredValue","useState","undefined","isLoading","setIsLoading","saveError","setSaveError","useEffect","isMounted","getPlatformService","storage","load","then","item","catch","loadError","warn","finally","isInitialMountAfterLoad","useRef","current","save","err","error","Error","String","setValue","useCallback","value","asyncValue","setAsyncValue","currentValue","compatSetValue","valueToStore","Function","message"],"mappings":"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"}