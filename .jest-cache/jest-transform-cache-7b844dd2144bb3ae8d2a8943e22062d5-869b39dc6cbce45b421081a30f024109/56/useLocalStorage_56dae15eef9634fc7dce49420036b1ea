cefe4a949f2ca2521be6fcd4b87a76d8
/**
 * @file localStorage hooks with React state management
 * @module hooks/useLocalStorage
 *
 * @description
 * Provides cross-platform localStorage functionality with async support.
 * Uses the PlatformService abstraction to work across web, mobile, and desktop.
 *
 * Three APIs are provided:
 * - useLocalStorage: Backward-compatible API that hides async complexity
 * - useLocalStorageWithState: Full-featured API with loading/error states
 * - useLocalStorageSync: Deprecated sync wrapper
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useLocalStorage () {
        return useLocalStorage;
    },
    get useLocalStorageWithState () {
        return useLocalStorageWithState;
    }
});
const _react = require("react");
const _platform = require("../services/platform");
const _logging = require("../services/logging");
const logger = (0, _logging.getLogger)().setContext("useLocalStorage");
/**
 * INTERNAL: Full-featured async hook with loading state and error handling
 * Private implementation used by both legacy and new APIs
 *
 * @private
 * @template T - Type of the stored value
 * @param {string} key - Storage key
 * @param {T | (() => T)} initialValue - Initial value or factory function
 * @returns {[T | undefined, Function, boolean, Error | null]} Tuple of [value, setter, isLoading, error]
 */ function useLocalStorageInternal(key, initialValue) {
    const resolvedInitialValue = (0, _react.useMemo)(()=>{
        return typeof initialValue === "function" ? initialValue() : initialValue;
    }, [
        initialValue
    ]);
    const [storedValue, setStoredValue] = (0, _react.useState)(undefined);
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    const [saveError, setSaveError] = (0, _react.useState)(null);
    // Effect for initial loading from storage
    (0, _react.useEffect)(()=>{
        let isMounted = true;
        setIsLoading(true);
        (0, _platform.getPlatformService)().storage.load(key).then((item)=>{
            if (isMounted) {
                setStoredValue(item !== null ? item : resolvedInitialValue);
            }
        }).catch((loadError)=>{
            logger.warn(`Error loading storage key "${key}": ${loadError}`);
            if (isMounted) {
                setStoredValue(resolvedInitialValue);
            }
        }).finally(()=>{
            if (isMounted) {
                setIsLoading(false);
            }
        });
        return ()=>{
            isMounted = false;
        };
    }, [
        key,
        resolvedInitialValue
    ]);
    // Ref to prevent saving the value that was just loaded from storage
    const isInitialMountAfterLoad = (0, _react.useRef)(true);
    // Effect for saving to storage on value change
    (0, _react.useEffect)(()=>{
        if (isLoading) {
            isInitialMountAfterLoad.current = true; // Reset on re-load
            return;
        }
        if (isInitialMountAfterLoad.current) {
            // This is the first render after loading. Don't save the initial value.
            isInitialMountAfterLoad.current = false;
            return;
        }
        let isMounted = true;
        (0, _platform.getPlatformService)().storage.save(key, storedValue).then(()=>{
            // On success, clear any previous error
            if (isMounted && saveError !== null) {
                setSaveError(null);
            }
        }).catch((err)=>{
            logger.error(`Failed to save storage key "${key}": ${err}`);
            if (isMounted) {
                setSaveError(err instanceof Error ? err : new Error(String(err)));
            }
        });
        return ()=>{
            isMounted = false;
        };
    }, [
        key,
        storedValue,
        isLoading,
        saveError
    ]);
    const setValue = (0, _react.useCallback)((value)=>{
        // Clear any previous save error on a new update attempt
        if (saveError) {
            setSaveError(null);
        }
        setStoredValue(value);
    }, [
        saveError
    ]);
    return [
        storedValue,
        setValue,
        isLoading,
        saveError
    ];
}
function useLocalStorage(key, initialValue) {
    const [asyncValue, setAsyncValue, isLoading, saveError] = useLocalStorageInternal(key, initialValue);
    const resolvedInitialValue = (0, _react.useMemo)(()=>{
        return typeof initialValue === "function" ? initialValue() : initialValue;
    }, [
        initialValue
    ]);
    // Return initial value while loading, then switch to loaded value (backward compatible)
    const currentValue = isLoading ? resolvedInitialValue : asyncValue !== null && asyncValue !== void 0 ? asyncValue : resolvedInitialValue;
    // Wrapper for the setter to maintain backward compatible interface
    const compatSetValue = (0, _react.useCallback)((value)=>{
        const valueToStore = value instanceof Function ? value(currentValue) : value;
        setAsyncValue(valueToStore);
        // Log save errors (backward compatible - original didn't expose errors)
        if (saveError) {
            logger.warn(`Storage save error (backward compatibility mode): ${saveError.message}`);
        }
    }, [
        currentValue,
        setAsyncValue,
        saveError
    ]);
    return [
        currentValue,
        compatSetValue
    ];
}
function useLocalStorageWithState(key, initialValue) {
    return useLocalStorageInternal(key, initialValue);
}

//# sourceMappingURL=data:application/json;base64,