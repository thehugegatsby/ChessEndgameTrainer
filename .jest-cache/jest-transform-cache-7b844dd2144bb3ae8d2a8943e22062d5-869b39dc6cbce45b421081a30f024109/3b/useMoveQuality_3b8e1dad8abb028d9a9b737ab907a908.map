{"version":3,"names":["cov_29vnuelbhp","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","useMoveQuality","logger","_Logger","Logger","state","setState","_react","useState","data","isLoading","error","abortControllerRef","useRef","useEffect","_abortControllerRef_current","current","abort","assessMove","useCallback","fenBefore","move","playerPerspective","controller","AbortController","info","slice","chess","_chess","Chess","moveResult","result","quality","reason","isTablebaseAnalysis","fenAfter","fen","evalBefore","evalAfter","Promise","all","_TablebaseService","tablebaseService","getEvaluation","isAvailable","wdlBefore","wdl","wdlAfter","categoryBefore","category","categoryAfter","_moveQuality","assessTablebaseMoveQuality","wdlChange","calculatedQuality","formula","signal","aborted","warn","Error","errorObj","clearAnalysis"],"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/hooks/useMoveQuality.ts"],"sourcesContent":["/**\n * @file Hook for on-demand move quality assessment\n * @module hooks/useMoveQuality\n *\n * @description\n * Provides controlled move quality analysis with loading/error states.\n * Following clean architecture principles with trigger-based evaluation.\n * Uses tablebase data to determine if moves are optimal, good, or mistakes.\n *\n * @remarks\n * Features:\n * - Race condition protection with AbortController\n * - Robust error handling with state management\n * - Automatic cleanup on unmount\n * - Tablebase-based analysis for endgame positions\n * - Supports both SAN and UCI move notation\n */\n\nimport { useState, useCallback, useRef, useEffect } from \"react\";\nimport { tablebaseService } from \"@shared/services/TablebaseService\";\nimport { assessTablebaseMoveQuality } from \"@shared/utils/moveQuality\";\nimport { Chess } from \"chess.js\";\nimport type { SimplifiedMoveQualityResult } from \"../types/evaluation\";\nimport { Logger } from \"../services/logging/Logger\";\n\nconst logger = new Logger();\n\n/**\n * State interface for move quality analysis\n *\n * @interface UseMoveQualityState\n * @property {SimplifiedMoveQualityResult | null} data - Current move quality result\n * @property {boolean} isLoading - Whether analysis is in progress\n * @property {Error | null} error - Error from analysis if any\n */\ninterface UseMoveQualityState {\n  /** Current move quality result */\n  data: SimplifiedMoveQualityResult | null;\n  /** Whether analysis is in progress */\n  isLoading: boolean;\n  /** Error from analysis */\n  error: Error | null;\n}\n\n/**\n * Hook for on-demand move quality assessment\n *\n * @description\n * Returns state and trigger function for controlled analysis.\n * No automatic evaluation - only when assessMove is called.\n * Uses tablebase API to compare positions before and after moves.\n *\n * @returns {Object} Hook return object\n * @returns {SimplifiedMoveQualityResult | null} returns.data - Current move quality result\n * @returns {boolean} returns.isLoading - Whether analysis is in progress\n * @returns {Error | null} returns.error - Error from analysis if any\n * @returns {Function} returns.assessMove - Trigger function for move quality assessment\n * @returns {Function} returns.clearAnalysis - Clear current analysis data\n *\n * @example\n * ```tsx\n * const { data, isLoading, error, assessMove } = useMoveQuality();\n *\n * // Assess a move when user plays\n * const handleMove = async (move: string) => {\n *   try {\n *     const result = await assessMove(currentFen, move, 'w');\n *     if (result.quality === 'mistake') {\n *       showWarning(result.reason);\n *     }\n *   } catch (err) {\n *     console.error('Move assessment failed:', err);\n *   }\n * };\n * ```\n */\nexport const useMoveQuality = () => {\n  const [state, setState] = useState<UseMoveQualityState>({\n    data: null,\n    isLoading: false,\n    error: null,\n  });\n\n  // Ref to manage abort controller and prevent race conditions\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      abortControllerRef.current?.abort();\n    };\n  }, []);\n\n  /**\n   * Assess move quality on-demand\n   *\n   * @param fenBefore - FEN position before the move\n   * @param move - Move in SAN or UCI notation\n   * @param playerPerspective - Player who made the move\n   * @returns Promise resolving to move quality result\n   * @throws Error if assessment fails\n   */\n  const assessMove = useCallback(\n    async (\n      fenBefore: string,\n      move: string,\n      playerPerspective: \"w\" | \"b\",\n    ): Promise<SimplifiedMoveQualityResult> => {\n      // Abort previous request if running\n      abortControllerRef.current?.abort();\n\n      // Create new abort controller for this request\n      const controller = new AbortController();\n      abortControllerRef.current = controller;\n\n      // Set loading state\n      setState({ data: null, isLoading: true, error: null });\n\n      try {\n        logger.info(\"[useMoveQuality] Starting move quality assessment\", {\n          fenBefore: fenBefore.slice(0, 30) + \"...\",\n          move,\n          playerPerspective,\n        });\n\n        // Calculate FEN after the move\n        const chess = new Chess(fenBefore);\n        const moveResult = chess.move(move);\n        if (!moveResult) {\n          const result: SimplifiedMoveQualityResult = {\n            quality: \"unknown\",\n            reason: \"Invalid move\",\n            isTablebaseAnalysis: false,\n          };\n          setState({ data: result, isLoading: false, error: null });\n          return result;\n        }\n        const fenAfter = chess.fen();\n\n        // Get tablebase evaluations for both positions\n        const [evalBefore, evalAfter] = await Promise.all([\n          tablebaseService.getEvaluation(fenBefore),\n          tablebaseService.getEvaluation(fenAfter),\n        ]);\n\n        // Check if both positions have tablebase data\n        if (\n          !evalBefore.isAvailable ||\n          !evalAfter.isAvailable ||\n          !evalBefore.result ||\n          !evalAfter.result\n        ) {\n          const result: SimplifiedMoveQualityResult = {\n            quality: \"unknown\",\n            reason: \"No tablebase data available\",\n            isTablebaseAnalysis: false,\n          };\n          setState({ data: result, isLoading: false, error: null });\n          return result;\n        }\n\n        // Detailed logging before assessment\n        logger.info(\"[useMoveQuality] WDL values before assessment\", {\n          move,\n          fenBefore,\n          fenAfter,\n          wdlBefore: evalBefore.result.wdl,\n          wdlAfter: evalAfter.result.wdl,\n          categoryBefore: evalBefore.result.category,\n          categoryAfter: evalAfter.result.category,\n        });\n\n        // Assess move quality using helper function\n        const result = assessTablebaseMoveQuality(\n          evalBefore.result.wdl,\n          evalAfter.result.wdl,\n        );\n\n        // Log the calculation details\n        const wdlChange = -evalAfter.result.wdl - evalBefore.result.wdl;\n        logger.info(\"[useMoveQuality] Quality calculation details\", {\n          wdlBefore: evalBefore.result.wdl,\n          wdlAfter: evalAfter.result.wdl,\n          wdlChange,\n          calculatedQuality: result.quality,\n          formula: `wdlChange = -${evalAfter.result.wdl} - ${evalBefore.result.wdl} = ${wdlChange}`,\n        });\n\n        // Only update state if request wasn't aborted\n        if (!controller.signal.aborted) {\n          setState({ data: result, isLoading: false, error: null });\n          abortControllerRef.current = null; // Request completed\n\n          logger.info(\"[useMoveQuality] Move quality assessment completed\", {\n            quality: result.quality,\n            reason: result.reason,\n            isTablebaseAnalysis: result.isTablebaseAnalysis,\n          });\n        }\n\n        return result;\n      } catch (error) {\n        if (controller.signal.aborted) {\n          logger.warn(\"[useMoveQuality] Assessment aborted by new request\");\n          throw new Error(\"Assessment aborted by new request\");\n        }\n\n        const errorObj =\n          error instanceof Error ? error : new Error(\"Unknown error occurred\");\n\n        logger.error(\n          \"[useMoveQuality] Move quality assessment failed\",\n          errorObj,\n        );\n\n        // Only update state if this was the active request\n        if (abortControllerRef.current === controller) {\n          setState({ data: null, isLoading: false, error: errorObj });\n        }\n\n        throw errorObj;\n      }\n    },\n    [],\n  );\n\n  /**\n   * Clear current analysis data\n   */\n  const clearAnalysis = useCallback(() => {\n    setState({ data: null, isLoading: false, error: null });\n  }, []);\n\n  return {\n    /** Current move quality result */\n    data: state.data,\n    /** Whether analysis is in progress */\n    isLoading: state.isLoading,\n    /** Error from analysis */\n    error: state.error,\n    /** Trigger function for move quality assessment */\n    assessMove,\n    /** Clear current analysis data */\n    clearAnalysis,\n  };\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;GAgBC;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;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","ignoreList":[]}