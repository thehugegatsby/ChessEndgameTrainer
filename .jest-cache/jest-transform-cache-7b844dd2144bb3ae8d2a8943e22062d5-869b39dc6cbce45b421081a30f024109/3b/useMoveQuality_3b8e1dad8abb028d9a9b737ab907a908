cd6fd3a488c7b026725f3e7a52e510b3
/**
 * @file Hook for on-demand move quality assessment
 * @module hooks/useMoveQuality
 *
 * @description
 * Provides controlled move quality analysis with loading/error states.
 * Following clean architecture principles with trigger-based evaluation.
 * Uses tablebase data to determine if moves are optimal, good, or mistakes.
 *
 * @remarks
 * Features:
 * - Race condition protection with AbortController
 * - Robust error handling with state management
 * - Automatic cleanup on unmount
 * - Tablebase-based analysis for endgame positions
 * - Supports both SAN and UCI move notation
 */"use strict";

/* istanbul ignore next */
function cov_29vnuelbhp() {
  var path = "/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/hooks/useMoveQuality.ts";
  var hash = "7f6bbfa7317a4a6aee504bd566da6a6e938198c8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/hooks/useMoveQuality.ts",
    statementMap: {
      "0": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 20,
          column: 3
        }
      },
      "1": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 26,
          column: 3
        }
      },
      "2": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 30
        }
      },
      "3": {
        start: {
          line: 27,
          column: 15
        },
        end: {
          line: 27,
          column: 31
        }
      },
      "4": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 28,
          column: 65
        }
      },
      "5": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 52
        }
      },
      "6": {
        start: {
          line: 30,
          column: 15
        },
        end: {
          line: 30,
          column: 34
        }
      },
      "7": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 53
        }
      },
      "8": {
        start: {
          line: 32,
          column: 15
        },
        end: {
          line: 32,
          column: 35
        }
      },
      "9": {
        start: {
          line: 33,
          column: 23
        },
        end: {
          line: 181,
          column: 1
        }
      },
      "10": {
        start: {
          line: 34,
          column: 30
        },
        end: {
          line: 38,
          column: 6
        }
      },
      "11": {
        start: {
          line: 40,
          column: 31
        },
        end: {
          line: 40,
          column: 55
        }
      },
      "12": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 47,
          column: 11
        }
      },
      "13": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 46,
          column: 10
        }
      },
      "14": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 169
        }
      },
      "15": {
        start: {
          line: 56,
          column: 25
        },
        end: {
          line: 164,
          column: 10
        }
      },
      "16": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 165
        }
      },
      "17": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 61,
          column: 48
        }
      },
      "18": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 48
        }
      },
      "19": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "20": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "21": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 74,
          column: 15
        }
      },
      "22": {
        start: {
          line: 76,
          column: 26
        },
        end: {
          line: 76,
          column: 53
        }
      },
      "23": {
        start: {
          line: 77,
          column: 31
        },
        end: {
          line: 77,
          column: 47
        }
      },
      "24": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "25": {
        start: {
          line: 79,
          column: 31
        },
        end: {
          line: 83,
          column: 17
        }
      },
      "26": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 88,
          column: 19
        }
      },
      "27": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 30
        }
      },
      "28": {
        start: {
          line: 91,
          column: 29
        },
        end: {
          line: 91,
          column: 40
        }
      },
      "29": {
        start: {
          line: 93,
          column: 44
        },
        end: {
          line: 96,
          column: 14
        }
      },
      "30": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "31": {
        start: {
          line: 99,
          column: 31
        },
        end: {
          line: 103,
          column: 17
        }
      },
      "32": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 108,
          column: 19
        }
      },
      "33": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 30
        }
      },
      "34": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 120,
          column: 15
        }
      },
      "35": {
        start: {
          line: 122,
          column: 27
        },
        end: {
          line: 122,
          column: 116
        }
      },
      "36": {
        start: {
          line: 124,
          column: 30
        },
        end: {
          line: 124,
          column: 75
        }
      },
      "37": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 131,
          column: 15
        }
      },
      "38": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "39": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 138,
          column: 19
        }
      },
      "40": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 50
        }
      },
      "41": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 144,
          column: 19
        }
      },
      "42": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 26
        }
      },
      "43": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "44": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 82
        }
      },
      "45": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 69
        }
      },
      "46": {
        start: {
          line: 152,
          column: 29
        },
        end: {
          line: 152,
          column: 97
        }
      },
      "47": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 86
        }
      },
      "48": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 161,
          column: 13
        }
      },
      "49": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 160,
          column: 19
        }
      },
      "50": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 27
        }
      },
      "51": {
        start: {
          line: 167,
          column: 28
        },
        end: {
          line: 173,
          column: 10
        }
      },
      "52": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 172,
          column: 11
        }
      },
      "53": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 180,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 23,
            column: 10
          }
        },
        loc: {
          start: {
            line: 23,
            column: 20
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 23
          },
          end: {
            line: 33,
            column: 24
          }
        },
        loc: {
          start: {
            line: 33,
            column: 27
          },
          end: {
            line: 181,
            column: 1
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 42,
            column: 26
          },
          end: {
            line: 42,
            column: 27
          }
        },
        loc: {
          start: {
            line: 42,
            column: 30
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 42
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 43,
            column: 15
          },
          end: {
            line: 43,
            column: 16
          }
        },
        loc: {
          start: {
            line: 43,
            column: 19
          },
          end: {
            line: 46,
            column: 9
          }
        },
        line: 43
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 56,
            column: 49
          },
          end: {
            line: 56,
            column: 50
          }
        },
        loc: {
          start: {
            line: 56,
            column: 93
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 56
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 167,
            column: 52
          },
          end: {
            line: 167,
            column: 53
          }
        },
        loc: {
          start: {
            line: 167,
            column: 56
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 167
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 168
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 45,
            column: 124
          },
          end: {
            line: 45,
            column: 130
          }
        }, {
          start: {
            line: 45,
            column: 133
          },
          end: {
            line: 45,
            column: 168
          }
        }],
        line: 45
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 79
          }
        }, {
          start: {
            line: 45,
            column: 83
          },
          end: {
            line: 45,
            column: 121
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 164
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 59,
            column: 120
          },
          end: {
            line: 59,
            column: 126
          }
        }, {
          start: {
            line: 59,
            column: 129
          },
          end: {
            line: 59,
            column: 164
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 75
          }
        }, {
          start: {
            line: 59,
            column: 79
          },
          end: {
            line: 59,
            column: 117
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 98,
            column: 16
          },
          end: {
            line: 98,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 16
          },
          end: {
            line: 98,
            column: 39
          }
        }, {
          start: {
            line: 98,
            column: 43
          },
          end: {
            line: 98,
            column: 65
          }
        }, {
          start: {
            line: 98,
            column: 69
          },
          end: {
            line: 98,
            column: 87
          }
        }, {
          start: {
            line: 98,
            column: 91
          },
          end: {
            line: 98,
            column: 108
          }
        }],
        line: 98
      },
      "7": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "8": {
        loc: {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "9": {
        loc: {
          start: {
            line: 152,
            column: 29
          },
          end: {
            line: 152,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 54
          },
          end: {
            line: 152,
            column: 59
          }
        }, {
          start: {
            line: 152,
            column: 62
          },
          end: {
            line: 152,
            column: 97
          }
        }],
        line: 152
      },
      "10": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/hooks/useMoveQuality.ts"],
      sourcesContent: ["/**\n * @file Hook for on-demand move quality assessment\n * @module hooks/useMoveQuality\n *\n * @description\n * Provides controlled move quality analysis with loading/error states.\n * Following clean architecture principles with trigger-based evaluation.\n * Uses tablebase data to determine if moves are optimal, good, or mistakes.\n *\n * @remarks\n * Features:\n * - Race condition protection with AbortController\n * - Robust error handling with state management\n * - Automatic cleanup on unmount\n * - Tablebase-based analysis for endgame positions\n * - Supports both SAN and UCI move notation\n */\n\nimport { useState, useCallback, useRef, useEffect } from \"react\";\nimport { tablebaseService } from \"@shared/services/TablebaseService\";\nimport { assessTablebaseMoveQuality } from \"@shared/utils/moveQuality\";\nimport { Chess } from \"chess.js\";\nimport type { SimplifiedMoveQualityResult } from \"../types/evaluation\";\nimport { Logger } from \"../services/logging/Logger\";\n\nconst logger = new Logger();\n\n/**\n * State interface for move quality analysis\n *\n * @interface UseMoveQualityState\n * @property {SimplifiedMoveQualityResult | null} data - Current move quality result\n * @property {boolean} isLoading - Whether analysis is in progress\n * @property {Error | null} error - Error from analysis if any\n */\ninterface UseMoveQualityState {\n  /** Current move quality result */\n  data: SimplifiedMoveQualityResult | null;\n  /** Whether analysis is in progress */\n  isLoading: boolean;\n  /** Error from analysis */\n  error: Error | null;\n}\n\n/**\n * Hook for on-demand move quality assessment\n *\n * @description\n * Returns state and trigger function for controlled analysis.\n * No automatic evaluation - only when assessMove is called.\n * Uses tablebase API to compare positions before and after moves.\n *\n * @returns {Object} Hook return object\n * @returns {SimplifiedMoveQualityResult | null} returns.data - Current move quality result\n * @returns {boolean} returns.isLoading - Whether analysis is in progress\n * @returns {Error | null} returns.error - Error from analysis if any\n * @returns {Function} returns.assessMove - Trigger function for move quality assessment\n * @returns {Function} returns.clearAnalysis - Clear current analysis data\n *\n * @example\n * ```tsx\n * const { data, isLoading, error, assessMove } = useMoveQuality();\n *\n * // Assess a move when user plays\n * const handleMove = async (move: string) => {\n *   try {\n *     const result = await assessMove(currentFen, move, 'w');\n *     if (result.quality === 'mistake') {\n *       showWarning(result.reason);\n *     }\n *   } catch (err) {\n *     console.error('Move assessment failed:', err);\n *   }\n * };\n * ```\n */\nexport const useMoveQuality = () => {\n  const [state, setState] = useState<UseMoveQualityState>({\n    data: null,\n    isLoading: false,\n    error: null,\n  });\n\n  // Ref to manage abort controller and prevent race conditions\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      abortControllerRef.current?.abort();\n    };\n  }, []);\n\n  /**\n   * Assess move quality on-demand\n   *\n   * @param fenBefore - FEN position before the move\n   * @param move - Move in SAN or UCI notation\n   * @param playerPerspective - Player who made the move\n   * @returns Promise resolving to move quality result\n   * @throws Error if assessment fails\n   */\n  const assessMove = useCallback(\n    async (\n      fenBefore: string,\n      move: string,\n      playerPerspective: \"w\" | \"b\",\n    ): Promise<SimplifiedMoveQualityResult> => {\n      // Abort previous request if running\n      abortControllerRef.current?.abort();\n\n      // Create new abort controller for this request\n      const controller = new AbortController();\n      abortControllerRef.current = controller;\n\n      // Set loading state\n      setState({ data: null, isLoading: true, error: null });\n\n      try {\n        logger.info(\"[useMoveQuality] Starting move quality assessment\", {\n          fenBefore: fenBefore.slice(0, 30) + \"...\",\n          move,\n          playerPerspective,\n        });\n\n        // Calculate FEN after the move\n        const chess = new Chess(fenBefore);\n        const moveResult = chess.move(move);\n        if (!moveResult) {\n          const result: SimplifiedMoveQualityResult = {\n            quality: \"unknown\",\n            reason: \"Invalid move\",\n            isTablebaseAnalysis: false,\n          };\n          setState({ data: result, isLoading: false, error: null });\n          return result;\n        }\n        const fenAfter = chess.fen();\n\n        // Get tablebase evaluations for both positions\n        const [evalBefore, evalAfter] = await Promise.all([\n          tablebaseService.getEvaluation(fenBefore),\n          tablebaseService.getEvaluation(fenAfter),\n        ]);\n\n        // Check if both positions have tablebase data\n        if (\n          !evalBefore.isAvailable ||\n          !evalAfter.isAvailable ||\n          !evalBefore.result ||\n          !evalAfter.result\n        ) {\n          const result: SimplifiedMoveQualityResult = {\n            quality: \"unknown\",\n            reason: \"No tablebase data available\",\n            isTablebaseAnalysis: false,\n          };\n          setState({ data: result, isLoading: false, error: null });\n          return result;\n        }\n\n        // Detailed logging before assessment\n        logger.info(\"[useMoveQuality] WDL values before assessment\", {\n          move,\n          fenBefore,\n          fenAfter,\n          wdlBefore: evalBefore.result.wdl,\n          wdlAfter: evalAfter.result.wdl,\n          categoryBefore: evalBefore.result.category,\n          categoryAfter: evalAfter.result.category,\n        });\n\n        // Assess move quality using helper function\n        const result = assessTablebaseMoveQuality(\n          evalBefore.result.wdl,\n          evalAfter.result.wdl,\n        );\n\n        // Log the calculation details\n        const wdlChange = -evalAfter.result.wdl - evalBefore.result.wdl;\n        logger.info(\"[useMoveQuality] Quality calculation details\", {\n          wdlBefore: evalBefore.result.wdl,\n          wdlAfter: evalAfter.result.wdl,\n          wdlChange,\n          calculatedQuality: result.quality,\n          formula: `wdlChange = -${evalAfter.result.wdl} - ${evalBefore.result.wdl} = ${wdlChange}`,\n        });\n\n        // Only update state if request wasn't aborted\n        if (!controller.signal.aborted) {\n          setState({ data: result, isLoading: false, error: null });\n          abortControllerRef.current = null; // Request completed\n\n          logger.info(\"[useMoveQuality] Move quality assessment completed\", {\n            quality: result.quality,\n            reason: result.reason,\n            isTablebaseAnalysis: result.isTablebaseAnalysis,\n          });\n        }\n\n        return result;\n      } catch (error) {\n        if (controller.signal.aborted) {\n          logger.warn(\"[useMoveQuality] Assessment aborted by new request\");\n          throw new Error(\"Assessment aborted by new request\");\n        }\n\n        const errorObj =\n          error instanceof Error ? error : new Error(\"Unknown error occurred\");\n\n        logger.error(\n          \"[useMoveQuality] Move quality assessment failed\",\n          errorObj,\n        );\n\n        // Only update state if this was the active request\n        if (abortControllerRef.current === controller) {\n          setState({ data: null, isLoading: false, error: errorObj });\n        }\n\n        throw errorObj;\n      }\n    },\n    [],\n  );\n\n  /**\n   * Clear current analysis data\n   */\n  const clearAnalysis = useCallback(() => {\n    setState({ data: null, isLoading: false, error: null });\n  }, []);\n\n  return {\n    /** Current move quality result */\n    data: state.data,\n    /** Whether analysis is in progress */\n    isLoading: state.isLoading,\n    /** Error from analysis */\n    error: state.error,\n    /** Trigger function for move quality assessment */\n    assessMove,\n    /** Clear current analysis data */\n    clearAnalysis,\n  };\n};\n"],
      names: ["useMoveQuality", "logger", "Logger", "state", "setState", "useState", "data", "isLoading", "error", "abortControllerRef", "useRef", "useEffect", "current", "abort", "assessMove", "useCallback", "fenBefore", "move", "playerPerspective", "controller", "AbortController", "info", "slice", "chess", "Chess", "moveResult", "result", "quality", "reason", "isTablebaseAnalysis", "fenAfter", "fen", "evalBefore", "evalAfter", "Promise", "all", "tablebaseService", "getEvaluation", "isAvailable", "wdlBefore", "wdl", "wdlAfter", "categoryBefore", "category", "categoryAfter", "assessTablebaseMoveQuality", "wdlChange", "calculatedQuality", "formula", "signal", "aborted", "warn", "Error", "errorObj", "clearAnalysis"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7f6bbfa7317a4a6aee504bd566da6a6e938198c8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29vnuelbhp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29vnuelbhp();
cov_29vnuelbhp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_29vnuelbhp().s[1]++;
Object.defineProperty(exports, "useMoveQuality", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_29vnuelbhp().f[0]++;
    cov_29vnuelbhp().s[2]++;
    return useMoveQuality;
  }
});
const _react =
/* istanbul ignore next */
(cov_29vnuelbhp().s[3]++, require("react"));
const _TablebaseService =
/* istanbul ignore next */
(cov_29vnuelbhp().s[4]++, require("../services/TablebaseService"));
const _moveQuality =
/* istanbul ignore next */
(cov_29vnuelbhp().s[5]++, require("../utils/moveQuality"));
const _chess =
/* istanbul ignore next */
(cov_29vnuelbhp().s[6]++, require("chess.js"));
const _Logger =
/* istanbul ignore next */
(cov_29vnuelbhp().s[7]++, require("../services/logging/Logger"));
const logger =
/* istanbul ignore next */
(cov_29vnuelbhp().s[8]++, new _Logger.Logger());
/* istanbul ignore next */
cov_29vnuelbhp().s[9]++;
const useMoveQuality = () => {
  /* istanbul ignore next */
  cov_29vnuelbhp().f[1]++;
  const [state, setState] =
  /* istanbul ignore next */
  (cov_29vnuelbhp().s[10]++, (0, _react.useState)({
    data: null,
    isLoading: false,
    error: null
  }));
  // Ref to manage abort controller and prevent race conditions
  const abortControllerRef =
  /* istanbul ignore next */
  (cov_29vnuelbhp().s[11]++, (0, _react.useRef)(null));
  // Clean up on unmount
  /* istanbul ignore next */
  cov_29vnuelbhp().s[12]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_29vnuelbhp().f[2]++;
    cov_29vnuelbhp().s[13]++;
    return () => {
      /* istanbul ignore next */
      cov_29vnuelbhp().f[3]++;
      var _abortControllerRef_current;
      /* istanbul ignore next */
      cov_29vnuelbhp().s[14]++;
      /* istanbul ignore next */
      (cov_29vnuelbhp().b[1][0]++, (_abortControllerRef_current = abortControllerRef.current) === null) ||
      /* istanbul ignore next */
      (cov_29vnuelbhp().b[1][1]++, _abortControllerRef_current === void 0) ?
      /* istanbul ignore next */
      (cov_29vnuelbhp().b[0][0]++, void 0) :
      /* istanbul ignore next */
      (cov_29vnuelbhp().b[0][1]++, _abortControllerRef_current.abort());
    };
  }, []);
  /**
  * Assess move quality on-demand
  *
  * @param fenBefore - FEN position before the move
  * @param move - Move in SAN or UCI notation
  * @param playerPerspective - Player who made the move
  * @returns Promise resolving to move quality result
  * @throws Error if assessment fails
  */
  const assessMove =
  /* istanbul ignore next */
  (cov_29vnuelbhp().s[15]++, (0, _react.useCallback)(async (fenBefore, move, playerPerspective) => {
    /* istanbul ignore next */
    cov_29vnuelbhp().f[4]++;
    var
    // Abort previous request if running
    _abortControllerRef_current;
    /* istanbul ignore next */
    cov_29vnuelbhp().s[16]++;
    /* istanbul ignore next */
    (cov_29vnuelbhp().b[3][0]++, (_abortControllerRef_current = abortControllerRef.current) === null) ||
    /* istanbul ignore next */
    (cov_29vnuelbhp().b[3][1]++, _abortControllerRef_current === void 0) ?
    /* istanbul ignore next */
    (cov_29vnuelbhp().b[2][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29vnuelbhp().b[2][1]++, _abortControllerRef_current.abort());
    // Create new abort controller for this request
    const controller =
    /* istanbul ignore next */
    (cov_29vnuelbhp().s[17]++, new AbortController());
    /* istanbul ignore next */
    cov_29vnuelbhp().s[18]++;
    abortControllerRef.current = controller;
    // Set loading state
    /* istanbul ignore next */
    cov_29vnuelbhp().s[19]++;
    setState({
      data: null,
      isLoading: true,
      error: null
    });
    /* istanbul ignore next */
    cov_29vnuelbhp().s[20]++;
    try {
      /* istanbul ignore next */
      cov_29vnuelbhp().s[21]++;
      logger.info("[useMoveQuality] Starting move quality assessment", {
        fenBefore: fenBefore.slice(0, 30) + "...",
        move,
        playerPerspective
      });
      // Calculate FEN after the move
      const chess =
      /* istanbul ignore next */
      (cov_29vnuelbhp().s[22]++, new _chess.Chess(fenBefore));
      const moveResult =
      /* istanbul ignore next */
      (cov_29vnuelbhp().s[23]++, chess.move(move));
      /* istanbul ignore next */
      cov_29vnuelbhp().s[24]++;
      if (!moveResult) {
        /* istanbul ignore next */
        cov_29vnuelbhp().b[4][0]++;
        const result =
        /* istanbul ignore next */
        (cov_29vnuelbhp().s[25]++, {
          quality: "unknown",
          reason: "Invalid move",
          isTablebaseAnalysis: false
        });
        /* istanbul ignore next */
        cov_29vnuelbhp().s[26]++;
        setState({
          data: result,
          isLoading: false,
          error: null
        });
        /* istanbul ignore next */
        cov_29vnuelbhp().s[27]++;
        return result;
      } else
      /* istanbul ignore next */
      {
        cov_29vnuelbhp().b[4][1]++;
      }
      const fenAfter =
      /* istanbul ignore next */
      (cov_29vnuelbhp().s[28]++, chess.fen());
      // Get tablebase evaluations for both positions
      const [evalBefore, evalAfter] =
      /* istanbul ignore next */
      (cov_29vnuelbhp().s[29]++, await Promise.all([_TablebaseService.tablebaseService.getEvaluation(fenBefore), _TablebaseService.tablebaseService.getEvaluation(fenAfter)]));
      // Check if both positions have tablebase data
      /* istanbul ignore next */
      cov_29vnuelbhp().s[30]++;
      if (
      /* istanbul ignore next */
      (cov_29vnuelbhp().b[6][0]++, !evalBefore.isAvailable) ||
      /* istanbul ignore next */
      (cov_29vnuelbhp().b[6][1]++, !evalAfter.isAvailable) ||
      /* istanbul ignore next */
      (cov_29vnuelbhp().b[6][2]++, !evalBefore.result) ||
      /* istanbul ignore next */
      (cov_29vnuelbhp().b[6][3]++, !evalAfter.result)) {
        /* istanbul ignore next */
        cov_29vnuelbhp().b[5][0]++;
        const result =
        /* istanbul ignore next */
        (cov_29vnuelbhp().s[31]++, {
          quality: "unknown",
          reason: "No tablebase data available",
          isTablebaseAnalysis: false
        });
        /* istanbul ignore next */
        cov_29vnuelbhp().s[32]++;
        setState({
          data: result,
          isLoading: false,
          error: null
        });
        /* istanbul ignore next */
        cov_29vnuelbhp().s[33]++;
        return result;
      } else
      /* istanbul ignore next */
      {
        cov_29vnuelbhp().b[5][1]++;
      }
      // Detailed logging before assessment
      cov_29vnuelbhp().s[34]++;
      logger.info("[useMoveQuality] WDL values before assessment", {
        move,
        fenBefore,
        fenAfter,
        wdlBefore: evalBefore.result.wdl,
        wdlAfter: evalAfter.result.wdl,
        categoryBefore: evalBefore.result.category,
        categoryAfter: evalAfter.result.category
      });
      // Assess move quality using helper function
      const result =
      /* istanbul ignore next */
      (cov_29vnuelbhp().s[35]++, (0, _moveQuality.assessTablebaseMoveQuality)(evalBefore.result.wdl, evalAfter.result.wdl));
      // Log the calculation details
      const wdlChange =
      /* istanbul ignore next */
      (cov_29vnuelbhp().s[36]++, -evalAfter.result.wdl - evalBefore.result.wdl);
      /* istanbul ignore next */
      cov_29vnuelbhp().s[37]++;
      logger.info("[useMoveQuality] Quality calculation details", {
        wdlBefore: evalBefore.result.wdl,
        wdlAfter: evalAfter.result.wdl,
        wdlChange,
        calculatedQuality: result.quality,
        formula: `wdlChange = -${evalAfter.result.wdl} - ${evalBefore.result.wdl} = ${wdlChange}`
      });
      // Only update state if request wasn't aborted
      /* istanbul ignore next */
      cov_29vnuelbhp().s[38]++;
      if (!controller.signal.aborted) {
        /* istanbul ignore next */
        cov_29vnuelbhp().b[7][0]++;
        cov_29vnuelbhp().s[39]++;
        setState({
          data: result,
          isLoading: false,
          error: null
        });
        /* istanbul ignore next */
        cov_29vnuelbhp().s[40]++;
        abortControllerRef.current = null; // Request completed
        /* istanbul ignore next */
        cov_29vnuelbhp().s[41]++;
        logger.info("[useMoveQuality] Move quality assessment completed", {
          quality: result.quality,
          reason: result.reason,
          isTablebaseAnalysis: result.isTablebaseAnalysis
        });
      } else
      /* istanbul ignore next */
      {
        cov_29vnuelbhp().b[7][1]++;
      }
      cov_29vnuelbhp().s[42]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_29vnuelbhp().s[43]++;
      if (controller.signal.aborted) {
        /* istanbul ignore next */
        cov_29vnuelbhp().b[8][0]++;
        cov_29vnuelbhp().s[44]++;
        logger.warn("[useMoveQuality] Assessment aborted by new request");
        /* istanbul ignore next */
        cov_29vnuelbhp().s[45]++;
        throw new Error("Assessment aborted by new request");
      } else
      /* istanbul ignore next */
      {
        cov_29vnuelbhp().b[8][1]++;
      }
      const errorObj =
      /* istanbul ignore next */
      (cov_29vnuelbhp().s[46]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_29vnuelbhp().b[9][0]++, error) :
      /* istanbul ignore next */
      (cov_29vnuelbhp().b[9][1]++, new Error("Unknown error occurred")));
      /* istanbul ignore next */
      cov_29vnuelbhp().s[47]++;
      logger.error("[useMoveQuality] Move quality assessment failed", errorObj);
      // Only update state if this was the active request
      /* istanbul ignore next */
      cov_29vnuelbhp().s[48]++;
      if (abortControllerRef.current === controller) {
        /* istanbul ignore next */
        cov_29vnuelbhp().b[10][0]++;
        cov_29vnuelbhp().s[49]++;
        setState({
          data: null,
          isLoading: false,
          error: errorObj
        });
      } else
      /* istanbul ignore next */
      {
        cov_29vnuelbhp().b[10][1]++;
      }
      cov_29vnuelbhp().s[50]++;
      throw errorObj;
    }
  }, []));
  /**
  * Clear current analysis data
  */
  const clearAnalysis =
  /* istanbul ignore next */
  (cov_29vnuelbhp().s[51]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_29vnuelbhp().f[5]++;
    cov_29vnuelbhp().s[52]++;
    setState({
      data: null,
      isLoading: false,
      error: null
    });
  }, []));
  /* istanbul ignore next */
  cov_29vnuelbhp().s[53]++;
  return {
    /** Current move quality result */data: state.data,
    /** Whether analysis is in progress */isLoading: state.isLoading,
    /** Error from analysis */error: state.error,
    /** Trigger function for move quality assessment */assessMove,
    /** Clear current analysis data */clearAnalysis
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,