bb62a859752cf4a35c94485f8b9bc935
/**
 * @file SpacedRepetitionService
 * @description Pure computation service for spaced repetition using SuperMemo-2 algorithm
 * 
 * This service provides stateless functions for managing spaced repetition scheduling.
 * It uses the supermemo npm package for algorithm implementation and provides
 * utility functions for chess training specific needs.
 * 
 * @example
 * ```typescript
 * // Update card after review
 * const updatedCard = updateCardProgress(card, mapBinaryToQuality(true));
 * 
 * // Get cards due for review
 * const dueCards = getDueCards(allCards);
 * 
 * // Create new card
 * const newCard = createNewCard('position-123');
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get batchUpdateCards () {
        return batchUpdateCards;
    },
    get calculateCardStatistics () {
        return calculateCardStatistics;
    },
    get createNewCard () {
        return createNewCard;
    },
    get getDueCards () {
        return getDueCards;
    },
    get getDueCardsFromMap () {
        return getDueCardsFromMap;
    },
    get getDueCardsWithBranding () {
        return getDueCardsWithBranding;
    },
    get isCardDifficult () {
        return isCardDifficult;
    },
    get mapBinaryToQuality () {
        return mapBinaryToQuality;
    },
    get mapMoveQualityToSM2 () {
        return mapMoveQualityToSM2;
    },
    get resetCardProgress () {
        return resetCardProgress;
    },
    get sortByReviewPriority () {
        return sortByReviewPriority;
    },
    get updateCardProgress () {
        return updateCardProgress;
    }
});
const _supermemo = require("supermemo");
const _Logger = require("./logging/Logger");
const _progress = require("../types/progress");
const logger = (0, _Logger.getLogger)().setContext('SpacedRepetitionService');
function mapBinaryToQuality(correct) {
    return correct ? 4 : 0;
}
function mapMoveQualityToSM2(quality) {
    switch(quality){
        case 'fail':
            return 0;
        case 'hard':
            return 3;
        case 'good':
            return 4;
        case 'easy':
            return 5;
        default:
            return 4; // Safe default
    }
}
function updateCardProgress(card, quality, now = Date.now()) {
    // Validate quality parameter
    if (quality < 0 || quality > 5) {
        logger.error('Invalid quality value', {
            quality,
            cardId: card.id
        });
        throw new Error(`Quality must be between 0 and 5, got ${quality}`);
    }
    logger.debug('Updating card progress', {
        cardId: card.id,
        quality,
        oldInterval: card.interval,
        oldEfactor: card.efactor
    });
    // Call SuperMemo algorithm - expects item object and grade
    const result = (0, _supermemo.supermemo)({
        interval: card.interval,
        repetition: card.repetition,
        efactor: card.efactor
    }, quality);
    // Handle potential NaN from supermemo library
    const interval = isNaN(result.interval) ? 1 : result.interval;
    const efactor = isNaN(result.efactor) ? 2.5 : result.efactor;
    const repetition = isNaN(result.repetition) ? 0 : result.repetition;
    // Calculate next review date (interval is in days)
    const nextReviewAt = now + interval * 86400000; // Convert days to milliseconds
    const updatedCard = {
        ...card,
        interval,
        repetition,
        efactor,
        lapses: quality === 0 ? card.lapses + 1 : card.lapses,
        lastReviewedAt: now,
        nextReviewAt
    };
    logger.debug('Card progress updated', {
        cardId: card.id,
        newInterval: interval,
        newEfactor: efactor,
        nextReviewDate: new Date(nextReviewAt).toISOString()
    });
    return updatedCard;
}
function getDueCards(cards, now = Date.now()) {
    return cards.filter((card)=>card.nextReviewAt <= now);
}
function getDueCardsFromMap(cardMap, now = Date.now()) {
    return getDueCards(Object.values(cardMap), now);
}
function getDueCardsWithBranding(cardMap, now = Date.now()) {
    return (0, _progress.filterDueCards)(Object.values(cardMap), now);
}
function createNewCard(id, now = Date.now()) {
    return {
        id,
        nextReviewAt: now,
        lastReviewedAt: 0,
        interval: 0,
        repetition: 0,
        efactor: 2.5,
        lapses: 0
    };
}
function resetCardProgress(base) {
    return {
        nextReviewAt: 0,
        lastReviewedAt: 0,
        interval: 0,
        repetition: 0,
        efactor: 2.5,
        lapses: 0,
        ...base
    };
}
function batchUpdateCards(cards, results, now = Date.now()) {
    return cards.map((card)=>{
        const quality = results[card.id];
        if (quality === undefined) {
            return card; // No update for this card
        }
        return updateCardProgress(card, quality, now);
    });
}
function calculateCardStatistics(cards, now = Date.now()) {
    const dueCards = getDueCards(cards, now);
    const totalCards = cards.length;
    const masteredCards = cards.filter((c)=>c.interval >= 21).length; // 3+ weeks
    const learningCards = cards.filter((c)=>c.interval > 0 && c.interval < 21).length;
    const newCards = cards.filter((c)=>c.repetition === 0).length;
    const averageEfactor = cards.reduce((sum, c)=>sum + c.efactor, 0) / totalCards || 2.5;
    const totalLapses = cards.reduce((sum, c)=>sum + c.lapses, 0);
    return {
        totalCards,
        dueCards: dueCards.length,
        masteredCards,
        learningCards,
        newCards,
        averageEfactor,
        totalLapses,
        duePercentage: totalCards > 0 ? dueCards.length / totalCards * 100 : 0
    };
}
function isCardDifficult(card) {
    return card.efactor < 2.0 || card.lapses > 3;
}
function sortByReviewPriority(cards, now = Date.now()) {
    return [
        ...cards
    ].sort((a, b)=>{
        // Both overdue: most overdue first
        if (a.nextReviewAt <= now && b.nextReviewAt <= now) {
            return a.nextReviewAt - b.nextReviewAt;
        }
        // One overdue: overdue first
        if (a.nextReviewAt <= now) return -1;
        if (b.nextReviewAt <= now) return 1;
        // Neither overdue: soonest first
        return a.nextReviewAt - b.nextReviewAt;
    });
}

//# sourceMappingURL=data:application/json;base64,