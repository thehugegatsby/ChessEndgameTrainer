{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/ui/ProgressCard.tsx"],"sourcesContent":["/**\n * @file Progress card component for chess training categories\n * @module components/ui/ProgressCard\n * \n * @description\n * Visual card component displaying training progress for chess endgame\n * categories. Shows completion statistics, success rates, and spaced\n * repetition information with engaging visual design. Features gradient\n * backgrounds based on difficulty level.\n * \n * @remarks\n * Key features:\n * - Progress visualization with percentage bar\n * - Success rate and due today statistics\n * - Streak tracking with fire emoji\n * - Difficulty-based gradient themes\n * - Category icons (pawn, rook, queen, etc.)\n * - Hover effects and animations\n * - Dark mode support\n * - German language interface\n * \n * The component is designed to motivate learners by displaying\n * their progress in an appealing and informative way.\n */\n\nimport React from \"react\";\n\n/**\n * Progress statistics data structure\n * \n * @interface ProgressStats\n * \n * @property {number} total - Total number of positions in the category\n * @property {number} completed - Number of completed positions\n * @property {number} successRate - Success rate as decimal (0-1)\n * @property {number} dueToday - Number of positions due for review today\n * @property {number} streak - Current training streak in days\n */\ninterface ProgressStats {\n  total: number;\n  completed: number;\n  successRate: number;\n  dueToday: number;\n  streak: number;\n}\n\n/**\n * Props for the ProgressCard component\n * \n * @interface ProgressCardProps\n * \n * @property {string} title - Card title (e.g., \"King and Pawn\")\n * @property {string} description - Brief description of the training category\n * @property {ProgressStats} stats - Progress statistics object\n * @property {'beginner' | 'intermediate' | 'advanced'} difficulty - Difficulty level\n * @property {'pawn' | 'rook' | 'queen' | 'minor' | 'other'} category - Piece category\n * @property {() => void} onStartTraining - Callback when training button is clicked\n */\ninterface ProgressCardProps {\n  title: string;\n  description: string;\n  stats: ProgressStats;\n  difficulty: \"beginner\" | \"intermediate\" | \"advanced\";\n  category: \"pawn\" | \"rook\" | \"queen\" | \"minor\" | \"other\";\n  onStartTraining: () => void;\n}\n\n/**\n * Gradient color schemes for each difficulty level\n * @private\n */\nconst difficultyColors = {\n  beginner:\n    \"from-green-50 to-emerald-50 border-green-200 dark:from-green-900/20 dark:to-emerald-900/20 dark:border-green-700\",\n  intermediate:\n    \"from-yellow-50 to-orange-50 border-yellow-200 dark:from-yellow-900/20 dark:to-orange-900/20 dark:border-yellow-700\",\n  advanced:\n    \"from-red-50 to-pink-50 border-red-200 dark:from-red-900/20 dark:to-pink-900/20 dark:border-red-700\",\n};\n\n/**\n * Icons representing each difficulty level\n * @private\n */\nconst difficultyIcons = {\n  beginner: \"üå±\",\n  intermediate: \"‚ö°\",\n  advanced: \"üî•\",\n};\n\n/**\n * Chess piece icons for each category\n * @private\n */\nconst categoryIcons = {\n  pawn: \"‚ôüÔ∏è\",\n  rook: \"‚ôú\",\n  queen: \"‚ôõ\",\n  minor: \"‚ôù\",\n  other: \"üéØ\",\n};\n\n/**\n * Progress card component\n * \n * @component\n * @description\n * Displays a visually appealing card showing training progress for a\n * specific chess endgame category. Includes statistics, progress bars,\n * and motivational elements like streak tracking. The card design adapts\n * its colors based on difficulty level.\n * \n * @remarks\n * Visual design:\n * - Green gradients for beginner content\n * - Yellow/orange gradients for intermediate\n * - Red/pink gradients for advanced\n * - Animated progress bar with gradient fill\n * - Hover effects for interactivity\n * \n * The component is memoized for performance optimization.\n * \n * @example\n * ```tsx\n * <ProgressCard\n *   title=\"K√∂nig und Bauer\"\n *   description=\"Grundlegende Bauernendspiele\"\n *   stats={{\n *     total: 10,\n *     completed: 7,\n *     successRate: 0.85,\n *     dueToday: 3,\n *     streak: 5\n *   }}\n *   difficulty=\"beginner\"\n *   category=\"pawn\"\n *   onStartTraining={() => navigate('/train/pawn')}\n * />\n * ```\n * \n * @param {ProgressCardProps} props - Card configuration\n * @returns {JSX.Element} Rendered progress card\n */\nexport const ProgressCard: React.FC<ProgressCardProps> = React.memo(\n  ({ title, description, stats, difficulty, category, onStartTraining }) => {\n    const progressPercentage =\n      stats.total > 0 ? Math.round((stats.completed / stats.total) * 100) : 0;\n    const successPercentage = Math.round(stats.successRate * 100);\n\n    return (\n      <div\n        className={`bg-gradient-to-br ${difficultyColors[difficulty]} p-6 rounded-2xl shadow-lg border transition-all hover:shadow-xl hover:scale-105`}\n      >\n        {/* Header */}\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            <span className=\"text-2xl\">{categoryIcons[category]}</span>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200\">\n                {title}\n              </h3>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {description}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-1 bg-white/60 dark:bg-gray-800/60 px-2 py-1 rounded-lg\">\n            <span className=\"text-sm\">{difficultyIcons[difficulty]}</span>\n            <span className=\"text-xs font-medium text-gray-700 dark:text-gray-300 capitalize\">\n              {difficulty}\n            </span>\n          </div>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mb-4\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n              Fortschritt\n            </span>\n            <span className=\"text-sm font-bold text-gray-800 dark:text-gray-200\">\n              {stats.completed}/{stats.total}\n            </span>\n          </div>\n          <div className=\"w-full bg-white/60 dark:bg-gray-700/60 rounded-full h-3\">\n            <div\n              className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full transition-all duration-500\"\n              style={{ width: `${progressPercentage}%` }}\n            />\n          </div>\n          <div className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">\n            {progressPercentage}% abgeschlossen\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-2 gap-3 mb-4\">\n          <div className=\"bg-white/60 dark:bg-gray-800/60 rounded-lg p-3 text-center\">\n            <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n              {successPercentage}%\n            </div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n              Erfolgsrate\n            </div>\n          </div>\n          <div className=\"bg-white/60 dark:bg-gray-800/60 rounded-lg p-3 text-center\">\n            <div className=\"text-lg font-bold text-orange-600 dark:text-orange-400\">\n              {stats.dueToday}\n            </div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n              Heute f√§llig\n            </div>\n          </div>\n        </div>\n\n        {/* Streak */}\n        {stats.streak > 0 && (\n          <div className=\"flex items-center justify-center gap-2 mb-4 bg-white/60 dark:bg-gray-800/60 rounded-lg p-2\">\n            <span className=\"text-lg\">üî•</span>\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n              {stats.streak} Tage Streak\n            </span>\n          </div>\n        )}\n\n        {/* Action Button */}\n        <button\n          onClick={onStartTraining}\n          className=\"w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white font-semibold py-3 px-4 rounded-xl transition-all duration-200 transform hover:scale-105 shadow-lg\"\n        >\n          {stats.dueToday > 0\n            ? `${stats.dueToday} Aufgaben trainieren`\n            : \"Training starten\"}\n        </button>\n      </div>\n    );\n  },\n);\n\nProgressCard.displayName = \"ProgressCard\";\n"],"names":["ProgressCard","difficultyColors","beginner","intermediate","advanced","difficultyIcons","categoryIcons","pawn","rook","queen","minor","other","React","memo","title","description","stats","difficulty","category","onStartTraining","progressPercentage","total","Math","round","completed","successPercentage","successRate","div","className","span","h3","p","style","width","dueToday","streak","button","onClick","displayName"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;CAuBC;;;;+BAwHYA;;;eAAAA;;;;8DAtHK;;;;;;AA0ClB;;;CAGC,GACD,MAAMC,mBAAmB;IACvBC,UACE;IACFC,cACE;IACFC,UACE;AACJ;AAEA;;;CAGC,GACD,MAAMC,kBAAkB;IACtBH,UAAU;IACVC,cAAc;IACdC,UAAU;AACZ;AAEA;;;CAGC,GACD,MAAME,gBAAgB;IACpBC,MAAM;IACNC,MAAM;IACNC,OAAO;IACPC,OAAO;IACPC,OAAO;AACT;AA2CO,MAAMX,6BAA4CY,cAAK,CAACC,IAAI,CACjE,CAAC,EAAEC,KAAK,EAAEC,WAAW,EAAEC,KAAK,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,eAAe,EAAE;IACnE,MAAMC,qBACJJ,MAAMK,KAAK,GAAG,IAAIC,KAAKC,KAAK,CAAC,AAACP,MAAMQ,SAAS,GAAGR,MAAMK,KAAK,GAAI,OAAO;IACxE,MAAMI,oBAAoBH,KAAKC,KAAK,CAACP,MAAMU,WAAW,GAAG;IAEzD,qBACE,sBAACC;QACCC,WAAW,CAAC,kBAAkB,EAAE3B,gBAAgB,CAACgB,WAAW,CAAC,gFAAgF,CAAC;;0BAG9I,sBAACU;gBAAIC,WAAU;;kCACb,sBAACD;wBAAIC,WAAU;;0CACb,qBAACC;gCAAKD,WAAU;0CAAYtB,aAAa,CAACY,SAAS;;0CACnD,sBAACS;;kDACC,qBAACG;wCAAGF,WAAU;kDACXd;;kDAEH,qBAACiB;wCAAEH,WAAU;kDACVb;;;;;;kCAIP,sBAACY;wBAAIC,WAAU;;0CACb,qBAACC;gCAAKD,WAAU;0CAAWvB,eAAe,CAACY,WAAW;;0CACtD,qBAACY;gCAAKD,WAAU;0CACbX;;;;;;0BAMP,sBAACU;gBAAIC,WAAU;;kCACb,sBAACD;wBAAIC,WAAU;;0CACb,qBAACC;gCAAKD,WAAU;0CAAuD;;0CAGvE,sBAACC;gCAAKD,WAAU;;oCACbZ,MAAMQ,SAAS;oCAAC;oCAAER,MAAMK,KAAK;;;;;kCAGlC,qBAACM;wBAAIC,WAAU;kCACb,cAAA,qBAACD;4BACCC,WAAU;4BACVI,OAAO;gCAAEC,OAAO,GAAGb,mBAAmB,CAAC,CAAC;4BAAC;;;kCAG7C,sBAACO;wBAAIC,WAAU;;4BACZR;4BAAmB;;;;;0BAKxB,sBAACO;gBAAIC,WAAU;;kCACb,sBAACD;wBAAIC,WAAU;;0CACb,sBAACD;gCAAIC,WAAU;;oCACZH;oCAAkB;;;0CAErB,qBAACE;gCAAIC,WAAU;0CAA2C;;;;kCAI5D,sBAACD;wBAAIC,WAAU;;0CACb,qBAACD;gCAAIC,WAAU;0CACZZ,MAAMkB,QAAQ;;0CAEjB,qBAACP;gCAAIC,WAAU;0CAA2C;;;;;;YAO7DZ,MAAMmB,MAAM,GAAG,mBACd,sBAACR;gBAAIC,WAAU;;kCACb,qBAACC;wBAAKD,WAAU;kCAAU;;kCAC1B,sBAACC;wBAAKD,WAAU;;4BACbZ,MAAMmB,MAAM;4BAAC;;;;;0BAMpB,qBAACC;gBACCC,SAASlB;gBACTS,WAAU;0BAETZ,MAAMkB,QAAQ,GAAG,IACd,GAAGlB,MAAMkB,QAAQ,CAAC,oBAAoB,CAAC,GACvC;;;;AAIZ;AAGFlC,aAAasC,WAAW,GAAG"}