603b9b019baeb48fcdcb30e3f788da41
/**
 * @file UI store hooks with state/action separation
 * @module store/hooks/useUIStore
 *
 * @description
 * Provides optimized hooks for UI-related state and actions with proper separation.
 * This pattern prevents unnecessary re-renders in action-only components while
 * maintaining excellent developer experience.
 *
 * Three hooks are exported:
 * - useUIState(): For components that need reactive state
 * - useUIActions(): For components that only dispatch actions (no re-renders)
 * - useUIStore(): Convenience hook returning [state, actions] tuple
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useUIActions () {
        return useUIActions;
    },
    get useUIState () {
        return useUIState;
    },
    get useUIStore () {
        return useUIStore;
    }
});
const _react = require("react");
const _StoreContext = require("../StoreContext");
const _shallow = require("zustand/react/shallow");
const useUIState = ()=>{
    return (0, _StoreContext.useStore)((0, _shallow.useShallow)((state)=>({
            // UI state from nested structure
            isSidebarOpen: state.ui.isSidebarOpen,
            currentModal: state.ui.currentModal,
            toasts: state.ui.toasts,
            loading: state.ui.loading,
            analysisPanel: state.ui.analysisPanel
        })));
};
const useUIActions = ()=>{
    // Non-reactive access to avoid SSR issues
    const storeApi = (0, _StoreContext.useStoreApi)();
    const state = storeApi.getState();
    const actions = state.ui;
    // Memoize the actions object to ensure stable reference
    return (0, _react.useMemo)(()=>({
            // UI actions
            toggleSidebar: actions.toggleSidebar,
            setIsSidebarOpen: actions.setIsSidebarOpen,
            openModal: actions.openModal,
            closeModal: actions.closeModal,
            showToast: actions.showToast,
            removeToast: actions.removeToast,
            setLoading: actions.setLoading,
            updateAnalysisPanel: actions.updateAnalysisPanel
        }), [
        actions
    ]);
};
const useUIStore = ()=>{
    return [
        useUIState(),
        useUIActions()
    ];
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL3N0b3JlL2hvb2tzL3VzZVVJU3RvcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBVSSBzdG9yZSBob29rcyB3aXRoIHN0YXRlL2FjdGlvbiBzZXBhcmF0aW9uXG4gKiBAbW9kdWxlIHN0b3JlL2hvb2tzL3VzZVVJU3RvcmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFByb3ZpZGVzIG9wdGltaXplZCBob29rcyBmb3IgVUktcmVsYXRlZCBzdGF0ZSBhbmQgYWN0aW9ucyB3aXRoIHByb3BlciBzZXBhcmF0aW9uLlxuICogVGhpcyBwYXR0ZXJuIHByZXZlbnRzIHVubmVjZXNzYXJ5IHJlLXJlbmRlcnMgaW4gYWN0aW9uLW9ubHkgY29tcG9uZW50cyB3aGlsZVxuICogbWFpbnRhaW5pbmcgZXhjZWxsZW50IGRldmVsb3BlciBleHBlcmllbmNlLlxuICpcbiAqIFRocmVlIGhvb2tzIGFyZSBleHBvcnRlZDpcbiAqIC0gdXNlVUlTdGF0ZSgpOiBGb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgcmVhY3RpdmUgc3RhdGVcbiAqIC0gdXNlVUlBY3Rpb25zKCk6IEZvciBjb21wb25lbnRzIHRoYXQgb25seSBkaXNwYXRjaCBhY3Rpb25zIChubyByZS1yZW5kZXJzKVxuICogLSB1c2VVSVN0b3JlKCk6IENvbnZlbmllbmNlIGhvb2sgcmV0dXJuaW5nIFtzdGF0ZSwgYWN0aW9uc10gdHVwbGVcbiAqL1xuXG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTdG9yZSwgdXNlU3RvcmVBcGkgfSBmcm9tIFwiLi4vU3RvcmVDb250ZXh0XCI7XG5pbXBvcnQgeyB1c2VTaGFsbG93IH0gZnJvbSBcInp1c3RhbmQvcmVhY3Qvc2hhbGxvd1wiO1xuaW1wb3J0IHR5cGUgeyBSb290U3RhdGUsIFVJQWN0aW9ucyBhcyBVSUFjdGlvbnNUeXBlIH0gZnJvbSBcIi4uL3NsaWNlcy90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBVSVN0YXRlIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbi8qKlxuICogSG9vayBmb3IgcmVhY3RpdmUgVUkgc3RhdGUgcHJvcGVydGllc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3Vic2NyaWJlcyBjb21wb25lbnRzIHRvIFVJIHN0YXRlIGNoYW5nZXMuIFVzZSB0aGlzIGluIGNvbXBvbmVudHNcbiAqIHRoYXQgbmVlZCB0byBkaXNwbGF5IG9yIHJlYWN0IHRvIFVJIGRhdGEuIFdpbGwgcmUtcmVuZGVyIHdoZW4gYW55XG4gKiBzZWxlY3RlZCBVSSBzdGF0ZSBjaGFuZ2VzLlxuICpcbiAqIEByZXR1cm5zIHtVSVN0YXRlfSBVSSBzdGF0ZSBwcm9wZXJ0aWVzXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogY29uc3QgeyB0b2FzdHMsIGN1cnJlbnRNb2RhbCwgaXNTaWRlYmFyT3BlbiB9ID0gdXNlVUlTdGF0ZSgpO1xuICpcbiAqIC8vIENvbXBvbmVudCB3aWxsIHJlLXJlbmRlciB3aGVuIHRoZXNlIHZhbHVlcyBjaGFuZ2VcbiAqIHJldHVybiAoXG4gKiAgIDw+XG4gKiAgICAge3RvYXN0cy5tYXAodG9hc3QgPT4gPFRvYXN0IGtleT17dG9hc3QuaWR9IHsuLi50b2FzdH0gLz4pfVxuICogICAgIHtjdXJyZW50TW9kYWwgJiYgPE1vZGFsIHR5cGU9e2N1cnJlbnRNb2RhbH0gLz59XG4gKiAgIDwvPlxuICogKTtcbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgdXNlVUlTdGF0ZSA9ICgpOiBVSVN0YXRlID0+IHtcbiAgcmV0dXJuIHVzZVN0b3JlKFxuICAgIHVzZVNoYWxsb3coKHN0YXRlOiBSb290U3RhdGUpID0+ICh7XG4gICAgICAvLyBVSSBzdGF0ZSBmcm9tIG5lc3RlZCBzdHJ1Y3R1cmVcbiAgICAgIGlzU2lkZWJhck9wZW46IHN0YXRlLnVpLmlzU2lkZWJhck9wZW4sXG4gICAgICBjdXJyZW50TW9kYWw6IHN0YXRlLnVpLmN1cnJlbnRNb2RhbCxcbiAgICAgIHRvYXN0czogc3RhdGUudWkudG9hc3RzLFxuICAgICAgbG9hZGluZzogc3RhdGUudWkubG9hZGluZyxcbiAgICAgIGFuYWx5c2lzUGFuZWw6IHN0YXRlLnVpLmFuYWx5c2lzUGFuZWwsXG4gICAgfSkpLFxuICApO1xufTtcblxuLyoqXG4gKiBIb29rIGZvciBVSSBhY3Rpb24gZnVuY3Rpb25zXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHN0YWJsZSBhY3Rpb24gZnVuY3Rpb25zIHRoYXQgbmV2ZXIgY2F1c2UgcmUtcmVuZGVycy5cbiAqIFVzZSB0aGlzIGluIGNvbXBvbmVudHMgdGhhdCBvbmx5IG5lZWQgdG8gdHJpZ2dlciBVSSBhY3Rpb25zXG4gKiB3aXRob3V0IHN1YnNjcmliaW5nIHRvIHN0YXRlIGNoYW5nZXMuXG4gKlxuICogQHJldHVybnMge1VJQWN0aW9uc1R5cGV9IFVJIGFjdGlvbiBmdW5jdGlvbnNcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBjb25zdCB7IHNob3dUb2FzdCwgdG9nZ2xlU2lkZWJhciwgb3Blbk1vZGFsIH0gPSB1c2VVSUFjdGlvbnMoKTtcbiAqXG4gKiAvLyBUaGlzIGNvbXBvbmVudCB3aWxsIG5ldmVyIHJlLXJlbmRlciBkdWUgdG8gVUkgc3RhdGUgY2hhbmdlc1xuICogcmV0dXJuIChcbiAqICAgPD5cbiAqICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RvZ2dsZVNpZGViYXJ9PlRvZ2dsZSBNZW51PC9idXR0b24+XG4gKiAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzaG93VG9hc3QoJ1N1Y2Nlc3MhJywgJ3N1Y2Nlc3MnKX0+U2hvdyBUb2FzdDwvYnV0dG9uPlxuICogICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gb3Blbk1vZGFsKCdzZXR0aW5ncycpfT5TZXR0aW5nczwvYnV0dG9uPlxuICogICA8Lz5cbiAqICk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVVJQWN0aW9ucyA9ICgpOiBVSUFjdGlvbnNUeXBlID0+IHtcbiAgLy8gTm9uLXJlYWN0aXZlIGFjY2VzcyB0byBhdm9pZCBTU1IgaXNzdWVzXG4gIGNvbnN0IHN0b3JlQXBpID0gdXNlU3RvcmVBcGkoKTtcbiAgY29uc3Qgc3RhdGUgPSBzdG9yZUFwaS5nZXRTdGF0ZSgpO1xuICBjb25zdCBhY3Rpb25zID0gc3RhdGUudWk7XG5cbiAgLy8gTWVtb2l6ZSB0aGUgYWN0aW9ucyBvYmplY3QgdG8gZW5zdXJlIHN0YWJsZSByZWZlcmVuY2VcbiAgcmV0dXJuIHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIC8vIFVJIGFjdGlvbnNcbiAgICAgIHRvZ2dsZVNpZGViYXI6IGFjdGlvbnMudG9nZ2xlU2lkZWJhcixcbiAgICAgIHNldElzU2lkZWJhck9wZW46IGFjdGlvbnMuc2V0SXNTaWRlYmFyT3BlbixcbiAgICAgIG9wZW5Nb2RhbDogYWN0aW9ucy5vcGVuTW9kYWwsXG4gICAgICBjbG9zZU1vZGFsOiBhY3Rpb25zLmNsb3NlTW9kYWwsXG4gICAgICBzaG93VG9hc3Q6IGFjdGlvbnMuc2hvd1RvYXN0LFxuICAgICAgcmVtb3ZlVG9hc3Q6IGFjdGlvbnMucmVtb3ZlVG9hc3QsXG4gICAgICBzZXRMb2FkaW5nOiBhY3Rpb25zLnNldExvYWRpbmcsXG4gICAgICB1cGRhdGVBbmFseXNpc1BhbmVsOiBhY3Rpb25zLnVwZGF0ZUFuYWx5c2lzUGFuZWwsXG4gICAgfSksXG4gICAgW2FjdGlvbnNdLFxuICApO1xufTtcblxuLyoqXG4gKiBDb252ZW5pZW5jZSBob29rIGZvciBjb21wb25lbnRzIHRoYXQgbmVlZCBib3RoIHN0YXRlIGFuZCBhY3Rpb25zXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGEgdHVwbGUgb2YgW3N0YXRlLCBhY3Rpb25zXSBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgYm90aC5cbiAqIFRoaXMgbWFpbnRhaW5zIHRoZSBmYW1pbGlhciBwYXR0ZXJuIHdoaWxlIGJlbmVmaXRpbmcgZnJvbSB0aGVcbiAqIG9wdGltaXplZCBzZXBhcmF0aW9uIHVuZGVyIHRoZSBob29kLlxuICpcbiAqIEByZXR1cm5zIHtbVUlTdGF0ZSwgVUlBY3Rpb25zVHlwZV19IFR1cGxlIG9mIFVJIHN0YXRlIGFuZCBhY3Rpb25zXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogY29uc3QgW3VpU3RhdGUsIHVpQWN0aW9uc10gPSB1c2VVSVN0b3JlKCk7XG4gKlxuICogY29uc3QgaGFuZGxlQW5hbHlzaXNUb2dnbGUgPSAoKSA9PiB7XG4gKiAgIHVpQWN0aW9ucy51cGRhdGVBbmFseXNpc1BhbmVsKHtcbiAqICAgICBpc09wZW46ICF1aVN0YXRlLmFuYWx5c2lzUGFuZWwuaXNPcGVuXG4gKiAgIH0pO1xuICogfTtcbiAqXG4gKiBpZiAodWlTdGF0ZS5sb2FkaW5nLmdsb2JhbCkge1xuICogICByZXR1cm4gPEdsb2JhbFNwaW5uZXIgLz47XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVVJU3RvcmUgPSAoKTogW1VJU3RhdGUsIFVJQWN0aW9uc1R5cGVdID0+IHtcbiAgcmV0dXJuIFt1c2VVSVN0YXRlKCksIHVzZVVJQWN0aW9ucygpXTtcbn07XG4iXSwibmFtZXMiOlsidXNlVUlBY3Rpb25zIiwidXNlVUlTdGF0ZSIsInVzZVVJU3RvcmUiLCJ1c2VTdG9yZSIsInVzZVNoYWxsb3ciLCJzdGF0ZSIsImlzU2lkZWJhck9wZW4iLCJ1aSIsImN1cnJlbnRNb2RhbCIsInRvYXN0cyIsImxvYWRpbmciLCJhbmFseXNpc1BhbmVsIiwic3RvcmVBcGkiLCJ1c2VTdG9yZUFwaSIsImdldFN0YXRlIiwiYWN0aW9ucyIsInVzZU1lbW8iLCJ0b2dnbGVTaWRlYmFyIiwic2V0SXNTaWRlYmFyT3BlbiIsIm9wZW5Nb2RhbCIsImNsb3NlTW9kYWwiLCJzaG93VG9hc3QiLCJyZW1vdmVUb2FzdCIsInNldExvYWRpbmciLCJ1cGRhdGVBbmFseXNpc1BhbmVsIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztDQWFDOzs7Ozs7Ozs7OztRQW9FWUE7ZUFBQUE7O1FBckNBQztlQUFBQTs7UUFxRkFDO2VBQUFBOzs7dUJBbEhXOzhCQUNjO3lCQUNYO0FBMkJwQixNQUFNRCxhQUFhO0lBQ3hCLE9BQU9FLElBQUFBLHNCQUFRLEVBQ2JDLElBQUFBLG1CQUFVLEVBQUMsQ0FBQ0MsUUFBc0IsQ0FBQTtZQUNoQyxpQ0FBaUM7WUFDakNDLGVBQWVELE1BQU1FLEVBQUUsQ0FBQ0QsYUFBYTtZQUNyQ0UsY0FBY0gsTUFBTUUsRUFBRSxDQUFDQyxZQUFZO1lBQ25DQyxRQUFRSixNQUFNRSxFQUFFLENBQUNFLE1BQU07WUFDdkJDLFNBQVNMLE1BQU1FLEVBQUUsQ0FBQ0csT0FBTztZQUN6QkMsZUFBZU4sTUFBTUUsRUFBRSxDQUFDSSxhQUFhO1FBQ3ZDLENBQUE7QUFFSjtBQTBCTyxNQUFNWCxlQUFlO0lBQzFCLDBDQUEwQztJQUMxQyxNQUFNWSxXQUFXQyxJQUFBQSx5QkFBVztJQUM1QixNQUFNUixRQUFRTyxTQUFTRSxRQUFRO0lBQy9CLE1BQU1DLFVBQVVWLE1BQU1FLEVBQUU7SUFFeEIsd0RBQXdEO0lBQ3hELE9BQU9TLElBQUFBLGNBQU8sRUFDWixJQUFPLENBQUE7WUFDTCxhQUFhO1lBQ2JDLGVBQWVGLFFBQVFFLGFBQWE7WUFDcENDLGtCQUFrQkgsUUFBUUcsZ0JBQWdCO1lBQzFDQyxXQUFXSixRQUFRSSxTQUFTO1lBQzVCQyxZQUFZTCxRQUFRSyxVQUFVO1lBQzlCQyxXQUFXTixRQUFRTSxTQUFTO1lBQzVCQyxhQUFhUCxRQUFRTyxXQUFXO1lBQ2hDQyxZQUFZUixRQUFRUSxVQUFVO1lBQzlCQyxxQkFBcUJULFFBQVFTLG1CQUFtQjtRQUNsRCxDQUFBLEdBQ0E7UUFBQ1Q7S0FBUTtBQUViO0FBMkJPLE1BQU1iLGFBQWE7SUFDeEIsT0FBTztRQUFDRDtRQUFjRDtLQUFlO0FBQ3ZDIn0=