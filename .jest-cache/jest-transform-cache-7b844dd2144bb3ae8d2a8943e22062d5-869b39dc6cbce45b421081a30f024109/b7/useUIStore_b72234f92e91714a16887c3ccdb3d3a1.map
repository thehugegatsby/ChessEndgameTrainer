{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/hooks/useUIStore.ts"],"sourcesContent":["/**\n * @file UI store hooks with state/action separation\n * @module store/hooks/useUIStore\n *\n * @description\n * Provides optimized hooks for UI-related state and actions with proper separation.\n * This pattern prevents unnecessary re-renders in action-only components while\n * maintaining excellent developer experience.\n *\n * Three hooks are exported:\n * - useUIState(): For components that need reactive state\n * - useUIActions(): For components that only dispatch actions (no re-renders)\n * - useUIStore(): Convenience hook returning [state, actions] tuple\n */\n\nimport { useMemo } from \"react\";\nimport { useStore, useStoreApi } from \"../StoreContext\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport type { RootState, UIActions as UIActionsType } from \"../slices/types\";\nimport type { UIState } from \"../types\";\n\n/**\n * Hook for reactive UI state properties\n *\n * @description\n * Subscribes components to UI state changes. Use this in components\n * that need to display or react to UI data. Will re-render when any\n * selected UI state changes.\n *\n * @returns {UIState} UI state properties\n *\n * @example\n * ```tsx\n * const { toasts, currentModal, isSidebarOpen } = useUIState();\n *\n * // Component will re-render when these values change\n * return (\n *   <>\n *     {toasts.map(toast => <Toast key={toast.id} {...toast} />)}\n *     {currentModal && <Modal type={currentModal} />}\n *   </>\n * );\n * ```\n */\nexport const useUIState = (): UIState => {\n  return useStore(\n    useShallow((state: RootState) => ({\n      // UI state from nested structure\n      isSidebarOpen: state.ui.isSidebarOpen,\n      currentModal: state.ui.currentModal,\n      toasts: state.ui.toasts,\n      loading: state.ui.loading,\n      analysisPanel: state.ui.analysisPanel,\n    })),\n  );\n};\n\n/**\n * Hook for UI action functions\n *\n * @description\n * Returns stable action functions that never cause re-renders.\n * Use this in components that only need to trigger UI actions\n * without subscribing to state changes.\n *\n * @returns {UIActionsType} UI action functions\n *\n * @example\n * ```tsx\n * const { showToast, toggleSidebar, openModal } = useUIActions();\n *\n * // This component will never re-render due to UI state changes\n * return (\n *   <>\n *     <button onClick={toggleSidebar}>Toggle Menu</button>\n *     <button onClick={() => showToast('Success!', 'success')}>Show Toast</button>\n *     <button onClick={() => openModal('settings')}>Settings</button>\n *   </>\n * );\n * ```\n */\nexport const useUIActions = (): UIActionsType => {\n  // Non-reactive access to avoid SSR issues\n  const storeApi = useStoreApi();\n  const state = storeApi.getState();\n  const actions = state.ui;\n\n  // Memoize the actions object to ensure stable reference\n  return useMemo(\n    () => ({\n      // UI actions\n      toggleSidebar: actions.toggleSidebar,\n      setIsSidebarOpen: actions.setIsSidebarOpen,\n      openModal: actions.openModal,\n      closeModal: actions.closeModal,\n      showToast: actions.showToast,\n      removeToast: actions.removeToast,\n      setLoading: actions.setLoading,\n      updateAnalysisPanel: actions.updateAnalysisPanel,\n    }),\n    [actions],\n  );\n};\n\n/**\n * Convenience hook for components that need both state and actions\n *\n * @description\n * Returns a tuple of [state, actions] for components that need both.\n * This maintains the familiar pattern while benefiting from the\n * optimized separation under the hood.\n *\n * @returns {[UIState, UIActionsType]} Tuple of UI state and actions\n *\n * @example\n * ```tsx\n * const [uiState, uiActions] = useUIStore();\n *\n * const handleAnalysisToggle = () => {\n *   uiActions.updateAnalysisPanel({\n *     isOpen: !uiState.analysisPanel.isOpen\n *   });\n * };\n *\n * if (uiState.loading.global) {\n *   return <GlobalSpinner />;\n * }\n * ```\n */\nexport const useUIStore = (): [UIState, UIActionsType] => {\n  return [useUIState(), useUIActions()];\n};\n"],"names":["useUIActions","useUIState","useUIStore","useStore","useShallow","state","isSidebarOpen","ui","currentModal","toasts","loading","analysisPanel","storeApi","useStoreApi","getState","actions","useMemo","toggleSidebar","setIsSidebarOpen","openModal","closeModal","showToast","removeToast","setLoading","updateAnalysisPanel"],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;;;;;;;;QAoEYA;eAAAA;;QArCAC;eAAAA;;QAqFAC;eAAAA;;;uBAlHW;8BACc;yBACX;AA2BpB,MAAMD,aAAa;IACxB,OAAOE,IAAAA,sBAAQ,EACbC,IAAAA,mBAAU,EAAC,CAACC,QAAsB,CAAA;YAChC,iCAAiC;YACjCC,eAAeD,MAAME,EAAE,CAACD,aAAa;YACrCE,cAAcH,MAAME,EAAE,CAACC,YAAY;YACnCC,QAAQJ,MAAME,EAAE,CAACE,MAAM;YACvBC,SAASL,MAAME,EAAE,CAACG,OAAO;YACzBC,eAAeN,MAAME,EAAE,CAACI,aAAa;QACvC,CAAA;AAEJ;AA0BO,MAAMX,eAAe;IAC1B,0CAA0C;IAC1C,MAAMY,WAAWC,IAAAA,yBAAW;IAC5B,MAAMR,QAAQO,SAASE,QAAQ;IAC/B,MAAMC,UAAUV,MAAME,EAAE;IAExB,wDAAwD;IACxD,OAAOS,IAAAA,cAAO,EACZ,IAAO,CAAA;YACL,aAAa;YACbC,eAAeF,QAAQE,aAAa;YACpCC,kBAAkBH,QAAQG,gBAAgB;YAC1CC,WAAWJ,QAAQI,SAAS;YAC5BC,YAAYL,QAAQK,UAAU;YAC9BC,WAAWN,QAAQM,SAAS;YAC5BC,aAAaP,QAAQO,WAAW;YAChCC,YAAYR,QAAQQ,UAAU;YAC9BC,qBAAqBT,QAAQS,mBAAmB;QAClD,CAAA,GACA;QAACT;KAAQ;AAEb;AA2BO,MAAMb,aAAa;IACxB,OAAO;QAACD;QAAcD;KAAe;AACvC"}