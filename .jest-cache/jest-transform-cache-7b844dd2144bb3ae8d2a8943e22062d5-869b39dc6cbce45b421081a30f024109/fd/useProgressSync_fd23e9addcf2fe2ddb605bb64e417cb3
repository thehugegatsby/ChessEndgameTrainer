8b534644926617ddeb11ea8659c1e6a7
/**
 * @file useProgressSync - Debounced Firebase sync hook with optimistic updates
 * @description Provides intelligent progress synchronization with offline support and optimistic updates
 * 
 * Features:
 * - Debounced sync operations (configurable delay)
 * - Optimistic updates for immediate UI feedback
 * - Background synchronization with error handling
 * - Offline queue with automatic retry on reconnection
 * - Exponential backoff for failed sync operations
 * - Conflict resolution for concurrent updates
 * 
 * @example
 * ```typescript
 * function TrainingSession({ userId }: { userId: string }) {
 *   const {
 *     syncUserStats,
 *     syncCardProgress,
 *     syncBatch,
 *     syncStatus,
 *     lastSync,
 *     pendingOperations,
 *     clearQueue
 *   } = useProgressSync(userId);
 * 
 *   const handleCorrectAnswer = (positionId: string) => {
 *     // Optimistic update with background sync
 *     syncCardProgress(positionId, updatedCard);
 *   };
 * 
 *   const handleSessionComplete = (stats: Partial<UserStats>, cards: CardUpdate[]) => {
 *     // Batch sync for session completion
 *     syncBatch(stats, cards);
 *   };
 * }
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useProgressSync () {
        return useProgressSync;
    },
    get useProgressSyncStatus () {
        return useProgressSyncStatus;
    }
});
const _react = require("react");
const _useProgressStore = require("../store/hooks/useProgressStore");
const _Logger = require("../services/logging/Logger");
const logger = (0, _Logger.getLogger)().setContext('useProgressSync');
/**
 * Default configuration values
 */ const DEFAULT_CONFIG = {
    debounceMs: 2000,
    maxRetries: 3,
    retryDelayMs: 1000,
    maxBatchSize: 50,
    enableOptimistic: true
};
function useProgressSync(userId, progressService, config = {}) {
    const mergedConfig = (0, _react.useMemo)(()=>({
            ...DEFAULT_CONFIG,
            ...config
        }), [
        config
    ]);
    const progressActions = (0, _useProgressStore.useProgressActions)();
    // Sync state
    const [syncStatus, setSyncStatus] = (0, _react.useState)({
        status: 'idle',
        lastSync: null,
        error: null,
        pendingCount: 0,
        isDebounced: false
    });
    // Operation queue for offline/retry handling
    const queueRef = (0, _react.useRef)([]);
    const debounceTimeoutRef = (0, _react.useRef)(null);
    const syncIdCounterRef = (0, _react.useRef)(0);
    const isProcessingRef = (0, _react.useRef)(false);
    const lastSyncRef = (0, _react.useRef)(null);
    // Queue size limit to prevent memory bloat
    const MAX_QUEUE_SIZE = 100;
    /**
   * Generate unique ID for sync operations
   */ const generateSyncId = (0, _react.useCallback)(()=>{
        return `sync_${Date.now()}_${++syncIdCounterRef.current}`;
    }, []);
    /**
   * Calculate exponential backoff delay
   */ const calculateRetryDelay = (0, _react.useCallback)((retries)=>{
        return mergedConfig.retryDelayMs * Math.pow(2, retries);
    }, [
        mergedConfig.retryDelayMs
    ]);
    /**
   * Update sync status state
   */ const updateSyncStatus = (0, _react.useCallback)((updates)=>{
        setSyncStatus((prev)=>({
                ...prev,
                ...updates,
                pendingCount: queueRef.current.length
            }));
    }, []);
    /**
   * Add operation to sync queue with overflow protection
   */ const queueOperation = (0, _react.useCallback)((operation)=>{
        // Check queue size limit
        if (queueRef.current.length >= MAX_QUEUE_SIZE) {
            logger.warn('Queue size limit exceeded, dropping oldest operations', {
                currentSize: queueRef.current.length,
                maxSize: MAX_QUEUE_SIZE
            });
            // Remove oldest operations (FIFO)
            queueRef.current = queueRef.current.slice(-MAX_QUEUE_SIZE + 10); // Keep some buffer
        }
        const id = generateSyncId();
        const queueItem = {
            id,
            operation,
            timestamp: Date.now(),
            retries: 0,
            lastAttempt: null
        };
        queueRef.current.push(queueItem);
        updateSyncStatus({
            pendingCount: queueRef.current.length
        });
        logger.debug('Queued sync operation', {
            id,
            type: operation.type,
            queueLength: queueRef.current.length
        });
        return id;
    }, [
        generateSyncId,
        updateSyncStatus
    ]);
    /**
   * Remove operation from queue
   */ const dequeueOperation = (0, _react.useCallback)((id)=>{
        const initialLength = queueRef.current.length;
        queueRef.current = queueRef.current.filter((item)=>item.id !== id);
        if (queueRef.current.length !== initialLength) {
            updateSyncStatus({
                pendingCount: queueRef.current.length
            });
            logger.debug('Dequeued sync operation', {
                id,
                queueLength: queueRef.current.length
            });
        }
    }, [
        updateSyncStatus
    ]);
    /**
   * Execute single sync operation
   */ const executeSyncOperation = (0, _react.useCallback)(async (operation)=>{
        if (!userId) {
            throw new Error('User ID required for sync operation');
        }
        try {
            switch(operation.type){
                case 'userStats':
                    await progressService.updateUserStats(operation.userId, operation.updates);
                    logger.debug('Synced user stats', {
                        userId: operation.userId
                    });
                    break;
                case 'cardProgress':
                    await progressService.upsertCardProgress(operation.userId, operation.positionId, operation.progress);
                    logger.debug('Synced card progress', {
                        userId: operation.userId,
                        positionId: operation.positionId
                    });
                    break;
                case 'batch':
                    await progressService.updateProgressTransaction(operation.userId, operation.statsUpdate, operation.cardUpdates);
                    logger.debug('Synced batch operation', {
                        userId: operation.userId,
                        cardCount: operation.cardUpdates.length
                    });
                    break;
                default:
                    throw new Error(`Unknown operation type: ${operation.type}`);
            }
        } catch (error) {
            logger.error('Sync operation failed', error, {
                operation
            });
            throw error;
        }
    }, [
        userId,
        progressService
    ]);
    /**
   * Process sync queue with retry logic and concurrency protection
   */ const processQueue = (0, _react.useCallback)(async ()=>{
        // Prevent concurrent processing
        if (isProcessingRef.current) {
            logger.debug('Queue processing already in progress, skipping');
            return;
        }
        if (queueRef.current.length === 0) {
            updateSyncStatus({
                status: 'idle'
            });
            return;
        }
        // Don't process if offline (use navigator.onLine as source of truth)
        if (!navigator.onLine) {
            logger.debug('Skipping queue processing while offline');
            return;
        }
        isProcessingRef.current = true;
        updateSyncStatus({
            status: 'syncing',
            error: null
        });
        const itemsToProcess = [
            ...queueRef.current
        ];
        const failedItems = [];
        for (const item of itemsToProcess){
            try {
                await executeSyncOperation(item.operation);
                dequeueOperation(item.id);
                // Update progress slice sync status optimistically
                lastSyncRef.current = Date.now();
                progressActions.setLastSync(lastSyncRef.current);
                progressActions.setSyncError(null);
            } catch (error) {
                const errorMessage = error.message;
                // Update retry information
                const updatedItem = {
                    ...item,
                    retries: item.retries + 1,
                    lastAttempt: Date.now()
                };
                if (updatedItem.retries < mergedConfig.maxRetries) {
                    // Schedule retry with exponential backoff
                    const retryDelay = calculateRetryDelay(updatedItem.retries);
                    setTimeout(()=>{
                        // Update item in queue for retry
                        const queueIndex = queueRef.current.findIndex((qi)=>qi.id === item.id);
                        if (queueIndex !== -1) {
                            queueRef.current[queueIndex] = updatedItem;
                            logger.debug('Scheduled retry for sync operation', {
                                id: item.id,
                                retryAttempt: updatedItem.retries,
                                retryDelay
                            });
                            // Trigger processing for retry
                            debouncedProcessQueue();
                        }
                    }, retryDelay);
                    failedItems.push(updatedItem);
                } else {
                    // Max retries exceeded, remove from queue and log error
                    dequeueOperation(item.id);
                    progressActions.setSyncError(errorMessage);
                    logger.error('Sync operation failed permanently after max retries', {
                        id: item.id,
                        retries: updatedItem.retries,
                        error: errorMessage
                    });
                }
            }
        }
        // Update queue with failed items for retry
        queueRef.current = failedItems;
        const finalStatus = failedItems.length > 0 ? 'error' : 'idle';
        updateSyncStatus({
            status: finalStatus,
            lastSync: failedItems.length === 0 ? lastSyncRef.current : lastSyncRef.current
        });
        // Always release processing lock
        isProcessingRef.current = false;
    }, [
        updateSyncStatus,
        executeSyncOperation,
        dequeueOperation,
        progressActions,
        mergedConfig.maxRetries,
        calculateRetryDelay
    ]);
    /**
   * Debounced queue processing
   */ const debouncedProcessQueue = (0, _react.useCallback)(()=>{
        if (debounceTimeoutRef.current) {
            clearTimeout(debounceTimeoutRef.current);
        }
        updateSyncStatus({
            isDebounced: true
        });
        debounceTimeoutRef.current = setTimeout(()=>{
            updateSyncStatus({
                isDebounced: false
            });
            processQueue();
        }, mergedConfig.debounceMs);
    }, [
        processQueue,
        mergedConfig.debounceMs,
        updateSyncStatus
    ]);
    /**
   * Sync user statistics with optimistic updates
   */ const syncUserStats = (0, _react.useCallback)((updates)=>{
        if (!userId) {
            logger.warn('Cannot sync user stats without userId');
            return;
        }
        // Optimistic update
        if (mergedConfig.enableOptimistic) {
            progressActions.batchUpdateProgress({
                userStats: updates
            });
        }
        // Queue for background sync
        queueOperation({
            type: 'userStats',
            userId,
            updates
        });
        debouncedProcessQueue();
    }, [
        userId,
        mergedConfig.enableOptimistic,
        progressActions,
        queueOperation,
        debouncedProcessQueue
    ]);
    /**
   * Sync card progress with optimistic updates
   */ const syncCardProgress = (0, _react.useCallback)((positionId, progress)=>{
        if (!userId) {
            logger.warn('Cannot sync card progress without userId');
            return;
        }
        // Optimistic update
        if (mergedConfig.enableOptimistic) {
            progressActions.setCardProgress(positionId, progress);
        }
        // Queue for background sync
        queueOperation({
            type: 'cardProgress',
            userId,
            positionId,
            progress
        });
        debouncedProcessQueue();
    }, [
        userId,
        mergedConfig.enableOptimistic,
        progressActions,
        queueOperation,
        debouncedProcessQueue
    ]);
    /**
   * Sync batch operation (stats + multiple cards) with optimistic updates
   */ const syncBatch = (0, _react.useCallback)((statsUpdate, cardUpdates)=>{
        if (!userId) {
            logger.warn('Cannot sync batch without userId');
            return;
        }
        if (cardUpdates.length > mergedConfig.maxBatchSize) {
            logger.warn('Batch size exceeds maximum, splitting', {
                requested: cardUpdates.length,
                maximum: mergedConfig.maxBatchSize
            });
            // Split into chunks and sync iteratively (not recursively to avoid stack issues)
            const chunks = [];
            for(let i = 0; i < cardUpdates.length; i += mergedConfig.maxBatchSize){
                chunks.push(cardUpdates.slice(i, i + mergedConfig.maxBatchSize));
            }
            // Process chunks
            chunks.forEach((chunk, index)=>{
                // Only include stats update with the first chunk
                const chunkStatsUpdate = index === 0 ? statsUpdate : {};
                // Queue each chunk separately
                queueOperation({
                    type: 'batch',
                    userId,
                    statsUpdate: chunkStatsUpdate,
                    cardUpdates: chunk
                });
            });
            debouncedProcessQueue();
            return;
        }
        // Optimistic updates
        if (mergedConfig.enableOptimistic) {
            // Update user stats
            if (Object.keys(statsUpdate).length > 0) {
                progressActions.batchUpdateProgress({
                    userStats: statsUpdate
                });
            }
            // Update card progresses
            const cardProgressMap = {};
            cardUpdates.forEach(({ positionId, progress })=>{
                cardProgressMap[positionId] = progress;
            });
            if (Object.keys(cardProgressMap).length > 0) {
                progressActions.batchUpdateProgress({
                    cardProgress: cardProgressMap
                });
            }
        }
        // Queue for background sync
        queueOperation({
            type: 'batch',
            userId,
            statsUpdate,
            cardUpdates
        });
        debouncedProcessQueue();
    }, [
        userId,
        mergedConfig.enableOptimistic,
        mergedConfig.maxBatchSize,
        progressActions,
        queueOperation,
        debouncedProcessQueue
    ]);
    /**
   * Force immediate sync without debounce
   */ const forceSync = (0, _react.useCallback)(async ()=>{
        if (debounceTimeoutRef.current) {
            clearTimeout(debounceTimeoutRef.current);
            debounceTimeoutRef.current = null;
        }
        updateSyncStatus({
            isDebounced: false
        });
        try {
            await processQueue();
        } catch (error) {
            logger.error('Force sync failed', error);
            updateSyncStatus({
                status: 'error',
                error: error.message
            });
        }
    }, [
        processQueue,
        updateSyncStatus
    ]);
    /**
   * Clear all pending operations
   */ const clearQueue = (0, _react.useCallback)(()=>{
        queueRef.current = [];
        updateSyncStatus({
            pendingCount: 0,
            status: 'idle',
            error: null
        });
        if (debounceTimeoutRef.current) {
            clearTimeout(debounceTimeoutRef.current);
            debounceTimeoutRef.current = null;
        }
        logger.info('Cleared sync queue');
    }, [
        updateSyncStatus
    ]);
    /**
   * Get current pending operations (for debugging)
   */ const getPendingOperations = (0, _react.useCallback)(()=>{
        return queueRef.current.map((item)=>({
                id: item.id,
                type: item.operation.type,
                timestamp: item.timestamp,
                retries: item.retries,
                lastAttempt: item.lastAttempt
            }));
    }, []);
    // Initialize queue from localStorage on mount
    (0, _react.useEffect)(()=>{
        if (!userId) return;
        try {
            const savedQueue = localStorage.getItem(`syncQueue-${userId}`);
            if (savedQueue) {
                queueRef.current = JSON.parse(savedQueue);
                updateSyncStatus({
                    pendingCount: queueRef.current.length
                });
                logger.debug('Restored sync queue from localStorage', {
                    userId,
                    queueLength: queueRef.current.length
                });
            }
        } catch (error) {
            logger.warn('Failed to restore sync queue from localStorage', {
                userId,
                error: error.message
            });
        }
    }, [
        userId,
        updateSyncStatus
    ]);
    // Save queue to localStorage on changes
    (0, _react.useEffect)(()=>{
        if (!userId) return;
        try {
            localStorage.setItem(`syncQueue-${userId}`, JSON.stringify(queueRef.current));
        } catch (error) {
            logger.warn('Failed to save sync queue to localStorage', {
                userId,
                error: error.message
            });
        }
    }, [
        userId,
        syncStatus.pendingCount
    ]);
    // Auto-retry when coming back online
    (0, _react.useEffect)(()=>{
        const handleOnline = ()=>{
            logger.info('Network connection restored, processing pending queue');
            updateSyncStatus({
                status: 'idle'
            });
            debouncedProcessQueue();
        };
        const handleOffline = ()=>{
            logger.info('Network connection lost');
            updateSyncStatus({
                status: 'offline'
            });
        };
        window.addEventListener('online', handleOnline);
        window.addEventListener('offline', handleOffline);
        return ()=>{
            window.removeEventListener('online', handleOnline);
            window.removeEventListener('offline', handleOffline);
        };
    }, [
        debouncedProcessQueue,
        updateSyncStatus
    ]);
    // Cleanup on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (debounceTimeoutRef.current) {
                clearTimeout(debounceTimeoutRef.current);
            }
        };
    }, []);
    return {
        // Sync functions
        syncUserStats,
        syncCardProgress,
        syncBatch,
        forceSync,
        clearQueue,
        // Status information
        syncStatus,
        lastSync: syncStatus.lastSync,
        pendingOperations: getPendingOperations(),
        // Configuration
        config: mergedConfig
    };
}
function useProgressSyncStatus() {
    const [syncStatus] = (0, _react.useState)({
        status: 'idle',
        lastSync: null,
        error: null
    });
    // This would typically connect to the progress slice's sync status
    // For now, return basic status
    return syncStatus;
}

//# sourceMappingURL=data:application/json;base64,