{"version":3,"names":["cov_r1zyd7um5","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","ServiceContainer","createProductionContainer","container","window","registerBrowserAPIs","localStorage","sessionStorage","navigator","document","performance","registerPlatformServices","createTestContainer","mockAPIs","apis","_mocks","createMockStorage","createMockNavigator","createMockWindow","createMockDocument","createMockPerformance","register","key","factory","registerInternal","registerCustom","config","validateKeys","factories","has","_types","ServiceAlreadyRegisteredError","logger","set","instances","delete","resolve","resolveInternal","resolveCustom","resolving","chain","Array","from","push","CircularDependencyError","useSingletons","get","ServiceNotFoundError","add","instance","hasCustom","clearInstances","clear","getRegisteredKeys","keys","getStats","registeredServices","size","resolvedInstances","currentlyResolving","WebPlatformService","require","platformService","storage","notifications","device","clipboard","share","analytics","createChild","child","forEach","constructor","_define_property","Map","Set"],"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/container/ServiceContainer.ts"],"sourcesContent":["/**\n * @file Service Container Implementation\n * @module services/container/ServiceContainer\n *\n * @description\n * Lightweight dependency injection container for platform services.\n * Provides a centralized way to manage service instances and their dependencies,\n * supporting both singleton and factory patterns with circular dependency detection.\n *\n * @remarks\n * Key features:\n * - Lazy service instantiation\n * - Singleton and factory patterns\n * - Circular dependency detection\n * - Mock services for testing\n * - Browser API abstraction\n * - Type-safe service registry\n */\n\nimport {\n  IServiceContainer,\n  ServiceRegistry,\n  ServiceFactory,\n  ServiceContainerConfig,\n  ServiceNotFoundError,\n  ServiceAlreadyRegisteredError,\n  CircularDependencyError,\n  IBrowserAPIs,\n} from \"./types\";\nimport {\n  createMockStorage,\n  createMockNavigator,\n  createMockWindow,\n  createMockDocument,\n  createMockPerformance,\n} from \"./mocks\";\n\n/**\n * Service Container implementation for dependency injection\n *\n * @class ServiceContainer\n * @implements {IServiceContainer}\n *\n * @description\n * Manages service registration, instantiation, and dependency resolution.\n * Supports both singleton and factory patterns with automatic circular\n * dependency detection.\n *\n * @example\n * ```typescript\n * // Create a container\n * const container = new ServiceContainer({ useSingletons: true });\n *\n * // Register a service factory\n * container.register('storage', (container) => {\n *   return new StorageService(container.get('platform'));\n * });\n *\n * // Get service instance\n * const storage = container.get<IStorageService>('storage');\n * ```\n */\nexport class ServiceContainer implements IServiceContainer {\n  private factories = new Map<string, ServiceFactory<any>>();\n  private instances = new Map<string, any>();\n  private resolving = new Set<string>(); // For circular dependency detection\n  private config: ServiceContainerConfig;\n\n  /**\n   * Creates a new service container\n   *\n   * @param {ServiceContainerConfig} config - Configuration options\n   * @param {boolean} [config.useSingletons=true] - Whether to cache service instances\n   * @param {boolean} [config.validateKeys=true] - Whether to validate service keys\n   * @param {Function} [config.logger] - Optional logger function\n   */\n  constructor(config: ServiceContainerConfig = {}) {\n    this.config = {\n      useSingletons: true,\n      validateKeys: true,\n      logger: config.logger || (() => {}), // No-op logger by default\n      ...config,\n    };\n  }\n\n  /**\n   * Create a production container with real browser APIs\n   *\n   * @static\n   * @returns {ServiceContainer} Container configured for production use\n   *\n   * @example\n   * ```typescript\n   * const container = ServiceContainer.createProductionContainer();\n   * const platform = container.get('platform');\n   * ```\n   */\n  static createProductionContainer(): ServiceContainer {\n    const container = new ServiceContainer();\n\n    if (typeof window !== \"undefined\") {\n      container.registerBrowserAPIs({\n        localStorage: window.localStorage,\n        sessionStorage: window.sessionStorage,\n        navigator: window.navigator,\n        window: window,\n        document: window.document,\n        performance: window.performance,\n      });\n\n      // Register platform services\n      container.registerPlatformServices();\n    }\n\n    return container;\n  }\n\n  /**\n   * Create a test container with browser API mocks\n   *\n   * @description\n   * This is the main entry point for Jest tests. Creates a container with\n   * mocked browser APIs and platform services suitable for testing.\n   *\n   * @static\n   * @param {Partial<IBrowserAPIs>} [mockAPIs] - Optional custom mock implementations\n   * @returns {ServiceContainer} Container configured for testing\n   *\n   * @example\n   * ```typescript\n   * // In a test file\n   * const container = ServiceContainer.createTestContainer({\n   *   localStorage: customMockStorage\n   * });\n   *\n   * const storage = container.get('storage');\n   * await storage.save('key', 'value');\n   * ```\n   */\n  static createTestContainer(\n    mockAPIs?: Partial<IBrowserAPIs>,\n  ): ServiceContainer {\n    const container = new ServiceContainer();\n\n    // Register mock browser APIs\n    const apis = {\n      localStorage: createMockStorage(),\n      sessionStorage: createMockStorage(),\n      navigator: createMockNavigator(),\n      window: createMockWindow(),\n      document: createMockDocument(),\n      performance: createMockPerformance(),\n      ...mockAPIs,\n    };\n\n    container.registerBrowserAPIs(apis);\n\n    // Register platform services with mocked dependencies\n    container.registerPlatformServices();\n\n    return container;\n  }\n\n  /**\n   * Register a service with type-safe key\n   *\n   * @template K - Key from the ServiceRegistry type\n   * @param {K} key - Service identifier from ServiceRegistry\n   * @param {ServiceFactory<ServiceRegistry[K]>} factory - Factory function to create service\n   * @throws {ServiceAlreadyRegisteredError} If service is already registered\n   *\n   * @example\n   * ```typescript\n   * container.register('storage', (container) => {\n   *   const platform = container.get('platform');\n   *   return new StorageService(platform);\n   * });\n   * ```\n   */\n  register<K extends keyof ServiceRegistry>(\n    key: K,\n    factory: ServiceFactory<ServiceRegistry[K]>,\n  ): void {\n    this.registerInternal(key as string, factory);\n  }\n\n  /**\n   * Register a service with custom key\n   */\n  registerCustom<T>(key: string, factory: ServiceFactory<T>): void {\n    this.registerInternal(key, factory);\n  }\n\n  /**\n   * Internal registration method\n   */\n  private registerInternal(key: string, factory: ServiceFactory<any>): void {\n    if (this.config.validateKeys && this.factories.has(key)) {\n      throw new ServiceAlreadyRegisteredError(key);\n    }\n\n    this.config.logger!(`Registering service: ${key}`);\n    this.factories.set(key, factory);\n\n    // Clear existing instance if re-registering\n    if (this.instances.has(key)) {\n      this.instances.delete(key);\n    }\n  }\n\n  /**\n   * Resolve a service with type-safe key\n   */\n  resolve<K extends keyof ServiceRegistry>(key: K): ServiceRegistry[K] {\n    return this.resolveInternal(key as string);\n  }\n\n  /**\n   * Resolve a custom service\n   */\n  resolveCustom<T>(key: string): T {\n    return this.resolveInternal(key);\n  }\n\n  /**\n   * Internal resolution method\n   */\n  private resolveInternal<T>(key: string): T {\n    // Check for circular dependencies\n    if (this.resolving.has(key)) {\n      const chain = Array.from(this.resolving);\n      chain.push(key);\n      throw new CircularDependencyError(chain);\n    }\n\n    // Return existing instance if using singletons\n    if (this.config.useSingletons && this.instances.has(key)) {\n      this.config.logger!(`Returning cached instance: ${key}`);\n      return this.instances.get(key);\n    }\n\n    // Check if factory is registered\n    const factory = this.factories.get(key);\n    if (!factory) {\n      throw new ServiceNotFoundError(key);\n    }\n\n    // Mark as resolving for circular dependency detection\n    this.resolving.add(key);\n\n    try {\n      this.config.logger!(`Creating instance: ${key}`);\n      const instance = factory(this);\n\n      // Cache instance if using singletons\n      if (this.config.useSingletons) {\n        this.instances.set(key, instance);\n      }\n\n      return instance;\n    } finally {\n      // Always remove from resolving set\n      this.resolving.delete(key);\n    }\n  }\n\n  /**\n   * Check if service is registered (type-safe)\n   */\n  has<K extends keyof ServiceRegistry>(key: K): boolean {\n    return this.factories.has(key as string);\n  }\n\n  /**\n   * Check if custom service is registered\n   */\n  hasCustom(key: string): boolean {\n    return this.factories.has(key);\n  }\n\n  /**\n   * Clear all resolved instances\n   */\n  clearInstances(): void {\n    this.config.logger!(\"Clearing all service instances\");\n    this.instances.clear();\n    this.resolving.clear();\n  }\n\n  /**\n   * Get all registered service keys\n   */\n  getRegisteredKeys(): string[] {\n    return Array.from(this.factories.keys());\n  }\n\n  /**\n   * Get container statistics (useful for debugging)\n   */\n  getStats(): {\n    registeredServices: number;\n    resolvedInstances: number;\n    currentlyResolving: number;\n  } {\n    return {\n      registeredServices: this.factories.size,\n      resolvedInstances: this.instances.size,\n      currentlyResolving: this.resolving.size,\n    };\n  }\n\n  /**\n   * Register browser APIs abstraction\n   */\n  registerBrowserAPIs(\n    apis: Partial<{\n      localStorage: Storage;\n      sessionStorage: Storage;\n      navigator: Navigator;\n      window: Window;\n      document: Document;\n      performance: Performance;\n    }>,\n  ): void {\n    // Register complete browser APIs object\n    if (\n      apis.localStorage &&\n      apis.navigator &&\n      apis.window &&\n      apis.document &&\n      apis.performance\n    ) {\n      this.registerCustom(\"browser.apis\", () => ({\n        localStorage: apis.localStorage!,\n        sessionStorage: apis.sessionStorage || apis.window!.sessionStorage,\n        navigator: apis.navigator!,\n        window: apis.window!,\n        document: apis.document!,\n        performance: apis.performance!,\n      }));\n    }\n\n    // Register individual APIs\n    if (apis.localStorage) {\n      this.registerCustom(\"browser.localStorage\", () => apis.localStorage!);\n    }\n    if (apis.navigator) {\n      this.registerCustom(\"browser.navigator\", () => apis.navigator!);\n    }\n    if (apis.window) {\n      this.registerCustom(\"browser.window\", () => apis.window!);\n    }\n    if (apis.document) {\n      this.registerCustom(\"browser.document\", () => apis.document!);\n    }\n    if (apis.performance) {\n      this.registerCustom(\"browser.performance\", () => apis.performance!);\n    }\n  }\n\n  /**\n   * Register platform services using the existing WebPlatformService\n   */\n  private registerPlatformServices(): void {\n    // For Phase 1, we keep it simple and register a factory that will\n    // import WebPlatformService when first accessed\n    this.registerCustom(\"platform.service\", () => {\n      const {\n        WebPlatformService,\n      } = require(\"../platform/web/WebPlatformService\");\n      return new WebPlatformService();\n    });\n\n    // Register individual services that delegate to the main service\n    this.register(\"platform.storage\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.storage;\n    });\n\n    this.register(\"platform.notifications\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.notifications;\n    });\n\n    this.register(\"platform.device\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.device;\n    });\n\n    this.register(\"platform.performance\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.performance;\n    });\n\n    this.register(\"platform.clipboard\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.clipboard;\n    });\n\n    this.register(\"platform.share\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.share;\n    });\n\n    this.register(\"platform.analytics\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.analytics;\n    });\n  }\n\n  /**\n   * Create a child container with same factories but separate instances\n   */\n  createChild(config?: Partial<ServiceContainerConfig>): ServiceContainer {\n    const child = new ServiceContainer({\n      ...this.config,\n      ...config,\n    });\n\n    // Copy all factories to child\n    this.factories.forEach((factory, key) => {\n      child.factories.set(key, factory);\n    });\n\n    return child;\n  }\n}\n"],"mappings":"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","ignoreList":[]}