{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/chess/gameStatus.ts"],"sourcesContent":["/**\n * @file Game status utilities for chess endgame training\n * @module utils/chess/gameStatus\n *\n * @description\n * Utilities for determining game state information including whose turn it is,\n * training objectives (win/draw/defend), and automatic objective detection\n * based on material balance. Provides localized (German) display strings\n * for UI integration.\n *\n * @remarks\n * Key features:\n * - Turn detection from FEN with German localization\n * - Automatic objective inference from material balance\n * - Support for manual objective override\n * - Visual indicators (emojis) for turn display\n * - Heuristic-based position evaluation\n *\n * The objective detection uses simple but effective heuristics based on\n * material counting and common endgame patterns.\n */\n\nimport { Chess } from \"chess.js\";\n\n/**\n * Complete game status information\n *\n * @interface GameStatus\n * @description\n * Comprehensive status object containing turn information and training\n * objectives for the current position.\n *\n * @property {'white' | 'black'} sideToMove - Which side has the move\n * @property {string} sideToMoveDisplay - Localized turn display (German)\n * @property {'win' | 'draw' | 'defend'} objective - Training goal for the position\n * @property {string} objectiveDisplay - Localized objective text (German)\n * @property {string} icon - Visual indicator emoji for the side to move\n */\nexport interface GameStatus {\n  sideToMove: \"white\" | \"black\";\n  sideToMoveDisplay: string;\n  objective: \"win\" | \"draw\" | \"defend\";\n  objectiveDisplay: string;\n  icon: string;\n}\n\n/**\n * Get current game status from FEN\n *\n * @function getGameStatus\n * @param {string} fen - FEN string representing the current position\n * @param {'win' | 'draw' | 'defend'} [goalFromData] - Optional manual objective override\n * @returns {GameStatus} Complete status information for the position\n *\n * @description\n * Analyzes a chess position to determine turn information and training\n * objectives. Supports both automatic objective detection through material\n * analysis and manual override for specific training scenarios.\n *\n * @example\n * ```typescript\n * // Automatic objective detection\n * const status = getGameStatus('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1');\n * // { sideToMove: 'white', sideToMoveDisplay: 'WeiÃŸ am Zug', ... }\n *\n * // Manual objective override\n * const status = getGameStatus('8/8/8/8/8/8/8/K6k w - - 0 1', 'draw');\n * // { ..., objective: 'draw', objectiveDisplay: 'Ziel: Remis' }\n * ```\n *\n * @remarks\n * Falls back to safe defaults if FEN is invalid. The automatic objective\n * detection uses detectObjective() which applies heuristics based on\n * material balance and endgame patterns.\n */\nexport function getGameStatus(\n  fen: string,\n  goalFromData?: \"win\" | \"draw\" | \"defend\",\n): GameStatus {\n  const chess = new Chess();\n\n  try {\n    chess.load(fen);\n  } catch (error) {\n    // Fallback for invalid FEN\n    return {\n      sideToMove: \"white\",\n      sideToMoveDisplay: \"WeiÃŸ am Zug\",\n      objective: \"win\",\n      objectiveDisplay: \"Ziel: Gewinn\",\n      icon: \"ðŸŸ¢\",\n    };\n  }\n\n  const turn = chess.turn();\n  const sideToMove = turn === \"w\" ? \"white\" : \"black\";\n\n  // Display based on turn\n  const sideToMoveDisplay = turn === \"w\" ? \"WeiÃŸ am Zug\" : \"Schwarz am Zug\";\n\n  const icon = turn === \"w\" ? \"ðŸŸ¢\" : \"âš«\";\n\n  // Objective detection\n  const objective = goalFromData || detectObjective(fen);\n  const objectiveDisplay = getObjectiveDisplay(objective);\n\n  return {\n    sideToMove,\n    sideToMoveDisplay,\n    objective,\n    objectiveDisplay,\n    icon,\n  };\n}\n\n/**\n * Auto-detect objective from position characteristics\n *\n * @function detectObjective\n * @private\n * @param {string} fen - FEN string to analyze\n * @returns {'win' | 'draw' | 'defend'} Detected objective\n *\n * @description\n * Uses heuristic rules to infer the most likely training objective\n * based on material balance and endgame characteristics. The algorithm\n * prioritizes common endgame patterns and material imbalances.\n *\n * @remarks\n * Heuristic rules applied:\n * 1. Material advantage â‰¥3 points â†’ 'win'\n * 2. Pawn endgame with extra pawn â†’ 'win'\n * 3. K+P vs K â†’ 'win'\n * 4. Equal material â†’ 'draw'\n * 5. Default â†’ 'win' (for learning purposes)\n *\n * Material values: Pawn=1, Knight/Bishop=3, Rook=5, Queen=9\n *\n * @example\n * ```typescript\n * // K+P vs K - typically winning\n * detectObjective('8/8/8/8/8/8/P7/K6k w - - 0 1'); // 'win'\n *\n * // Equal material - typically drawing\n * detectObjective('8/8/8/8/8/8/p7/K6k w - - 0 1'); // 'draw'\n * ```\n */\nfunction detectObjective(fen: string): \"win\" | \"draw\" | \"defend\" {\n  const chess = new Chess();\n  chess.load(fen);\n\n  // Count material\n  const board = chess.board();\n  let whiteMaterial = 0;\n  let blackMaterial = 0;\n  let whiteHasPawns = false;\n  let blackHasPawns = false;\n\n  /**\n   * Standard piece values for material calculation\n   * @private\n   */\n  const pieceValues = { p: 1, n: 3, b: 3, r: 5, q: 9, k: 0 };\n\n  for (const row of board) {\n    for (const square of row) {\n      if (square) {\n        const value = pieceValues[square.type];\n        if (square.color === \"w\") {\n          whiteMaterial += value;\n          if (square.type === \"p\") whiteHasPawns = true;\n        } else {\n          blackMaterial += value;\n          if (square.type === \"p\") blackHasPawns = true;\n        }\n      }\n    }\n  }\n\n  // Heuristic rules for objective detection\n  const materialDiff = whiteMaterial - blackMaterial;\n\n  // Strong material advantage usually means winning\n  if (Math.abs(materialDiff) >= 3) {\n    return \"win\";\n  }\n\n  // Pawn endgames with extra pawn often winning\n  if (whiteHasPawns && blackHasPawns && Math.abs(materialDiff) >= 1) {\n    return \"win\";\n  }\n\n  // King + Pawn vs King is usually winning\n  if (\n    (whiteMaterial === 1 && blackMaterial === 0) ||\n    (whiteMaterial === 0 && blackMaterial === 1)\n  ) {\n    return \"win\";\n  }\n\n  // Equal material often draw\n  if (materialDiff === 0) {\n    return \"draw\";\n  }\n\n  // Default to win for learning purposes\n  return \"win\";\n}\n\n/**\n * Get display text for objective\n *\n * @function getObjectiveDisplay\n * @private\n * @param {'win' | 'draw' | 'defend'} objective - Training objective\n * @returns {string} Localized objective text in German\n *\n * @description\n * Converts internal objective codes to user-friendly German text\n * for display in the training interface.\n *\n * @example\n * ```typescript\n * getObjectiveDisplay('win');    // 'Ziel: Gewinn'\n * getObjectiveDisplay('draw');   // 'Ziel: Remis'\n * getObjectiveDisplay('defend'); // 'Ziel: Verteidigen'\n * ```\n *\n * @remarks\n * German translations:\n * - win â†’ \"Gewinn\" (victory)\n * - draw â†’ \"Remis\" (draw)\n * - defend â†’ \"Verteidigen\" (defend)\n */\nfunction getObjectiveDisplay(objective: \"win\" | \"draw\" | \"defend\"): string {\n  switch (objective) {\n    case \"win\":\n      return \"Ziel: Gewinn\";\n    case \"draw\":\n      return \"Ziel: Remis\";\n    case \"defend\":\n      return \"Ziel: Verteidigen\";\n    default:\n      return \"Ziel: Gewinn\";\n  }\n}\n"],"names":["getGameStatus","fen","goalFromData","chess","Chess","load","error","sideToMove","sideToMoveDisplay","objective","objectiveDisplay","icon","turn","detectObjective","getObjectiveDisplay","board","whiteMaterial","blackMaterial","whiteHasPawns","blackHasPawns","pieceValues","p","n","b","r","q","k","row","square","value","type","color","materialDiff","Math","abs"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;CAoBC;;;;+BAuDeA;;;eAAAA;;;uBArDM;AAqDf,SAASA,cACdC,GAAW,EACXC,YAAwC;IAExC,MAAMC,QAAQ,IAAIC,YAAK;IAEvB,IAAI;QACFD,MAAME,IAAI,CAACJ;IACb,EAAE,OAAOK,OAAO;QACd,2BAA2B;QAC3B,OAAO;YACLC,YAAY;YACZC,mBAAmB;YACnBC,WAAW;YACXC,kBAAkB;YAClBC,MAAM;QACR;IACF;IAEA,MAAMC,OAAOT,MAAMS,IAAI;IACvB,MAAML,aAAaK,SAAS,MAAM,UAAU;IAE5C,wBAAwB;IACxB,MAAMJ,oBAAoBI,SAAS,MAAM,gBAAgB;IAEzD,MAAMD,OAAOC,SAAS,MAAM,OAAO;IAEnC,sBAAsB;IACtB,MAAMH,YAAYP,gBAAgBW,gBAAgBZ;IAClD,MAAMS,mBAAmBI,oBAAoBL;IAE7C,OAAO;QACLF;QACAC;QACAC;QACAC;QACAC;IACF;AACF;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BC,GACD,SAASE,gBAAgBZ,GAAW;IAClC,MAAME,QAAQ,IAAIC,YAAK;IACvBD,MAAME,IAAI,CAACJ;IAEX,iBAAiB;IACjB,MAAMc,QAAQZ,MAAMY,KAAK;IACzB,IAAIC,gBAAgB;IACpB,IAAIC,gBAAgB;IACpB,IAAIC,gBAAgB;IACpB,IAAIC,gBAAgB;IAEpB;;;GAGC,GACD,MAAMC,cAAc;QAAEC,GAAG;QAAGC,GAAG;QAAGC,GAAG;QAAGC,GAAG;QAAGC,GAAG;QAAGC,GAAG;IAAE;IAEzD,KAAK,MAAMC,OAAOZ,MAAO;QACvB,KAAK,MAAMa,UAAUD,IAAK;YACxB,IAAIC,QAAQ;gBACV,MAAMC,QAAQT,WAAW,CAACQ,OAAOE,IAAI,CAAC;gBACtC,IAAIF,OAAOG,KAAK,KAAK,KAAK;oBACxBf,iBAAiBa;oBACjB,IAAID,OAAOE,IAAI,KAAK,KAAKZ,gBAAgB;gBAC3C,OAAO;oBACLD,iBAAiBY;oBACjB,IAAID,OAAOE,IAAI,KAAK,KAAKX,gBAAgB;gBAC3C;YACF;QACF;IACF;IAEA,0CAA0C;IAC1C,MAAMa,eAAehB,gBAAgBC;IAErC,kDAAkD;IAClD,IAAIgB,KAAKC,GAAG,CAACF,iBAAiB,GAAG;QAC/B,OAAO;IACT;IAEA,8CAA8C;IAC9C,IAAId,iBAAiBC,iBAAiBc,KAAKC,GAAG,CAACF,iBAAiB,GAAG;QACjE,OAAO;IACT;IAEA,yCAAyC;IACzC,IACE,AAAChB,kBAAkB,KAAKC,kBAAkB,KACzCD,kBAAkB,KAAKC,kBAAkB,GAC1C;QACA,OAAO;IACT;IAEA,4BAA4B;IAC5B,IAAIe,iBAAiB,GAAG;QACtB,OAAO;IACT;IAEA,uCAAuC;IACvC,OAAO;AACT;AAEA;;;;;;;;;;;;;;;;;;;;;;;;CAwBC,GACD,SAASlB,oBAAoBL,SAAoC;IAC/D,OAAQA;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF"}