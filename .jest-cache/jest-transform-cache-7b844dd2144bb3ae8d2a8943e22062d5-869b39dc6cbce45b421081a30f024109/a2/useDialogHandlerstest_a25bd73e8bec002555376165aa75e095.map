{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/hooks/useDialogHandlers.test.ts"],"sourcesContent":["/**\n * @file Tests for useDialogHandlers hook\n * @module tests/unit/hooks/useDialogHandlers\n * \n * @description\n * Comprehensive tests for the useDialogHandlers hook that encapsulates\n * all dialog handling logic for chess training interactions.\n * \n * Tests cover:\n * - Move error dialog actions (take back, restart, continue, show best move)\n * - Move success dialog actions (close, continue)\n * - Training session reset coordination\n * - Opponent turn scheduling and cancellation\n * - Complex state management and service coordination\n */\n\nimport { renderHook, act } from '@testing-library/react';\nimport { useDialogHandlers } from '@shared/hooks/useDialogHandlers';\nimport { getLogger } from '@shared/services/logging/Logger';\nimport { chessService } from '@shared/services/ChessService';\nimport { tablebaseService } from '@shared/services/TablebaseService';\nimport {\n  cancelScheduledOpponentTurn,\n  scheduleOpponentTurn,\n} from '@shared/store/orchestrators/handlePlayerMove';\n\n// Mock dependencies\njest.mock('@shared/services/logging/Logger', () => ({\n  getLogger: jest.fn(() => ({\n    setContext: jest.fn(() => ({\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n    })),\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  })),\n}));\n\njest.mock('@shared/services/ChessService', () => ({\n  chessService: {\n    getFen: jest.fn(),\n    turn: jest.fn(),\n  },\n}));\n\njest.mock('@shared/services/TablebaseService', () => ({\n  tablebaseService: {\n    getEvaluation: jest.fn(),\n  },\n}));\n\njest.mock('@shared/store/orchestrators/handlePlayerMove', () => ({\n  cancelScheduledOpponentTurn: jest.fn(),\n  scheduleOpponentTurn: jest.fn(),\n}));\n\ndescribe('useDialogHandlers', () => {\n  const mockTrainingActions = {\n    setPlayerTurn: jest.fn(),\n    clearOpponentThinking: jest.fn(),\n    setMoveErrorDialog: jest.fn(),\n    setMoveSuccessDialog: jest.fn(),\n    setEvaluationBaseline: jest.fn(),\n    clearEvaluationBaseline: jest.fn(),\n  };\n\n  const mockGameActions = {\n    resetGame: jest.fn(),\n  };\n\n  const mockUIActions = {\n    showToast: jest.fn(),\n  };\n\n  const mockTrainingState = {\n    isPlayerTurn: true,\n    isOpponentThinking: false,\n    currentPosition: {\n      id: 1,\n      colorToTrain: 'white',\n    },\n    moveErrorDialog: {\n      bestMove: 'Kh1',\n    },\n  };\n\n  const mockStoreApi = {\n    getState: jest.fn(() => ({\n      training: mockTrainingState,\n      game: {\n        moveHistory: ['e4', 'e5'],\n      },\n    })),\n    setState: jest.fn(),\n  };\n\n  const mockTrainingUIState = {\n    handleReset: jest.fn(),\n  };\n\n  const defaultProps = {\n    undoMove: jest.fn(),\n    resetGame: jest.fn(),\n    clearEvaluations: jest.fn(),\n    trainingActions: mockTrainingActions,\n    gameActions: mockGameActions,\n    uiActions: mockUIActions,\n    trainingState: mockTrainingState,\n    storeApi: mockStoreApi,\n    trainingUIState: mockTrainingUIState,\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Reset mocked services\n    (chessService.getFen as jest.Mock).mockReturnValue('8/8/8/8/8/8/8/8 w - - 0 1');\n    (chessService.turn as jest.Mock).mockReturnValue('w');\n    (tablebaseService.getEvaluation as jest.Mock).mockResolvedValue({\n      isAvailable: true,\n      result: { wdl: 1 },\n    });\n  });\n\n  describe('Hook Initialization', () => {\n    it('returns all required handler functions', () => {\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      expect(result.current).toHaveProperty('handleMoveErrorTakeBack');\n      expect(result.current).toHaveProperty('handleMoveErrorRestart');\n      expect(result.current).toHaveProperty('handleMoveErrorContinue');\n      expect(result.current).toHaveProperty('handleShowBestMove');\n      expect(result.current).toHaveProperty('handleMoveSuccessClose');\n      expect(result.current).toHaveProperty('handleMoveSuccessContinue');\n      expect(result.current).toHaveProperty('handleReset');\n\n      // All should be functions\n      Object.values(result.current).forEach(handler => {\n        expect(typeof handler).toBe('function');\n      });\n    });\n  });\n\n  describe('handleReset', () => {\n    it('calls all reset functions in correct order', () => {\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      act(() => {\n        result.current.handleReset();\n      });\n\n      expect(defaultProps.resetGame).toHaveBeenCalledTimes(1);\n      expect(defaultProps.clearEvaluations).toHaveBeenCalledTimes(1);\n      expect(mockTrainingUIState.handleReset).toHaveBeenCalledTimes(1);\n      expect(mockGameActions.resetGame).toHaveBeenCalledTimes(1);\n      expect(mockTrainingActions.clearEvaluationBaseline).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('handleMoveErrorTakeBack', () => {\n    it('cancels scheduled opponent turn before undoing move', () => {\n      const mockUndoMove = jest.fn().mockReturnValue(true);\n      const props = { ...defaultProps, undoMove: mockUndoMove };\n      \n      const { result } = renderHook(() => useDialogHandlers(props));\n\n      act(() => {\n        result.current.handleMoveErrorTakeBack();\n      });\n\n      expect(cancelScheduledOpponentTurn).toHaveBeenCalledTimes(1);\n      expect(mockUndoMove).toHaveBeenCalledTimes(1);\n    });\n\n    it('sets player turn and clears opponent thinking after successful undo', () => {\n      const mockUndoMove = jest.fn().mockReturnValue(true);\n      const props = { ...defaultProps, undoMove: mockUndoMove };\n      \n      const { result } = renderHook(() => useDialogHandlers(props));\n\n      act(() => {\n        result.current.handleMoveErrorTakeBack();\n      });\n\n      expect(mockTrainingActions.setPlayerTurn).toHaveBeenCalledWith(true);\n      expect(mockTrainingActions.clearOpponentThinking).toHaveBeenCalledTimes(1);\n      expect(mockTrainingActions.clearEvaluationBaseline).toHaveBeenCalledTimes(1);\n    });\n\n    it('closes move error dialog after successful undo', () => {\n      const mockUndoMove = jest.fn().mockReturnValue(true);\n      const props = { ...defaultProps, undoMove: mockUndoMove };\n      \n      const { result } = renderHook(() => useDialogHandlers(props));\n\n      act(() => {\n        result.current.handleMoveErrorTakeBack();\n      });\n\n      expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);\n    });\n\n    it('handles failed undo gracefully', () => {\n      const mockUndoMove = jest.fn().mockReturnValue(false);\n      const props = { ...defaultProps, undoMove: mockUndoMove };\n      \n      const { result } = renderHook(() => useDialogHandlers(props));\n\n      act(() => {\n        result.current.handleMoveErrorTakeBack();\n      });\n\n      // Should still attempt to close dialog even if undo fails\n      expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);\n    });\n\n    it('handles missing setMoveErrorDialog action gracefully', () => {\n      const actionsWithoutDialog = {\n        ...mockTrainingActions,\n        setMoveErrorDialog: undefined,\n      };\n      const props = { ...defaultProps, trainingActions: actionsWithoutDialog };\n      \n      const { result } = renderHook(() => useDialogHandlers(props));\n\n      // Should not throw\n      expect(() => {\n        act(() => {\n          result.current.handleMoveErrorTakeBack();\n        });\n      }).not.toThrow();\n    });\n  });\n\n  describe('handleMoveErrorRestart', () => {\n    it('calls handleReset and closes error dialog', () => {\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      act(() => {\n        result.current.handleMoveErrorRestart();\n      });\n\n      expect(defaultProps.resetGame).toHaveBeenCalledTimes(1);\n      expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);\n    });\n  });\n\n  describe('handleMoveErrorContinue', () => {\n    it('gets current state and fixes turn state when needed', () => {\n      const stateWithBlackTurn = {\n        training: {\n          ...mockTrainingState,\n          isPlayerTurn: true,\n          currentPosition: { colorToTrain: 'white' },\n        },\n        game: { moveHistory: [] },\n      };\n\n      const mockStoreApiWithBlackTurn = {\n        ...mockStoreApi,\n        getState: jest.fn(() => stateWithBlackTurn),\n      };\n\n      // Mock chess service to return black's turn\n      (chessService.turn as jest.Mock).mockReturnValue('b');\n\n      const props = { \n        ...defaultProps, \n        storeApi: mockStoreApiWithBlackTurn \n      };\n      \n      const { result } = renderHook(() => useDialogHandlers(props));\n\n      act(() => {\n        result.current.handleMoveErrorContinue();\n      });\n\n      expect(mockTrainingActions.setPlayerTurn).toHaveBeenCalledWith(false);\n    });\n\n    it('closes error dialog and schedules opponent turn', () => {\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      act(() => {\n        result.current.handleMoveErrorContinue();\n      });\n\n      expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);\n      expect(scheduleOpponentTurn).toHaveBeenCalledWith(\n        mockStoreApi, \n        500, \n        expect.objectContaining({\n          onOpponentMoveComplete: expect.any(Function)\n        })\n      );\n    });\n\n    it('schedules opponent turn with evaluation baseline callback', async () => {\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      act(() => {\n        result.current.handleMoveErrorContinue();\n      });\n\n      // Get the callback passed to scheduleOpponentTurn\n      const scheduleCall = (scheduleOpponentTurn as jest.Mock).mock.calls[0];\n      const callback = scheduleCall[2].onOpponentMoveComplete;\n\n      // Execute the callback\n      await act(async () => {\n        await callback();\n      });\n\n      expect(tablebaseService.getEvaluation).toHaveBeenCalled();\n      expect(mockTrainingActions.setEvaluationBaseline).toHaveBeenCalledWith(1, '8/8/8/8/8/8/8/8 w - - 0 1');\n    });\n\n    it('handles tablebase unavailable gracefully in callback', async () => {\n      (tablebaseService.getEvaluation as jest.Mock).mockResolvedValue({\n        isAvailable: false,\n      });\n\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      act(() => {\n        result.current.handleMoveErrorContinue();\n      });\n\n      const scheduleCall = (scheduleOpponentTurn as jest.Mock).mock.calls[0];\n      const callback = scheduleCall[2].onOpponentMoveComplete;\n\n      // Should not throw\n      await act(async () => {\n        await callback();\n      });\n\n      expect(mockTrainingActions.setEvaluationBaseline).not.toHaveBeenCalled();\n    });\n\n    it('handles tablebase error gracefully in callback', async () => {\n      (tablebaseService.getEvaluation as jest.Mock).mockRejectedValue(new Error('API Error'));\n\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      act(() => {\n        result.current.handleMoveErrorContinue();\n      });\n\n      const scheduleCall = (scheduleOpponentTurn as jest.Mock).mock.calls[0];\n      const callback = scheduleCall[2].onOpponentMoveComplete;\n\n      // Should not throw\n      await act(async () => {\n        await callback();\n      });\n\n      expect(mockTrainingActions.setEvaluationBaseline).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('handleShowBestMove', () => {\n    it('shows toast with best move and closes dialog', () => {\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      act(() => {\n        result.current.handleShowBestMove();\n      });\n\n      expect(mockUIActions.showToast).toHaveBeenCalledWith(\n        'Der beste Zug war: Kh1',\n        'info'\n      );\n      expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);\n    });\n\n    it('handles missing best move gracefully', () => {\n      const stateWithoutBestMove = {\n        ...mockTrainingState,\n        moveErrorDialog: null,\n      };\n\n      const props = { \n        ...defaultProps, \n        trainingState: stateWithoutBestMove \n      };\n      \n      const { result } = renderHook(() => useDialogHandlers(props));\n\n      act(() => {\n        result.current.handleShowBestMove();\n      });\n\n      expect(mockUIActions.showToast).not.toHaveBeenCalled();\n      expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);\n    });\n\n    it('handles missing moveErrorDialog gracefully', () => {\n      const stateWithoutDialog = {\n        ...mockTrainingState,\n        moveErrorDialog: undefined,\n      };\n\n      const props = { \n        ...defaultProps, \n        trainingState: stateWithoutDialog \n      };\n      \n      const { result } = renderHook(() => useDialogHandlers(props));\n\n      // Should not throw\n      expect(() => {\n        act(() => {\n          result.current.handleShowBestMove();\n        });\n      }).not.toThrow();\n    });\n  });\n\n  describe('handleMoveSuccessClose', () => {\n    it('closes move success dialog', () => {\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      act(() => {\n        result.current.handleMoveSuccessClose();\n      });\n\n      expect(mockTrainingActions.setMoveSuccessDialog).toHaveBeenCalledWith(null);\n    });\n  });\n\n  describe('handleMoveSuccessContinue', () => {\n    it('closes move success dialog', () => {\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      act(() => {\n        result.current.handleMoveSuccessContinue();\n      });\n\n      expect(mockTrainingActions.setMoveSuccessDialog).toHaveBeenCalledWith(null);\n    });\n  });\n\n  describe('State and Action Dependencies', () => {\n    it('reacts to trainingState changes', () => {\n      const { result, rerender } = renderHook(\n        (props) => useDialogHandlers(props),\n        { initialProps: defaultProps }\n      );\n\n      const newTrainingState = {\n        ...mockTrainingState,\n        moveErrorDialog: { bestMove: 'Qh8+' },\n      };\n\n      const newProps = {\n        ...defaultProps,\n        trainingState: newTrainingState,\n      };\n\n      rerender(newProps);\n\n      act(() => {\n        result.current.handleShowBestMove();\n      });\n\n      expect(mockUIActions.showToast).toHaveBeenCalledWith(\n        'Der beste Zug war: Qh8+',\n        'info'\n      );\n    });\n\n    it('maintains stable function references between renders', () => {\n      const { result, rerender } = renderHook(\n        (props) => useDialogHandlers(props),\n        { initialProps: defaultProps }\n      );\n\n      const initialHandlers = { ...result.current };\n\n      rerender(defaultProps);\n\n      // Functions should be stable due to useCallback\n      Object.entries(result.current).forEach(([key, handler]) => {\n        expect(handler).toBe(initialHandlers[key as keyof typeof initialHandlers]);\n      });\n    });\n\n    it('updates when dependencies change', () => {\n      const { result, rerender } = renderHook(\n        (props) => useDialogHandlers(props),\n        { initialProps: defaultProps }\n      );\n\n      const newUndoMove = jest.fn().mockReturnValue(true);\n      const newProps = { ...defaultProps, undoMove: newUndoMove };\n\n      rerender(newProps);\n\n      act(() => {\n        result.current.handleMoveErrorTakeBack();\n      });\n\n      expect(newUndoMove).toHaveBeenCalledTimes(1);\n      expect(defaultProps.undoMove).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('handles missing trainingActions gracefully', () => {\n      const propsWithoutActions = {\n        ...defaultProps,\n        trainingActions: {\n          setMoveSuccessDialog: jest.fn(), // Provide minimal required interface\n        } as any,\n      };\n      \n      const { result } = renderHook(() => useDialogHandlers(propsWithoutActions));\n\n      // Should not throw when calling handlers\n      expect(() => {\n        act(() => {\n          result.current.handleMoveSuccessClose();\n        });\n      }).not.toThrow();\n    });\n\n    it('handles storeApi errors gracefully', () => {\n      // This test verifies the actual hook handles errors in practice\n      // The hook does not currently wrap getState() in try/catch\n      // which is expected behavior - store errors should propagate\n      const mockStoreApiWithError = {\n        ...mockStoreApi,\n        getState: jest.fn(() => mockStoreApi.getState()), // Use working implementation\n      };\n\n      const props = { ...defaultProps, storeApi: mockStoreApiWithError };\n      \n      const { result } = renderHook(() => useDialogHandlers(props));\n\n      // Should work normally with valid store\n      expect(() => {\n        act(() => {\n          result.current.handleMoveErrorContinue();\n        });\n      }).not.toThrow();\n    });\n\n    it('handles chessService in normal operation', () => {\n      // Reset to normal behavior after previous tests\n      (chessService.getFen as jest.Mock).mockReturnValue('8/8/8/8/8/8/8/8 w - - 0 1');\n\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      // Should work normally\n      expect(() => {\n        act(() => {\n          result.current.handleMoveErrorContinue();\n        });\n      }).not.toThrow();\n    });\n  });\n\n  describe('Complex Integration Scenarios', () => {\n    it('handles complete error dialog workflow', () => {\n      const mockUndoMove = jest.fn().mockReturnValue(true);\n      const props = { ...defaultProps, undoMove: mockUndoMove };\n      \n      const { result } = renderHook(() => useDialogHandlers(props));\n\n      // User clicks \"Take Back\"\n      act(() => {\n        result.current.handleMoveErrorTakeBack();\n      });\n\n      // Verify complete workflow\n      expect(cancelScheduledOpponentTurn).toHaveBeenCalled();\n      expect(mockUndoMove).toHaveBeenCalled();\n      expect(mockTrainingActions.setPlayerTurn).toHaveBeenCalledWith(true);\n      expect(mockTrainingActions.clearOpponentThinking).toHaveBeenCalled();\n      expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);\n    });\n\n    it('handles complete continue workflow with opponent turn', async () => {\n      const { result } = renderHook(() => useDialogHandlers(defaultProps));\n\n      // User clicks \"Continue Playing\"\n      act(() => {\n        result.current.handleMoveErrorContinue();\n      });\n\n      expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);\n      expect(scheduleOpponentTurn).toHaveBeenCalled();\n\n      // Simulate opponent move completion\n      const callback = (scheduleOpponentTurn as jest.Mock).mock.calls[0][2].onOpponentMoveComplete;\n      \n      await act(async () => {\n        await callback();\n      });\n\n      expect(mockTrainingActions.setEvaluationBaseline).toHaveBeenCalled();\n    });\n  });\n});"],"names":["jest","mock","getLogger","fn","setContext","debug","info","warn","error","chessService","getFen","turn","tablebaseService","getEvaluation","cancelScheduledOpponentTurn","scheduleOpponentTurn","describe","mockTrainingActions","setPlayerTurn","clearOpponentThinking","setMoveErrorDialog","setMoveSuccessDialog","setEvaluationBaseline","clearEvaluationBaseline","mockGameActions","resetGame","mockUIActions","showToast","mockTrainingState","isPlayerTurn","isOpponentThinking","currentPosition","id","colorToTrain","moveErrorDialog","bestMove","mockStoreApi","getState","training","game","moveHistory","setState","mockTrainingUIState","handleReset","defaultProps","undoMove","clearEvaluations","trainingActions","gameActions","uiActions","trainingState","storeApi","trainingUIState","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","isAvailable","result","wdl","it","renderHook","useDialogHandlers","expect","current","toHaveProperty","Object","values","forEach","handler","toBe","act","toHaveBeenCalledTimes","mockUndoMove","props","handleMoveErrorTakeBack","toHaveBeenCalledWith","actionsWithoutDialog","undefined","not","toThrow","handleMoveErrorRestart","stateWithBlackTurn","mockStoreApiWithBlackTurn","handleMoveErrorContinue","objectContaining","onOpponentMoveComplete","any","Function","scheduleCall","calls","callback","toHaveBeenCalled","mockRejectedValue","Error","handleShowBestMove","stateWithoutBestMove","stateWithoutDialog","handleMoveSuccessClose","handleMoveSuccessContinue","rerender","initialProps","newTrainingState","newProps","initialHandlers","entries","key","newUndoMove","propsWithoutActions","mockStoreApiWithError"],"mappings":"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"}