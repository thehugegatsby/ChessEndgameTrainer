{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/helpers/validatedMoveFactory.ts"],"sourcesContent":["/**\n * Test factory for creating ValidatedMove objects\n *\n * This utility creates ValidatedMove objects for testing purposes by leveraging\n * the base createTestMove factory and applying the necessary branding.\n *\n * IMPORTANT: This should ONLY be used in tests, as it bypasses any real\n * validation logic that might exist in the application.\n */\n\nimport { createTestMove, type CreateMoveOptions } from \"./moveFactory\";\nimport type { ValidatedMove } from \"@shared/types/chess\";\n\n/**\n * Creates a ValidatedMove for testing purposes\n *\n * This is the single, controlled location for type assertion to ValidatedMove.\n * We encapsulate the \"lie\" to TypeScript here so tests remain clean and type-safe.\n *\n * @param options - The options to create the base move\n * @returns A ValidatedMove object for use in tests\n *\n * @example\n * ```typescript\n * const move = createTestValidatedMove({\n *   from: 'e2',\n *   to: 'e4',\n *   piece: 'p',\n *   san: 'e4'\n * });\n * ```\n */\nexport const createTestValidatedMove = (options: CreateMoveOptions): ValidatedMove => {\n  const baseMove = createTestMove(options);\n\n  // Single controlled type assertion - this is the only place we \"lie\" to TypeScript\n  // Since ValidatedMove extends Move with branded symbols, this cast is sufficient for tests\n  return baseMove as ValidatedMove;\n};\n\n/**\n * Common validated test moves for reuse across test files\n */\nexport const VALIDATED_TEST_MOVES = {\n  E2E4: createTestValidatedMove({\n    from: \"e2\",\n    to: \"e4\",\n    piece: \"p\",\n    san: \"e4\",\n  }),\n  E7E5: createTestValidatedMove({\n    from: \"e7\",\n    to: \"e5\",\n    piece: \"p\",\n    color: \"b\",\n    san: \"e5\",\n  }),\n  NG1F3: createTestValidatedMove({\n    from: \"g1\",\n    to: \"f3\",\n    piece: \"n\",\n    san: \"Nf3\",\n  }),\n  KINGSIDE_CASTLE: createTestValidatedMove({\n    from: \"e1\",\n    to: \"g1\",\n    piece: \"k\",\n    san: \"O-O\",\n  }),\n  CAPTURE: createTestValidatedMove({\n    from: \"e4\",\n    to: \"d5\",\n    piece: \"p\",\n    captured: \"p\",\n    san: \"exd5\",\n  }),\n  PROMOTION: createTestValidatedMove({\n    from: \"e7\",\n    to: \"e8\",\n    piece: \"p\",\n    promotion: \"q\",\n    san: \"e8=Q\",\n  }),\n} as const;\n\n// Legacy export for compatibility - factory object with create method\nexport const validatedMoveFactory = {\n  create: createTestValidatedMove,\n};\n"],"names":["VALIDATED_TEST_MOVES","createTestValidatedMove","validatedMoveFactory","options","baseMove","createTestMove","E2E4","from","to","piece","san","E7E5","color","NG1F3","KINGSIDE_CASTLE","CAPTURE","captured","PROMOTION","promotion","create"],"mappings":"AAAA;;;;;;;;CAQC;;;;;;;;;;;QAmCYA;eAAAA;;QAXAC;eAAAA;;QAsDAC;eAAAA;;;6BA5E0C;AAsBhD,MAAMD,0BAA0B,CAACE;IACtC,MAAMC,WAAWC,IAAAA,2BAAc,EAACF;IAEhC,mFAAmF;IACnF,2FAA2F;IAC3F,OAAOC;AACT;AAKO,MAAMJ,uBAAuB;IAClCM,MAAML,wBAAwB;QAC5BM,MAAM;QACNC,IAAI;QACJC,OAAO;QACPC,KAAK;IACP;IACAC,MAAMV,wBAAwB;QAC5BM,MAAM;QACNC,IAAI;QACJC,OAAO;QACPG,OAAO;QACPF,KAAK;IACP;IACAG,OAAOZ,wBAAwB;QAC7BM,MAAM;QACNC,IAAI;QACJC,OAAO;QACPC,KAAK;IACP;IACAI,iBAAiBb,wBAAwB;QACvCM,MAAM;QACNC,IAAI;QACJC,OAAO;QACPC,KAAK;IACP;IACAK,SAASd,wBAAwB;QAC/BM,MAAM;QACNC,IAAI;QACJC,OAAO;QACPO,UAAU;QACVN,KAAK;IACP;IACAO,WAAWhB,wBAAwB;QACjCM,MAAM;QACNC,IAAI;QACJC,OAAO;QACPS,WAAW;QACXR,KAAK;IACP;AACF;AAGO,MAAMR,uBAAuB;IAClCiB,QAAQlB;AACV"}