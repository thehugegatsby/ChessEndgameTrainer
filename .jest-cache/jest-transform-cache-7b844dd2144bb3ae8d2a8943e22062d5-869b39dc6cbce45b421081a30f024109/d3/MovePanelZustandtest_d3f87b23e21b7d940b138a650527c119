04808774c2d129fcfca26ae21de944e6
"use strict";
// Mock the store hooks directly
jest.mock("@shared/store/hooks");
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _MovePanelZustand = require("../../../shared/components/training/MovePanelZustand");
const _validatedMoveFactory = require("../../helpers/validatedMoveFactory");
const _fenPositions = require("../../fixtures/fenPositions");
const _hooks = require("../../../shared/store/hooks");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("MovePanelZustand", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it("should display moves from Zustand store", ()=>{
        // Use centralized opening sequence for consistent testing
        const openingSequence = (0, _fenPositions.getOpeningSequence)();
        const mockMoves = [
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "e2",
                to: "e4",
                piece: "p",
                san: "e4",
                before: openingSequence.startPosition,
                after: openingSequence.positions[0].after
            }),
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "e7",
                to: "e5",
                piece: "p",
                color: "b",
                san: "e5",
                before: openingSequence.positions[0].after,
                after: openingSequence.positions[1].after
            }),
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "g1",
                to: "f3",
                piece: "n",
                san: "Nf3",
                before: openingSequence.positions[1].after,
                after: openingSequence.positions[2].after
            })
        ];
        _hooks.useGameStore.mockReturnValue([
            {
                currentFen: openingSequence.positions[2].after,
                currentPgn: "1. e4 e5 2. Nf3",
                moveHistory: mockMoves,
                currentMoveIndex: 2,
                isGameFinished: false,
                gameResult: null
            },
            {}
        ]);
        _hooks.useTablebaseStore.mockReturnValue([
            {
                analysisStatus: "idle",
                evaluations: [],
                tablebaseMove: undefined,
                currentEvaluation: undefined
            },
            {}
        ]);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MovePanelZustand.MovePanelZustand, {
            onMoveClick: jest.fn()
        }));
        expect(_react1.screen.getByText("e4")).toBeInTheDocument();
        expect(_react1.screen.getByText("e5")).toBeInTheDocument();
        expect(_react1.screen.getByText("Nf3")).toBeInTheDocument();
    });
    it("should display evaluations when showEvaluations is true", ()=>{
        const openingSequence = (0, _fenPositions.getOpeningSequence)();
        const mockMoves = [
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "e2",
                to: "e4",
                piece: "p",
                san: "e4",
                before: openingSequence.startPosition,
                after: openingSequence.positions[0].after
            })
        ];
        const mockEvaluations = [
            {
                fen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
                evaluation: 0
            },
            {
                fen: "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1",
                evaluation: 0.3,
                tablebase: {
                    isTablebasePosition: false
                }
            }
        ];
        _hooks.useGameStore.mockReturnValue([
            {
                currentFen: openingSequence.positions[2].after,
                currentPgn: "1. e4 e5 2. Nf3",
                moveHistory: mockMoves,
                currentMoveIndex: 2,
                isGameFinished: false,
                gameResult: null
            },
            {}
        ]);
        _hooks.useTablebaseStore.mockReturnValue([
            {
                analysisStatus: "idle",
                evaluations: mockEvaluations,
                tablebaseMove: undefined,
                currentEvaluation: undefined
            },
            {}
        ]);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MovePanelZustand.MovePanelZustand, {
            showEvaluations: true,
            onMoveClick: jest.fn()
        }));
        // Should show the move
        expect(_react1.screen.getByText("e4")).toBeInTheDocument();
        // Should show evaluation indicator (⚪ for neutral evaluation)
        expect(_react1.screen.getByText("⚪")).toBeInTheDocument();
    });
    it("should handle move click events", ()=>{
        const openingSequence = (0, _fenPositions.getOpeningSequence)();
        const onMoveClickMock = jest.fn();
        const mockMoves = [
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "e2",
                to: "e4",
                piece: "p",
                san: "e4",
                before: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
                after: "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1"
            }),
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "e7",
                to: "e5",
                piece: "p",
                color: "b",
                san: "e5",
                before: "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1",
                after: "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2"
            })
        ];
        _hooks.useGameStore.mockReturnValue([
            {
                currentFen: openingSequence.positions[2].after,
                currentPgn: "1. e4 e5 2. Nf3",
                moveHistory: mockMoves,
                currentMoveIndex: 2,
                isGameFinished: false,
                gameResult: null
            },
            {}
        ]);
        _hooks.useTablebaseStore.mockReturnValue([
            {
                analysisStatus: "idle",
                evaluations: [],
                tablebaseMove: undefined,
                currentEvaluation: undefined
            },
            {}
        ]);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MovePanelZustand.MovePanelZustand, {
            onMoveClick: onMoveClickMock
        }));
        _react1.fireEvent.click(_react1.screen.getByText("e4"));
        expect(onMoveClickMock).toHaveBeenCalledWith(0);
        _react1.fireEvent.click(_react1.screen.getByText("e5"));
        expect(onMoveClickMock).toHaveBeenCalledWith(1);
    });
    it("should highlight current move", ()=>{
        const openingSequence = (0, _fenPositions.getOpeningSequence)();
        const mockMoves = [
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "e2",
                to: "e4",
                piece: "p",
                san: "e4",
                before: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
                after: "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1"
            }),
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "e7",
                to: "e5",
                piece: "p",
                color: "b",
                san: "e5",
                before: "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1",
                after: "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2"
            })
        ];
        _hooks.useGameStore.mockReturnValue([
            {
                currentFen: openingSequence.positions[2].after,
                currentPgn: "1. e4 e5 2. Nf3",
                moveHistory: mockMoves,
                currentMoveIndex: 2,
                isGameFinished: false,
                gameResult: null
            },
            {}
        ]);
        _hooks.useTablebaseStore.mockReturnValue([
            {
                analysisStatus: "idle",
                evaluations: [],
                tablebaseMove: undefined,
                currentEvaluation: undefined
            },
            {}
        ]);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MovePanelZustand.MovePanelZustand, {
            onMoveClick: jest.fn(),
            currentMoveIndex: 1
        }));
        const e4Button = _react1.screen.getByText("e4");
        const e5Button = _react1.screen.getByText("e5");
        // e5 should be highlighted (currentMoveIndex = 1)
        expect(e5Button.className).toContain("text-blue-400");
        expect(e5Button.className).toContain("bg-blue-900/30");
        // e4 should not be highlighted
        expect(e4Button.className).toContain("text-white");
        expect(e4Button.className).not.toContain("bg-blue-900/30");
    });
    it("should display tablebase evaluations when available", ()=>{
        const openingSequence = (0, _fenPositions.getOpeningSequence)();
        const mockMoves = [
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "e2",
                to: "e4",
                piece: "p",
                san: "e4",
                before: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
                after: "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1"
            })
        ];
        const mockEvaluations = [
            {
                fen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
                evaluation: 0
            },
            {
                fen: "rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1",
                evaluation: 0.3,
                tablebase: {
                    isTablebasePosition: true,
                    wdlBefore: 2,
                    wdlAfter: -2,
                    category: "win"
                }
            }
        ];
        _hooks.useGameStore.mockReturnValue([
            {
                currentFen: openingSequence.positions[2].after,
                currentPgn: "1. e4 e5 2. Nf3",
                moveHistory: mockMoves,
                currentMoveIndex: 2,
                isGameFinished: false,
                gameResult: null
            },
            {}
        ]);
        _hooks.useTablebaseStore.mockReturnValue([
            {
                analysisStatus: "idle",
                evaluations: mockEvaluations,
                tablebaseMove: undefined,
                currentEvaluation: undefined
            },
            {}
        ]);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MovePanelZustand.MovePanelZustand, {
            showEvaluations: true,
            onMoveClick: jest.fn()
        }));
        // SIMPLIFIED: Check that evaluation is shown (symbol may vary)
        expect(_react1.screen.getByTestId("move-evaluation")).toBeInTheDocument();
    });
    it("should show empty state when no moves", ()=>{
        _hooks.useGameStore.mockReturnValue([
            {
                currentFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
                currentPgn: "",
                moveHistory: [],
                currentMoveIndex: -1,
                isGameFinished: false,
                gameResult: null
            },
            {}
        ]);
        _hooks.useTablebaseStore.mockReturnValue([
            {
                analysisStatus: "idle",
                evaluations: [],
                tablebaseMove: undefined,
                currentEvaluation: undefined
            },
            {}
        ]);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MovePanelZustand.MovePanelZustand, {
            onMoveClick: jest.fn()
        }));
        expect(_react1.screen.getByText("Noch keine Züge gespielt")).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,