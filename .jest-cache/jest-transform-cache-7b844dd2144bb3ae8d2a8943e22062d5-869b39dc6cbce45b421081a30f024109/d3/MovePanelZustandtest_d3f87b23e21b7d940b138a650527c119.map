{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/components/MovePanelZustand.test.tsx"],"sourcesContent":["import React from \"react\";\nimport { render, screen, fireEvent } from \"@testing-library/react\";\nimport { MovePanelZustand } from \"@shared/components/training/MovePanelZustand\";\nimport { createTestValidatedMove } from \"../../helpers/validatedMoveFactory\";\nimport { getOpeningSequence } from \"../../fixtures/fenPositions\";\n\n// Mock the store hooks directly\njest.mock(\"@shared/store/hooks\");\n\nimport { useGameStore, useTablebaseStore } from \"@shared/store/hooks\";\n\ndescribe(\"MovePanelZustand\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it(\"should display moves from Zustand store\", () => {\n    // Use centralized opening sequence for consistent testing\n    const openingSequence = getOpeningSequence();\n    const mockMoves = [\n      createTestValidatedMove({\n        from: \"e2\",\n        to: \"e4\",\n        piece: \"p\",\n        san: \"e4\",\n        before: openingSequence.startPosition,\n        after: openingSequence.positions[0].after,\n      }),\n      createTestValidatedMove({\n        from: \"e7\",\n        to: \"e5\",\n        piece: \"p\",\n        color: \"b\",\n        san: \"e5\",\n        before: openingSequence.positions[0].after,\n        after: openingSequence.positions[1].after,\n      }),\n      createTestValidatedMove({\n        from: \"g1\",\n        to: \"f3\",\n        piece: \"n\",\n        san: \"Nf3\",\n        before: openingSequence.positions[1].after,\n        after: openingSequence.positions[2].after,\n      }),\n    ];\n\n    (useGameStore as jest.Mock).mockReturnValue([{\n      currentFen: openingSequence.positions[2].after,\n      currentPgn: \"1. e4 e5 2. Nf3\",\n      moveHistory: mockMoves,\n      currentMoveIndex: 2,\n      isGameFinished: false,\n      gameResult: null,\n    }, {}]);\n    \n    (useTablebaseStore as jest.Mock).mockReturnValue([{\n      analysisStatus: \"idle\",\n      evaluations: [],\n      tablebaseMove: undefined,\n      currentEvaluation: undefined,\n    }, {}]);\n\n    render(<MovePanelZustand onMoveClick={jest.fn()} />);\n\n    expect(screen.getByText(\"e4\")).toBeInTheDocument();\n    expect(screen.getByText(\"e5\")).toBeInTheDocument();\n    expect(screen.getByText(\"Nf3\")).toBeInTheDocument();\n  });\n\n  it(\"should display evaluations when showEvaluations is true\", () => {\n    const openingSequence = getOpeningSequence();\n    const mockMoves = [\n      createTestValidatedMove({\n        from: \"e2\",\n        to: \"e4\",\n        piece: \"p\",\n        san: \"e4\",\n        before: openingSequence.startPosition,\n        after: openingSequence.positions[0].after,\n      }),\n    ];\n\n    const mockEvaluations = [\n      {\n        fen: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n        evaluation: 0,\n      }, // Initial position\n      {\n        fen: \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1\",\n        evaluation: 0.3,\n        tablebase: { isTablebasePosition: false },\n      }, // After e4\n    ];\n\n    (useGameStore as jest.Mock).mockReturnValue([{\n      currentFen: openingSequence.positions[2].after,\n      currentPgn: \"1. e4 e5 2. Nf3\",\n      moveHistory: mockMoves,\n      currentMoveIndex: 2,\n      isGameFinished: false,\n      gameResult: null,\n    }, {}]);\n    \n    (useTablebaseStore as jest.Mock).mockReturnValue([{\n      analysisStatus: \"idle\",\n      evaluations: mockEvaluations,\n      tablebaseMove: undefined,\n      currentEvaluation: undefined,\n    }, {}]);\n\n    render(<MovePanelZustand showEvaluations={true} onMoveClick={jest.fn()} />);\n\n    // Should show the move\n    expect(screen.getByText(\"e4\")).toBeInTheDocument();\n    // Should show evaluation indicator (⚪ for neutral evaluation)\n    expect(screen.getByText(\"⚪\")).toBeInTheDocument();\n  });\n\n  it(\"should handle move click events\", () => {\n    const openingSequence = getOpeningSequence();\n    const onMoveClickMock = jest.fn();\n    const mockMoves = [\n      createTestValidatedMove({\n        from: \"e2\",\n        to: \"e4\",\n        piece: \"p\",\n        san: \"e4\",\n        before: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n        after: \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1\",\n      }),\n      createTestValidatedMove({\n        from: \"e7\",\n        to: \"e5\",\n        piece: \"p\",\n        color: \"b\",\n        san: \"e5\",\n        before: \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1\",\n        after: \"rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2\",\n      }),\n    ];\n\n    (useGameStore as jest.Mock).mockReturnValue([{\n      currentFen: openingSequence.positions[2].after,\n      currentPgn: \"1. e4 e5 2. Nf3\",\n      moveHistory: mockMoves,\n      currentMoveIndex: 2,\n      isGameFinished: false,\n      gameResult: null,\n    }, {}]);\n    \n    (useTablebaseStore as jest.Mock).mockReturnValue([{\n      analysisStatus: \"idle\",\n      evaluations: [],\n      tablebaseMove: undefined,\n      currentEvaluation: undefined,\n    }, {}]);\n\n    render(<MovePanelZustand onMoveClick={onMoveClickMock} />);\n\n    fireEvent.click(screen.getByText(\"e4\"));\n    expect(onMoveClickMock).toHaveBeenCalledWith(0);\n\n    fireEvent.click(screen.getByText(\"e5\"));\n    expect(onMoveClickMock).toHaveBeenCalledWith(1);\n  });\n\n  it(\"should highlight current move\", () => {\n    const openingSequence = getOpeningSequence();\n    const mockMoves = [\n      createTestValidatedMove({\n        from: \"e2\",\n        to: \"e4\",\n        piece: \"p\",\n        san: \"e4\",\n        before: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n        after: \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1\",\n      }),\n      createTestValidatedMove({\n        from: \"e7\",\n        to: \"e5\",\n        piece: \"p\",\n        color: \"b\",\n        san: \"e5\",\n        before: \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1\",\n        after: \"rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2\",\n      }),\n    ];\n\n    (useGameStore as jest.Mock).mockReturnValue([{\n      currentFen: openingSequence.positions[2].after,\n      currentPgn: \"1. e4 e5 2. Nf3\",\n      moveHistory: mockMoves,\n      currentMoveIndex: 2,\n      isGameFinished: false,\n      gameResult: null,\n    }, {}]);\n    \n    (useTablebaseStore as jest.Mock).mockReturnValue([{\n      analysisStatus: \"idle\",\n      evaluations: [],\n      tablebaseMove: undefined,\n      currentEvaluation: undefined,\n    }, {}]);\n\n    render(<MovePanelZustand onMoveClick={jest.fn()} currentMoveIndex={1} />);\n\n    const e4Button = screen.getByText(\"e4\");\n    const e5Button = screen.getByText(\"e5\");\n\n    // e5 should be highlighted (currentMoveIndex = 1)\n    expect(e5Button.className).toContain(\"text-blue-400\");\n    expect(e5Button.className).toContain(\"bg-blue-900/30\");\n\n    // e4 should not be highlighted\n    expect(e4Button.className).toContain(\"text-white\");\n    expect(e4Button.className).not.toContain(\"bg-blue-900/30\");\n  });\n\n  it(\"should display tablebase evaluations when available\", () => {\n    const openingSequence = getOpeningSequence();\n    const mockMoves = [\n      createTestValidatedMove({\n        from: \"e2\",\n        to: \"e4\",\n        piece: \"p\",\n        san: \"e4\",\n        before: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n        after: \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1\",\n      }),\n    ];\n\n    const mockEvaluations = [\n      {\n        fen: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n        evaluation: 0,\n      }, // Initial position\n      {\n        fen: \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1\",\n        evaluation: 0.3,\n        tablebase: {\n          isTablebasePosition: true,\n          wdlBefore: 2, // Win for white (white to move)\n          wdlAfter: -2, // Still win (but from black's perspective after white's move)\n          category: \"win\",\n        },\n      },\n    ];\n\n    (useGameStore as jest.Mock).mockReturnValue([{\n      currentFen: openingSequence.positions[2].after,\n      currentPgn: \"1. e4 e5 2. Nf3\",\n      moveHistory: mockMoves,\n      currentMoveIndex: 2,\n      isGameFinished: false,\n      gameResult: null,\n    }, {}]);\n    \n    (useTablebaseStore as jest.Mock).mockReturnValue([{\n      analysisStatus: \"idle\",\n      evaluations: mockEvaluations,\n      tablebaseMove: undefined,\n      currentEvaluation: undefined,\n    }, {}]);\n\n    render(<MovePanelZustand showEvaluations={true} onMoveClick={jest.fn()} />);\n\n    // SIMPLIFIED: Check that evaluation is shown (symbol may vary)\n    expect(screen.getByTestId(\"move-evaluation\")).toBeInTheDocument();\n  });\n\n  it(\"should show empty state when no moves\", () => {\n    (useGameStore as jest.Mock).mockReturnValue([{\n      currentFen: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n      currentPgn: \"\",\n      moveHistory: [],\n      currentMoveIndex: -1,\n      isGameFinished: false,\n      gameResult: null,\n    }, {}]);\n    \n    (useTablebaseStore as jest.Mock).mockReturnValue([{\n      analysisStatus: \"idle\",\n      evaluations: [],\n      tablebaseMove: undefined,\n      currentEvaluation: undefined,\n    }, {}]);\n\n    render(<MovePanelZustand onMoveClick={jest.fn()} />);\n\n    expect(screen.getByText(\"Noch keine Züge gespielt\")).toBeInTheDocument();\n  });\n});\n"],"names":["jest","mock","describe","beforeEach","clearAllMocks","it","openingSequence","getOpeningSequence","mockMoves","createTestValidatedMove","from","to","piece","san","before","startPosition","after","positions","color","useGameStore","mockReturnValue","currentFen","currentPgn","moveHistory","currentMoveIndex","isGameFinished","gameResult","useTablebaseStore","analysisStatus","evaluations","tablebaseMove","undefined","currentEvaluation","render","MovePanelZustand","onMoveClick","fn","expect","screen","getByText","toBeInTheDocument","mockEvaluations","fen","evaluation","tablebase","isTablebasePosition","showEvaluations","onMoveClickMock","fireEvent","click","toHaveBeenCalledWith","e4Button","e5Button","className","toContain","not","wdlBefore","wdlAfter","category","getByTestId"],"mappings":"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"}