{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/ui/MoveSuccessDialog.tsx"],"sourcesContent":["/**\n * @file Move success dialog component for chess training\n * @module components/ui/MoveSuccessDialog\n *\n * @description\n * Modal dialog that appears when a player makes a successful pawn promotion\n * that leads to a winning position. Provides congratulatory feedback\n * with a visually striking green gradient design to celebrate success.\n *\n * @remarks\n * Key features:\n * - Dynamic success messages based on promotion piece\n * - Green gradient border design for positive reinforcement\n * - Options to continue or replay\n * - German language interface\n * - Backdrop click to close\n * - Responsive design\n *\n * The component shows different messages based on the promotion piece\n * (Dame, Turm, Läufer, Springer) to provide appropriate feedback.\n */\n\nimport React from \"react\";\n\n/**\n * Props for the MoveSuccessDialog component\n *\n * @interface MoveSuccessDialogProps\n *\n * @property {boolean} isOpen - Controls dialog visibility\n * @property {() => void} onClose - Callback when dialog is closed\n * @property {() => void} onContinue - Callback to continue to next position\n * @property {() => void} [onReplay] - Optional callback to replay the training\n * @property {string} [promotionPiece] - The piece that was promoted to (Dame, Turm, etc.)\n * @property {string} [moveDescription] - Description of the winning move\n */\ninterface MoveSuccessDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onContinue: () => void;\n  onReplay?: () => void;\n  promotionPiece?: string;\n  moveDescription?: string;\n}\n\n/**\n * Move success dialog component\n *\n * @component\n * @description\n * Displays a modal dialog when the player makes a successful pawn promotion\n * that leads to a winning position. Uses green gradient design to celebrate\n * the achievement and motivate continued learning.\n *\n * @example\n * ```tsx\n * <MoveSuccessDialog\n *   isOpen={showSuccess}\n *   onClose={() => setShowSuccess(false)}\n *   onContinue={() => goToNextPosition()}\n *   promotionPiece=\"Dame\"\n *   moveDescription=\"e8=Q+\"\n * />\n * ```\n *\n * @param {MoveSuccessDialogProps} props - Dialog configuration\n * @returns {JSX.Element | null} Rendered dialog or null when closed\n */\nexport const MoveSuccessDialog: React.FC<MoveSuccessDialogProps> = ({\n  isOpen,\n  onClose,\n  onContinue,\n  onReplay: _onReplay,\n  promotionPiece,\n  moveDescription,\n}) => {\n  if (!isOpen) return null;\n\n  /**\n   * Generate congratulatory message based on promotion piece\n   *\n   * @private\n   * @returns {string} Localized success message in German\n   *\n   * @description\n   * Creates context-appropriate success messages based on the promotion piece:\n   * - Dame: \"Excellent queen promotion!\"\n   * - Turm: \"Great rook promotion!\"\n   * - Läufer: \"Smart bishop promotion!\"\n   * - Springer: \"Clever knight promotion!\"\n   * - Default: \"Great promotion leads to victory!\"\n   */\n  const getMessage = () => {\n    if (promotionPiece) {\n      switch (promotionPiece.toLowerCase()) {\n        case \"dame\":\n        case \"queen\":\n          return `Ausgezeichnet! Umwandlung in ${promotionPiece} führt zum Sieg!`;\n        case \"turm\":\n        case \"rook\":\n          return `Großartig! Umwandlung in ${promotionPiece} führt zum Sieg!`;\n        case \"läufer\":\n        case \"bishop\":\n          return `Klug! Umwandlung in ${promotionPiece} führt zum Sieg!`;\n        case \"springer\":\n        case \"knight\":\n          return `Clever! Umwandlung in ${promotionPiece} führt zum Sieg!`;\n        default:\n          return `Perfekt! Umwandlung in ${promotionPiece} führt zum Sieg!`;\n      }\n    }\n    return \"Glückwunsch! Die Umwandlung führt zum Sieg!\";\n  };\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50\"\n      onClick={onClose}\n    >\n      <div\n        className=\"relative bg-gradient-to-br from-green-500 to-emerald-600 p-1 rounded-2xl max-w-md w-full mx-4\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"bg-[var(--bg-primary)] rounded-2xl p-6\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <div className=\"p-3 rounded-full bg-gradient-to-br from-green-400 to-emerald-500\">\n              <svg\n                className=\"w-6 h-6 text-white\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"text-xl font-bold text-white\">Erfolg!</h3>\n          </div>\n          <p className=\"text-gray-300 mb-2\">{getMessage()}</p>\n          {moveDescription && (\n            <p className=\"text-gray-400 text-sm mb-4\">\n              Gewinnzug:{\" \"}\n              <strong className=\"text-gray-200\">{moveDescription}</strong>\n            </p>\n          )}\n          <div className=\"flex gap-3\">\n            <button\n              onClick={onClose}\n              className=\"flex-1 px-4 py-2 text-white bg-white/10 backdrop-blur rounded-lg hover:bg-white/20 transition-all\"\n            >\n              Verstanden\n            </button>\n            <button\n              onClick={onContinue}\n              className=\"flex-1 px-4 py-2 text-white bg-gradient-to-r from-green-500 to-emerald-600 rounded-lg hover:shadow-lg transform hover:scale-105 transition-all\"\n            >\n              Weiter\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":["MoveSuccessDialog","isOpen","onClose","onContinue","onReplay","_onReplay","promotionPiece","moveDescription","getMessage","toLowerCase","div","className","onClick","e","stopPropagation","svg","fill","stroke","viewBox","path","strokeLinecap","strokeLinejoin","strokeWidth","d","h3","p","strong","button"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;CAoBC;;;;+BAgDYA;;;eAAAA;;;;8DA9CK;;;;;;AA8CX,MAAMA,oBAAsD,CAAC,EAClEC,MAAM,EACNC,OAAO,EACPC,UAAU,EACVC,UAAUC,SAAS,EACnBC,cAAc,EACdC,eAAe,EAChB;IACC,IAAI,CAACN,QAAQ,OAAO;IAEpB;;;;;;;;;;;;;GAaC,GACD,MAAMO,aAAa;QACjB,IAAIF,gBAAgB;YAClB,OAAQA,eAAeG,WAAW;gBAChC,KAAK;gBACL,KAAK;oBACH,OAAO,CAAC,6BAA6B,EAAEH,eAAe,gBAAgB,CAAC;gBACzE,KAAK;gBACL,KAAK;oBACH,OAAO,CAAC,yBAAyB,EAAEA,eAAe,gBAAgB,CAAC;gBACrE,KAAK;gBACL,KAAK;oBACH,OAAO,CAAC,oBAAoB,EAAEA,eAAe,gBAAgB,CAAC;gBAChE,KAAK;gBACL,KAAK;oBACH,OAAO,CAAC,sBAAsB,EAAEA,eAAe,gBAAgB,CAAC;gBAClE;oBACE,OAAO,CAAC,uBAAuB,EAAEA,eAAe,gBAAgB,CAAC;YACrE;QACF;QACA,OAAO;IACT;IAEA,qBACE,qBAACI;QACCC,WAAU;QACVC,SAASV;kBAET,cAAA,qBAACQ;YACCC,WAAU;YACVC,SAAS,CAACC,IAAMA,EAAEC,eAAe;sBAEjC,cAAA,sBAACJ;gBAAIC,WAAU;;kCACb,sBAACD;wBAAIC,WAAU;;0CACb,qBAACD;gCAAIC,WAAU;0CACb,cAAA,qBAACI;oCACCJ,WAAU;oCACVK,MAAK;oCACLC,QAAO;oCACPC,SAAQ;8CAER,cAAA,qBAACC;wCACCC,eAAc;wCACdC,gBAAe;wCACfC,aAAa;wCACbC,GAAE;;;;0CAIR,qBAACC;gCAAGb,WAAU;0CAA+B;;;;kCAE/C,qBAACc;wBAAEd,WAAU;kCAAsBH;;oBAClCD,iCACC,sBAACkB;wBAAEd,WAAU;;4BAA6B;4BAC7B;0CACX,qBAACe;gCAAOf,WAAU;0CAAiBJ;;;;kCAGvC,sBAACG;wBAAIC,WAAU;;0CACb,qBAACgB;gCACCf,SAASV;gCACTS,WAAU;0CACX;;0CAGD,qBAACgB;gCACCf,SAAST;gCACTQ,WAAU;0CACX;;;;;;;;AAQb"}