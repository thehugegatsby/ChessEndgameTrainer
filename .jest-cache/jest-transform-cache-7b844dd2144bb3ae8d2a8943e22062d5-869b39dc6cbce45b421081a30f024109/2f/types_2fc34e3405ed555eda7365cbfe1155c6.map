{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/container/types.ts"],"sourcesContent":["/**\n * @file Service container type definitions\n * @module services/container/types\n *\n * @description\n * Type definitions for the dependency injection container system.\n * Provides type-safe service registration and resolution with support\n * for both predefined platform services and custom services.\n *\n * @remarks\n * The service container supports:\n * - Type-safe service registry with compile-time checks\n * - Singleton and factory patterns\n * - Circular dependency detection\n * - Testing overrides and mocks\n * - Browser API abstractions\n * - Platform service abstractions\n *\n * @example\n * ```typescript\n * // Define a service in the registry\n * interface ServiceRegistry {\n *   'my.service': IMyService;\n * }\n *\n * // Register and resolve services\n * container.register('my.service', () => new MyService());\n * const service = container.resolve('my.service');\n * ```\n */\n\nimport {\n  IPlatformStorage,\n  IPlatformNotification,\n  IPlatformDevice,\n  IPlatformPerformance,\n  IPlatformClipboard,\n  IPlatformShare,\n  IPlatformAnalytics,\n  IPlatformDetection,\n} from \"../platform/types\";\n\n/**\n * Browser API abstractions for dependency injection\n *\n * @interface IBrowserAPIs\n *\n * @description\n * Provides abstracted interfaces for browser APIs to enable\n * testing and platform-specific implementations.\n *\n * @property {Storage} localStorage - Browser localStorage API\n * @property {Storage} sessionStorage - Browser sessionStorage API\n * @property {Navigator} navigator - Browser navigator API\n * @property {Window} window - Browser window object\n * @property {Document} document - Browser document object\n * @property {Performance} performance - Browser performance API\n *\n * @example\n * ```typescript\n * const apis: IBrowserAPIs = {\n *   localStorage: window.localStorage,\n *   sessionStorage: window.sessionStorage,\n *   navigator: window.navigator,\n *   window: window,\n *   document: window.document,\n *   performance: window.performance\n * };\n * ```\n */\nexport interface IBrowserAPIs {\n  localStorage: Storage;\n  sessionStorage: Storage;\n  navigator: Navigator;\n  window: Window;\n  document: Document;\n  performance: Performance;\n}\n\n/**\n * Service identifier type\n *\n * @typedef {string} ServiceKey\n *\n * @description\n * String literal type for service identifiers. Used as keys\n * in the service registry for type-safe service resolution.\n */\nexport type ServiceKey = string;\n\n/**\n * Service factory function type\n *\n * @typedef {Function} ServiceFactory\n * @template T - The service type being created\n * @param {IServiceContainer} container - Container for resolving dependencies\n * @returns {T} The service instance\n *\n * @description\n * Factory function that creates service instances. Receives the\n * container to enable dependency resolution during construction.\n *\n * @example\n * ```typescript\n * const storageFactory: ServiceFactory<IStorage> = (container) => {\n *   const platform = container.resolve('platform.detection');\n *   return new StorageService(platform);\n * };\n * ```\n */\nexport type ServiceFactory<T> = (container: IServiceContainer) => T;\n\n/**\n * Service registry interface\n *\n * @interface ServiceRegistry\n *\n * @description\n * Central type registry mapping service keys to their corresponding types.\n * This enables compile-time type safety when registering and resolving services.\n * Extend this interface to add custom services to the type system.\n *\n * @remarks\n * The registry is organized into logical groups:\n * - platform.*: Cross-platform service abstractions\n * - browser.*: Browser-specific API abstractions\n *\n * @example\n * ```typescript\n * // Extend the registry in your application\n * declare module '@shared/services/container/types' {\n *   interface ServiceRegistry {\n *     'app.theme': IThemeService;\n *     'app.auth': IAuthService;\n *   }\n * }\n * ```\n */\nexport interface ServiceRegistry {\n  // Platform services\n  \"platform.storage\": IPlatformStorage;\n  \"platform.notifications\": IPlatformNotification;\n  \"platform.device\": IPlatformDevice;\n  \"platform.performance\": IPlatformPerformance;\n  \"platform.clipboard\": IPlatformClipboard;\n  \"platform.share\": IPlatformShare;\n  \"platform.analytics\": IPlatformAnalytics;\n  \"platform.detection\": IPlatformDetection;\n\n  // Browser API abstractions\n  \"browser.apis\": IBrowserAPIs;\n  \"browser.localStorage\": Storage;\n  \"browser.navigator\": Navigator;\n  \"browser.window\": Window;\n  \"browser.document\": Document;\n  \"browser.performance\": Performance;\n}\n\n/**\n * Service container interface\n *\n * @interface IServiceContainer\n *\n * @description\n * Main interface for the dependency injection container.\n * Provides methods for registering, resolving, and managing services\n * with support for both type-safe predefined services and dynamic\n * custom services.\n *\n * @remarks\n * The container supports:\n * - Lazy service instantiation\n * - Singleton caching (configurable)\n * - Circular dependency detection\n * - Type-safe service resolution\n * - Testing utilities\n *\n * @example\n * ```typescript\n * const container: IServiceContainer = new ServiceContainer();\n *\n * // Register services\n * container.register('platform.storage', () => new WebStorage());\n *\n * // Resolve services\n * const storage = container.resolve('platform.storage');\n * ```\n */\nexport interface IServiceContainer {\n  /**\n   * Register a service with the container\n   * @param key - Service identifier\n   * @param factory - Factory function to create the service\n   */\n  register<K extends keyof ServiceRegistry>(\n    key: K,\n    factory: ServiceFactory<ServiceRegistry[K]>,\n  ): void;\n\n  /**\n   * Register a service with a custom key (for flexibility)\n   * @param key - Custom service identifier\n   * @param factory - Factory function to create the service\n   */\n  registerCustom<T>(key: string, factory: ServiceFactory<T>): void;\n\n  /**\n   * Resolve a service from the container\n   * @param key - Service identifier\n   * @returns The service instance\n   */\n  resolve<K extends keyof ServiceRegistry>(key: K): ServiceRegistry[K];\n\n  /**\n   * Resolve a custom service from the container\n   * @param key - Custom service identifier\n   * @returns The service instance\n   */\n  resolveCustom<T>(key: string): T;\n\n  /**\n   * Check if a service is registered\n   * @param key - Service identifier\n   * @returns True if service is registered\n   */\n  has<K extends keyof ServiceRegistry>(key: K): boolean;\n\n  /**\n   * Check if a custom service is registered\n   * @param key - Custom service identifier\n   * @returns True if service is registered\n   */\n  hasCustom(key: string): boolean;\n\n  /**\n   * Clear all resolved instances (useful for testing)\n   */\n  clearInstances(): void;\n\n  /**\n   * Get all registered service keys\n   * @returns Array of registered service keys\n   */\n  getRegisteredKeys(): string[];\n}\n\n/**\n * Service overrides for testing\n *\n * @typedef {Object} ServiceOverrides\n *\n * @description\n * Partial type allowing override of any registered service.\n * Used in tests to provide mock implementations.\n *\n * @example\n * ```typescript\n * const overrides: ServiceOverrides = {\n *   'platform.storage': mockStorage,\n *   'platform.notifications': mockNotifications\n * };\n * ```\n */\nexport type ServiceOverrides = Partial<{\n  [K in keyof ServiceRegistry]: ServiceRegistry[K];\n}>;\n\n/**\n * Custom service overrides for testing\n *\n * @typedef {Object} CustomServiceOverrides\n *\n * @description\n * Dynamic overrides for custom services not in the registry.\n * Provides flexibility for test-specific services.\n */\nexport type CustomServiceOverrides = Record<string, any>;\n\n/**\n * Combined overrides for test containers\n *\n * @interface TestContainerOverrides\n *\n * @description\n * Configuration object for creating test containers with\n * both registered and custom service overrides.\n *\n * @property {ServiceOverrides} [services] - Registry service overrides\n * @property {CustomServiceOverrides} [custom] - Custom service overrides\n *\n * @example\n * ```typescript\n * const testOverrides: TestContainerOverrides = {\n *   services: {\n *     'platform.storage': mockStorage\n *   },\n *   custom: {\n *     'test.helper': testHelper\n *   }\n * };\n * ```\n */\nexport interface TestContainerOverrides {\n  services?: ServiceOverrides;\n  custom?: CustomServiceOverrides;\n}\n\n/**\n * Service container configuration\n *\n * @interface ServiceContainerConfig\n *\n * @description\n * Configuration options for the service container behavior.\n * Controls caching, validation, and debugging features.\n *\n * @property {boolean} [useSingletons=true] - Cache service instances (singleton pattern)\n * @property {boolean} [validateKeys=true] - Validate keys to prevent duplicate registration\n * @property {Function} [logger] - Optional logger for debugging service resolution\n *\n * @example\n * ```typescript\n * const config: ServiceContainerConfig = {\n *   useSingletons: true,\n *   validateKeys: true,\n *   logger: (msg) => console.log(`[Container] ${msg}`)\n * };\n *\n * const container = new ServiceContainer(config);\n * ```\n */\nexport interface ServiceContainerConfig {\n  // Whether to use singleton pattern (one instance per key)\n  useSingletons?: boolean;\n\n  // Whether to validate service keys\n  validateKeys?: boolean;\n\n  // Logger function for debugging\n  logger?: (message: string) => void;\n}\n\n/**\n * Error thrown when a requested service is not found\n *\n * @class ServiceNotFoundError\n * @extends {Error}\n *\n * @description\n * Thrown when attempting to resolve a service that hasn't been registered.\n * Includes the requested key in the error message for debugging.\n *\n * @example\n * ```typescript\n * try {\n *   container.resolve('unknown.service');\n * } catch (error) {\n *   if (error instanceof ServiceNotFoundError) {\n *     console.error('Service not registered:', error.message);\n *   }\n * }\n * ```\n */\nexport class ServiceNotFoundError extends Error {\n  constructor(key: string) {\n    super(`Service not found for key: ${key}`);\n    this.name = \"ServiceNotFoundError\";\n  }\n}\n\n/**\n * Error thrown when attempting to register a duplicate service\n *\n * @class ServiceAlreadyRegisteredError\n * @extends {Error}\n *\n * @description\n * Thrown when trying to register a service with a key that's already\n * in use. Only thrown when validateKeys is enabled in configuration.\n *\n * @example\n * ```typescript\n * container.register('my.service', factory1);\n * try {\n *   container.register('my.service', factory2); // Throws\n * } catch (error) {\n *   console.error('Duplicate registration:', error.message);\n * }\n * ```\n */\nexport class ServiceAlreadyRegisteredError extends Error {\n  constructor(key: string) {\n    super(`Service already registered for key: ${key}`);\n    this.name = \"ServiceAlreadyRegisteredError\";\n  }\n}\n\n/**\n * Error thrown when circular dependencies are detected\n *\n * @class CircularDependencyError\n * @extends {Error}\n *\n * @description\n * Thrown when service resolution encounters a circular dependency chain.\n * The error message includes the complete dependency chain for debugging.\n *\n * @example\n * ```typescript\n * // Service A depends on B, B depends on A\n * container.register('a', (c) => new A(c.resolve('b')));\n * container.register('b', (c) => new B(c.resolve('a')));\n *\n * try {\n *   container.resolve('a'); // Throws CircularDependencyError\n * } catch (error) {\n *   console.error('Circular dependency:', error.message);\n *   // \"Circular dependency detected: a -> b -> a\"\n * }\n * ```\n */\nexport class CircularDependencyError extends Error {\n  constructor(chain: string[]) {\n    super(`Circular dependency detected: ${chain.join(\" -> \")}`);\n    this.name = \"CircularDependencyError\";\n  }\n}\n"],"names":["CircularDependencyError","ServiceAlreadyRegisteredError","ServiceNotFoundError","Error","key","name","chain","join"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BC;;;;;;;;;;;QAwYYA;eAAAA;;QA/BAC;eAAAA;;QA3BAC;eAAAA;;;AAAN,MAAMA,6BAA6BC;IACxC,YAAYC,GAAW,CAAE;QACvB,KAAK,CAAC,CAAC,2BAA2B,EAAEA,KAAK;QACzC,IAAI,CAACC,IAAI,GAAG;IACd;AACF;AAsBO,MAAMJ,sCAAsCE;IACjD,YAAYC,GAAW,CAAE;QACvB,KAAK,CAAC,CAAC,oCAAoC,EAAEA,KAAK;QAClD,IAAI,CAACC,IAAI,GAAG;IACd;AACF;AA0BO,MAAML,gCAAgCG;IAC3C,YAAYG,KAAe,CAAE;QAC3B,KAAK,CAAC,CAAC,8BAA8B,EAAEA,MAAMC,IAAI,CAAC,SAAS;QAC3D,IAAI,CAACF,IAAI,GAAG;IACd;AACF"}