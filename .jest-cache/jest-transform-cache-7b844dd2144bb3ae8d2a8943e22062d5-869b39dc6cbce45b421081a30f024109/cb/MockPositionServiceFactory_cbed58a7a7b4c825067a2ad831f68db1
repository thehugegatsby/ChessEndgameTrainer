267803ca925f68e57e61fceb806ab420
/**
 * Mock Position Service Factory for E2E Testing
 * Creates MockPositionRepository with pre-seeded test data
 * Completely bypasses Firebase for clean, fast, deterministic tests
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createMockPositionRepository () {
        return createMockPositionRepository;
    },
    get createMockPositionService () {
        return createMockPositionService;
    },
    get shouldUseMockService () {
        return shouldUseMockService;
    }
});
const _MockPositionRepository = require("../repositories/implementations/MockPositionRepository");
const _PositionService = require("../services/database/PositionService");
const _TestScenarios = require("./TestScenarios");
const _Logger = require("../services/logging/Logger");
const logger = (0, _Logger.getLogger)().setContext("MockPositionServiceFactory");
function createMockPositionService() {
    // Create mock repository
    const repository = new _MockPositionRepository.MockPositionRepository({
        enableCache: false,
        events: {
            onDataFetched: (operation, count)=>{
                // Silent logging for tests - only in debug mode
                if (process.env.DEBUG_MOCK_SERVICE) {
                    logger.debug(`[MockRepo] ${operation}: ${count} items`);
                }
            },
            onDataModified: (operation, ids)=>{
                if (process.env.DEBUG_MOCK_SERVICE) {
                    logger.debug(`[MockRepo] ${operation}: ${ids.length} items`);
                }
            },
            onError: (operation, error)=>{
                logger.error(`[MockRepo] ${operation} failed`, error);
            }
        }
    });
    // Convert TestScenario to EndgamePosition for repository seeding
    const testPositions = Object.values(_TestScenarios.TestPositions).map((scenario)=>({
            id: parseInt(scenario.id),
            title: scenario.title,
            description: scenario.description,
            fen: scenario.fen,
            category: scenario.category,
            difficulty: scenario.difficulty,
            targetMoves: scenario.targetMoves,
            hints: scenario.hints,
            solution: scenario.solution,
            sideToMove: scenario.sideToMove,
            goal: scenario.goal,
            // Conditional mapping for optional fields to prevent undefined serialization issues
            ...scenario.nextPositionId && {
                nextPositionId: scenario.nextPositionId
            }
        }));
    repository.seedData({
        positions: testPositions,
        categories: [],
        chapters: []
    });
    // Create service with mock repository
    const service = new _PositionService.PositionService(repository, {
        cacheEnabled: false,
        cacheSize: 0,
        cacheTTL: 0
    });
    logger.info(`[MockPositionService] Initialized with ${testPositions.length} test positions`);
    return service;
}
function createMockPositionRepository() {
    const repository = new _MockPositionRepository.MockPositionRepository();
    // Convert TestScenario to EndgamePosition and pre-seed
    const testPositions = Object.values(_TestScenarios.TestPositions).map((scenario)=>({
            id: parseInt(scenario.id),
            title: scenario.title,
            description: scenario.description,
            fen: scenario.fen,
            category: scenario.category,
            difficulty: scenario.difficulty,
            targetMoves: scenario.targetMoves,
            hints: scenario.hints,
            solution: scenario.solution,
            sideToMove: scenario.sideToMove,
            goal: scenario.goal,
            // Conditional mapping for optional fields to prevent undefined serialization issues
            ...scenario.nextPositionId && {
                nextPositionId: scenario.nextPositionId
            }
        }));
    repository.seedData({
        positions: testPositions
    });
    return repository;
}
function shouldUseMockService() {
    const nodeEnv = process.env.NODE_ENV;
    const nextPublicE2E = process.env.NEXT_PUBLIC_IS_E2E_TEST;
    const isE2E = process.env.IS_E2E_TEST;
    const useFirestore = process.env.NEXT_PUBLIC_USE_FIRESTORE;
    // Debug logging for environment detection
    logger.debug("[MockServiceFactory] Environment check", {
        NODE_ENV: nodeEnv,
        NEXT_PUBLIC_IS_E2E_TEST: nextPublicE2E,
        IS_E2E_TEST: isE2E,
        NEXT_PUBLIC_USE_FIRESTORE: useFirestore,
        shouldUseMock: nodeEnv === "test" || nextPublicE2E === "true" || isE2E === "true" || useFirestore === "false"
    });
    return nodeEnv === "test" || nextPublicE2E === "true" || isE2E === "true" || useFirestore === "false";
}

//# sourceMappingURL=data:application/json;base64,