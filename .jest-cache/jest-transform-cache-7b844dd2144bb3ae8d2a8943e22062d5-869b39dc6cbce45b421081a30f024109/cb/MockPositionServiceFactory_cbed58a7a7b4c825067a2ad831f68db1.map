{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/testing/MockPositionServiceFactory.ts"],"sourcesContent":["/**\n * Mock Position Service Factory for E2E Testing\n * Creates MockPositionRepository with pre-seeded test data\n * Completely bypasses Firebase for clean, fast, deterministic tests\n */\n\nimport { MockPositionRepository } from \"@shared/repositories/implementations/MockPositionRepository\";\nimport { PositionService } from \"@shared/services/database/PositionService\";\nimport { IPositionService } from \"@shared/services/database/IPositionService\";\nimport { TestPositions } from \"./TestScenarios\";\nimport type { EndgamePosition } from \"@shared/types/endgame\";\nimport { getLogger } from \"@shared/services/logging/Logger\";\n\nconst logger = getLogger().setContext(\"MockPositionServiceFactory\");\n\n/**\n * Create a fully configured MockPositionService for E2E tests\n * Pre-seeded with TestPositions data for immediate test usage\n */\nexport function createMockPositionService(): IPositionService {\n  // Create mock repository\n  const repository = new MockPositionRepository({\n    enableCache: false, // Disable cache for deterministic tests\n    events: {\n      onDataFetched: (operation, count) => {\n        // Silent logging for tests - only in debug mode\n        if (process.env.DEBUG_MOCK_SERVICE) {\n          logger.debug(`[MockRepo] ${operation}: ${count} items`);\n        }\n      },\n      onDataModified: (operation, ids) => {\n        if (process.env.DEBUG_MOCK_SERVICE) {\n          logger.debug(`[MockRepo] ${operation}: ${ids.length} items`);\n        }\n      },\n      onError: (operation, error) => {\n        logger.error(`[MockRepo] ${operation} failed`, error);\n      },\n    },\n  });\n\n  // Convert TestScenario to EndgamePosition for repository seeding\n  const testPositions: EndgamePosition[] = Object.values(TestPositions).map(\n    (scenario) => ({\n      id: parseInt(scenario.id), // Convert string ID back to number for EndgamePosition\n      title: scenario.title,\n      description: scenario.description,\n      fen: scenario.fen,\n      category: scenario.category,\n      difficulty: scenario.difficulty,\n      targetMoves: scenario.targetMoves,\n      hints: scenario.hints,\n      solution: scenario.solution,\n      sideToMove: scenario.sideToMove,\n      goal: scenario.goal,\n      // Conditional mapping for optional fields to prevent undefined serialization issues\n      ...(scenario.nextPositionId && {\n        nextPositionId: scenario.nextPositionId,\n      }),\n      // Note: Test-specific fields (initialExpectedMove, expectsDrawEvaluation) are NOT included\n    }),\n  );\n\n  repository.seedData({\n    positions: testPositions,\n    categories: [], // Add test categories if needed\n    chapters: [], // Add test chapters if needed\n  });\n\n  // Create service with mock repository\n  const service = new PositionService(repository, {\n    cacheEnabled: false, // Disable service-level cache for tests\n    cacheSize: 0,\n    cacheTTL: 0,\n  });\n\n  logger.info(\n    `[MockPositionService] Initialized with ${testPositions.length} test positions`,\n  );\n\n  return service;\n}\n\n/**\n * Create MockPositionRepository only (for direct repository testing)\n */\nexport function createMockPositionRepository(): MockPositionRepository {\n  const repository = new MockPositionRepository();\n\n  // Convert TestScenario to EndgamePosition and pre-seed\n  const testPositions: EndgamePosition[] = Object.values(TestPositions).map(\n    (scenario) => ({\n      id: parseInt(scenario.id),\n      title: scenario.title,\n      description: scenario.description,\n      fen: scenario.fen,\n      category: scenario.category,\n      difficulty: scenario.difficulty,\n      targetMoves: scenario.targetMoves,\n      hints: scenario.hints,\n      solution: scenario.solution,\n      sideToMove: scenario.sideToMove,\n      goal: scenario.goal,\n      // Conditional mapping for optional fields to prevent undefined serialization issues\n      ...(scenario.nextPositionId && {\n        nextPositionId: scenario.nextPositionId,\n      }),\n    }),\n  );\n\n  repository.seedData({\n    positions: testPositions,\n  });\n\n  return repository;\n}\n\n/**\n * E2E Test Environment Detection\n * Determines if we should use mock services\n */\nexport function shouldUseMockService(): boolean {\n  const nodeEnv = process.env.NODE_ENV;\n  const nextPublicE2E = process.env.NEXT_PUBLIC_IS_E2E_TEST;\n  const isE2E = process.env.IS_E2E_TEST;\n  const useFirestore = process.env.NEXT_PUBLIC_USE_FIRESTORE;\n\n  // Debug logging for environment detection\n  logger.debug(\"[MockServiceFactory] Environment check\", {\n    NODE_ENV: nodeEnv,\n    NEXT_PUBLIC_IS_E2E_TEST: nextPublicE2E,\n    IS_E2E_TEST: isE2E,\n    NEXT_PUBLIC_USE_FIRESTORE: useFirestore,\n    shouldUseMock:\n      nodeEnv === \"test\" ||\n      nextPublicE2E === \"true\" ||\n      isE2E === \"true\" ||\n      useFirestore === \"false\",\n  });\n\n  return (\n    nodeEnv === \"test\" ||\n    nextPublicE2E === \"true\" ||\n    isE2E === \"true\" ||\n    useFirestore === \"false\"\n  );\n}\n"],"names":["createMockPositionRepository","createMockPositionService","shouldUseMockService","logger","getLogger","setContext","repository","MockPositionRepository","enableCache","events","onDataFetched","operation","count","process","env","DEBUG_MOCK_SERVICE","debug","onDataModified","ids","length","onError","error","testPositions","Object","values","TestPositions","map","scenario","id","parseInt","title","description","fen","category","difficulty","targetMoves","hints","solution","sideToMove","goal","nextPositionId","seedData","positions","categories","chapters","service","PositionService","cacheEnabled","cacheSize","cacheTTL","info","nodeEnv","NODE_ENV","nextPublicE2E","NEXT_PUBLIC_IS_E2E_TEST","isE2E","IS_E2E_TEST","useFirestore","NEXT_PUBLIC_USE_FIRESTORE","shouldUseMock"],"mappings":"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"}