ca3f521462a4296d6d9698a5265375bb
/**
 * @file Hook for on-demand move quality assessment
 * @module hooks/useMoveQuality
 *
 * @description
 * Provides controlled move quality analysis with loading/error states.
 * Following clean architecture principles with trigger-based evaluation.
 * Uses tablebase data to determine if moves are optimal, good, or mistakes.
 *
 * @remarks
 * Features:
 * - Race condition protection with AbortController
 * - Robust error handling with state management
 * - Automatic cleanup on unmount
 * - Tablebase-based analysis for endgame positions
 * - Supports both SAN and UCI move notation
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useMoveQuality", {
    enumerable: true,
    get: function() {
        return useMoveQuality;
    }
});
const _react = require("react");
const _TablebaseService = require("../services/TablebaseService");
const _moveQuality = require("../utils/moveQuality");
const _chess = require("chess.js");
const _Logger = require("../services/logging/Logger");
const logger = new _Logger.Logger();
const useMoveQuality = ()=>{
    const [state, setState] = (0, _react.useState)({
        data: null,
        isLoading: false,
        error: null
    });
    // Ref to manage abort controller and prevent race conditions
    const abortControllerRef = (0, _react.useRef)(null);
    // Clean up on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            var _abortControllerRef_current;
            (_abortControllerRef_current = abortControllerRef.current) === null || _abortControllerRef_current === void 0 ? void 0 : _abortControllerRef_current.abort();
        };
    }, []);
    /**
   * Assess move quality on-demand
   *
   * @param fenBefore - FEN position before the move
   * @param move - Move in SAN or UCI notation
   * @param playerPerspective - Player who made the move
   * @returns Promise resolving to move quality result
   * @throws Error if assessment fails
   */ const assessMove = (0, _react.useCallback)(async (fenBefore, move, playerPerspective)=>{
        var // Abort previous request if running
        _abortControllerRef_current;
        (_abortControllerRef_current = abortControllerRef.current) === null || _abortControllerRef_current === void 0 ? void 0 : _abortControllerRef_current.abort();
        // Create new abort controller for this request
        const controller = new AbortController();
        abortControllerRef.current = controller;
        // Set loading state
        setState({
            data: null,
            isLoading: true,
            error: null
        });
        try {
            logger.info("[useMoveQuality] Starting move quality assessment", {
                fenBefore: fenBefore.slice(0, 30) + "...",
                move,
                playerPerspective
            });
            // Calculate FEN after the move
            const chess = new _chess.Chess(fenBefore);
            const moveResult = chess.move(move);
            if (!moveResult) {
                const result = {
                    quality: "unknown",
                    reason: "Invalid move",
                    isTablebaseAnalysis: false
                };
                setState({
                    data: result,
                    isLoading: false,
                    error: null
                });
                return result;
            }
            const fenAfter = chess.fen();
            // Get tablebase evaluations for both positions
            const [evalBefore, evalAfter] = await Promise.all([
                _TablebaseService.tablebaseService.getEvaluation(fenBefore),
                _TablebaseService.tablebaseService.getEvaluation(fenAfter)
            ]);
            // Check if both positions have tablebase data
            if (!evalBefore.isAvailable || !evalAfter.isAvailable || !evalBefore.result || !evalAfter.result) {
                const result = {
                    quality: "unknown",
                    reason: "No tablebase data available",
                    isTablebaseAnalysis: false
                };
                setState({
                    data: result,
                    isLoading: false,
                    error: null
                });
                return result;
            }
            // Detailed logging before assessment
            logger.info("[useMoveQuality] WDL values before assessment", {
                move,
                fenBefore,
                fenAfter,
                wdlBefore: evalBefore.result.wdl,
                wdlAfter: evalAfter.result.wdl,
                categoryBefore: evalBefore.result.category,
                categoryAfter: evalAfter.result.category
            });
            // Assess move quality using helper function
            const result = (0, _moveQuality.assessTablebaseMoveQuality)(evalBefore.result.wdl, evalAfter.result.wdl);
            // Log the calculation details
            const wdlChange = -evalAfter.result.wdl - evalBefore.result.wdl;
            logger.info("[useMoveQuality] Quality calculation details", {
                wdlBefore: evalBefore.result.wdl,
                wdlAfter: evalAfter.result.wdl,
                wdlChange,
                calculatedQuality: result.quality,
                formula: `wdlChange = -${evalAfter.result.wdl} - ${evalBefore.result.wdl} = ${wdlChange}`
            });
            // Only update state if request wasn't aborted
            if (!controller.signal.aborted) {
                setState({
                    data: result,
                    isLoading: false,
                    error: null
                });
                abortControllerRef.current = null; // Request completed
                logger.info("[useMoveQuality] Move quality assessment completed", {
                    quality: result.quality,
                    reason: result.reason,
                    isTablebaseAnalysis: result.isTablebaseAnalysis
                });
            }
            return result;
        } catch (error) {
            if (controller.signal.aborted) {
                logger.warn("[useMoveQuality] Assessment aborted by new request");
                throw new Error("Assessment aborted by new request");
            }
            const errorObj = error instanceof Error ? error : new Error("Unknown error occurred");
            logger.error("[useMoveQuality] Move quality assessment failed", errorObj);
            // Only update state if this was the active request
            if (abortControllerRef.current === controller) {
                setState({
                    data: null,
                    isLoading: false,
                    error: errorObj
                });
            }
            throw errorObj;
        }
    }, []);
    /**
   * Clear current analysis data
   */ const clearAnalysis = (0, _react.useCallback)(()=>{
        setState({
            data: null,
            isLoading: false,
            error: null
        });
    }, []);
    return {
        /** Current move quality result */ data: state.data,
        /** Whether analysis is in progress */ isLoading: state.isLoading,
        /** Error from analysis */ error: state.error,
        /** Trigger function for move quality assessment */ assessMove,
        /** Clear current analysis data */ clearAnalysis
    };
};

//# sourceMappingURL=data:application/json;base64,