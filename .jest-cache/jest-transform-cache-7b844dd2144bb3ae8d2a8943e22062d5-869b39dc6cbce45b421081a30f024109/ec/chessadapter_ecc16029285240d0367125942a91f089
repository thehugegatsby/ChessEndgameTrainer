7000e0ddcba08a6418c6c8543bbedc7c
/**
 * Chess Adapter - Clean Architecture Implementation
 *
 * Anti-Corruption Layer zwischen chess.js Library und unserer Domain.
 * Implementiert das Adapter Pattern für saubere Trennung von Domain und Infrastructure.
 *
 * Architektur-Prinzipien:
 * 1. Domain Types bleiben unberührt von Library-Details
 * 2. Error-First Validation für ungültige Library-Daten
 * 3. Klare Trennung: Domain ↔ Adapter ↔ Library
 * 4. Library-Austausch ohne Domain-Änderungen möglich
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ChessAdapter () {
        return ChessAdapter;
    },
    get ChessAdapterError () {
        return ChessAdapterError;
    },
    get fromLibraryMove () {
        return fromLibraryMove;
    },
    get fromLibraryMoves () {
        return fromLibraryMoves;
    },
    get toLibraryMove () {
        return toLibraryMove;
    }
});
const _logging = require("../services/logging");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
const logger = (0, _logging.getLogger)();
/**
 * Valid promotion pieces according to chess rules
 */ const VALID_PROMOTION_PIECES = [
    "q",
    "r",
    "b",
    "n"
];
/**
 * Validates if a piece symbol represents a valid promotion piece
 */ function isValidPromotionPiece(piece) {
    return VALID_PROMOTION_PIECES.includes(piece);
}
/**
 * Validates if a piece symbol is valid according to our domain rules
 */ function isValidPieceSymbol(piece) {
    return [
        "p",
        "n",
        "b",
        "r",
        "q",
        "k"
    ].includes(piece);
}
/**
 * Validates if a color is valid according to our domain rules
 */ function isValidColor(color) {
    return color === "w" || color === "b";
}
function toLibraryMove(move) {
    logger.debug("Converting domain move to library format", {
        from: move.from,
        to: move.to,
        san: move.san
    });
    // Convert domain move to library format
    // Map fenBefore/fenAfter to before/after for chess.js compatibility
    const libraryMove = {
        ...move,
        before: move.fenBefore,
        after: move.fenAfter
    };
    return libraryMove;
}
function fromLibraryMove(libraryMove) {
    logger.debug("Converting library move to domain format", {
        from: libraryMove.from,
        to: libraryMove.to,
        san: libraryMove.san,
        promotion: libraryMove.promotion
    });
    // Validate required fields exist
    if (!libraryMove.from || !libraryMove.to || !libraryMove.san) {
        throw new ChessAdapterError("Missing required move fields", {
            move: libraryMove,
            missingFields: [
                "from",
                "to",
                "san"
            ]
        });
    }
    // Validate color
    if (!isValidColor(libraryMove.color)) {
        throw new ChessAdapterError(`Invalid move color: ${libraryMove.color}`, {
            move: libraryMove,
            invalidField: "color"
        });
    }
    // Validate piece
    if (!isValidPieceSymbol(libraryMove.piece)) {
        throw new ChessAdapterError(`Invalid piece symbol: ${libraryMove.piece}`, {
            move: libraryMove,
            invalidField: "piece"
        });
    }
    // Validate captured piece (if present)
    if (libraryMove.captured && !isValidPieceSymbol(libraryMove.captured)) {
        throw new ChessAdapterError(`Invalid captured piece: ${libraryMove.captured}`, {
            move: libraryMove,
            invalidField: "captured"
        });
    }
    // CRITICAL VALIDATION: Promotion piece must be valid according to chess rules
    if (libraryMove.promotion && !isValidPromotionPiece(libraryMove.promotion)) {
        // This should theoretically never happen with a correct chess library,
        // but we fail fast to catch any library bugs or unexpected behavior
        throw new ChessAdapterError(`Invalid promotion piece: ${libraryMove.promotion}. Only q, r, b, n are allowed.`, {
            move: libraryMove,
            invalidField: "promotion",
            validPromotions: VALID_PROMOTION_PIECES
        });
    }
    // Safe to cast after validation - all constraints are met
    const domainMove = {
        color: libraryMove.color,
        from: libraryMove.from,
        to: libraryMove.to,
        piece: libraryMove.piece,
        captured: libraryMove.captured,
        promotion: libraryMove.promotion,
        flags: libraryMove.flags || "",
        san: libraryMove.san,
        lan: libraryMove.lan || "",
        fenBefore: libraryMove.before || "",
        fenAfter: libraryMove.after || "",
        // Helper methods - these will be added by the chess.js library when needed
        isCapture: ()=>!!libraryMove.captured,
        isPromotion: ()=>!!libraryMove.promotion,
        isEnPassant: ()=>{
            var _libraryMove_flags;
            return ((_libraryMove_flags = libraryMove.flags) === null || _libraryMove_flags === void 0 ? void 0 : _libraryMove_flags.includes("e")) || false;
        },
        isKingsideCastle: ()=>{
            var _libraryMove_flags;
            return ((_libraryMove_flags = libraryMove.flags) === null || _libraryMove_flags === void 0 ? void 0 : _libraryMove_flags.includes("k")) || false;
        },
        isQueensideCastle: ()=>{
            var _libraryMove_flags;
            return ((_libraryMove_flags = libraryMove.flags) === null || _libraryMove_flags === void 0 ? void 0 : _libraryMove_flags.includes("q")) || false;
        },
        isBigPawn: ()=>{
            var _libraryMove_flags;
            return ((_libraryMove_flags = libraryMove.flags) === null || _libraryMove_flags === void 0 ? void 0 : _libraryMove_flags.includes("b")) || false;
        }
    };
    logger.debug("Successfully converted library move to domain move", {
        domainMove: {
            from: domainMove.from,
            to: domainMove.to,
            san: domainMove.san,
            promotion: domainMove.promotion
        }
    });
    return domainMove;
}
function fromLibraryMoves(libraryMoves) {
    return libraryMoves.map((move, index)=>{
        try {
            return fromLibraryMove(move);
        } catch (error) {
            if (error instanceof ChessAdapterError) {
                // Create a new error with enhanced context since context is readonly
                throw new ChessAdapterError(error.message, {
                    ...error.context,
                    moveIndex: index,
                    totalMoves: libraryMoves.length
                });
            }
            throw error;
        }
    });
}
class ChessAdapterError extends Error {
    constructor(message, context){
        super(message), _define_property(this, "context", void 0);
        this.name = "ChessAdapterError";
        this.context = context;
        // Log error for monitoring/debugging
        logger.error("Chess adapter validation failed", {
            error: message,
            context: context
        });
    }
}
const ChessAdapter = {
    isValidPromotionPiece,
    isValidPieceSymbol,
    isValidColor,
    VALID_PROMOTION_PIECES
};

//# sourceMappingURL=data:application/json;base64,