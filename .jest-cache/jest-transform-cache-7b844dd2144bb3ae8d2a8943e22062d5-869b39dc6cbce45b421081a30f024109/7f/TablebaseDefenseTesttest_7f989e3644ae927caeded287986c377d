3aa733d4589c81d7d4845198abea5386
/**
 * Direct test of TablebaseService DTM sorting for defense
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _TablebaseService = require("../../shared/services/TablebaseService");
const _fenPositions = require("../fixtures/fenPositions");
describe("TablebaseService Defense Sorting", ()=>{
    it("Should return moves sorted by DTM for losing positions", async ()=>{
        var _result_moves;
        // Use centralized test position for DTM defense sorting
        const defensePosition = (0, _fenPositions.getTablebaseDefensePosition)();
        const fen = defensePosition.fen;
        console.log("\n=== Testing TablebaseService directly ===");
        console.log("FEN:", fen);
        // Get top 10 moves from tablebase
        const result = await _TablebaseService.tablebaseService.getTopMoves(fen, 10);
        console.log("API returned:", (_result_moves = result.moves) === null || _result_moves === void 0 ? void 0 : _result_moves.length, "moves");
        if (result.isAvailable && result.moves) {
            console.log("\nMoves returned by TablebaseService:");
            result.moves.forEach((move, index)=>{
                console.log(`  ${index + 1}. ${move.san}: DTM ${move.dtm}, WDL ${move.wdl}`);
            });
            // Check if moves are sorted correctly for losing position
            // For losing positions (WDL < 0), moves should be sorted by DTM descending (highest DTM first)
            if (result.moves.length > 1 && result.moves[0].wdl < 0) {
                const firstMoveDtm = Math.abs(result.moves[0].dtm || 0);
                const secondMoveDtm = Math.abs(result.moves[1].dtm || 0);
                console.log("\nFirst move DTM:", firstMoveDtm);
                console.log("Second move DTM:", secondMoveDtm);
                console.log("Is correctly sorted for defense?", firstMoveDtm >= secondMoveDtm);
                // The first move should have the highest DTM (best defense)
                expect(firstMoveDtm).toBeGreaterThanOrEqual(secondMoveDtm);
            }
            // Check if Kd7 (DTM -27) is ranked first
            const kd7Move = result.moves.find((m)=>m.san === "Kd7");
            if (kd7Move) {
                console.log("\nKd7 found with DTM:", kd7Move.dtm);
                console.log("Is Kd7 the first move?", result.moves[0].san === "Kd7");
            }
        } else {
            console.log("No moves available from tablebase");
        }
    });
    it("Should test the actual Lichess API response", async ()=>{
        // This will make a real API call to understand what we're getting
        const defensePosition = (0, _fenPositions.getTablebaseDefensePosition)();
        const fen = defensePosition.fen;
        try {
            var _data_moves;
            // Make direct API call
            const response = await fetch(`https://tablebase.lichess.ovh/standard?fen=${encodeURIComponent(fen)}`);
            const data = await response.json();
            console.log("\n=== Direct Lichess API Response ===");
            console.log("Category:", data.category);
            console.log("Moves count:", (_data_moves = data.moves) === null || _data_moves === void 0 ? void 0 : _data_moves.length);
            if (data.moves) {
                console.log("\nAll moves from API:");
                data.moves.forEach((move)=>{
                    console.log(`  ${move.san}: DTM ${move.dtm}, DTZ ${move.dtz}, Category: ${move.category}`);
                });
            }
        } catch (error) {
            console.log("Could not fetch from Lichess API:", error);
        }
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvdGVzdHMvaW50ZWdyYXRpb24vVGFibGViYXNlRGVmZW5zZVRlc3QudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERpcmVjdCB0ZXN0IG9mIFRhYmxlYmFzZVNlcnZpY2UgRFRNIHNvcnRpbmcgZm9yIGRlZmVuc2VcbiAqL1xuXG5pbXBvcnQgeyB0YWJsZWJhc2VTZXJ2aWNlIH0gZnJvbSBcIkBzaGFyZWQvc2VydmljZXMvVGFibGViYXNlU2VydmljZVwiO1xuaW1wb3J0IHsgZ2V0VGFibGViYXNlRGVmZW5zZVBvc2l0aW9uIH0gZnJvbSBcIi4uL2ZpeHR1cmVzL2ZlblBvc2l0aW9uc1wiO1xuXG5kZXNjcmliZShcIlRhYmxlYmFzZVNlcnZpY2UgRGVmZW5zZSBTb3J0aW5nXCIsICgpID0+IHtcbiAgaXQoXCJTaG91bGQgcmV0dXJuIG1vdmVzIHNvcnRlZCBieSBEVE0gZm9yIGxvc2luZyBwb3NpdGlvbnNcIiwgYXN5bmMgKCkgPT4ge1xuICAgIC8vIFVzZSBjZW50cmFsaXplZCB0ZXN0IHBvc2l0aW9uIGZvciBEVE0gZGVmZW5zZSBzb3J0aW5nXG4gICAgY29uc3QgZGVmZW5zZVBvc2l0aW9uID0gZ2V0VGFibGViYXNlRGVmZW5zZVBvc2l0aW9uKCk7XG4gICAgY29uc3QgZmVuID0gZGVmZW5zZVBvc2l0aW9uLmZlbjtcblxuICAgIGNvbnNvbGUubG9nKFwiXFxuPT09IFRlc3RpbmcgVGFibGViYXNlU2VydmljZSBkaXJlY3RseSA9PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJGRU46XCIsIGZlbik7XG5cbiAgICAvLyBHZXQgdG9wIDEwIG1vdmVzIGZyb20gdGFibGViYXNlXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGFibGViYXNlU2VydmljZS5nZXRUb3BNb3ZlcyhmZW4sIDEwKTtcblxuICAgIGNvbnNvbGUubG9nKFwiQVBJIHJldHVybmVkOlwiLCByZXN1bHQubW92ZXM/Lmxlbmd0aCwgXCJtb3Zlc1wiKTtcblxuICAgIGlmIChyZXN1bHQuaXNBdmFpbGFibGUgJiYgcmVzdWx0Lm1vdmVzKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlxcbk1vdmVzIHJldHVybmVkIGJ5IFRhYmxlYmFzZVNlcnZpY2U6XCIpO1xuICAgICAgcmVzdWx0Lm1vdmVzLmZvckVhY2goKG1vdmUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgIGAgICR7aW5kZXggKyAxfS4gJHttb3ZlLnNhbn06IERUTSAke21vdmUuZHRtfSwgV0RMICR7bW92ZS53ZGx9YCxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDaGVjayBpZiBtb3ZlcyBhcmUgc29ydGVkIGNvcnJlY3RseSBmb3IgbG9zaW5nIHBvc2l0aW9uXG4gICAgICAvLyBGb3IgbG9zaW5nIHBvc2l0aW9ucyAoV0RMIDwgMCksIG1vdmVzIHNob3VsZCBiZSBzb3J0ZWQgYnkgRFRNIGRlc2NlbmRpbmcgKGhpZ2hlc3QgRFRNIGZpcnN0KVxuICAgICAgaWYgKHJlc3VsdC5tb3Zlcy5sZW5ndGggPiAxICYmIHJlc3VsdC5tb3Zlc1swXS53ZGwgPCAwKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0TW92ZUR0bSA9IE1hdGguYWJzKHJlc3VsdC5tb3Zlc1swXS5kdG0gfHwgMCk7XG4gICAgICAgIGNvbnN0IHNlY29uZE1vdmVEdG0gPSBNYXRoLmFicyhyZXN1bHQubW92ZXNbMV0uZHRtIHx8IDApO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiXFxuRmlyc3QgbW92ZSBEVE06XCIsIGZpcnN0TW92ZUR0bSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU2Vjb25kIG1vdmUgRFRNOlwiLCBzZWNvbmRNb3ZlRHRtKTtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgXCJJcyBjb3JyZWN0bHkgc29ydGVkIGZvciBkZWZlbnNlP1wiLFxuICAgICAgICAgIGZpcnN0TW92ZUR0bSA+PSBzZWNvbmRNb3ZlRHRtLFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFRoZSBmaXJzdCBtb3ZlIHNob3VsZCBoYXZlIHRoZSBoaWdoZXN0IERUTSAoYmVzdCBkZWZlbnNlKVxuICAgICAgICBleHBlY3QoZmlyc3RNb3ZlRHRtKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKHNlY29uZE1vdmVEdG0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiBLZDcgKERUTSAtMjcpIGlzIHJhbmtlZCBmaXJzdFxuICAgICAgY29uc3Qga2Q3TW92ZSA9IHJlc3VsdC5tb3Zlcy5maW5kKChtKSA9PiBtLnNhbiA9PT0gXCJLZDdcIik7XG4gICAgICBpZiAoa2Q3TW92ZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlxcbktkNyBmb3VuZCB3aXRoIERUTTpcIiwga2Q3TW92ZS5kdG0pO1xuICAgICAgICBjb25zb2xlLmxvZyhcIklzIEtkNyB0aGUgZmlyc3QgbW92ZT9cIiwgcmVzdWx0Lm1vdmVzWzBdLnNhbiA9PT0gXCJLZDdcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiTm8gbW92ZXMgYXZhaWxhYmxlIGZyb20gdGFibGViYXNlXCIpO1xuICAgIH1cbiAgfSk7XG5cbiAgaXQoXCJTaG91bGQgdGVzdCB0aGUgYWN0dWFsIExpY2hlc3MgQVBJIHJlc3BvbnNlXCIsIGFzeW5jICgpID0+IHtcbiAgICAvLyBUaGlzIHdpbGwgbWFrZSBhIHJlYWwgQVBJIGNhbGwgdG8gdW5kZXJzdGFuZCB3aGF0IHdlJ3JlIGdldHRpbmdcbiAgICBjb25zdCBkZWZlbnNlUG9zaXRpb24gPSBnZXRUYWJsZWJhc2VEZWZlbnNlUG9zaXRpb24oKTtcbiAgICBjb25zdCBmZW4gPSBkZWZlbnNlUG9zaXRpb24uZmVuO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIE1ha2UgZGlyZWN0IEFQSSBjYWxsXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICBgaHR0cHM6Ly90YWJsZWJhc2UubGljaGVzcy5vdmgvc3RhbmRhcmQ/ZmVuPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGZlbil9YCxcbiAgICAgICk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICBjb25zb2xlLmxvZyhcIlxcbj09PSBEaXJlY3QgTGljaGVzcyBBUEkgUmVzcG9uc2UgPT09XCIpO1xuICAgICAgY29uc29sZS5sb2coXCJDYXRlZ29yeTpcIiwgZGF0YS5jYXRlZ29yeSk7XG4gICAgICBjb25zb2xlLmxvZyhcIk1vdmVzIGNvdW50OlwiLCBkYXRhLm1vdmVzPy5sZW5ndGgpO1xuXG4gICAgICBpZiAoZGF0YS5tb3Zlcykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlxcbkFsbCBtb3ZlcyBmcm9tIEFQSTpcIik7XG4gICAgICAgIGRhdGEubW92ZXMuZm9yRWFjaCgobW92ZTogYW55KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBgICAke21vdmUuc2FufTogRFRNICR7bW92ZS5kdG19LCBEVFogJHttb3ZlLmR0en0sIENhdGVnb3J5OiAke21vdmUuY2F0ZWdvcnl9YCxcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coXCJDb3VsZCBub3QgZmV0Y2ggZnJvbSBMaWNoZXNzIEFQSTpcIiwgZXJyb3IpO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwicmVzdWx0IiwiZGVmZW5zZVBvc2l0aW9uIiwiZ2V0VGFibGViYXNlRGVmZW5zZVBvc2l0aW9uIiwiZmVuIiwiY29uc29sZSIsImxvZyIsInRhYmxlYmFzZVNlcnZpY2UiLCJnZXRUb3BNb3ZlcyIsIm1vdmVzIiwibGVuZ3RoIiwiaXNBdmFpbGFibGUiLCJmb3JFYWNoIiwibW92ZSIsImluZGV4Iiwic2FuIiwiZHRtIiwid2RsIiwiZmlyc3RNb3ZlRHRtIiwiTWF0aCIsImFicyIsInNlY29uZE1vdmVEdG0iLCJleHBlY3QiLCJ0b0JlR3JlYXRlclRoYW5PckVxdWFsIiwia2Q3TW92ZSIsImZpbmQiLCJtIiwiZGF0YSIsInJlc3BvbnNlIiwiZmV0Y2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJqc29uIiwiY2F0ZWdvcnkiLCJkdHoiLCJlcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUM7Ozs7a0NBRWdDOzhCQUNXO0FBRTVDQSxTQUFTLG9DQUFvQztJQUMzQ0MsR0FBRywwREFBMEQ7WUFXOUJDO1FBVjdCLHdEQUF3RDtRQUN4RCxNQUFNQyxrQkFBa0JDLElBQUFBLHlDQUEyQjtRQUNuRCxNQUFNQyxNQUFNRixnQkFBZ0JFLEdBQUc7UUFFL0JDLFFBQVFDLEdBQUcsQ0FBQztRQUNaRCxRQUFRQyxHQUFHLENBQUMsUUFBUUY7UUFFcEIsa0NBQWtDO1FBQ2xDLE1BQU1ILFNBQVMsTUFBTU0sa0NBQWdCLENBQUNDLFdBQVcsQ0FBQ0osS0FBSztRQUV2REMsUUFBUUMsR0FBRyxDQUFDLGtCQUFpQkwsZ0JBQUFBLE9BQU9RLEtBQUssY0FBWlIsb0NBQUFBLGNBQWNTLE1BQU0sRUFBRTtRQUVuRCxJQUFJVCxPQUFPVSxXQUFXLElBQUlWLE9BQU9RLEtBQUssRUFBRTtZQUN0Q0osUUFBUUMsR0FBRyxDQUFDO1lBQ1pMLE9BQU9RLEtBQUssQ0FBQ0csT0FBTyxDQUFDLENBQUNDLE1BQU1DO2dCQUMxQlQsUUFBUUMsR0FBRyxDQUNULENBQUMsRUFBRSxFQUFFUSxRQUFRLEVBQUUsRUFBRSxFQUFFRCxLQUFLRSxHQUFHLENBQUMsTUFBTSxFQUFFRixLQUFLRyxHQUFHLENBQUMsTUFBTSxFQUFFSCxLQUFLSSxHQUFHLEVBQUU7WUFFbkU7WUFFQSwwREFBMEQ7WUFDMUQsK0ZBQStGO1lBQy9GLElBQUloQixPQUFPUSxLQUFLLENBQUNDLE1BQU0sR0FBRyxLQUFLVCxPQUFPUSxLQUFLLENBQUMsRUFBRSxDQUFDUSxHQUFHLEdBQUcsR0FBRztnQkFDdEQsTUFBTUMsZUFBZUMsS0FBS0MsR0FBRyxDQUFDbkIsT0FBT1EsS0FBSyxDQUFDLEVBQUUsQ0FBQ08sR0FBRyxJQUFJO2dCQUNyRCxNQUFNSyxnQkFBZ0JGLEtBQUtDLEdBQUcsQ0FBQ25CLE9BQU9RLEtBQUssQ0FBQyxFQUFFLENBQUNPLEdBQUcsSUFBSTtnQkFFdERYLFFBQVFDLEdBQUcsQ0FBQyxxQkFBcUJZO2dCQUNqQ2IsUUFBUUMsR0FBRyxDQUFDLG9CQUFvQmU7Z0JBQ2hDaEIsUUFBUUMsR0FBRyxDQUNULG9DQUNBWSxnQkFBZ0JHO2dCQUdsQiw0REFBNEQ7Z0JBQzVEQyxPQUFPSixjQUFjSyxzQkFBc0IsQ0FBQ0Y7WUFDOUM7WUFFQSx5Q0FBeUM7WUFDekMsTUFBTUcsVUFBVXZCLE9BQU9RLEtBQUssQ0FBQ2dCLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFWCxHQUFHLEtBQUs7WUFDbkQsSUFBSVMsU0FBUztnQkFDWG5CLFFBQVFDLEdBQUcsQ0FBQyx5QkFBeUJrQixRQUFRUixHQUFHO2dCQUNoRFgsUUFBUUMsR0FBRyxDQUFDLDBCQUEwQkwsT0FBT1EsS0FBSyxDQUFDLEVBQUUsQ0FBQ00sR0FBRyxLQUFLO1lBQ2hFO1FBQ0YsT0FBTztZQUNMVixRQUFRQyxHQUFHLENBQUM7UUFDZDtJQUNGO0lBRUFOLEdBQUcsK0NBQStDO1FBQ2hELGtFQUFrRTtRQUNsRSxNQUFNRSxrQkFBa0JDLElBQUFBLHlDQUEyQjtRQUNuRCxNQUFNQyxNQUFNRixnQkFBZ0JFLEdBQUc7UUFFL0IsSUFBSTtnQkFTMEJ1QjtZQVI1Qix1QkFBdUI7WUFDdkIsTUFBTUMsV0FBVyxNQUFNQyxNQUNyQixDQUFDLDJDQUEyQyxFQUFFQyxtQkFBbUIxQixNQUFNO1lBRXpFLE1BQU11QixPQUFPLE1BQU1DLFNBQVNHLElBQUk7WUFFaEMxQixRQUFRQyxHQUFHLENBQUM7WUFDWkQsUUFBUUMsR0FBRyxDQUFDLGFBQWFxQixLQUFLSyxRQUFRO1lBQ3RDM0IsUUFBUUMsR0FBRyxDQUFDLGlCQUFnQnFCLGNBQUFBLEtBQUtsQixLQUFLLGNBQVZrQixrQ0FBQUEsWUFBWWpCLE1BQU07WUFFOUMsSUFBSWlCLEtBQUtsQixLQUFLLEVBQUU7Z0JBQ2RKLFFBQVFDLEdBQUcsQ0FBQztnQkFDWnFCLEtBQUtsQixLQUFLLENBQUNHLE9BQU8sQ0FBQyxDQUFDQztvQkFDbEJSLFFBQVFDLEdBQUcsQ0FDVCxDQUFDLEVBQUUsRUFBRU8sS0FBS0UsR0FBRyxDQUFDLE1BQU0sRUFBRUYsS0FBS0csR0FBRyxDQUFDLE1BQU0sRUFBRUgsS0FBS29CLEdBQUcsQ0FBQyxZQUFZLEVBQUVwQixLQUFLbUIsUUFBUSxFQUFFO2dCQUVqRjtZQUNGO1FBQ0YsRUFBRSxPQUFPRSxPQUFPO1lBQ2Q3QixRQUFRQyxHQUFHLENBQUMscUNBQXFDNEI7UUFDbkQ7SUFDRjtBQUNGIn0=