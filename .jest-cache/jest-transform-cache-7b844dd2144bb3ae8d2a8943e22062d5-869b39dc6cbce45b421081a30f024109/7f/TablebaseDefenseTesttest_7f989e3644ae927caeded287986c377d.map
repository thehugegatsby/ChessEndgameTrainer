{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/integration/TablebaseDefenseTest.test.ts"],"sourcesContent":["/**\n * Direct test of TablebaseService DTM sorting for defense\n */\n\nimport { tablebaseService } from \"@shared/services/TablebaseService\";\nimport { getTablebaseDefensePosition } from \"../fixtures/fenPositions\";\n\ndescribe(\"TablebaseService Defense Sorting\", () => {\n  it(\"Should return moves sorted by DTM for losing positions\", async () => {\n    // Use centralized test position for DTM defense sorting\n    const defensePosition = getTablebaseDefensePosition();\n    const fen = defensePosition.fen;\n\n    console.log(\"\\n=== Testing TablebaseService directly ===\");\n    console.log(\"FEN:\", fen);\n\n    // Get top 10 moves from tablebase\n    const result = await tablebaseService.getTopMoves(fen, 10);\n\n    console.log(\"API returned:\", result.moves?.length, \"moves\");\n\n    if (result.isAvailable && result.moves) {\n      console.log(\"\\nMoves returned by TablebaseService:\");\n      result.moves.forEach((move, index) => {\n        console.log(\n          `  ${index + 1}. ${move.san}: DTM ${move.dtm}, WDL ${move.wdl}`,\n        );\n      });\n\n      // Check if moves are sorted correctly for losing position\n      // For losing positions (WDL < 0), moves should be sorted by DTM descending (highest DTM first)\n      if (result.moves.length > 1 && result.moves[0].wdl < 0) {\n        const firstMoveDtm = Math.abs(result.moves[0].dtm || 0);\n        const secondMoveDtm = Math.abs(result.moves[1].dtm || 0);\n\n        console.log(\"\\nFirst move DTM:\", firstMoveDtm);\n        console.log(\"Second move DTM:\", secondMoveDtm);\n        console.log(\n          \"Is correctly sorted for defense?\",\n          firstMoveDtm >= secondMoveDtm,\n        );\n\n        // The first move should have the highest DTM (best defense)\n        expect(firstMoveDtm).toBeGreaterThanOrEqual(secondMoveDtm);\n      }\n\n      // Check if Kd7 (DTM -27) is ranked first\n      const kd7Move = result.moves.find((m) => m.san === \"Kd7\");\n      if (kd7Move) {\n        console.log(\"\\nKd7 found with DTM:\", kd7Move.dtm);\n        console.log(\"Is Kd7 the first move?\", result.moves[0].san === \"Kd7\");\n      }\n    } else {\n      console.log(\"No moves available from tablebase\");\n    }\n  });\n\n  it(\"Should test the actual Lichess API response\", async () => {\n    // This will make a real API call to understand what we're getting\n    const defensePosition = getTablebaseDefensePosition();\n    const fen = defensePosition.fen;\n\n    try {\n      // Make direct API call\n      const response = await fetch(\n        `https://tablebase.lichess.ovh/standard?fen=${encodeURIComponent(fen)}`,\n      );\n      const data = await response.json();\n\n      console.log(\"\\n=== Direct Lichess API Response ===\");\n      console.log(\"Category:\", data.category);\n      console.log(\"Moves count:\", data.moves?.length);\n\n      if (data.moves) {\n        console.log(\"\\nAll moves from API:\");\n        data.moves.forEach((move: any) => {\n          console.log(\n            `  ${move.san}: DTM ${move.dtm}, DTZ ${move.dtz}, Category: ${move.category}`,\n          );\n        });\n      }\n    } catch (error) {\n      console.log(\"Could not fetch from Lichess API:\", error);\n    }\n  });\n});\n"],"names":["describe","it","result","defensePosition","getTablebaseDefensePosition","fen","console","log","tablebaseService","getTopMoves","moves","length","isAvailable","forEach","move","index","san","dtm","wdl","firstMoveDtm","Math","abs","secondMoveDtm","expect","toBeGreaterThanOrEqual","kd7Move","find","m","data","response","fetch","encodeURIComponent","json","category","dtz","error"],"mappings":"AAAA;;CAEC;;;;kCAEgC;8BACW;AAE5CA,SAAS,oCAAoC;IAC3CC,GAAG,0DAA0D;YAW9BC;QAV7B,wDAAwD;QACxD,MAAMC,kBAAkBC,IAAAA,yCAA2B;QACnD,MAAMC,MAAMF,gBAAgBE,GAAG;QAE/BC,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC,QAAQF;QAEpB,kCAAkC;QAClC,MAAMH,SAAS,MAAMM,kCAAgB,CAACC,WAAW,CAACJ,KAAK;QAEvDC,QAAQC,GAAG,CAAC,kBAAiBL,gBAAAA,OAAOQ,KAAK,cAAZR,oCAAAA,cAAcS,MAAM,EAAE;QAEnD,IAAIT,OAAOU,WAAW,IAAIV,OAAOQ,KAAK,EAAE;YACtCJ,QAAQC,GAAG,CAAC;YACZL,OAAOQ,KAAK,CAACG,OAAO,CAAC,CAACC,MAAMC;gBAC1BT,QAAQC,GAAG,CACT,CAAC,EAAE,EAAEQ,QAAQ,EAAE,EAAE,EAAED,KAAKE,GAAG,CAAC,MAAM,EAAEF,KAAKG,GAAG,CAAC,MAAM,EAAEH,KAAKI,GAAG,EAAE;YAEnE;YAEA,0DAA0D;YAC1D,+FAA+F;YAC/F,IAAIhB,OAAOQ,KAAK,CAACC,MAAM,GAAG,KAAKT,OAAOQ,KAAK,CAAC,EAAE,CAACQ,GAAG,GAAG,GAAG;gBACtD,MAAMC,eAAeC,KAAKC,GAAG,CAACnB,OAAOQ,KAAK,CAAC,EAAE,CAACO,GAAG,IAAI;gBACrD,MAAMK,gBAAgBF,KAAKC,GAAG,CAACnB,OAAOQ,KAAK,CAAC,EAAE,CAACO,GAAG,IAAI;gBAEtDX,QAAQC,GAAG,CAAC,qBAAqBY;gBACjCb,QAAQC,GAAG,CAAC,oBAAoBe;gBAChChB,QAAQC,GAAG,CACT,oCACAY,gBAAgBG;gBAGlB,4DAA4D;gBAC5DC,OAAOJ,cAAcK,sBAAsB,CAACF;YAC9C;YAEA,yCAAyC;YACzC,MAAMG,UAAUvB,OAAOQ,KAAK,CAACgB,IAAI,CAAC,CAACC,IAAMA,EAAEX,GAAG,KAAK;YACnD,IAAIS,SAAS;gBACXnB,QAAQC,GAAG,CAAC,yBAAyBkB,QAAQR,GAAG;gBAChDX,QAAQC,GAAG,CAAC,0BAA0BL,OAAOQ,KAAK,CAAC,EAAE,CAACM,GAAG,KAAK;YAChE;QACF,OAAO;YACLV,QAAQC,GAAG,CAAC;QACd;IACF;IAEAN,GAAG,+CAA+C;QAChD,kEAAkE;QAClE,MAAME,kBAAkBC,IAAAA,yCAA2B;QACnD,MAAMC,MAAMF,gBAAgBE,GAAG;QAE/B,IAAI;gBAS0BuB;YAR5B,uBAAuB;YACvB,MAAMC,WAAW,MAAMC,MACrB,CAAC,2CAA2C,EAAEC,mBAAmB1B,MAAM;YAEzE,MAAMuB,OAAO,MAAMC,SAASG,IAAI;YAEhC1B,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC,aAAaqB,KAAKK,QAAQ;YACtC3B,QAAQC,GAAG,CAAC,iBAAgBqB,cAAAA,KAAKlB,KAAK,cAAVkB,kCAAAA,YAAYjB,MAAM;YAE9C,IAAIiB,KAAKlB,KAAK,EAAE;gBACdJ,QAAQC,GAAG,CAAC;gBACZqB,KAAKlB,KAAK,CAACG,OAAO,CAAC,CAACC;oBAClBR,QAAQC,GAAG,CACT,CAAC,EAAE,EAAEO,KAAKE,GAAG,CAAC,MAAM,EAAEF,KAAKG,GAAG,CAAC,MAAM,EAAEH,KAAKoB,GAAG,CAAC,YAAY,EAAEpB,KAAKmB,QAAQ,EAAE;gBAEjF;YACF;QACF,EAAE,OAAOE,OAAO;YACd7B,QAAQC,GAAG,CAAC,qCAAqC4B;QACnD;IACF;AACF"}