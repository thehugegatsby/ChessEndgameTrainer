{"version":3,"names":["cov_cmrazaa5i","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","assessTablebaseMoveQuality","wdlBefore","wdlAfter","wdlChange","quality","reason","isTablebaseAnalysis","tablebaseInfo"],"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/moveQuality.ts"],"sourcesContent":["/**\n * @file Move quality assessment utilities for tablebase analysis\n * @module utils/moveQuality\n *\n * @description\n * Pure functions for assessing chess move quality based on tablebase WDL\n * (Win/Draw/Loss) values. Provides comprehensive analysis of move impact\n * including critical move detection and human-readable quality descriptions.\n *\n * @remarks\n * Key features:\n * - WDL-based move quality assessment (excellent, good, mistake)\n * - Critical move detection for position evaluation changes\n * - Human-readable quality descriptions for UI display\n * - Perspective-aware analysis (player vs opponent viewpoint)\n *\n * All functions are pure and side-effect free, designed for use in\n * performance-critical contexts like real-time move analysis.\n */\n\nimport type {\n  SimplifiedMoveQualityResult,\n  MoveQualityType,\n} from \"@shared/types/evaluation\";\n\n/**\n * Analyzes move quality based on tablebase WDL values\n *\n * @param {number} wdlBefore - WDL value before the move (from player's perspective)\n * @param {number} wdlAfter - WDL value after the move (from opponent's perspective, needs negation)\n * @returns {SimplifiedMoveQualityResult} Comprehensive move quality assessment\n *\n * @description\n * Compares tablebase evaluations before and after a move to determine\n * move quality. Handles perspective conversion since wdlAfter represents\n * the opponent's view and must be negated for player perspective analysis.\n *\n * @remarks\n * Quality categories:\n * - excellent: Move improves WDL evaluation (wdlChange > 0)\n * - good: Move maintains WDL evaluation (wdlChange = 0)\n * - mistake: Move worsens WDL evaluation (wdlChange < 0)\n *\n * The WDL change calculation: -wdlAfter - wdlBefore accounts for\n * perspective flip when it becomes the opponent's turn.\n *\n * @example\n * ```typescript\n * // Excellent move: Win to win (maintains advantage)\n * const result1 = assessTablebaseMoveQuality(2, -2);\n * // { quality: 'excellent', reason: 'Optimal tablebase move' }\n *\n * // Mistake: Win to draw\n * const result2 = assessTablebaseMoveQuality(2, 0);\n * // { quality: 'mistake', reason: 'Worsens tablebase position' }\n * ```\n */\nexport function assessTablebaseMoveQuality(\n  wdlBefore: number,\n  wdlAfter: number,\n): SimplifiedMoveQualityResult {\n  // Since we're analyzing from the player's perspective who made the move,\n  // we need to negate the WDL for the position after (opponent's turn)\n  const wdlChange = -wdlAfter - wdlBefore;\n\n  let quality: MoveQualityType;\n  let reason: string;\n\n  if (wdlChange > 0) {\n    quality = \"excellent\";\n    reason = \"Optimal tablebase move\";\n  } else if (wdlChange === 0) {\n    quality = \"good\";\n    reason = \"Maintains tablebase evaluation\";\n  } else {\n    quality = \"mistake\";\n    reason = \"Worsens tablebase position\";\n  }\n\n  return {\n    quality,\n    reason,\n    isTablebaseAnalysis: true,\n    tablebaseInfo: {\n      wdlBefore,\n      wdlAfter: -wdlAfter,\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]}