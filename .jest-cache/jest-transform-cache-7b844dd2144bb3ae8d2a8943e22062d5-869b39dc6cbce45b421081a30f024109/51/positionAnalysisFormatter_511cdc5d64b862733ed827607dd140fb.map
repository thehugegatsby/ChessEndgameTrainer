{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/positionAnalysisFormatter.ts"],"sourcesContent":["/**\n * @file Position analysis formatting utilities\n * @module utils/positionAnalysisFormatter\n *\n * @description\n * Provides utilities for formatting tablebase position analysis data\n * for UI display. Converts raw tablebase evaluation data into\n * human-readable formats with appropriate styling classes.\n *\n * @remarks\n * Key features:\n * - WDL to score conversion for move ordering\n * - Human-readable outcome descriptions\n * - CSS class generation for visual styling\n * - Support for 50-move rule positions\n * - DTZ (Distance to Zero) formatting\n *\n * The module uses domain-centric naming to decouple\n * formatting logic from specific data sources.\n */\n\nimport type { TablebaseResult } from \"@shared/services/TablebaseService\";\n\n/**\n * Formatted position analysis for UI display\n *\n * @interface PositionAnalysisDisplay\n *\n * @description\n * Contains all necessary data for rendering position\n * evaluations in the UI with appropriate styling.\n */\nexport interface PositionAnalysisDisplay {\n  /** Human-readable evaluation text (e.g., \"Win in 15\") */\n  displayText: string;\n  /** CSS class name for styling (winning/losing/draw) */\n  className: string;\n  /** Numeric score for sorting (-10000 to 10000) */\n  score: number;\n  /** Whether position is winning */\n  isWin: boolean;\n  /** Whether position is drawn */\n  isDraw: boolean;\n  /** Whether position is losing */\n  isLoss: boolean;\n}\n\n/**\n * Format tablebase result for display\n *\n * @param {TablebaseResult} result - Raw tablebase evaluation data\n * @returns {PositionAnalysisDisplay} Formatted data for UI rendering\n *\n * @example\n * const display = formatPositionAnalysis({\n *   wdl: 2, dtz: 15, category: \"win\", ...\n * });\n * // Returns: { displayText: \"Win in 15\", className: \"winning\", score: 9985, ... }\n *\n * @performance O(1) - Simple calculations only\n */\nexport function formatPositionAnalysis(\n  result: TablebaseResult,\n): PositionAnalysisDisplay {\n  const { category, dtz, wdl } = result;\n\n  let displayText: string;\n  let className: string;\n\n  if (category === \"draw\" || dtz === 0) {\n    displayText = \"Draw\";\n    className = \"draw\";\n  } else if (category === \"win\" || (dtz !== null && dtz > 0)) {\n    displayText = dtz !== null ? `Win in ${dtz}` : \"Win\";\n    className = \"winning\";\n  } else {\n    displayText = dtz !== null ? `Loss in ${Math.abs(dtz)}` : \"Loss\";\n    className = \"losing\";\n  }\n\n  return {\n    displayText,\n    className,\n    score: wdlToScore(wdl, dtz),\n    isWin: category === \"win\" || category === \"cursed-win\",\n    isDraw: category === \"draw\",\n    isLoss: category === \"loss\" || category === \"blessed-loss\",\n  };\n}\n\n/**\n * Convert WDL to numeric score for sorting/comparison\n * Higher scores are better for the player\n *\n * @param {number} wdl - Win/Draw/Loss value (-2 to 2)\n * @param {number | null} dtz - Distance to zeroing (affects score granularity)\n * @returns {number} Numeric score for comparison (higher = better)\n *\n * @remarks\n * Scoring algorithm:\n * - Win (wdl=2): 10000 - dtz (faster wins score higher)\n * - Loss (wdl=-2): -10000 + dtz (longer resistance scores higher)\n * - Cursed win (wdl=1): 8000 - dtz (discounted due to 50-move rule)\n * - Blessed loss (wdl=-1): -8000 + dtz (less bad due to 50-move rule)\n * - Draw (wdl=0): 0 (neutral)\n *\n * @example\n * wdlToScore(2, 10)  // 9990 (win in 10 moves)\n * wdlToScore(-2, 30) // -9970 (loss in 30 moves)\n * wdlToScore(0, null) // 0 (draw)\n *\n * @performance O(1) - Basic arithmetic only\n */\nexport function wdlToScore(wdl: number, dtz: number | null): number {\n  const BASE_SCORE = 10000;\n\n  if (wdl === 2) {\n    // Win: High positive score, reduced by DTZ (faster wins are better)\n    return BASE_SCORE - Math.abs(dtz || 0);\n  } else if (wdl === -2) {\n    // Loss: High negative score, increased by DTZ (longer resistance is better)\n    return -BASE_SCORE + Math.abs(dtz || 0);\n  } else if (wdl === 1) {\n    // Cursed win (50-move rule)\n    return BASE_SCORE * 0.8 - Math.abs(dtz || 0);\n  } else if (wdl === -1) {\n    // Blessed loss (50-move rule)\n    return -BASE_SCORE * 0.8 + Math.abs(dtz || 0);\n  }\n  // Draw\n  return 0;\n}\n"],"names":["formatPositionAnalysis","wdlToScore","result","category","dtz","wdl","displayText","className","Math","abs","score","isWin","isDraw","isLoss","BASE_SCORE"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;CAmBC;;;;;;;;;;;QA0CeA;eAAAA;;QAoDAC;eAAAA;;;AApDT,SAASD,uBACdE,MAAuB;IAEvB,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,GAAG,EAAE,GAAGH;IAE/B,IAAII;IACJ,IAAIC;IAEJ,IAAIJ,aAAa,UAAUC,QAAQ,GAAG;QACpCE,cAAc;QACdC,YAAY;IACd,OAAO,IAAIJ,aAAa,SAAUC,QAAQ,QAAQA,MAAM,GAAI;QAC1DE,cAAcF,QAAQ,OAAO,CAAC,OAAO,EAAEA,KAAK,GAAG;QAC/CG,YAAY;IACd,OAAO;QACLD,cAAcF,QAAQ,OAAO,CAAC,QAAQ,EAAEI,KAAKC,GAAG,CAACL,MAAM,GAAG;QAC1DG,YAAY;IACd;IAEA,OAAO;QACLD;QACAC;QACAG,OAAOT,WAAWI,KAAKD;QACvBO,OAAOR,aAAa,SAASA,aAAa;QAC1CS,QAAQT,aAAa;QACrBU,QAAQV,aAAa,UAAUA,aAAa;IAC9C;AACF;AAyBO,SAASF,WAAWI,GAAW,EAAED,GAAkB;IACxD,MAAMU,aAAa;IAEnB,IAAIT,QAAQ,GAAG;QACb,oEAAoE;QACpE,OAAOS,aAAaN,KAAKC,GAAG,CAACL,OAAO;IACtC,OAAO,IAAIC,QAAQ,CAAC,GAAG;QACrB,4EAA4E;QAC5E,OAAO,CAACS,aAAaN,KAAKC,GAAG,CAACL,OAAO;IACvC,OAAO,IAAIC,QAAQ,GAAG;QACpB,4BAA4B;QAC5B,OAAOS,aAAa,MAAMN,KAAKC,GAAG,CAACL,OAAO;IAC5C,OAAO,IAAIC,QAAQ,CAAC,GAAG;QACrB,8BAA8B;QAC9B,OAAO,CAACS,aAAa,MAAMN,KAAKC,GAAG,CAACL,OAAO;IAC7C;IACA,OAAO;IACP,OAAO;AACT"}