23a3311250b686aa1e2180cb1f2becac
/**
 * @file Position analysis formatting utilities
 * @module utils/positionAnalysisFormatter
 *
 * @description
 * Provides utilities for formatting tablebase position analysis data
 * for UI display. Converts raw tablebase evaluation data into
 * human-readable formats with appropriate styling classes.
 *
 * @remarks
 * Key features:
 * - WDL to score conversion for move ordering
 * - Human-readable outcome descriptions
 * - CSS class generation for visual styling
 * - Support for 50-move rule positions
 * - DTZ (Distance to Zero) formatting
 *
 * The module uses domain-centric naming to decouple
 * formatting logic from specific data sources.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get formatPositionAnalysis () {
        return formatPositionAnalysis;
    },
    get wdlToScore () {
        return wdlToScore;
    }
});
function formatPositionAnalysis(result) {
    const { category, dtz, wdl } = result;
    let displayText;
    let className;
    if (category === "draw" || dtz === 0) {
        displayText = "Draw";
        className = "draw";
    } else if (category === "win" || dtz !== null && dtz > 0) {
        displayText = dtz !== null ? `Win in ${dtz}` : "Win";
        className = "winning";
    } else {
        displayText = dtz !== null ? `Loss in ${Math.abs(dtz)}` : "Loss";
        className = "losing";
    }
    return {
        displayText,
        className,
        score: wdlToScore(wdl, dtz),
        isWin: category === "win" || category === "cursed-win",
        isDraw: category === "draw",
        isLoss: category === "loss" || category === "blessed-loss"
    };
}
function wdlToScore(wdl, dtz) {
    const BASE_SCORE = 10000;
    if (wdl === 2) {
        // Win: High positive score, reduced by DTZ (faster wins are better)
        return BASE_SCORE - Math.abs(dtz || 0);
    } else if (wdl === -2) {
        // Loss: High negative score, increased by DTZ (longer resistance is better)
        return -BASE_SCORE + Math.abs(dtz || 0);
    } else if (wdl === 1) {
        // Cursed win (50-move rule)
        return BASE_SCORE * 0.8 - Math.abs(dtz || 0);
    } else if (wdl === -1) {
        // Blessed loss (50-move rule)
        return -BASE_SCORE * 0.8 + Math.abs(dtz || 0);
    }
    // Draw
    return 0;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL3V0aWxzL3Bvc2l0aW9uQW5hbHlzaXNGb3JtYXR0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBQb3NpdGlvbiBhbmFseXNpcyBmb3JtYXR0aW5nIHV0aWxpdGllc1xuICogQG1vZHVsZSB1dGlscy9wb3NpdGlvbkFuYWx5c2lzRm9ybWF0dGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBQcm92aWRlcyB1dGlsaXRpZXMgZm9yIGZvcm1hdHRpbmcgdGFibGViYXNlIHBvc2l0aW9uIGFuYWx5c2lzIGRhdGFcbiAqIGZvciBVSSBkaXNwbGF5LiBDb252ZXJ0cyByYXcgdGFibGViYXNlIGV2YWx1YXRpb24gZGF0YSBpbnRvXG4gKiBodW1hbi1yZWFkYWJsZSBmb3JtYXRzIHdpdGggYXBwcm9wcmlhdGUgc3R5bGluZyBjbGFzc2VzLlxuICpcbiAqIEByZW1hcmtzXG4gKiBLZXkgZmVhdHVyZXM6XG4gKiAtIFdETCB0byBzY29yZSBjb252ZXJzaW9uIGZvciBtb3ZlIG9yZGVyaW5nXG4gKiAtIEh1bWFuLXJlYWRhYmxlIG91dGNvbWUgZGVzY3JpcHRpb25zXG4gKiAtIENTUyBjbGFzcyBnZW5lcmF0aW9uIGZvciB2aXN1YWwgc3R5bGluZ1xuICogLSBTdXBwb3J0IGZvciA1MC1tb3ZlIHJ1bGUgcG9zaXRpb25zXG4gKiAtIERUWiAoRGlzdGFuY2UgdG8gWmVybykgZm9ybWF0dGluZ1xuICpcbiAqIFRoZSBtb2R1bGUgdXNlcyBkb21haW4tY2VudHJpYyBuYW1pbmcgdG8gZGVjb3VwbGVcbiAqIGZvcm1hdHRpbmcgbG9naWMgZnJvbSBzcGVjaWZpYyBkYXRhIHNvdXJjZXMuXG4gKi9cblxuaW1wb3J0IHR5cGUgeyBUYWJsZWJhc2VSZXN1bHQgfSBmcm9tIFwiQHNoYXJlZC9zZXJ2aWNlcy9UYWJsZWJhc2VTZXJ2aWNlXCI7XG5cbi8qKlxuICogRm9ybWF0dGVkIHBvc2l0aW9uIGFuYWx5c2lzIGZvciBVSSBkaXNwbGF5XG4gKlxuICogQGludGVyZmFjZSBQb3NpdGlvbkFuYWx5c2lzRGlzcGxheVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udGFpbnMgYWxsIG5lY2Vzc2FyeSBkYXRhIGZvciByZW5kZXJpbmcgcG9zaXRpb25cbiAqIGV2YWx1YXRpb25zIGluIHRoZSBVSSB3aXRoIGFwcHJvcHJpYXRlIHN0eWxpbmcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUG9zaXRpb25BbmFseXNpc0Rpc3BsYXkge1xuICAvKiogSHVtYW4tcmVhZGFibGUgZXZhbHVhdGlvbiB0ZXh0IChlLmcuLCBcIldpbiBpbiAxNVwiKSAqL1xuICBkaXNwbGF5VGV4dDogc3RyaW5nO1xuICAvKiogQ1NTIGNsYXNzIG5hbWUgZm9yIHN0eWxpbmcgKHdpbm5pbmcvbG9zaW5nL2RyYXcpICovXG4gIGNsYXNzTmFtZTogc3RyaW5nO1xuICAvKiogTnVtZXJpYyBzY29yZSBmb3Igc29ydGluZyAoLTEwMDAwIHRvIDEwMDAwKSAqL1xuICBzY29yZTogbnVtYmVyO1xuICAvKiogV2hldGhlciBwb3NpdGlvbiBpcyB3aW5uaW5nICovXG4gIGlzV2luOiBib29sZWFuO1xuICAvKiogV2hldGhlciBwb3NpdGlvbiBpcyBkcmF3biAqL1xuICBpc0RyYXc6IGJvb2xlYW47XG4gIC8qKiBXaGV0aGVyIHBvc2l0aW9uIGlzIGxvc2luZyAqL1xuICBpc0xvc3M6IGJvb2xlYW47XG59XG5cbi8qKlxuICogRm9ybWF0IHRhYmxlYmFzZSByZXN1bHQgZm9yIGRpc3BsYXlcbiAqXG4gKiBAcGFyYW0ge1RhYmxlYmFzZVJlc3VsdH0gcmVzdWx0IC0gUmF3IHRhYmxlYmFzZSBldmFsdWF0aW9uIGRhdGFcbiAqIEByZXR1cm5zIHtQb3NpdGlvbkFuYWx5c2lzRGlzcGxheX0gRm9ybWF0dGVkIGRhdGEgZm9yIFVJIHJlbmRlcmluZ1xuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBkaXNwbGF5ID0gZm9ybWF0UG9zaXRpb25BbmFseXNpcyh7XG4gKiAgIHdkbDogMiwgZHR6OiAxNSwgY2F0ZWdvcnk6IFwid2luXCIsIC4uLlxuICogfSk7XG4gKiAvLyBSZXR1cm5zOiB7IGRpc3BsYXlUZXh0OiBcIldpbiBpbiAxNVwiLCBjbGFzc05hbWU6IFwid2lubmluZ1wiLCBzY29yZTogOTk4NSwgLi4uIH1cbiAqXG4gKiBAcGVyZm9ybWFuY2UgTygxKSAtIFNpbXBsZSBjYWxjdWxhdGlvbnMgb25seVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0UG9zaXRpb25BbmFseXNpcyhcbiAgcmVzdWx0OiBUYWJsZWJhc2VSZXN1bHQsXG4pOiBQb3NpdGlvbkFuYWx5c2lzRGlzcGxheSB7XG4gIGNvbnN0IHsgY2F0ZWdvcnksIGR0eiwgd2RsIH0gPSByZXN1bHQ7XG5cbiAgbGV0IGRpc3BsYXlUZXh0OiBzdHJpbmc7XG4gIGxldCBjbGFzc05hbWU6IHN0cmluZztcblxuICBpZiAoY2F0ZWdvcnkgPT09IFwiZHJhd1wiIHx8IGR0eiA9PT0gMCkge1xuICAgIGRpc3BsYXlUZXh0ID0gXCJEcmF3XCI7XG4gICAgY2xhc3NOYW1lID0gXCJkcmF3XCI7XG4gIH0gZWxzZSBpZiAoY2F0ZWdvcnkgPT09IFwid2luXCIgfHwgKGR0eiAhPT0gbnVsbCAmJiBkdHogPiAwKSkge1xuICAgIGRpc3BsYXlUZXh0ID0gZHR6ICE9PSBudWxsID8gYFdpbiBpbiAke2R0en1gIDogXCJXaW5cIjtcbiAgICBjbGFzc05hbWUgPSBcIndpbm5pbmdcIjtcbiAgfSBlbHNlIHtcbiAgICBkaXNwbGF5VGV4dCA9IGR0eiAhPT0gbnVsbCA/IGBMb3NzIGluICR7TWF0aC5hYnMoZHR6KX1gIDogXCJMb3NzXCI7XG4gICAgY2xhc3NOYW1lID0gXCJsb3NpbmdcIjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZGlzcGxheVRleHQsXG4gICAgY2xhc3NOYW1lLFxuICAgIHNjb3JlOiB3ZGxUb1Njb3JlKHdkbCwgZHR6KSxcbiAgICBpc1dpbjogY2F0ZWdvcnkgPT09IFwid2luXCIgfHwgY2F0ZWdvcnkgPT09IFwiY3Vyc2VkLXdpblwiLFxuICAgIGlzRHJhdzogY2F0ZWdvcnkgPT09IFwiZHJhd1wiLFxuICAgIGlzTG9zczogY2F0ZWdvcnkgPT09IFwibG9zc1wiIHx8IGNhdGVnb3J5ID09PSBcImJsZXNzZWQtbG9zc1wiLFxuICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnQgV0RMIHRvIG51bWVyaWMgc2NvcmUgZm9yIHNvcnRpbmcvY29tcGFyaXNvblxuICogSGlnaGVyIHNjb3JlcyBhcmUgYmV0dGVyIGZvciB0aGUgcGxheWVyXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHdkbCAtIFdpbi9EcmF3L0xvc3MgdmFsdWUgKC0yIHRvIDIpXG4gKiBAcGFyYW0ge251bWJlciB8IG51bGx9IGR0eiAtIERpc3RhbmNlIHRvIHplcm9pbmcgKGFmZmVjdHMgc2NvcmUgZ3JhbnVsYXJpdHkpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1lcmljIHNjb3JlIGZvciBjb21wYXJpc29uIChoaWdoZXIgPSBiZXR0ZXIpXG4gKlxuICogQHJlbWFya3NcbiAqIFNjb3JpbmcgYWxnb3JpdGhtOlxuICogLSBXaW4gKHdkbD0yKTogMTAwMDAgLSBkdHogKGZhc3RlciB3aW5zIHNjb3JlIGhpZ2hlcilcbiAqIC0gTG9zcyAod2RsPS0yKTogLTEwMDAwICsgZHR6IChsb25nZXIgcmVzaXN0YW5jZSBzY29yZXMgaGlnaGVyKVxuICogLSBDdXJzZWQgd2luICh3ZGw9MSk6IDgwMDAgLSBkdHogKGRpc2NvdW50ZWQgZHVlIHRvIDUwLW1vdmUgcnVsZSlcbiAqIC0gQmxlc3NlZCBsb3NzICh3ZGw9LTEpOiAtODAwMCArIGR0eiAobGVzcyBiYWQgZHVlIHRvIDUwLW1vdmUgcnVsZSlcbiAqIC0gRHJhdyAod2RsPTApOiAwIChuZXV0cmFsKVxuICpcbiAqIEBleGFtcGxlXG4gKiB3ZGxUb1Njb3JlKDIsIDEwKSAgLy8gOTk5MCAod2luIGluIDEwIG1vdmVzKVxuICogd2RsVG9TY29yZSgtMiwgMzApIC8vIC05OTcwIChsb3NzIGluIDMwIG1vdmVzKVxuICogd2RsVG9TY29yZSgwLCBudWxsKSAvLyAwIChkcmF3KVxuICpcbiAqIEBwZXJmb3JtYW5jZSBPKDEpIC0gQmFzaWMgYXJpdGhtZXRpYyBvbmx5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3ZGxUb1Njb3JlKHdkbDogbnVtYmVyLCBkdHo6IG51bWJlciB8IG51bGwpOiBudW1iZXIge1xuICBjb25zdCBCQVNFX1NDT1JFID0gMTAwMDA7XG5cbiAgaWYgKHdkbCA9PT0gMikge1xuICAgIC8vIFdpbjogSGlnaCBwb3NpdGl2ZSBzY29yZSwgcmVkdWNlZCBieSBEVFogKGZhc3RlciB3aW5zIGFyZSBiZXR0ZXIpXG4gICAgcmV0dXJuIEJBU0VfU0NPUkUgLSBNYXRoLmFicyhkdHogfHwgMCk7XG4gIH0gZWxzZSBpZiAod2RsID09PSAtMikge1xuICAgIC8vIExvc3M6IEhpZ2ggbmVnYXRpdmUgc2NvcmUsIGluY3JlYXNlZCBieSBEVFogKGxvbmdlciByZXNpc3RhbmNlIGlzIGJldHRlcilcbiAgICByZXR1cm4gLUJBU0VfU0NPUkUgKyBNYXRoLmFicyhkdHogfHwgMCk7XG4gIH0gZWxzZSBpZiAod2RsID09PSAxKSB7XG4gICAgLy8gQ3Vyc2VkIHdpbiAoNTAtbW92ZSBydWxlKVxuICAgIHJldHVybiBCQVNFX1NDT1JFICogMC44IC0gTWF0aC5hYnMoZHR6IHx8IDApO1xuICB9IGVsc2UgaWYgKHdkbCA9PT0gLTEpIHtcbiAgICAvLyBCbGVzc2VkIGxvc3MgKDUwLW1vdmUgcnVsZSlcbiAgICByZXR1cm4gLUJBU0VfU0NPUkUgKiAwLjggKyBNYXRoLmFicyhkdHogfHwgMCk7XG4gIH1cbiAgLy8gRHJhd1xuICByZXR1cm4gMDtcbn1cbiJdLCJuYW1lcyI6WyJmb3JtYXRQb3NpdGlvbkFuYWx5c2lzIiwid2RsVG9TY29yZSIsInJlc3VsdCIsImNhdGVnb3J5IiwiZHR6Iiwid2RsIiwiZGlzcGxheVRleHQiLCJjbGFzc05hbWUiLCJNYXRoIiwiYWJzIiwic2NvcmUiLCJpc1dpbiIsImlzRHJhdyIsImlzTG9zcyIsIkJBU0VfU0NPUkUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBbUJDOzs7Ozs7Ozs7OztRQTBDZUE7ZUFBQUE7O1FBb0RBQztlQUFBQTs7O0FBcERULFNBQVNELHVCQUNkRSxNQUF1QjtJQUV2QixNQUFNLEVBQUVDLFFBQVEsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUUsR0FBR0g7SUFFL0IsSUFBSUk7SUFDSixJQUFJQztJQUVKLElBQUlKLGFBQWEsVUFBVUMsUUFBUSxHQUFHO1FBQ3BDRSxjQUFjO1FBQ2RDLFlBQVk7SUFDZCxPQUFPLElBQUlKLGFBQWEsU0FBVUMsUUFBUSxRQUFRQSxNQUFNLEdBQUk7UUFDMURFLGNBQWNGLFFBQVEsT0FBTyxDQUFDLE9BQU8sRUFBRUEsS0FBSyxHQUFHO1FBQy9DRyxZQUFZO0lBQ2QsT0FBTztRQUNMRCxjQUFjRixRQUFRLE9BQU8sQ0FBQyxRQUFRLEVBQUVJLEtBQUtDLEdBQUcsQ0FBQ0wsTUFBTSxHQUFHO1FBQzFERyxZQUFZO0lBQ2Q7SUFFQSxPQUFPO1FBQ0xEO1FBQ0FDO1FBQ0FHLE9BQU9ULFdBQVdJLEtBQUtEO1FBQ3ZCTyxPQUFPUixhQUFhLFNBQVNBLGFBQWE7UUFDMUNTLFFBQVFULGFBQWE7UUFDckJVLFFBQVFWLGFBQWEsVUFBVUEsYUFBYTtJQUM5QztBQUNGO0FBeUJPLFNBQVNGLFdBQVdJLEdBQVcsRUFBRUQsR0FBa0I7SUFDeEQsTUFBTVUsYUFBYTtJQUVuQixJQUFJVCxRQUFRLEdBQUc7UUFDYixvRUFBb0U7UUFDcEUsT0FBT1MsYUFBYU4sS0FBS0MsR0FBRyxDQUFDTCxPQUFPO0lBQ3RDLE9BQU8sSUFBSUMsUUFBUSxDQUFDLEdBQUc7UUFDckIsNEVBQTRFO1FBQzVFLE9BQU8sQ0FBQ1MsYUFBYU4sS0FBS0MsR0FBRyxDQUFDTCxPQUFPO0lBQ3ZDLE9BQU8sSUFBSUMsUUFBUSxHQUFHO1FBQ3BCLDRCQUE0QjtRQUM1QixPQUFPUyxhQUFhLE1BQU1OLEtBQUtDLEdBQUcsQ0FBQ0wsT0FBTztJQUM1QyxPQUFPLElBQUlDLFFBQVEsQ0FBQyxHQUFHO1FBQ3JCLDhCQUE4QjtRQUM5QixPQUFPLENBQUNTLGFBQWEsTUFBTU4sS0FBS0MsR0FBRyxDQUFDTCxPQUFPO0lBQzdDO0lBQ0EsT0FBTztJQUNQLE9BQU87QUFDVCJ9