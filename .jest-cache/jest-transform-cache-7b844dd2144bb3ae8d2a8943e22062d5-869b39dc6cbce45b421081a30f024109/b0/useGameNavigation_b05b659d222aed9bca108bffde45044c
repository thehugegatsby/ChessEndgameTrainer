01b685482a7f6847e066d7ef66081fe6
/**
 * @file Game navigation hook for chess training board
 * @module hooks/useGameNavigation
 * 
 * @description
 * Custom hook that encapsulates move history navigation logic for chess training.
 * Extracted from TrainingBoard to separate navigation concerns from UI rendering.
 * Handles move history tracking, previous FEN calculation, and parent callbacks.
 * 
 * @remarks
 * Key responsibilities:
 * - Previous FEN calculation for tablebase comparison
 * - Move history change notifications to parent
 * - Jump-to-move functionality coordination
 * - Chess game state reconstruction for navigation
 * 
 * This hook maintains navigation state logic while providing
 * a clean interface for move history management.
 * 
 * @example
 * ```tsx
 * const gameNavigation = useGameNavigation({
 *   history,
 *   initialFen,
 *   currentFen,
 *   onHistoryChange,
 *   onJumpToMove,
 *   jumpToMove
 * });
 * 
 * // Use previousFen for tablebase comparison
 * const analysis = usePositionAnalysis({
 *   fen: currentFen,
 *   previousFen: gameNavigation.previousFen
 * });
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useGameNavigation", {
    enumerable: true,
    get: function() {
        return useGameNavigation;
    }
});
const _react = require("react");
const _chess = require("chess.js");
const _chessadapter = require("../infrastructure/chess-adapter");
const useGameNavigation = ({ history, initialFen, currentFen, onHistoryChange, onJumpToMove, jumpToMove })=>{
    // Calculate previous FEN for tablebase move comparison
    const previousFen = (0, _react.useMemo)(()=>{
        if (history.length === 0) {
            return undefined;
        }
        if (history.length === 1) {
            return initialFen;
        }
        try {
            const tempGame = new _chess.Chess(initialFen);
            // Replay all moves except the last one to get previous position
            for(let i = 0; i < history.length - 1; i++){
                const moveResult = tempGame.move(history[i]);
                if (!moveResult) {
                    // Move doesn't apply to this position - history is from a different position
                    return undefined;
                }
            }
            return tempGame.fen();
        } catch (error) {
            // History doesn't match current position
            return undefined;
        }
    }, [
        history,
        initialFen
    ]);
    // Notify parent when move history changes
    (0, _react.useEffect)(()=>{
        if (onHistoryChange && history) {
            // Convert ValidatedMove[] to Move[] for the callback
            const libraryMoves = history.map(_chessadapter.toLibraryMove);
            onHistoryChange(libraryMoves);
        }
    }, [
        history,
        onHistoryChange
    ]);
    // Provide jump-to-move function to parent
    (0, _react.useEffect)(()=>{
        if (onJumpToMove && jumpToMove) {
            onJumpToMove(jumpToMove);
        }
    }, [
        onJumpToMove,
        jumpToMove
    ]);
    // Return navigation state
    return {
        previousFen,
        canNavigate: history.length > 0,
        totalMoves: history.length
    };
};

//# sourceMappingURL=data:application/json;base64,