{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/hooks/useGameNavigation.ts"],"sourcesContent":["/**\n * @file Game navigation hook for chess training board\n * @module hooks/useGameNavigation\n * \n * @description\n * Custom hook that encapsulates move history navigation logic for chess training.\n * Extracted from TrainingBoard to separate navigation concerns from UI rendering.\n * Handles move history tracking, previous FEN calculation, and parent callbacks.\n * \n * @remarks\n * Key responsibilities:\n * - Previous FEN calculation for tablebase comparison\n * - Move history change notifications to parent\n * - Jump-to-move functionality coordination\n * - Chess game state reconstruction for navigation\n * \n * This hook maintains navigation state logic while providing\n * a clean interface for move history management.\n * \n * @example\n * ```tsx\n * const gameNavigation = useGameNavigation({\n *   history,\n *   initialFen,\n *   currentFen,\n *   onHistoryChange,\n *   onJumpToMove,\n *   jumpToMove\n * });\n * \n * // Use previousFen for tablebase comparison\n * const analysis = usePositionAnalysis({\n *   fen: currentFen,\n *   previousFen: gameNavigation.previousFen\n * });\n * ```\n */\n\nimport { useMemo, useEffect } from 'react';\nimport { Chess, Move } from 'chess.js';\nimport { ValidatedMove } from '@shared/types';\nimport { toLibraryMove } from '@shared/infrastructure/chess-adapter';\n\n/**\n * Configuration options for game navigation hook\n * \n * @interface UseGameNavigationOptions\n * @description Options for configuring game navigation behavior\n */\nexport interface UseGameNavigationOptions {\n  /** Current move history (validated moves) */\n  history: ValidatedMove[];\n  /** Initial FEN position of the game */\n  initialFen: string;\n  /** Current FEN position */\n  currentFen?: string;\n  /** Callback when move history changes */\n  onHistoryChange?: (moves: Move[]) => void;\n  /** Callback to provide jump-to-move function to parent */\n  onJumpToMove?: (jumpToMoveFunc: (moveIndex: number) => void) => void;\n  /** Jump to move function from training session */\n  jumpToMove?: (moveIndex: number) => void;\n}\n\n/**\n * Game navigation state and utilities\n * \n * @interface GameNavigationResult\n * @description Result object containing navigation state and utilities\n */\nexport interface GameNavigationResult {\n  /** Previous FEN position for tablebase comparison */\n  previousFen: string | undefined;\n  /** Whether navigation is possible */\n  canNavigate: boolean;\n  /** Total number of moves in history */\n  totalMoves: number;\n}\n\n/**\n * Game navigation hook\n * \n * @description\n * Provides move history navigation functionality with FEN reconstruction\n * and parent callback coordination. Calculates previous positions for\n * tablebase comparison and manages navigation state.\n * \n * @param {UseGameNavigationOptions} options - Navigation configuration\n * @returns {GameNavigationResult} Navigation state and utilities\n * \n * @example\n * ```tsx\n * const gameNavigation = useGameNavigation({\n *   history: moveHistory,\n *   initialFen: startPosition,\n *   currentFen: currentPosition,\n *   onHistoryChange: handleHistoryChange,\n *   onJumpToMove: setJumpFunction,\n *   jumpToMove: jumpToMoveFunction\n * });\n * \n * // Access previous position for comparison\n * if (gameNavigation.previousFen) {\n *   console.log('Previous position:', gameNavigation.previousFen);\n * }\n * ```\n */\nexport const useGameNavigation = ({\n  history,\n  initialFen,\n  currentFen,\n  onHistoryChange,\n  onJumpToMove,\n  jumpToMove\n}: UseGameNavigationOptions): GameNavigationResult => {\n  \n  // Calculate previous FEN for tablebase move comparison\n  const previousFen = useMemo(() => {\n    if (history.length === 0) {\n      return undefined;\n    }\n\n    if (history.length === 1) {\n      return initialFen;\n    }\n\n    try {\n      const tempGame = new Chess(initialFen);\n      // Replay all moves except the last one to get previous position\n      for (let i = 0; i < history.length - 1; i++) {\n        const moveResult = tempGame.move(history[i]);\n        if (!moveResult) {\n          // Move doesn't apply to this position - history is from a different position\n          return undefined;\n        }\n      }\n      return tempGame.fen();\n    } catch (error) {\n      // History doesn't match current position\n      return undefined;\n    }\n  }, [history, initialFen]);\n\n  // Notify parent when move history changes\n  useEffect(() => {\n    if (onHistoryChange && history) {\n      // Convert ValidatedMove[] to Move[] for the callback\n      const libraryMoves = history.map(toLibraryMove);\n      onHistoryChange(libraryMoves);\n    }\n  }, [history, onHistoryChange]);\n\n  // Provide jump-to-move function to parent\n  useEffect(() => {\n    if (onJumpToMove && jumpToMove) {\n      onJumpToMove(jumpToMove);\n    }\n  }, [onJumpToMove, jumpToMove]);\n\n  // Return navigation state\n  return {\n    previousFen,\n    canNavigate: history.length > 0,\n    totalMoves: history.length\n  };\n};"],"names":["useGameNavigation","history","initialFen","currentFen","onHistoryChange","onJumpToMove","jumpToMove","previousFen","useMemo","length","undefined","tempGame","Chess","i","moveResult","move","fen","error","useEffect","libraryMoves","map","toLibraryMove","canNavigate","totalMoves"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoCC;;;;+BAuEYA;;;eAAAA;;;uBArEsB;uBACP;8BAEE;AAkEvB,MAAMA,oBAAoB,CAAC,EAChCC,OAAO,EACPC,UAAU,EACVC,UAAU,EACVC,eAAe,EACfC,YAAY,EACZC,UAAU,EACe;IAEzB,uDAAuD;IACvD,MAAMC,cAAcC,IAAAA,cAAO,EAAC;QAC1B,IAAIP,QAAQQ,MAAM,KAAK,GAAG;YACxB,OAAOC;QACT;QAEA,IAAIT,QAAQQ,MAAM,KAAK,GAAG;YACxB,OAAOP;QACT;QAEA,IAAI;YACF,MAAMS,WAAW,IAAIC,YAAK,CAACV;YAC3B,gEAAgE;YAChE,IAAK,IAAIW,IAAI,GAAGA,IAAIZ,QAAQQ,MAAM,GAAG,GAAGI,IAAK;gBAC3C,MAAMC,aAAaH,SAASI,IAAI,CAACd,OAAO,CAACY,EAAE;gBAC3C,IAAI,CAACC,YAAY;oBACf,6EAA6E;oBAC7E,OAAOJ;gBACT;YACF;YACA,OAAOC,SAASK,GAAG;QACrB,EAAE,OAAOC,OAAO;YACd,yCAAyC;YACzC,OAAOP;QACT;IACF,GAAG;QAACT;QAASC;KAAW;IAExB,0CAA0C;IAC1CgB,IAAAA,gBAAS,EAAC;QACR,IAAId,mBAAmBH,SAAS;YAC9B,qDAAqD;YACrD,MAAMkB,eAAelB,QAAQmB,GAAG,CAACC,2BAAa;YAC9CjB,gBAAgBe;QAClB;IACF,GAAG;QAAClB;QAASG;KAAgB;IAE7B,0CAA0C;IAC1Cc,IAAAA,gBAAS,EAAC;QACR,IAAIb,gBAAgBC,YAAY;YAC9BD,aAAaC;QACf;IACF,GAAG;QAACD;QAAcC;KAAW;IAE7B,0BAA0B;IAC1B,OAAO;QACLC;QACAe,aAAarB,QAAQQ,MAAM,GAAG;QAC9Bc,YAAYtB,QAAQQ,MAAM;IAC5B;AACF"}