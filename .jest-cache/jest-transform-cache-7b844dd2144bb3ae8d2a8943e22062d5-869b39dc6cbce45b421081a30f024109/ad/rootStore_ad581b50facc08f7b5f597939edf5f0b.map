{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/rootStore.ts"],"sourcesContent":["/**\n * @file Root store assembly for refactored Zustand architecture\n * @module store/rootStore\n * @description Combines all domain-specific slices into a unified store with middleware\n * integration. Uses a clean, maintainable architecture with domain-driven slices.\n *\n * @example\n * ```typescript\n * // Using the refactored store\n * import { useStore } from '@/store/rootStore';\n *\n * function MyComponent() {\n *   const restartRequired = useStore(state => state.restartRequired);\n *   const clearRestart = useStore(state => state.clearRestartRequired);\n *   const makeMove = useStore(state => state.handlePlayerMove);\n *\n *   return (\n *     <div>\n *       {restartRequired && <div>App restart required</div>}\n *       <button onClick={() => makeMove({ from: 'e2', to: 'e4' })}>\n *         Make Move\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n */\n\nimport { create } from \"zustand\";\nimport { devtools, persist, createJSONStorage, StateStorage } from \"zustand/middleware\";\nimport { immer } from \"zustand/middleware/immer\";\n\n// Import all slice creators and initial states\nimport { createGameSlice, initialGameState } from \"./slices/gameSlice\";\nimport {\n  createTablebaseState,\n  createTablebaseActions,\n  initialTablebaseState,\n} from \"./slices/tablebaseSlice\";\nimport {\n  createTrainingState,\n  createTrainingActions,\n  initialTrainingState,\n} from \"./slices/trainingSlice\";\nimport {\n  createProgressSlice,\n  initialProgressState,\n} from \"./slices/progressSlice\";\nimport { createUISlice, initialUIState } from \"./slices/uiSlice\";\n\n// Import ChessService for event subscription\nimport {\n  chessService,\n  type ChessServiceEvent,\n} from \"@shared/services/ChessService\";\nimport { getLogger } from \"@shared/services/logging/Logger\";\n\n// Import orchestrators\nimport { loadTrainingContext as loadTrainingContextOrchestrator } from \"./orchestrators/loadTrainingContext\";\nimport { handlePlayerMove as handlePlayerMoveOrchestrator } from \"./orchestrators/handlePlayerMove/index\";\n\n// Import types\nimport type { RootState } from \"./slices/types\";\nimport type { Move as ChessJsMove } from \"chess.js\";\nimport type { EndgamePosition } from \"@shared/types/endgame\";\n\n// Initial state creation removed - slices are initialized directly in store\n\n/**\n * Safe storage adapter that gracefully handles localStorage errors\n * This prevents warnings in E2E tests and other restricted environments\n * while maintaining functionality in normal browser environments\n */\nconst safeStorage: StateStorage = {\n  getItem: (name) => {\n    try {\n      if (typeof window === \"undefined\") return null;\n      return localStorage.getItem(name);\n    } catch {\n      // Silently fail in restricted environments (E2E tests, etc.)\n      return null;\n    }\n  },\n  setItem: (name, value) => {\n    try {\n      if (typeof window === \"undefined\") return;\n      localStorage.setItem(name, value);\n    } catch {\n      // Silently fail in restricted environments\n      // This prevents warnings in E2E tests where localStorage exists but throws\n    }\n  },\n  removeItem: (name) => {\n    try {\n      if (typeof window === \"undefined\") return;\n      localStorage.removeItem(name);\n    } catch {\n      // Silently fail in restricted environments\n    }\n  },\n};\n\n/**\n * Creates the root store with all slices and orchestrators integrated\n *\n * @returns {Object} Zustand store with all slices and middleware\n *\n * @remarks\n * This store combines:\n * - All 4 domain-specific slices (Game, Tablebase, Training, UI)\n * - Cross-slice orchestrators for complex async operations\n * - Middleware integration (DevTools, Persist, Immer)\n * - Global reset and hydration actions (using efficient initialState pattern)\n *\n * The store uses middleware configuration for enhanced functionality:\n * - DevTools: For debugging and time-travel debugging\n * - Persist: For localStorage persistence of user data\n * - Immer: For immutable state updates with mutable syntax\n *\n * @example\n * ```typescript\n * // Access slice state\n * const restartRequired = useStore(state => state.restartRequired);\n * const currentGame = useStore(state => state.game);\n *\n * // Access slice actions\n * const clearRestart = useStore(state => state.clearRestartRequired);\n * const makeMove = useStore(state => state.addMove);\n *\n * // Access orchestrator actions\n * const handlePlayerMove = useStore(state => state.handlePlayerMove);\n * const requestEvaluation = useStore(state => state.requestPositionEvaluation);\n * ```\n */\nexport const useStore = create<RootState>()(\n  devtools(\n    persist(\n      immer((set, get, store) => {\n        // Create slices using Slice-in-Slice pattern (clean separation of state and actions)\n        const gameSlice = createGameSlice(set, get, store);\n        const progressSlice = createProgressSlice(set, get, store);\n        const uiSlice = createUISlice(set, get, store);\n\n        return {\n          // Clean Slice-in-Slice pattern: state and actions preserved at slice level\n          game: gameSlice,\n          training: {\n            ...createTrainingState(),\n            ...createTrainingActions(set, get),\n          },\n          tablebase: {\n            ...createTablebaseState(),\n            ...createTablebaseActions(set),\n          },\n          progress: progressSlice,\n          ui: uiSlice,\n\n          // Orchestrator actions - coordinate across multiple slices\n          /**\n           * Makes a user move with full validation and tablebase integration\n           *\n           * @param {ChessJsMove | {from: string; to: string; promotion?: string} | string} move - The move to make\n           * @returns {Promise<boolean>} Whether the move was successful\n           *\n           * @remarks\n           * This orchestrator coordinates across multiple slices:\n           * - Validates move through Game slice\n           * - Updates Training slice with move result\n           * - Requests tablebase analysis via Tablebase slice\n           * - Updates Progress slice with attempt data\n           * - Shows UI feedback for errors\n           *\n           * @example\n           * ```typescript\n           * const handlePlayerMove = useStore(state => state.handlePlayerMove);\n           *\n           * const handleMove = async (from: string, to: string) => {\n           *   const success = await handlePlayerMove({ from, to });\n           *   if (success) {\n           *     logger.info('Move completed successfully');\n           *   }\n           * };\n           * ```\n           */\n          handlePlayerMove: async (\n            move:\n              | ChessJsMove\n              | { from: string; to: string; promotion?: string }\n              | string,\n          ): Promise<boolean> => {\n            const logger = getLogger().setContext(\"RootStore\");\n            logger.debug(\"handlePlayerMove called\", { move });\n            const storeApi = { getState: get, setState: set };\n            logger.debug(\"Calling handlePlayerMoveOrchestrator\");\n            // Add timeout for E2E tests to prevent hanging\n            let result;\n            if (process.env.NEXT_PUBLIC_IS_E2E_TEST === \"true\") {\n              result = await Promise.race([\n                handlePlayerMoveOrchestrator(storeApi, move),\n                new Promise<boolean>((_, reject) => \n                  setTimeout(() => reject(new Error(\"E2E orchestrator timeout\")), 5000)\n                )\n              ]);\n            } else {\n              result = await handlePlayerMoveOrchestrator(storeApi, move);\n            }\n            logger.debug(\"handlePlayerMoveOrchestrator result\", { result });\n            return result;\n          },\n\n          // Note: handleOpponentTurn and requestPositionEvaluation removed\n          // Their functionality is now in chessService and handlePlayerMove orchestrator\n\n          /**\n           * Loads training context for a position\n           *\n           * @param {EndgamePosition} position - The endgame position to load\n           * @returns {Promise<void>} Completes when context is loaded\n           *\n           * @remarks\n           * This orchestrator sets up the complete training context:\n           * - Loads position into Game slice\n           * - Initializes Training slice state\n           * - Resets UI and Progress tracking\n           * - Prepares for user interaction\n           *\n           * @example\n           * ```typescript\n           * const loadContext = useStore(state => state.loadTrainingContext);\n           *\n           * const startTraining = async (position: EndgamePosition) => {\n           *   await loadContext(position);\n           *   logger.info('Training context loaded');\n           * };\n           * ```\n           */\n          loadTrainingContext: async (\n            position: EndgamePosition,\n          ): Promise<void> => {\n            const storeApi = { getState: get, setState: set };\n            return await loadTrainingContextOrchestrator(storeApi, position);\n          },\n\n          /**\n           * Resets entire store to initial state\n           *\n           * @remarks\n           * Uses pre-computed initial state for efficient and reliable reset.\n           * With Slice-in-Slice pattern, actions are preserved automatically.\n           */\n          reset: () => {\n            set((state) => {\n              // Reset slices to their initial states (actions preserved automatically)\n              \n              // Game slice - merge initial state\n              Object.assign(state.game, initialGameState);\n\n              // Training slice - merge only state properties (actions preserved)\n              Object.assign(state.training, {\n                ...initialTrainingState,\n                // Preserve action functions that are mixed in\n                setPosition: state.training.setPosition,\n                setNavigationPositions: state.training.setNavigationPositions,\n                setNavigationLoading: state.training.setNavigationLoading,\n                setNavigationError: state.training.setNavigationError,\n                setChapterProgress: state.training.setChapterProgress,\n                setPlayerTurn: state.training.setPlayerTurn,\n                clearOpponentThinking: state.training.clearOpponentThinking,\n                completeTraining: state.training.completeTraining,\n                incrementHint: state.training.incrementHint,\n                incrementMistake: state.training.incrementMistake,\n                setMoveErrorDialog: state.training.setMoveErrorDialog,\n                setMoveSuccessDialog: state.training.setMoveSuccessDialog,\n                addTrainingMove: state.training.addTrainingMove,\n                resetTraining: state.training.resetTraining,\n                resetPosition: state.training.resetPosition,\n              });\n\n              // Tablebase slice - merge only state properties (actions preserved)\n              Object.assign(state.tablebase, {\n                ...initialTablebaseState,\n                // Preserve action functions\n                setTablebaseMove: state.tablebase.setTablebaseMove,\n                setAnalysisStatus: state.tablebase.setAnalysisStatus,\n                addEvaluation: state.tablebase.addEvaluation,\n                setEvaluations: state.tablebase.setEvaluations,\n                setCurrentEvaluation: state.tablebase.setCurrentEvaluation,\n                clearTablebaseState: state.tablebase.clearTablebaseState,\n              });\n\n              // Progress slice - merge initial state\n              Object.assign(state.progress, initialProgressState);\n\n              // UI slice - merge initial state  \n              Object.assign(state.ui, initialUIState);\n            });\n          },\n\n          /**\n           * Hydrates store with partial state data\n           *\n           * @param {Partial<RootState>} state - Partial state to merge into current state\n           *\n           * @remarks\n           * This action is useful for:\n           * - Loading state from external sources (localStorage, API)\n           * - Server-side rendering hydration\n           * - State synchronization between tabs\n           * - Partial state restoration from backups\n           *\n           * The method performs a shallow merge of the provided state\n           * with the current state, preserving any fields not specified.\n           *\n           * @example\n           * ```typescript\n           * const hydrate = useStore(state => state.hydrate);\n           *\n           * // Restore user data from API\n           * const restoreUserData = async () => {\n           *   const userData = await api.getUserData();\n           *   hydrate({\n           *     id: userData.id,\n           *     username: userData.username,\n           *     preferences: userData.preferences\n           *   });\n           * };\n           *\n           * // Sync settings from another tab\n           * const syncSettings = (settingsData) => {\n           *   hydrate({\n           *     theme: settingsData.theme,\n           *     language: settingsData.language\n           *   });\n           * };\n           * ```\n           */\n          hydrate: (state: Partial<RootState>) => {\n            set((currentState) => ({\n              ...currentState,\n              ...state,\n            }));\n          },\n        };\n      }),\n      {\n        name: \"endgame-trainer-store\",\n        version: 1,\n        storage: createJSONStorage(() => safeStorage), // Safe storage that handles errors gracefully\n        // Only persist training position for session continuity\n        partialize: (state) => ({\n          // Training position - persist for session continuity\n          training: {\n            currentPosition: state.training.currentPosition,\n          },\n\n          // All other state removed - was over-engineered and unused in UI:\n          // - User data (authentication, profile, preferences) - not implemented\n          // - Settings (restart flags, config) - not used by UI\n          // - Progress data (statistics, achievements) - not displayed\n          // - Game state - ephemeral (reset on page reload)\n          // - UI state - ephemeral (toasts, modals, loading)\n          // - Tablebase state - ephemeral (analysis data)\n        }),\n        // Merge strategy to prevent overwriting the entire slice\n        merge: (persistedState, currentState) => {\n          // Deep merge to preserve slice structure and functions\n          const merged = { ...currentState };\n\n          if (persistedState && typeof persistedState === \"object\") {\n            const persisted = persistedState as any;\n\n            // Only merge the specific persisted properties, not the entire slice\n            if (persisted.training?.currentPosition) {\n              merged.training = {\n                ...currentState.training,\n                currentPosition: persisted.training.currentPosition,\n              };\n            }\n          }\n\n          return merged;\n        },\n      },\n    ),\n    {\n      name: \"EndgameTrainer Store\",\n      enabled: process.env.NODE_ENV === \"development\",\n    },\n  ),\n);\n\n/**\n * Subscribe to ChessService events for automatic state synchronization\n * This ensures the store stays in sync with the ChessService singleton\n */\nconst unsubscribeChessService = chessService.subscribe(\n  (event: ChessServiceEvent) => {\n    switch (event.type) {\n      case \"stateUpdate\":\n        // Use batched payload for atomic state update\n        // This ensures consistency and reduces getter calls\n        useStore.setState((draft) => {\n          draft.game.currentFen = event.payload.fen;\n          draft.game.currentPgn = event.payload.pgn;\n          draft.game.moveHistory = event.payload.moveHistory;\n          draft.game.currentMoveIndex = event.payload.currentMoveIndex;\n          draft.game.isGameFinished = event.payload.isGameOver;\n          draft.game.gameResult = event.payload.gameResult;\n        });\n        break;\n\n      case \"error\":\n        // Handle errors from ChessService\n        useStore.setState((draft) => {\n          draft.ui.toasts.push({\n            id: crypto.randomUUID(),\n            message: event.payload.message,\n            type: \"error\",\n            duration: 5000,\n          });\n        });\n        // Logging already done in ChessService, avoid duplication\n        break;\n    }\n  },\n);\n\n// Store cleanup function for hot-module reload or testing\nif (typeof window !== \"undefined\") {\n  (window as any).__cleanupChessService = unsubscribeChessService;\n}\n\n/**\n * Hook for accessing the complete store state and actions\n *\n * @remarks\n * This is the main hook for accessing the store. It provides access to:\n * - All slice state and actions (Game, Training, Tablebase, Progress, UI, Settings, User)\n * - Orchestrator actions for complex operations\n * - Global reset and hydration methods\n *\n * For performance-sensitive components, consider using specific selectors\n * to avoid unnecessary re-renders when unrelated state changes.\n *\n * @example\n * ```typescript\n * // Full store access\n * const store = useStore();\n *\n * // Selective access (better performance)\n * const restartRequired = useStore(state => state.restartRequired);\n * const clearRestart = useStore(state => state.clearRestartRequired);\n *\n * // Training state access (replaces useTrainingState hook)\n * const currentPosition = useStore(state => state.currentPosition);\n * const isPlayerTurn = useStore(state => state.isPlayerTurn);\n * const setPlayerTurn = useStore(state => state.setPlayerTurn);\n *\n * // Game state access\n * const currentFen = useStore(state => state.currentFen);\n * const makeMove = useStore(state => state.makeMove);\n *\n * // Multiple selections with useShallow for complex objects\n * import { useShallow } from 'zustand/react/shallow';\n * const { currentPosition, isPlayerTurn, hintsUsed } = useStore(\n *   useShallow(state => ({\n *     currentPosition: state.currentPosition,\n *     isPlayerTurn: state.isPlayerTurn,\n *     hintsUsed: state.hintsUsed\n *   }))\n * );\n * ```\n */\nexport default useStore;\n\n/**\n * Type-safe store instance for testing and external access\n *\n * @remarks\n * This provides direct access to the store instance for:\n * - Unit testing with store.getState() and store.setState()\n * - Integration testing with state manipulation\n * - External state access outside of React components\n * - Store inspection and debugging\n *\n * @example\n * ```typescript\n * // In tests\n * import { store } from '@/store/rootStore';\n *\n * test('should clear restart flag', () => {\n *   store.getState().clearRestartRequired();\n *   expect(store.getState().restartRequired).toBe(false);\n * });\n *\n * // External state access\n * const currentUser = store.getState().username;\n * ```\n */\nexport const store = useStore;\n"],"names":["store","useStore","safeStorage","getItem","name","window","localStorage","setItem","value","removeItem","create","devtools","persist","immer","set","get","gameSlice","createGameSlice","progressSlice","createProgressSlice","uiSlice","createUISlice","game","training","createTrainingState","createTrainingActions","tablebase","createTablebaseState","createTablebaseActions","progress","ui","handlePlayerMove","move","logger","getLogger","setContext","debug","storeApi","getState","setState","result","process","env","NEXT_PUBLIC_IS_E2E_TEST","Promise","race","handlePlayerMoveOrchestrator","_","reject","setTimeout","Error","loadTrainingContext","position","loadTrainingContextOrchestrator","reset","state","Object","assign","initialGameState","initialTrainingState","setPosition","setNavigationPositions","setNavigationLoading","setNavigationError","setChapterProgress","setPlayerTurn","clearOpponentThinking","completeTraining","incrementHint","incrementMistake","setMoveErrorDialog","setMoveSuccessDialog","addTrainingMove","resetTraining","resetPosition","initialTablebaseState","setTablebaseMove","setAnalysisStatus","addEvaluation","setEvaluations","setCurrentEvaluation","clearTablebaseState","initialProgressState","initialUIState","hydrate","currentState","version","storage","createJSONStorage","partialize","currentPosition","merge","persistedState","merged","persisted","enabled","NODE_ENV","unsubscribeChessService","chessService","subscribe","event","type","draft","currentFen","payload","fen","currentPgn","pgn","moveHistory","currentMoveIndex","isGameFinished","isGameOver","gameResult","toasts","push","id","crypto","randomUUID","message","duration","__cleanupChessService"],"mappings":"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"}