{"version":3,"names":["cov_17tbhtfzk3","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","useMoveValidation","lastEvaluation","currentFen","evaluations","isEvaluating","tablebaseState","tablebaseActions","processedEvaluationsRef","_react","useRef","Set","processedCount","setProcessedCount","useState","useEffect","_lastEvaluation_mateInMoves","evalKey","evaluation","mateInMoves","current","has","add","size","currentEvaluations","updatedEvaluations","setEvaluations","console","error","debug","hasTablebaseActions","hasSetAnalysisStatus","setAnalysisStatus","tablebaseActionsKeys","Object","keys","warn","analysisStatus","isProcessing"],"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/hooks/useMoveValidation.ts"],"sourcesContent":["/**\n * @file Move validation and evaluation processing hook\n * @module hooks/useMoveValidation\n * \n * @description\n * Custom hook that encapsulates evaluation processing and analysis status\n * management for chess training. Extracted from TrainingBoard to separate\n * evaluation concerns from UI rendering.\n * \n * @remarks\n * Key responsibilities:\n * - Evaluation deduplication using processedEvaluationsRef\n * - Analysis status synchronization with tablebase store\n * - Safe handling of tablebase actions availability\n * - Evaluation update coordination\n * \n * This hook maintains evaluation processing logic while providing\n * a clean interface for move validation and analysis management.\n * \n * @example\n * ```tsx\n * const moveValidation = useMoveValidation({\n *   lastEvaluation,\n *   currentFen,\n *   evaluations,\n *   isEvaluating,\n *   tablebaseState,\n *   tablebaseActions\n * });\n * \n * // Hook handles evaluation processing and status updates internally\n * ```\n */\n\nimport { useEffect, useRef, useState } from 'react';\nimport { PositionAnalysis } from '@shared/types';\n\n/**\n * Configuration options for move validation hook\n * \n * @interface UseMoveValidationOptions\n * @description Options for configuring move validation behavior\n */\nexport interface UseMoveValidationOptions {\n  /** Last evaluation from position analysis */\n  lastEvaluation: PositionAnalysis | null | undefined;\n  /** Current FEN position */\n  currentFen: string | undefined;\n  /** Array of evaluations */\n  evaluations: PositionAnalysis[] | undefined;\n  /** Whether evaluation is in progress */\n  isEvaluating: boolean;\n  /** Tablebase store state */\n  tablebaseState: {\n    analysisStatus: 'idle' | 'loading' | 'success' | 'error';\n  };\n  /** Tablebase store actions */\n  tablebaseActions: {\n    setEvaluations?: (evaluations: PositionAnalysis[]) => void;\n    setAnalysisStatus?: (status: 'idle' | 'loading' | 'success' | 'error') => void;\n  } | undefined;\n}\n\n/**\n * Move validation state and utilities\n * \n * @interface MoveValidationResult\n * @description Result object containing validation state\n */\nexport interface MoveValidationResult {\n  /** Number of processed evaluations */\n  processedCount: number;\n  /** Whether evaluation processing is active */\n  isProcessing: boolean;\n}\n\n/**\n * Move validation and evaluation processing hook\n * \n * @description\n * Manages evaluation processing with deduplication and analysis\n * status synchronization. Handles safe interaction with tablebase\n * store actions and maintains evaluation state consistency.\n * \n * @param {UseMoveValidationOptions} options - Validation configuration\n * @returns {MoveValidationResult} Validation state and utilities\n * \n * @example\n * ```tsx\n * const moveValidation = useMoveValidation({\n *   lastEvaluation: evaluationData,\n *   currentFen: position,\n *   evaluations: evaluationList,\n *   isEvaluating: loading,\n *   tablebaseState: state,\n *   tablebaseActions: actions\n * });\n * \n * // Access processing state\n * if (moveValidation.isProcessing) {\n *   console.log('Processing evaluation...');\n * }\n * ```\n */\nexport const useMoveValidation = ({\n  lastEvaluation,\n  currentFen,\n  evaluations,\n  isEvaluating,\n  tablebaseState,\n  tablebaseActions\n}: UseMoveValidationOptions): MoveValidationResult => {\n  \n  // Track processed evaluations to prevent duplicates\n  const processedEvaluationsRef = useRef(new Set<string>());\n  const [processedCount, setProcessedCount] = useState(0);\n  \n  // Update Zustand with current evaluation\n  useEffect(() => {\n    if (!lastEvaluation) return;\n\n    // Create unique key for this evaluation using current FEN and evaluation data\n    const evalKey = `${currentFen}_${lastEvaluation.evaluation}_${lastEvaluation.mateInMoves ?? \"null\"}`;\n\n    if (processedEvaluationsRef.current.has(evalKey)) {\n      return; // Skip if already processed\n    }\n\n    processedEvaluationsRef.current.add(evalKey);\n    setProcessedCount(processedEvaluationsRef.current.size);\n\n    const currentEvaluations = evaluations || [];\n    const updatedEvaluations = [...currentEvaluations, lastEvaluation];\n\n    // Check if setEvaluations exists before calling\n    if (tablebaseActions?.setEvaluations) {\n      tablebaseActions.setEvaluations(updatedEvaluations);\n    } else {\n      console.error(\"‚ùå tablebaseActions.setEvaluations is not available!\");\n    }\n  }, [lastEvaluation, currentFen, evaluations, tablebaseActions]);\n  \n  // Update analysis status based on evaluation state\n  useEffect(() => {\n    console.debug(\"üîç TablebaseActions debug\", {\n      hasTablebaseActions: !!tablebaseActions,\n      hasSetAnalysisStatus: !!tablebaseActions?.setAnalysisStatus,\n      tablebaseActionsKeys: Object.keys(tablebaseActions || {}),\n      isEvaluating,\n    });\n\n    // CRITICAL: Safe-guard to prevent crashes\n    if (!tablebaseActions?.setAnalysisStatus) {\n      console.warn(\n        \"‚ö†Ô∏è tablebaseActions.setAnalysisStatus not available, skipping\",\n      );\n      return;\n    }\n\n    if (isEvaluating) {\n      tablebaseActions.setAnalysisStatus(\"loading\");\n    } else if (tablebaseState.analysisStatus === \"loading\") {\n      // Only update to success if we were loading\n      tablebaseActions.setAnalysisStatus(\"success\");\n    }\n  }, [isEvaluating, tablebaseState, tablebaseActions]);\n  \n  // Return validation state\n  return {\n    processedCount,\n    isProcessing: isEvaluating\n  };\n};"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCC;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MA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","ignoreList":[]}