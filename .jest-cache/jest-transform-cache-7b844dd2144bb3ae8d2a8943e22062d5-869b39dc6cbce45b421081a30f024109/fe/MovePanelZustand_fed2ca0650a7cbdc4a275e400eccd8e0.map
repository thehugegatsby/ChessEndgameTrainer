{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/training/MovePanelZustand.tsx"],"sourcesContent":["/**\n * @file Move panel component using Zustand store\n * @module components/training/MovePanelZustand\n *\n * @description\n * Move history display panel that integrates directly with the Zustand store\n * for state management. Shows chess moves in standard notation with optional\n * evaluations and move quality indicators. Supports interactive move navigation\n * for game review.\n *\n * @remarks\n * Key features:\n * - Direct Zustand store integration for move history\n * - Two-column layout (white/black moves)\n * - Move quality indicators with visual feedback\n * - Optional evaluation display\n * - Interactive move selection for navigation\n * - E2E testing support with data attributes\n * - Dark theme optimized design\n *\n * The component efficiently handles the offset between move indices\n * and evaluation indices (evaluations array has one extra initial entry).\n */\n\nimport React, { useMemo } from \"react\";\nimport type { ValidatedMove } from \"@shared/types/chess\";\nimport {\n  getSmartMoveEvaluation,\n  type MoveEvaluation,\n} from \"../../utils/chess/evaluation\";\nimport {\n  useGameStore,\n  useTablebaseStore,\n  useTrainingStore,\n} from \"@shared/store/hooks\";\nimport { TEST_IDS, getTestId } from \"@shared/constants/testIds\";\nimport { MoveQualityIndicator } from \"../analysis/MoveQualityIndicator\";\n\n/**\n * Props for the MovePanelZustand component\n *\n * @interface MovePanelZustandProps\n *\n * @property {boolean} [showEvaluations=false] - Whether to display numerical evaluations\n * @property {(moveIndex: number) => void} [onMoveClick] - Callback when a move is clicked\n * @property {number} [currentMoveIndex=-1] - Index of the currently selected move\n */\ninterface MovePanelZustandProps {\n  showEvaluations?: boolean;\n  onMoveClick?: (moveIndex: number) => void;\n  currentMoveIndex?: number;\n}\n\n/**\n * Internal structure for organizing moves into pairs\n *\n * @interface MovePair\n * @private\n *\n * @property {number} moveNumber - Full move number (1, 2, 3...)\n * @property {ValidatedMove} whiteMove - White's move for this pair\n * @property {ValidatedMove} [blackMove] - Black's move (may be undefined for last move)\n * @property {MoveEvaluation} [whiteEval] - Evaluation after white's move\n * @property {MoveEvaluation} [blackEval] - Evaluation after black's move\n */\ninterface MovePair {\n  moveNumber: number;\n  whiteMove: ValidatedMove;\n  blackMove?: ValidatedMove;\n  whiteEval?: MoveEvaluation;\n  blackEval?: MoveEvaluation;\n}\n\n/**\n * Move panel component with Zustand store integration\n *\n * @component\n * @description\n * Displays the move history in a traditional chess notation format with\n * two columns (white and black moves). Retrieves data directly from the\n * Zustand store, eliminating the need for prop drilling. Supports move\n * quality indicators and optional evaluation display.\n *\n * @remarks\n * The component handles the complexity of evaluation array indexing:\n * - moveHistory[0] = first move\n * - evaluations[0] = initial position\n * - evaluations[1] = position after first move\n *\n * This offset is critical for correctly displaying evaluations alongside moves.\n *\n * @example\n * ```tsx\n * <MovePanelZustand\n *   showEvaluations={true}\n *   onMoveClick={(index) => navigateToMove(index)}\n *   currentMoveIndex={5}\n * />\n * ```\n *\n * @param {MovePanelZustandProps} props - Component configuration\n * @returns {JSX.Element} Rendered move panel\n */\nexport const MovePanelZustand: React.FC<MovePanelZustandProps> = React.memo(\n  ({ showEvaluations = false, onMoveClick, currentMoveIndex = -1 }) => {\n    // Get data from Zustand store using new tuple pattern\n    const [gameState] = useGameStore();\n    const [tablebaseState] = useTablebaseStore();\n    const trainingStore = useTrainingStore();\n    const [trainingState] = trainingStore || [null];\n\n    /**\n     * Helper to get FEN position before a specific move\n     *\n     * @private\n     * @param {number} moveIndex - Index of the move in history\n     * @returns {string} FEN string before the move was played\n     *\n     * @description\n     * Retrieves the board position FEN before a move was made.\n     * Used by MoveQualityIndicator to analyze move quality.\n     * Returns initial position FEN for invalid indices.\n     */\n    const getFenBeforeMove = (moveIndex: number): string => {\n      // moveHistory contains ValidatedMove objects with 'before' and 'after' FEN fields\n      if (moveIndex < 0 || moveIndex >= gameState.moveHistory.length) {\n        // Use the initial training position FEN if available, otherwise use current FEN\n        return (\n          trainingState?.currentPosition?.fen ||\n          gameState.currentFen ||\n          \"8/8/8/8/8/8/8/8 w - - 0 1\"\n        );\n      }\n\n      const move = gameState.moveHistory[moveIndex];\n      // Each ValidatedMove has a 'fenBefore' field with the FEN before the move\n      return move.fenBefore;\n    };\n\n    /**\n     * Memoized calculation of move pairs for display\n     *\n     * @description\n     * Organizes the linear move history into white/black pairs for\n     * traditional chess notation display. Handles the evaluation array\n     * offset correctly to match evaluations with their corresponding moves.\n     *\n     * @remarks\n     * Critical offset handling:\n     * - evaluations[0] = initial position\n     * - evaluations[i+1] = position after moveHistory[i]\n     *\n     * This ensures evaluations are correctly paired with moves.\n     */\n    const movePairs = useMemo((): MovePair[] => {\n      const pairs: MovePair[] = [];\n\n      // Show ALL moves in history, use currentMoveIndex only for highlighting\n      // This allows navigation through history without hiding future moves\n      const effectiveHistory = gameState.moveHistory;\n\n      for (let i = 0; i < effectiveHistory.length; i += 2) {\n        const whiteMove = effectiveHistory[i];\n        const blackMove = effectiveHistory[i + 1]; // undefined if odd number of moves\n        // CRITICAL: evaluations array has one extra entry at the beginning (initial position)\n        // So we need to offset by 1 to get the evaluation AFTER each move\n        const whiteEval = tablebaseState.evaluations[i + 1]; // +1 offset for evaluation after move\n        const blackEval = tablebaseState.evaluations[i + 2]; // +2 for evaluation after black's move\n\n        pairs.push({\n          moveNumber: Math.floor(i / 2) + 1,\n          whiteMove,\n          blackMove,\n          whiteEval,\n          blackEval,\n        });\n      }\n      return pairs;\n    }, [gameState.moveHistory, tablebaseState.evaluations]);\n\n    const hasContent = movePairs.length > 0 || currentMoveIndex === 0;\n    const showE2ESignals = process.env.NEXT_PUBLIC_E2E_SIGNALS === \"true\";\n\n    // Check if we have any moves to display\n    const effectiveMoveCount = gameState.moveHistory.length;\n\n    if (effectiveMoveCount === 0) {\n      return (\n        <div\n          className=\"text-gray-400\"\n          data-testid={TEST_IDS.MOVE_PANEL.CONTAINER}\n          data-move-count={effectiveMoveCount}\n          {...(showE2ESignals && {\n            \"data-component-ready\": hasContent ? \"true\" : \"false\",\n          })}\n        >\n          Noch keine ZÃ¼ge gespielt\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className=\"space-y-1\"\n        data-testid={TEST_IDS.MOVE_PANEL.CONTAINER}\n        data-move-count={gameState.moveHistory.length}\n        {...(showE2ESignals && {\n          \"data-component-ready\": hasContent ? \"true\" : \"false\",\n        })}\n      >\n        {movePairs.map((pair) => (\n          <div\n            key={pair.moveNumber}\n            className=\"flex items-center gap-4 py-1 hover:bg-gray-800 rounded px-2\"\n          >\n            {/* Move Number */}\n            <span className=\"text-sm text-gray-400 w-6 text-center font-mono\">\n              {pair.moveNumber}.\n            </span>\n\n            {/* White Move with evaluation */}\n            <div className=\"flex items-center gap-1 min-w-[80px] justify-center\">\n              <button\n                onClick={() => onMoveClick?.((pair.moveNumber - 1) * 2)}\n                className={`font-mono text-sm hover:text-blue-400 px-1 py-0.5 rounded transition-colors ${\n                  currentMoveIndex === (pair.moveNumber - 1) * 2\n                    ? \"text-blue-400 bg-blue-900/30\"\n                    : \"text-white\"\n                }`}\n                data-testid={getTestId(\n                  TEST_IDS.MOVE_PANEL.ITEM,\n                  (pair.moveNumber - 1) * 2,\n                )}\n                data-move-number={(pair.moveNumber - 1) * 2 + 1}\n              >\n                {pair.whiteMove.san}\n              </button>\n              <MoveQualityIndicator\n                moveIndex={(pair.moveNumber - 1) * 2}\n                moveSan={pair.whiteMove.san}\n                player=\"w\"\n                getFenBefore={getFenBeforeMove}\n              />\n              {showEvaluations &&\n                pair.whiteEval &&\n                (() => {\n                  const evalDisplay = getSmartMoveEvaluation(\n                    pair.whiteEval,\n                    true,\n                    (pair.moveNumber - 1) * 2,\n                  );\n                  return (\n                    <span\n                      className={`text-xs px-1 py-0.5 rounded ${evalDisplay.className}`}\n                      data-testid={TEST_IDS.MOVE_PANEL.EVALUATION}\n                    >\n                      <span data-testid={TEST_IDS.MOVE_PANEL.EVAL_SCORE}>\n                        {evalDisplay.text}\n                      </span>\n                    </span>\n                  );\n                })()}\n            </div>\n\n            {/* Black Move with evaluation - always reserve space */}\n            <div className=\"flex items-center gap-1 min-w-[80px] justify-center\">\n              {pair.blackMove ? (\n                <>\n                  <button\n                    onClick={() => onMoveClick?.((pair.moveNumber - 1) * 2 + 1)}\n                    className={`font-mono text-sm hover:text-blue-400 px-1 py-0.5 rounded transition-colors ${\n                      currentMoveIndex === (pair.moveNumber - 1) * 2 + 1\n                        ? \"text-blue-400 bg-blue-900/30\"\n                        : \"text-white\"\n                    }`}\n                    data-testid={getTestId(\n                      TEST_IDS.MOVE_PANEL.ITEM,\n                      (pair.moveNumber - 1) * 2 + 1,\n                    )}\n                    data-move-number={(pair.moveNumber - 1) * 2 + 2}\n                  >\n                    {pair.blackMove.san}\n                  </button>\n                  <MoveQualityIndicator\n                    moveIndex={(pair.moveNumber - 1) * 2 + 1}\n                    moveSan={pair.blackMove.san}\n                    player=\"b\"\n                    getFenBefore={getFenBeforeMove}\n                  />\n                  {showEvaluations &&\n                    pair.blackEval &&\n                    (() => {\n                      const evalDisplay = getSmartMoveEvaluation(\n                        pair.blackEval,\n                        false,\n                        (pair.moveNumber - 1) * 2 + 1,\n                      );\n                      return (\n                        <span\n                          className={`text-xs px-1 py-0.5 rounded ${evalDisplay.className}`}\n                          data-testid={TEST_IDS.MOVE_PANEL.EVALUATION}\n                        >\n                          <span data-testid={TEST_IDS.MOVE_PANEL.EVAL_SCORE}>\n                            {evalDisplay.text}\n                          </span>\n                        </span>\n                      );\n                    })()}\n                </>\n              ) : (\n                // Empty placeholder to reserve space\n                <div className=\"w-full h-6\"></div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  },\n);\n\nMovePanelZustand.displayName = \"MovePanelZustand\";\n"],"names":["MovePanelZustand","React","memo","showEvaluations","onMoveClick","currentMoveIndex","gameState","useGameStore","tablebaseState","useTablebaseStore","trainingStore","useTrainingStore","trainingState","getFenBeforeMove","moveIndex","moveHistory","length","currentPosition","fen","currentFen","move","fenBefore","movePairs","useMemo","pairs","effectiveHistory","i","whiteMove","blackMove","whiteEval","evaluations","blackEval","push","moveNumber","Math","floor","hasContent","showE2ESignals","process","env","NEXT_PUBLIC_E2E_SIGNALS","effectiveMoveCount","div","className","data-testid","TEST_IDS","MOVE_PANEL","CONTAINER","data-move-count","map","pair","span","button","onClick","getTestId","ITEM","data-move-number","san","MoveQualityIndicator","moveSan","player","getFenBefore","evalDisplay","getSmartMoveEvaluation","EVALUATION","EVAL_SCORE","text","displayName"],"mappings":"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"}