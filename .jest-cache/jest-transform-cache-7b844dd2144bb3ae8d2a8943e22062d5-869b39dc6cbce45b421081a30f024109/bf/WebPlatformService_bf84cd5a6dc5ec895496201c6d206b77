4665ae6214ea36174e0fcd6cfde6d7d8
/**
 * Web implementation of platform services
 * Provides browser-specific implementations of platform abstractions
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WebPlatformService", {
    enumerable: true,
    get: function() {
        return WebPlatformService;
    }
});
const _constants = require("../../../constants");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
// Using console directly to avoid circular dependency with Logger
// Storage key validation regex
const VALID_KEY_REGEX = /^[a-zA-Z0-9-_]+$/;
// Default implementation using real browser APIs
const getLiveBrowserAPIs = ()=>({
        localStorage: typeof window !== "undefined" ? window.localStorage : {},
        sessionStorage: typeof window !== "undefined" ? window.sessionStorage : {},
        navigator: typeof navigator !== "undefined" ? navigator : {},
        window: typeof window !== "undefined" ? window : {},
        document: typeof document !== "undefined" ? document : {},
        performance: typeof performance !== "undefined" ? performance : {}
    });
// Web Storage Implementation with dependency injection
class WebStorage {
    async save(key, data) {
        // Validate key format
        if (!VALID_KEY_REGEX.test(key)) {
            throw new Error(`Invalid storage key: ${key}. Only alphanumeric characters, hyphens, and underscores are allowed.`);
        }
        try {
            const serialized = JSON.stringify(data);
            this.storage.setItem(this.prefix + key, serialized);
        } catch (error) {
            // Preserve original error context for debugging
            throw new Error(`Failed to save data for key '${key}': ${error.message}`);
        }
    }
    async load(key) {
        // Validate key format
        if (!VALID_KEY_REGEX.test(key)) {
            console.error(`[WebPlatformService] Invalid storage key requested: ${key}`);
            return null;
        }
        try {
            const item = this.storage.getItem(this.prefix + key);
            if (!item) return null;
            // Parse JSON with error handling
            const data = JSON.parse(item);
            return data;
        } catch (error) {
            console.error(`[WebPlatformService] Failed to parse stored data for key '${key}':`, error);
            return null;
        }
    }
    async remove(key) {
        // Validate key format
        if (!VALID_KEY_REGEX.test(key)) {
            console.error(`[WebPlatformService] Invalid storage key for removal: ${key}`);
            return;
        }
        this.storage.removeItem(this.prefix + key);
    }
    async clear() {
        const keys = await this.getAllKeys();
        keys.forEach((key)=>this.storage.removeItem(this.prefix + key));
    }
    async getAllKeys() {
        const keys = [];
        for(let i = 0; i < this.storage.length; i++){
            const key = this.storage.key(i);
            if (key === null || key === void 0 ? void 0 : key.startsWith(this.prefix)) {
                keys.push(key.replace(this.prefix, ""));
            }
        }
        return keys;
    }
    constructor(storage = typeof localStorage !== "undefined" ? localStorage : {}){
        _define_property(this, "prefix", _constants.STORAGE.PREFIX);
        _define_property(this, "storage", void 0);
        this.storage = storage;
    }
}
// Web Notification Implementation
class WebNotification {
    async requestPermission() {
        if (!("Notification" in window)) {
            return false;
        }
        const result = await Notification.requestPermission();
        return result === "granted";
    }
    async show(title, options) {
        if (!("Notification" in window) || Notification.permission !== "granted") {
            throw new Error("Notifications not supported or not permitted");
        }
        new Notification(title, {
            body: options === null || options === void 0 ? void 0 : options.body,
            icon: options === null || options === void 0 ? void 0 : options.icon,
            badge: options === null || options === void 0 ? void 0 : options.badge,
            tag: options === null || options === void 0 ? void 0 : options.tag,
            data: options === null || options === void 0 ? void 0 : options.data
        });
    }
    async schedule(_notification) {
        // Web doesn't support scheduled notifications natively
        // Would need service worker implementation
        throw new Error("Scheduled notifications not supported on web");
    }
    async cancel(_id) {
    // Not supported on web
    }
    async cancelAll() {
    // Not supported on web
    }
}
// Web Device Implementation with dependency injection
class WebDevice {
    getPlatform() {
        const userAgent = this.navigator.userAgent.toLowerCase();
        if (userAgent.includes("android")) return "android";
        if (userAgent.includes("iphone") || userAgent.includes("ipad")) return "ios";
        if (userAgent.includes("win")) return "windows";
        if (userAgent.includes("mac")) return "macos";
        if (userAgent.includes("linux")) return "linux";
        return "web";
    }
    getDeviceInfo() {
        var _this_window_screen, _this_window, _this_window_screen1, _this_window1, _this_window2;
        return {
            model: this.navigator.userAgent,
            osVersion: this.navigator.userAgent,
            screenSize: {
                width: ((_this_window = this.window) === null || _this_window === void 0 ? void 0 : (_this_window_screen = _this_window.screen) === null || _this_window_screen === void 0 ? void 0 : _this_window_screen.width) || 1920,
                height: ((_this_window1 = this.window) === null || _this_window1 === void 0 ? void 0 : (_this_window_screen1 = _this_window1.screen) === null || _this_window_screen1 === void 0 ? void 0 : _this_window_screen1.height) || 1080
            },
            pixelRatio: ((_this_window2 = this.window) === null || _this_window2 === void 0 ? void 0 : _this_window2.devicePixelRatio) || 1,
            isTablet: this.checkIsTablet()
        };
    }
    getMemoryInfo() {
        const nav = this.navigator;
        if (nav.deviceMemory) {
            return {
                totalMemory: nav.deviceMemory * _constants.SYSTEM.GB_TO_BYTES_FACTOR
            };
        }
        return {};
    }
    getNetworkStatus() {
        const nav = this.navigator;
        const connection = nav.connection || nav.mozConnection || nav.webkitConnection;
        return {
            isOnline: this.navigator.onLine,
            type: connection === null || connection === void 0 ? void 0 : connection.type,
            effectiveType: connection === null || connection === void 0 ? void 0 : connection.effectiveType,
            downlink: connection === null || connection === void 0 ? void 0 : connection.downlink
        };
    }
    isLowEndDevice() {
        const nav = this.navigator;
        // Consider device low-end if it has less than 4GB RAM or slow network
        const memoryGB = nav.deviceMemory || _constants.SYSTEM.DEFAULT_MEMORY_GB;
        const connection = nav.connection || nav.mozConnection || nav.webkitConnection;
        const slowConnection = (connection === null || connection === void 0 ? void 0 : connection.effectiveType) === "2g" || (connection === null || connection === void 0 ? void 0 : connection.effectiveType) === "slow-2g";
        return memoryGB < _constants.SYSTEM.LOW_MEMORY_THRESHOLD_GB || slowConnection || false;
    }
    checkIsTablet() {
        var _this_window_screen, _this_window, _this_window_screen1, _this_window1;
        const userAgent = this.navigator.userAgent.toLowerCase();
        const hasTouch = this.window && "ontouchstart" in this.window;
        const screenSize = Math.min(((_this_window = this.window) === null || _this_window === void 0 ? void 0 : (_this_window_screen = _this_window.screen) === null || _this_window_screen === void 0 ? void 0 : _this_window_screen.width) || 1920, ((_this_window1 = this.window) === null || _this_window1 === void 0 ? void 0 : (_this_window_screen1 = _this_window1.screen) === null || _this_window_screen1 === void 0 ? void 0 : _this_window_screen1.height) || 1080);
        return !!hasTouch && screenSize >= 768 && (userAgent.includes("tablet") || userAgent.includes("ipad"));
    }
    constructor(navigator1 = typeof window !== "undefined" ? window.navigator : {}, windowObj){
        _define_property(this, "navigator", void 0);
        _define_property(this, "window", void 0);
        this.navigator = navigator1;
        this.window = windowObj || (typeof window !== "undefined" ? window : {});
    }
}
// Web Performance Implementation
class WebPerformance {
    startMeasure(name) {
        this.marks[`${name}_start`] = performance.now();
    }
    endMeasure(name) {
        const startMark = `${name}_start`;
        if (!this.marks[startMark]) {
            throw new Error(`No start mark found for ${name}`);
        }
        const duration = performance.now() - this.marks[startMark];
        if (!this.measures[name]) {
            this.measures[name] = [];
        }
        this.measures[name].push(duration);
        delete this.marks[startMark];
        return duration;
    }
    mark(name) {
        this.marks[name] = performance.now();
    }
    measure(name, startMark, endMark) {
        if (!this.marks[startMark] || !this.marks[endMark]) {
            throw new Error("Start or end mark not found");
        }
        const duration = this.marks[endMark] - this.marks[startMark];
        if (!this.measures[name]) {
            this.measures[name] = [];
        }
        this.measures[name].push(duration);
        return duration;
    }
    getMetrics() {
        const averages = {};
        Object.entries(this.measures).forEach(([name, values])=>{
            if (values.length > 0) {
                averages[name] = values.reduce((a, b)=>a + b, 0) / values.length;
            }
        });
        return {
            measures: {
                ...this.measures
            },
            marks: {
                ...this.marks
            },
            averages
        };
    }
    clearMetrics() {
        this.measures = {};
        this.marks = {};
    }
    constructor(){
        _define_property(this, "measures", {});
        _define_property(this, "marks", {});
    }
}
// Web Clipboard Implementation with dependency injection
class WebClipboard {
    async copy(text) {
        if (this.navigator.clipboard) {
            await this.navigator.clipboard.writeText(text);
        } else {
            // Fallback for older browsers
            const textArea = this.document.createElement("textarea");
            textArea.value = text;
            textArea.style.position = "fixed";
            textArea.style.opacity = "0";
            this.document.body.appendChild(textArea);
            textArea.select();
            this.document.execCommand("copy");
            this.document.body.removeChild(textArea);
        }
    }
    async paste() {
        if (this.navigator.clipboard) {
            return await this.navigator.clipboard.readText();
        }
        throw new Error("Clipboard paste not supported");
    }
    async hasContent() {
        // Web doesn't provide a way to check clipboard content without reading it
        return false;
    }
    constructor(navigator1 = typeof window !== "undefined" ? window.navigator : {}, document1){
        _define_property(this, "navigator", void 0);
        _define_property(this, "document", void 0);
        this.navigator = navigator1;
        this.document = document1 || (typeof window !== "undefined" ? window.document : {});
    }
}
// Web Share Implementation with dependency injection
class WebShare {
    canShare() {
        return "share" in this.navigator;
    }
    async share(options) {
        if (!this.canShare()) {
            throw new Error("Web Share API not supported");
        }
        try {
            await this.navigator.share({
                title: options.title,
                text: options.text,
                url: options.url
            });
        } catch (error) {
            if (error.name !== "AbortError") {
                throw error;
            }
        }
    }
    constructor(navigator1 = typeof window !== "undefined" ? window.navigator : {}){
        _define_property(this, "navigator", void 0);
        this.navigator = navigator1;
    }
}
// Web Analytics Implementation (stub for now)
class WebAnalytics {
    track(_event, _properties) {
    // Implement actual analytics (Google Analytics, Mixpanel, etc.)
    }
    identify(_userId, _traits) {}
    page(_name, _properties) {}
    setUserProperties(_properties) {}
}
class WebPlatformService {
    // Optional apis parameter for dependency injection (backward compatible)
    constructor(apis = getLiveBrowserAPIs()){
        _define_property(this, "storage", void 0);
        _define_property(this, "notifications", void 0);
        _define_property(this, "device", void 0);
        _define_property(this, "performance", void 0);
        _define_property(this, "clipboard", void 0);
        _define_property(this, "share", void 0);
        _define_property(this, "analytics", void 0);
        _define_property(this, "apis", void 0);
        this.apis = apis;
        // Pass injected APIs to services that need them
        this.storage = new WebStorage(this.apis.localStorage);
        this.notifications = new WebNotification();
        this.device = new WebDevice(this.apis.navigator, this.apis.window);
        this.performance = new WebPerformance();
        this.clipboard = new WebClipboard(this.apis.navigator, this.apis.document);
        this.share = new WebShare(this.apis.navigator);
        this.analytics = new WebAnalytics();
    }
}

//# sourceMappingURL=data:application/json;base64,