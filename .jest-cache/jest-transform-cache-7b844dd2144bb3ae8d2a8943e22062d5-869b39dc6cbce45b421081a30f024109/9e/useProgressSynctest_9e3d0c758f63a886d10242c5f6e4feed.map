{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/hooks/useProgressSync.test.ts"],"sourcesContent":["/**\n * @file Unit tests for useProgressSync hook\n * @description Tests debounced sync, optimistic updates, retry logic, and offline handling\n */\n\nimport { renderHook, act, waitFor } from \"@testing-library/react\";\nimport { useProgressSync } from \"@shared/hooks/useProgressSync\";\nimport { ProgressService } from \"@shared/services/ProgressService\";\nimport type { UserStats, CardProgress } from \"@shared/store/slices/types\";\n\n// Mock progress actions\nconst mockProgressActions = {\n  batchUpdateProgress: jest.fn(),\n  setCardProgress: jest.fn(),\n  setLastSync: jest.fn(),\n  setSyncError: jest.fn(),\n};\n\njest.mock(\"@shared/store/hooks/useProgressStore\", () => ({\n  /**\n   *\n   */\n  useProgressActions: () => mockProgressActions,\n}));\n\n// Mock logger\njest.mock(\"@shared/services/logging/Logger\", () => {\n  const mockLogger = {\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  };\n\n  return {\n    /**\n     *\n     */\n    getLogger: () => ({\n      /**\n       *\n       */\n      setContext: () => mockLogger,\n    }),\n  };\n});\n\n// Mock localStorage\nconst mockLocalStorage = (() => {\n  let store: Record<string, string> = {};\n\n  return {\n    /**\n     *\n     * @param key\n     */\n    getItem: (key: string) => store[key] || null,\n    /**\n     *\n     * @param key\n     * @param value\n     */\n    setItem: (key: string, value: string) => {\n      store[key] = value;\n    },\n    /**\n     *\n     * @param key\n     */\n    removeItem: (key: string) => {\n      delete store[key];\n    },\n    /**\n     *\n     */\n    clear: () => {\n      store = {};\n    },\n  };\n})();\n\nObject.defineProperty(window, \"localStorage\", {\n  value: mockLocalStorage,\n});\n\n// Mock window online/offline events\nconst mockWindowEventListeners: { [key: string]: EventListener[] } = {};\n\nObject.defineProperty(window, \"addEventListener\", {\n  /**\n   *\n   * @param event\n   * @param listener\n   */\n  value: (event: string, listener: EventListener) => {\n    if (!mockWindowEventListeners[event]) {\n      mockWindowEventListeners[event] = [];\n    }\n    mockWindowEventListeners[event].push(listener);\n  },\n});\n\nObject.defineProperty(window, \"removeEventListener\", {\n  /**\n   *\n   * @param event\n   * @param listener\n   */\n  value: (event: string, listener: EventListener) => {\n    if (mockWindowEventListeners[event]) {\n      const index = mockWindowEventListeners[event].indexOf(listener);\n      if (index > -1) {\n        mockWindowEventListeners[event].splice(index, 1);\n      }\n    }\n  },\n});\n\n/**\n *\n */\nconst triggerOnlineEvent = () => {\n  // Mock navigator.onLine\n  Object.defineProperty(navigator, \"onLine\", {\n    writable: true,\n    value: true,\n  });\n\n  mockWindowEventListeners[\"online\"]?.forEach((listener) =>\n    listener(new Event(\"online\")),\n  );\n};\n\n/**\n *\n */\nconst triggerOfflineEvent = () => {\n  // Mock navigator.onLine\n  Object.defineProperty(navigator, \"onLine\", {\n    writable: true,\n    value: false,\n  });\n\n  mockWindowEventListeners[\"offline\"]?.forEach((listener) =>\n    listener(new Event(\"offline\")),\n  );\n};\n\n// Test helpers\n/**\n *\n */\nconst createMockProgressService = (): jest.Mocked<ProgressService> =>\n  ({\n    updateUserStats: jest.fn().mockResolvedValue(undefined),\n    upsertCardProgress: jest.fn().mockResolvedValue(undefined),\n    updateProgressTransaction: jest.fn().mockResolvedValue(undefined),\n  }) as any;\n\n/**\n *\n */\nconst createTestUserStats = (): Partial<UserStats> => ({\n  totalPositionsCompleted: 10,\n  overallSuccessRate: 0.85,\n});\n\n/**\n *\n * @param id\n */\nconst createTestCardProgress = (id: string): CardProgress => ({\n  id,\n  nextReviewAt: Date.now() + 86400000, // 24 hours from now\n  lastReviewedAt: Date.now() - 3600000, // 1 hour ago\n  interval: 1,\n  repetition: 1,\n  efactor: 2.5,\n  lapses: 0,\n});\n\ndescribe(\"useProgressSync\", () => {\n  const userId = \"test-user-123\";\n  let mockProgressService: jest.Mocked<ProgressService>;\n\n  beforeEach(() => {\n    mockProgressService = createMockProgressService();\n    jest.clearAllMocks();\n    mockLocalStorage.clear();\n\n    // Clear all window event listeners\n    Object.keys(mockWindowEventListeners).forEach((key) => {\n      mockWindowEventListeners[key] = [];\n    });\n\n    // Reset navigator.onLine to true\n    Object.defineProperty(navigator, \"onLine\", {\n      writable: true,\n      value: true,\n    });\n\n    // Reset timers\n    jest.clearAllTimers();\n    jest.useFakeTimers();\n  });\n\n  afterEach(async () => {\n    // Properly clean up timers and wait for any pending state updates\n    await act(async () => {\n      jest.runOnlyPendingTimers();\n    });\n    jest.clearAllTimers();\n    jest.useRealTimers();\n  });\n\n  describe(\"Basic sync operations\", () => {\n    it(\"should sync user stats with optimistic updates\", async () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      const statsUpdate = createTestUserStats();\n\n      act(() => {\n        result.current.syncUserStats(statsUpdate);\n      });\n\n      // Should perform optimistic update immediately\n      expect(mockProgressActions.batchUpdateProgress).toHaveBeenCalledWith({\n        userStats: statsUpdate,\n      });\n\n      // Should queue operation\n      expect(result.current.syncStatus.pendingCount).toBe(1);\n      expect(result.current.syncStatus.isDebounced).toBe(true);\n\n      // Fast-forward debounce timer and wait for async operations\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      await waitFor(() => {\n        expect(mockProgressService.updateUserStats).toHaveBeenCalledWith(\n          userId,\n          statsUpdate,\n        );\n      });\n    });\n\n    it(\"should sync card progress with optimistic updates\", async () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      const cardProgress = createTestCardProgress(\"test-card-1\");\n\n      act(() => {\n        result.current.syncCardProgress(\"test-card-1\", cardProgress);\n      });\n\n      // Should perform optimistic update immediately\n      expect(mockProgressActions.setCardProgress).toHaveBeenCalledWith(\n        \"test-card-1\",\n        cardProgress,\n      );\n\n      // Fast-forward debounce timer and wait for async operations\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      await waitFor(() => {\n        expect(mockProgressService.upsertCardProgress).toHaveBeenCalledWith(\n          userId,\n          \"test-card-1\",\n          cardProgress,\n        );\n      });\n    });\n\n    it(\"should handle batch sync operations\", async () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      const statsUpdate = createTestUserStats();\n      const cardUpdates = [\n        { positionId: \"card-1\", progress: createTestCardProgress(\"card-1\") },\n        { positionId: \"card-2\", progress: createTestCardProgress(\"card-2\") },\n      ];\n\n      act(() => {\n        result.current.syncBatch(statsUpdate, cardUpdates);\n      });\n\n      // Should perform optimistic updates\n      expect(mockProgressActions.batchUpdateProgress).toHaveBeenCalledWith({\n        userStats: statsUpdate,\n      });\n      expect(mockProgressActions.batchUpdateProgress).toHaveBeenCalledWith({\n        cardProgress: {\n          \"card-1\": cardUpdates[0].progress,\n          \"card-2\": cardUpdates[1].progress,\n        },\n      });\n\n      // Fast-forward debounce timer and wait for async operations\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      await waitFor(() => {\n        expect(\n          mockProgressService.updateProgressTransaction,\n        ).toHaveBeenCalledWith(userId, statsUpdate, cardUpdates);\n      });\n    });\n  });\n\n  describe(\"Error handling and retry logic\", () => {\n    it.skip(\"should retry failed operations with exponential backoff\", async () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService, { maxRetries: 2 }),\n      );\n\n      // Make service fail initially\n      mockProgressService.updateUserStats\n        .mockRejectedValueOnce(new Error(\"Network error\"))\n        .mockRejectedValueOnce(new Error(\"Network error\"))\n        .mockResolvedValueOnce(undefined);\n\n      const statsUpdate = createTestUserStats();\n\n      act(() => {\n        result.current.syncUserStats(statsUpdate);\n      });\n\n      // Initial sync attempt\n      act(() => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      await waitFor(() => {\n        expect(mockProgressService.updateUserStats).toHaveBeenCalledTimes(1);\n        expect(result.current.syncStatus.status).toBe(\"error\");\n      });\n\n      expect(result.current.syncStatus.pendingCount).toBe(1);\n\n      // First retry (after 1s exponential backoff)\n      act(() => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      await waitFor(() => {\n        expect(mockProgressService.updateUserStats).toHaveBeenCalledTimes(2);\n      });\n\n      // Second retry (after 2s exponential backoff)\n      act(() => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      await waitFor(() => {\n        expect(mockProgressService.updateUserStats).toHaveBeenCalledTimes(3);\n      });\n\n      // Should eventually succeed\n      expect(result.current.syncStatus.status).toBe(\"idle\");\n      expect(result.current.syncStatus.pendingCount).toBe(0);\n    });\n\n    it.skip(\"should give up after max retries\", async () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService, { maxRetries: 1 }),\n      );\n\n      // Make service always fail\n      mockProgressService.updateUserStats.mockRejectedValue(\n        new Error(\"Permanent error\"),\n      );\n\n      const statsUpdate = createTestUserStats();\n\n      act(() => {\n        result.current.syncUserStats(statsUpdate);\n      });\n\n      // Initial attempt\n      act(() => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      await waitFor(() => {\n        expect(mockProgressService.updateUserStats).toHaveBeenCalledTimes(1);\n      });\n\n      // Wait longer for retry attempt + debounce\n      act(() => {\n        jest.advanceTimersByTime(3000); // 1000ms retry delay + 2000ms debounce\n      });\n\n      await waitFor(\n        () => {\n          expect(mockProgressService.updateUserStats).toHaveBeenCalledTimes(2);\n        },\n        { timeout: 3000 },\n      );\n\n      // Should give up and remove from queue\n      expect(result.current.syncStatus.status).toBe(\"error\");\n      expect(result.current.syncStatus.pendingCount).toBe(0);\n      expect(mockProgressActions.setSyncError).toHaveBeenCalledWith(\n        \"Permanent error\",\n      );\n    });\n  });\n\n  describe(\"Offline/Online handling\", () => {\n    it(\"should queue operations while offline\", async () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      // Trigger offline event\n      act(() => {\n        triggerOfflineEvent();\n      });\n\n      expect(result.current.syncStatus.status).toBe(\"offline\");\n\n      // Queue operations while offline\n      const statsUpdate = createTestUserStats();\n      act(() => {\n        result.current.syncUserStats(statsUpdate);\n      });\n\n      expect(result.current.syncStatus.pendingCount).toBe(1);\n\n      // Service should not be called while offline\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      expect(mockProgressService.updateUserStats).not.toHaveBeenCalled();\n    });\n\n    it(\"should process queue when coming back online\", async () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      // Go offline and queue operations\n      act(() => {\n        triggerOfflineEvent();\n      });\n\n      const statsUpdate = createTestUserStats();\n      act(() => {\n        result.current.syncUserStats(statsUpdate);\n      });\n\n      expect(result.current.syncStatus.pendingCount).toBe(1);\n\n      // Come back online\n      act(() => {\n        triggerOnlineEvent();\n      });\n\n      expect(result.current.syncStatus.status).toBe(\"idle\");\n\n      // Should process queued operations\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      await waitFor(() => {\n        expect(mockProgressService.updateUserStats).toHaveBeenCalledWith(\n          userId,\n          statsUpdate,\n        );\n      });\n    });\n  });\n\n  describe(\"Queue management\", () => {\n    it(\"should persist queue to localStorage\", () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      const statsUpdate = createTestUserStats();\n      act(() => {\n        result.current.syncUserStats(statsUpdate);\n      });\n\n      // Should save to localStorage\n      const savedQueue = mockLocalStorage.getItem(`syncQueue-${userId}`);\n      expect(savedQueue).toBeTruthy();\n\n      const parsedQueue = JSON.parse(savedQueue!);\n      expect(parsedQueue).toHaveLength(1);\n      expect(parsedQueue[0].operation.type).toBe(\"userStats\");\n    });\n\n    it(\"should restore queue from localStorage on mount\", () => {\n      // Pre-populate localStorage\n      const queueData = [\n        {\n          id: \"test-id\",\n          operation: {\n            type: \"userStats\",\n            userId,\n            updates: createTestUserStats(),\n          },\n          timestamp: Date.now(),\n          retries: 0,\n          lastAttempt: null,\n        },\n      ];\n\n      mockLocalStorage.setItem(\n        `syncQueue-${userId}`,\n        JSON.stringify(queueData),\n      );\n\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      expect(result.current.syncStatus.pendingCount).toBe(1);\n    });\n\n    it(\"should enforce queue size limit\", () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      // Fill queue beyond limit (MAX_QUEUE_SIZE = 100)\n      act(() => {\n        for (let i = 0; i < 105; i++) {\n          result.current.syncUserStats({ totalPositionsCompleted: i });\n        }\n      });\n\n      // Should drop oldest operations and keep under limit\n      expect(result.current.syncStatus.pendingCount).toBeLessThanOrEqual(100);\n    });\n\n    it(\"should clear queue on demand\", () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      // Queue some operations\n      act(() => {\n        result.current.syncUserStats(createTestUserStats());\n        result.current.syncCardProgress(\n          \"test-card\",\n          createTestCardProgress(\"test-card\"),\n        );\n      });\n\n      expect(result.current.syncStatus.pendingCount).toBe(2);\n\n      // Clear queue\n      act(() => {\n        result.current.clearQueue();\n      });\n\n      expect(result.current.syncStatus.pendingCount).toBe(0);\n      expect(result.current.syncStatus.status).toBe(\"idle\");\n    });\n  });\n\n  describe(\"Batch splitting\", () => {\n    it(\"should split large batches into chunks\", async () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService, { maxBatchSize: 2 }),\n      );\n\n      const statsUpdate = createTestUserStats();\n      const cardUpdates = [\n        { positionId: \"card-1\", progress: createTestCardProgress(\"card-1\") },\n        { positionId: \"card-2\", progress: createTestCardProgress(\"card-2\") },\n        { positionId: \"card-3\", progress: createTestCardProgress(\"card-3\") },\n        { positionId: \"card-4\", progress: createTestCardProgress(\"card-4\") },\n        { positionId: \"card-5\", progress: createTestCardProgress(\"card-5\") },\n      ];\n\n      act(() => {\n        result.current.syncBatch(statsUpdate, cardUpdates);\n      });\n\n      // Should split into 3 chunks: [2, 2, 1] cards\n      expect(result.current.syncStatus.pendingCount).toBe(3);\n\n      // Fast-forward debounce timer and wait for async operations\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      await waitFor(() => {\n        expect(\n          mockProgressService.updateProgressTransaction,\n        ).toHaveBeenCalledTimes(3);\n      });\n\n      // First chunk should include stats update\n      expect(\n        mockProgressService.updateProgressTransaction,\n      ).toHaveBeenNthCalledWith(\n        1,\n        userId,\n        statsUpdate,\n        cardUpdates.slice(0, 2),\n      );\n\n      // Other chunks should have empty stats update\n      expect(\n        mockProgressService.updateProgressTransaction,\n      ).toHaveBeenNthCalledWith(2, userId, {}, cardUpdates.slice(2, 4));\n\n      expect(\n        mockProgressService.updateProgressTransaction,\n      ).toHaveBeenNthCalledWith(3, userId, {}, cardUpdates.slice(4, 5));\n    });\n  });\n\n  describe(\"Configuration options\", () => {\n    it(\"should respect custom debounce delay\", async () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService, { debounceMs: 5000 }),\n      );\n\n      act(() => {\n        result.current.syncUserStats(createTestUserStats());\n      });\n\n      expect(result.current.syncStatus.isDebounced).toBe(true);\n\n      // Should not sync before custom debounce time\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      expect(mockProgressService.updateUserStats).not.toHaveBeenCalled();\n\n      // Should sync after custom debounce time\n      await act(async () => {\n        jest.advanceTimersByTime(3000);\n      });\n\n      await waitFor(() => {\n        expect(mockProgressService.updateUserStats).toHaveBeenCalled();\n      });\n    });\n\n    it(\"should disable optimistic updates when configured\", () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService, {\n          enableOptimistic: false,\n        }),\n      );\n\n      act(() => {\n        result.current.syncUserStats(createTestUserStats());\n      });\n\n      // Should not perform optimistic updates\n      expect(mockProgressActions.batchUpdateProgress).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Force sync\", () => {\n    it(\"should bypass debounce and sync immediately\", async () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      act(() => {\n        result.current.syncUserStats(createTestUserStats());\n      });\n\n      expect(result.current.syncStatus.isDebounced).toBe(true);\n\n      // Force sync without waiting for debounce\n      await act(async () => {\n        await result.current.forceSync();\n      });\n\n      expect(result.current.syncStatus.isDebounced).toBe(false);\n      expect(mockProgressService.updateUserStats).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Concurrency protection\", () => {\n    it(\"should prevent concurrent queue processing\", async () => {\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      // Make the first sync take time (longer than debounce)\n      let resolveFirst: () => void;\n      mockProgressService.updateUserStats.mockImplementationOnce(\n        () =>\n          new Promise((resolve) => {\n            resolveFirst = resolve;\n          }),\n      );\n\n      // Queue first operation\n      act(() => {\n        result.current.syncUserStats(createTestUserStats());\n      });\n\n      expect(result.current.syncStatus.pendingCount).toBe(1);\n\n      // Start first sync\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      // First sync should have started\n      expect(mockProgressService.updateUserStats).toHaveBeenCalledTimes(1);\n\n      // Queue second operation while first is still processing\n      act(() => {\n        result.current.syncUserStats(createTestUserStats());\n      });\n\n      // Both operations should be in the queue\n      expect(result.current.syncStatus.pendingCount).toBe(2);\n\n      // Try to trigger processing again (should be blocked because first is still processing)\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      // Should still only have one sync call (concurrent processing prevented)\n      expect(mockProgressService.updateUserStats).toHaveBeenCalledTimes(1);\n\n      // Now resolve the first operation to allow the second to process\n      await act(async () => {\n        resolveFirst!();\n      });\n    });\n  });\n\n  describe(\"Edge cases\", () => {\n    it(\"should handle sync without userId gracefully\", () => {\n      const { result } = renderHook(() =>\n        useProgressSync(null, mockProgressService),\n      );\n\n      act(() => {\n        result.current.syncUserStats(createTestUserStats());\n      });\n\n      // Operation should not be queued without userId\n      expect(result.current.syncStatus.pendingCount).toBe(0);\n    });\n\n    it(\"should handle localStorage errors gracefully\", () => {\n      // Mock localStorage to throw error\n      const originalSetItem = mockLocalStorage.setItem;\n      mockLocalStorage.setItem = jest.fn(() => {\n        throw new Error(\"Storage quota exceeded\");\n      });\n\n      const { result } = renderHook(() =>\n        useProgressSync(userId, mockProgressService),\n      );\n\n      act(() => {\n        result.current.syncUserStats(createTestUserStats());\n      });\n\n      // Test should not crash and operation should still be queued in memory\n      expect(result.current.syncStatus.pendingCount).toBe(1);\n\n      // Restore original method\n      mockLocalStorage.setItem = originalSetItem;\n    });\n  });\n});\n"],"names":["jest","mock","useProgressActions","mockProgressActions","mockLogger","debug","fn","info","warn","error","getLogger","setContext","batchUpdateProgress","setCardProgress","setLastSync","setSyncError","mockLocalStorage","store","getItem","key","setItem","value","removeItem","clear","Object","defineProperty","window","mockWindowEventListeners","event","listener","push","index","indexOf","splice","triggerOnlineEvent","navigator","writable","forEach","Event","triggerOfflineEvent","createMockProgressService","updateUserStats","mockResolvedValue","undefined","upsertCardProgress","updateProgressTransaction","createTestUserStats","totalPositionsCompleted","overallSuccessRate","createTestCardProgress","id","nextReviewAt","Date","now","lastReviewedAt","interval","repetition","efactor","lapses","describe","userId","mockProgressService","beforeEach","clearAllMocks","keys","clearAllTimers","useFakeTimers","afterEach","act","runOnlyPendingTimers","useRealTimers","it","result","renderHook","useProgressSync","statsUpdate","current","syncUserStats","expect","toHaveBeenCalledWith","userStats","syncStatus","pendingCount","toBe","isDebounced","advanceTimersByTime","waitFor","cardProgress","syncCardProgress","cardUpdates","positionId","progress","syncBatch","skip","maxRetries","mockRejectedValueOnce","Error","mockResolvedValueOnce","toHaveBeenCalledTimes","status","mockRejectedValue","timeout","not","toHaveBeenCalled","savedQueue","toBeTruthy","parsedQueue","JSON","parse","toHaveLength","operation","type","queueData","updates","timestamp","retries","lastAttempt","stringify","i","toBeLessThanOrEqual","clearQueue","maxBatchSize","toHaveBeenNthCalledWith","slice","debounceMs","enableOptimistic","forceSync","resolveFirst","mockImplementationOnce","Promise","resolve","originalSetItem"],"mappings":"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"}