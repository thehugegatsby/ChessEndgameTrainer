9844ccdfd71da7523b6a443292891eec
/**
 * @file Move validation and evaluation processing hook
 * @module hooks/useMoveValidation
 * 
 * @description
 * Custom hook that encapsulates evaluation processing and analysis status
 * management for chess training. Extracted from TrainingBoard to separate
 * evaluation concerns from UI rendering.
 * 
 * @remarks
 * Key responsibilities:
 * - Evaluation deduplication using processedEvaluationsRef
 * - Analysis status synchronization with tablebase store
 * - Safe handling of tablebase actions availability
 * - Evaluation update coordination
 * 
 * This hook maintains evaluation processing logic while providing
 * a clean interface for move validation and analysis management.
 * 
 * @example
 * ```tsx
 * const moveValidation = useMoveValidation({
 *   lastEvaluation,
 *   currentFen,
 *   evaluations,
 *   isEvaluating,
 *   tablebaseState,
 *   tablebaseActions
 * });
 * 
 * // Hook handles evaluation processing and status updates internally
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useMoveValidation", {
    enumerable: true,
    get: function() {
        return useMoveValidation;
    }
});
const _react = require("react");
const useMoveValidation = ({ lastEvaluation, currentFen, evaluations, isEvaluating, tablebaseState, tablebaseActions })=>{
    // Track processed evaluations to prevent duplicates
    const processedEvaluationsRef = (0, _react.useRef)(new Set());
    const [processedCount, setProcessedCount] = (0, _react.useState)(0);
    // Update Zustand with current evaluation
    (0, _react.useEffect)(()=>{
        if (!lastEvaluation) return;
        var _lastEvaluation_mateInMoves;
        // Create unique key for this evaluation using current FEN and evaluation data
        const evalKey = `${currentFen}_${lastEvaluation.evaluation}_${(_lastEvaluation_mateInMoves = lastEvaluation.mateInMoves) !== null && _lastEvaluation_mateInMoves !== void 0 ? _lastEvaluation_mateInMoves : "null"}`;
        if (processedEvaluationsRef.current.has(evalKey)) {
            return; // Skip if already processed
        }
        processedEvaluationsRef.current.add(evalKey);
        setProcessedCount(processedEvaluationsRef.current.size);
        const currentEvaluations = evaluations || [];
        const updatedEvaluations = [
            ...currentEvaluations,
            lastEvaluation
        ];
        // Check if setEvaluations exists before calling
        if (tablebaseActions === null || tablebaseActions === void 0 ? void 0 : tablebaseActions.setEvaluations) {
            tablebaseActions.setEvaluations(updatedEvaluations);
        } else {
            console.error("‚ùå tablebaseActions.setEvaluations is not available!");
        }
    }, [
        lastEvaluation,
        currentFen,
        evaluations,
        tablebaseActions
    ]);
    // Update analysis status based on evaluation state
    (0, _react.useEffect)(()=>{
        console.debug("üîç TablebaseActions debug", {
            hasTablebaseActions: !!tablebaseActions,
            hasSetAnalysisStatus: !!(tablebaseActions === null || tablebaseActions === void 0 ? void 0 : tablebaseActions.setAnalysisStatus),
            tablebaseActionsKeys: Object.keys(tablebaseActions || {}),
            isEvaluating
        });
        // CRITICAL: Safe-guard to prevent crashes
        if (!(tablebaseActions === null || tablebaseActions === void 0 ? void 0 : tablebaseActions.setAnalysisStatus)) {
            console.warn("‚ö†Ô∏è tablebaseActions.setAnalysisStatus not available, skipping");
            return;
        }
        if (isEvaluating) {
            tablebaseActions.setAnalysisStatus("loading");
        } else if (tablebaseState.analysisStatus === "loading") {
            // Only update to success if we were loading
            tablebaseActions.setAnalysisStatus("success");
        }
    }, [
        isEvaluating,
        tablebaseState,
        tablebaseActions
    ]);
    // Return validation state
    return {
        processedCount,
        isProcessing: isEvaluating
    };
};

//# sourceMappingURL=data:application/json;base64,