{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/hooks/useMoveValidation.ts"],"sourcesContent":["/**\n * @file Move validation and evaluation processing hook\n * @module hooks/useMoveValidation\n * \n * @description\n * Custom hook that encapsulates evaluation processing and analysis status\n * management for chess training. Extracted from TrainingBoard to separate\n * evaluation concerns from UI rendering.\n * \n * @remarks\n * Key responsibilities:\n * - Evaluation deduplication using processedEvaluationsRef\n * - Analysis status synchronization with tablebase store\n * - Safe handling of tablebase actions availability\n * - Evaluation update coordination\n * \n * This hook maintains evaluation processing logic while providing\n * a clean interface for move validation and analysis management.\n * \n * @example\n * ```tsx\n * const moveValidation = useMoveValidation({\n *   lastEvaluation,\n *   currentFen,\n *   evaluations,\n *   isEvaluating,\n *   tablebaseState,\n *   tablebaseActions\n * });\n * \n * // Hook handles evaluation processing and status updates internally\n * ```\n */\n\nimport { useEffect, useRef, useState } from 'react';\nimport { PositionAnalysis } from '@shared/types';\n\n/**\n * Configuration options for move validation hook\n * \n * @interface UseMoveValidationOptions\n * @description Options for configuring move validation behavior\n */\nexport interface UseMoveValidationOptions {\n  /** Last evaluation from position analysis */\n  lastEvaluation: PositionAnalysis | null | undefined;\n  /** Current FEN position */\n  currentFen: string | undefined;\n  /** Array of evaluations */\n  evaluations: PositionAnalysis[] | undefined;\n  /** Whether evaluation is in progress */\n  isEvaluating: boolean;\n  /** Tablebase store state */\n  tablebaseState: {\n    analysisStatus: 'idle' | 'loading' | 'success' | 'error';\n  };\n  /** Tablebase store actions */\n  tablebaseActions: {\n    setEvaluations?: (evaluations: PositionAnalysis[]) => void;\n    setAnalysisStatus?: (status: 'idle' | 'loading' | 'success' | 'error') => void;\n  } | undefined;\n}\n\n/**\n * Move validation state and utilities\n * \n * @interface MoveValidationResult\n * @description Result object containing validation state\n */\nexport interface MoveValidationResult {\n  /** Number of processed evaluations */\n  processedCount: number;\n  /** Whether evaluation processing is active */\n  isProcessing: boolean;\n}\n\n/**\n * Move validation and evaluation processing hook\n * \n * @description\n * Manages evaluation processing with deduplication and analysis\n * status synchronization. Handles safe interaction with tablebase\n * store actions and maintains evaluation state consistency.\n * \n * @param {UseMoveValidationOptions} options - Validation configuration\n * @returns {MoveValidationResult} Validation state and utilities\n * \n * @example\n * ```tsx\n * const moveValidation = useMoveValidation({\n *   lastEvaluation: evaluationData,\n *   currentFen: position,\n *   evaluations: evaluationList,\n *   isEvaluating: loading,\n *   tablebaseState: state,\n *   tablebaseActions: actions\n * });\n * \n * // Access processing state\n * if (moveValidation.isProcessing) {\n *   console.log('Processing evaluation...');\n * }\n * ```\n */\nexport const useMoveValidation = ({\n  lastEvaluation,\n  currentFen,\n  evaluations,\n  isEvaluating,\n  tablebaseState,\n  tablebaseActions\n}: UseMoveValidationOptions): MoveValidationResult => {\n  \n  // Track processed evaluations to prevent duplicates\n  const processedEvaluationsRef = useRef(new Set<string>());\n  const [processedCount, setProcessedCount] = useState(0);\n  \n  // Update Zustand with current evaluation\n  useEffect(() => {\n    if (!lastEvaluation) return;\n\n    // Create unique key for this evaluation using current FEN and evaluation data\n    const evalKey = `${currentFen}_${lastEvaluation.evaluation}_${lastEvaluation.mateInMoves ?? \"null\"}`;\n\n    if (processedEvaluationsRef.current.has(evalKey)) {\n      return; // Skip if already processed\n    }\n\n    processedEvaluationsRef.current.add(evalKey);\n    setProcessedCount(processedEvaluationsRef.current.size);\n\n    const currentEvaluations = evaluations || [];\n    const updatedEvaluations = [...currentEvaluations, lastEvaluation];\n\n    // Check if setEvaluations exists before calling\n    if (tablebaseActions?.setEvaluations) {\n      tablebaseActions.setEvaluations(updatedEvaluations);\n    } else {\n      console.error(\"‚ùå tablebaseActions.setEvaluations is not available!\");\n    }\n  }, [lastEvaluation, currentFen, evaluations, tablebaseActions]);\n  \n  // Update analysis status based on evaluation state\n  useEffect(() => {\n    console.debug(\"üîç TablebaseActions debug\", {\n      hasTablebaseActions: !!tablebaseActions,\n      hasSetAnalysisStatus: !!tablebaseActions?.setAnalysisStatus,\n      tablebaseActionsKeys: Object.keys(tablebaseActions || {}),\n      isEvaluating,\n    });\n\n    // CRITICAL: Safe-guard to prevent crashes\n    if (!tablebaseActions?.setAnalysisStatus) {\n      console.warn(\n        \"‚ö†Ô∏è tablebaseActions.setAnalysisStatus not available, skipping\",\n      );\n      return;\n    }\n\n    if (isEvaluating) {\n      tablebaseActions.setAnalysisStatus(\"loading\");\n    } else if (tablebaseState.analysisStatus === \"loading\") {\n      // Only update to success if we were loading\n      tablebaseActions.setAnalysisStatus(\"success\");\n    }\n  }, [isEvaluating, tablebaseState, tablebaseActions]);\n  \n  // Return validation state\n  return {\n    processedCount,\n    isProcessing: isEvaluating\n  };\n};"],"names":["useMoveValidation","lastEvaluation","currentFen","evaluations","isEvaluating","tablebaseState","tablebaseActions","processedEvaluationsRef","useRef","Set","processedCount","setProcessedCount","useState","useEffect","evalKey","evaluation","mateInMoves","current","has","add","size","currentEvaluations","updatedEvaluations","setEvaluations","console","error","debug","hasTablebaseActions","hasSetAnalysisStatus","setAnalysisStatus","tablebaseActionsKeys","Object","keys","warn","analysisStatus","isProcessing"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCC;;;;+BAwEYA;;;eAAAA;;;uBAtE+B;AAsErC,MAAMA,oBAAoB,CAAC,EAChCC,cAAc,EACdC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,cAAc,EACdC,gBAAgB,EACS;IAEzB,oDAAoD;IACpD,MAAMC,0BAA0BC,IAAAA,aAAM,EAAC,IAAIC;IAC3C,MAAM,CAACC,gBAAgBC,kBAAkB,GAAGC,IAAAA,eAAQ,EAAC;IAErD,yCAAyC;IACzCC,IAAAA,gBAAS,EAAC;QACR,IAAI,CAACZ,gBAAgB;YAGyCA;QAD9D,8EAA8E;QAC9E,MAAMa,UAAU,GAAGZ,WAAW,CAAC,EAAED,eAAec,UAAU,CAAC,CAAC,EAAEd,CAAAA,8BAAAA,eAAee,WAAW,cAA1Bf,yCAAAA,8BAA8B,QAAQ;QAEpG,IAAIM,wBAAwBU,OAAO,CAACC,GAAG,CAACJ,UAAU;YAChD,QAAQ,4BAA4B;QACtC;QAEAP,wBAAwBU,OAAO,CAACE,GAAG,CAACL;QACpCH,kBAAkBJ,wBAAwBU,OAAO,CAACG,IAAI;QAEtD,MAAMC,qBAAqBlB,eAAe,EAAE;QAC5C,MAAMmB,qBAAqB;eAAID;YAAoBpB;SAAe;QAElE,gDAAgD;QAChD,IAAIK,6BAAAA,uCAAAA,iBAAkBiB,cAAc,EAAE;YACpCjB,iBAAiBiB,cAAc,CAACD;QAClC,OAAO;YACLE,QAAQC,KAAK,CAAC;QAChB;IACF,GAAG;QAACxB;QAAgBC;QAAYC;QAAaG;KAAiB;IAE9D,mDAAmD;IACnDO,IAAAA,gBAAS,EAAC;QACRW,QAAQE,KAAK,CAAC,6BAA6B;YACzCC,qBAAqB,CAAC,CAACrB;YACvBsB,sBAAsB,CAAC,EAACtB,6BAAAA,uCAAAA,iBAAkBuB,iBAAiB;YAC3DC,sBAAsBC,OAAOC,IAAI,CAAC1B,oBAAoB,CAAC;YACvDF;QACF;QAEA,0CAA0C;QAC1C,IAAI,EAACE,6BAAAA,uCAAAA,iBAAkBuB,iBAAiB,GAAE;YACxCL,QAAQS,IAAI,CACV;YAEF;QACF;QAEA,IAAI7B,cAAc;YAChBE,iBAAiBuB,iBAAiB,CAAC;QACrC,OAAO,IAAIxB,eAAe6B,cAAc,KAAK,WAAW;YACtD,4CAA4C;YAC5C5B,iBAAiBuB,iBAAiB,CAAC;QACrC;IACF,GAAG;QAACzB;QAAcC;QAAgBC;KAAiB;IAEnD,0BAA0B;IAC1B,OAAO;QACLI;QACAyB,cAAc/B;IAChB;AACF"}