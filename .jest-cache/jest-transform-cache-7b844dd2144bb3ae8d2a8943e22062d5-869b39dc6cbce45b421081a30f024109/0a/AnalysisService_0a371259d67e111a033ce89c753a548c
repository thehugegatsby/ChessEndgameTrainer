2d073f20560f2115d6c6e19c27ac2b38
/**
 * Analysis Service - Common Logic for Position Analysis
 *
 * @remarks
 * This service encapsulates the shared logic for fetching and formatting
 * tablebase data, reducing duplication between hooks and store actions.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "analysisService", {
    enumerable: true,
    get: function() {
        return analysisService;
    }
});
const _TablebaseService = require("./TablebaseService");
const _positionAnalysisFormatter = require("../utils/positionAnalysisFormatter");
const _logging = require("./logging");
const logger = (0, _logging.getLogger)().setContext("AnalysisService");
/**
 * Service for position analysis operations
 */ class AnalysisService {
    /**
   * Get complete position analysis with tablebase data
   *
   * @param fen - Position in FEN notation
   * @param moveLimit - Maximum number of moves to fetch (default: 5)
   * @returns Complete analysis result or null if no tablebase data
   *
   * @remarks
   * This method consolidates the logic previously duplicated between
   * usePositionAnalysis hook and requestPositionEvaluation action.
   * It makes two calls to tablebaseService but they're deduplicated
   * by the service's internal cache.
   */ async getPositionAnalysis(fen, moveLimit = 5) {
        var _evaluation_tablebase_topMoves, _evaluation_tablebase;
        logger.info("Getting position analysis", {
            fen: fen.slice(0, 20) + "...",
            moveLimit
        });
        // Get tablebase evaluation - this populates the cache
        const tablebaseResult = await _TablebaseService.tablebaseService.getEvaluation(fen);
        if (!tablebaseResult.isAvailable || !tablebaseResult.result) {
            logger.debug("No tablebase data available for position");
            return null;
        }
        // Format tablebase result for display
        const displayData = (0, _positionAnalysisFormatter.formatPositionAnalysis)(tablebaseResult.result);
        // Get top moves - this uses the cached data from the first call
        const topMoves = await _TablebaseService.tablebaseService.getTopMoves(fen, moveLimit);
        var _tablebaseResult_result_dtz;
        // Convert to PositionAnalysis format
        const evaluation = {
            fen,
            evaluation: displayData.score,
            mateInMoves: displayData.isWin && tablebaseResult.result.dtz ? Math.abs(tablebaseResult.result.dtz) : undefined,
            tablebase: {
                isTablebasePosition: true,
                wdlAfter: tablebaseResult.result.wdl,
                category: tablebaseResult.result.category,
                dtz: (_tablebaseResult_result_dtz = tablebaseResult.result.dtz) !== null && _tablebaseResult_result_dtz !== void 0 ? _tablebaseResult_result_dtz : undefined,
                topMoves: topMoves.isAvailable && topMoves.moves ? topMoves.moves.map((move)=>({
                        move: move.uci,
                        san: move.san,
                        dtz: move.dtz || 0,
                        dtm: move.dtm || 0,
                        wdl: move.wdl,
                        category: move.category
                    })) : []
            }
        };
        logger.info("Analysis complete", {
            wdl: tablebaseResult.result.wdl,
            topMovesCount: (_evaluation_tablebase = evaluation.tablebase) === null || _evaluation_tablebase === void 0 ? void 0 : (_evaluation_tablebase_topMoves = _evaluation_tablebase.topMoves) === null || _evaluation_tablebase_topMoves === void 0 ? void 0 : _evaluation_tablebase_topMoves.length
        });
        return {
            evaluation,
            rawTablebaseResult: tablebaseResult.result
        };
    }
    /**
   * Get position analysis or return empty evaluation
   *
   * @param fen - Position in FEN notation
   * @param moveLimit - Maximum number of moves to fetch
   * @returns Position analysis (empty if no tablebase data)
   */ async getPositionAnalysisOrEmpty(fen, moveLimit = 5) {
        const result = await this.getPositionAnalysis(fen, moveLimit);
        if (!result) {
            // Return empty evaluation when no tablebase data
            return {
                fen,
                evaluation: 0,
                tablebase: undefined
            };
        }
        return result.evaluation;
    }
}
const analysisService = new AnalysisService();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL3NlcnZpY2VzL0FuYWx5c2lzU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFuYWx5c2lzIFNlcnZpY2UgLSBDb21tb24gTG9naWMgZm9yIFBvc2l0aW9uIEFuYWx5c2lzXG4gKlxuICogQHJlbWFya3NcbiAqIFRoaXMgc2VydmljZSBlbmNhcHN1bGF0ZXMgdGhlIHNoYXJlZCBsb2dpYyBmb3IgZmV0Y2hpbmcgYW5kIGZvcm1hdHRpbmdcbiAqIHRhYmxlYmFzZSBkYXRhLCByZWR1Y2luZyBkdXBsaWNhdGlvbiBiZXR3ZWVuIGhvb2tzIGFuZCBzdG9yZSBhY3Rpb25zLlxuICovXG5cbmltcG9ydCB7IHRhYmxlYmFzZVNlcnZpY2UgfSBmcm9tIFwiLi9UYWJsZWJhc2VTZXJ2aWNlXCI7XG5pbXBvcnQgeyBmb3JtYXRQb3NpdGlvbkFuYWx5c2lzIH0gZnJvbSBcIi4uL3V0aWxzL3Bvc2l0aW9uQW5hbHlzaXNGb3JtYXR0ZXJcIjtcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gXCIuL2xvZ2dpbmdcIjtcbmltcG9ydCB0eXBlIHsgUG9zaXRpb25BbmFseXNpcyB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5jb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoKS5zZXRDb250ZXh0KFwiQW5hbHlzaXNTZXJ2aWNlXCIpO1xuXG4vKipcbiAqIEFuYWx5c2lzIHJlc3VsdCB3aXRoIGZvcm1hdHRlZCBkYXRhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQW5hbHlzaXNSZXN1bHQge1xuICBldmFsdWF0aW9uOiBQb3NpdGlvbkFuYWx5c2lzO1xuICByYXdUYWJsZWJhc2VSZXN1bHQ6IHtcbiAgICB3ZGw6IG51bWJlcjtcbiAgICBkdHo6IG51bWJlciB8IG51bGw7XG4gICAgZHRtOiBudW1iZXIgfCBudWxsO1xuICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gIH07XG59XG5cbi8qKlxuICogU2VydmljZSBmb3IgcG9zaXRpb24gYW5hbHlzaXMgb3BlcmF0aW9uc1xuICovXG5jbGFzcyBBbmFseXNpc1NlcnZpY2Uge1xuICAvKipcbiAgICogR2V0IGNvbXBsZXRlIHBvc2l0aW9uIGFuYWx5c2lzIHdpdGggdGFibGViYXNlIGRhdGFcbiAgICpcbiAgICogQHBhcmFtIGZlbiAtIFBvc2l0aW9uIGluIEZFTiBub3RhdGlvblxuICAgKiBAcGFyYW0gbW92ZUxpbWl0IC0gTWF4aW11bSBudW1iZXIgb2YgbW92ZXMgdG8gZmV0Y2ggKGRlZmF1bHQ6IDUpXG4gICAqIEByZXR1cm5zIENvbXBsZXRlIGFuYWx5c2lzIHJlc3VsdCBvciBudWxsIGlmIG5vIHRhYmxlYmFzZSBkYXRhXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIFRoaXMgbWV0aG9kIGNvbnNvbGlkYXRlcyB0aGUgbG9naWMgcHJldmlvdXNseSBkdXBsaWNhdGVkIGJldHdlZW5cbiAgICogdXNlUG9zaXRpb25BbmFseXNpcyBob29rIGFuZCByZXF1ZXN0UG9zaXRpb25FdmFsdWF0aW9uIGFjdGlvbi5cbiAgICogSXQgbWFrZXMgdHdvIGNhbGxzIHRvIHRhYmxlYmFzZVNlcnZpY2UgYnV0IHRoZXkncmUgZGVkdXBsaWNhdGVkXG4gICAqIGJ5IHRoZSBzZXJ2aWNlJ3MgaW50ZXJuYWwgY2FjaGUuXG4gICAqL1xuICBhc3luYyBnZXRQb3NpdGlvbkFuYWx5c2lzKFxuICAgIGZlbjogc3RyaW5nLFxuICAgIG1vdmVMaW1pdDogbnVtYmVyID0gNSxcbiAgKTogUHJvbWlzZTxBbmFseXNpc1Jlc3VsdCB8IG51bGw+IHtcbiAgICBsb2dnZXIuaW5mbyhcIkdldHRpbmcgcG9zaXRpb24gYW5hbHlzaXNcIiwge1xuICAgICAgZmVuOiBmZW4uc2xpY2UoMCwgMjApICsgXCIuLi5cIixcbiAgICAgIG1vdmVMaW1pdCxcbiAgICB9KTtcblxuICAgIC8vIEdldCB0YWJsZWJhc2UgZXZhbHVhdGlvbiAtIHRoaXMgcG9wdWxhdGVzIHRoZSBjYWNoZVxuICAgIGNvbnN0IHRhYmxlYmFzZVJlc3VsdCA9IGF3YWl0IHRhYmxlYmFzZVNlcnZpY2UuZ2V0RXZhbHVhdGlvbihmZW4pO1xuXG4gICAgaWYgKCF0YWJsZWJhc2VSZXN1bHQuaXNBdmFpbGFibGUgfHwgIXRhYmxlYmFzZVJlc3VsdC5yZXN1bHQpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIk5vIHRhYmxlYmFzZSBkYXRhIGF2YWlsYWJsZSBmb3IgcG9zaXRpb25cIik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBGb3JtYXQgdGFibGViYXNlIHJlc3VsdCBmb3IgZGlzcGxheVxuICAgIGNvbnN0IGRpc3BsYXlEYXRhID0gZm9ybWF0UG9zaXRpb25BbmFseXNpcyh0YWJsZWJhc2VSZXN1bHQucmVzdWx0KTtcblxuICAgIC8vIEdldCB0b3AgbW92ZXMgLSB0aGlzIHVzZXMgdGhlIGNhY2hlZCBkYXRhIGZyb20gdGhlIGZpcnN0IGNhbGxcbiAgICBjb25zdCB0b3BNb3ZlcyA9IGF3YWl0IHRhYmxlYmFzZVNlcnZpY2UuZ2V0VG9wTW92ZXMoZmVuLCBtb3ZlTGltaXQpO1xuXG4gICAgLy8gQ29udmVydCB0byBQb3NpdGlvbkFuYWx5c2lzIGZvcm1hdFxuICAgIGNvbnN0IGV2YWx1YXRpb246IFBvc2l0aW9uQW5hbHlzaXMgPSB7XG4gICAgICBmZW4sXG4gICAgICBldmFsdWF0aW9uOiBkaXNwbGF5RGF0YS5zY29yZSxcbiAgICAgIG1hdGVJbk1vdmVzOlxuICAgICAgICBkaXNwbGF5RGF0YS5pc1dpbiAmJiB0YWJsZWJhc2VSZXN1bHQucmVzdWx0LmR0elxuICAgICAgICAgID8gTWF0aC5hYnModGFibGViYXNlUmVzdWx0LnJlc3VsdC5kdHopXG4gICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICB0YWJsZWJhc2U6IHtcbiAgICAgICAgaXNUYWJsZWJhc2VQb3NpdGlvbjogdHJ1ZSxcbiAgICAgICAgd2RsQWZ0ZXI6IHRhYmxlYmFzZVJlc3VsdC5yZXN1bHQud2RsLFxuICAgICAgICBjYXRlZ29yeTogdGFibGViYXNlUmVzdWx0LnJlc3VsdC5jYXRlZ29yeSBhcyBcIndpblwiIHwgXCJkcmF3XCIgfCBcImxvc3NcIixcbiAgICAgICAgZHR6OiB0YWJsZWJhc2VSZXN1bHQucmVzdWx0LmR0eiA/PyB1bmRlZmluZWQsXG4gICAgICAgIHRvcE1vdmVzOlxuICAgICAgICAgIHRvcE1vdmVzLmlzQXZhaWxhYmxlICYmIHRvcE1vdmVzLm1vdmVzXG4gICAgICAgICAgICA/IHRvcE1vdmVzLm1vdmVzLm1hcCgobW92ZSkgPT4gKHtcbiAgICAgICAgICAgICAgICBtb3ZlOiBtb3ZlLnVjaSxcbiAgICAgICAgICAgICAgICBzYW46IG1vdmUuc2FuLFxuICAgICAgICAgICAgICAgIGR0ejogbW92ZS5kdHogfHwgMCxcbiAgICAgICAgICAgICAgICBkdG06IG1vdmUuZHRtIHx8IDAsXG4gICAgICAgICAgICAgICAgd2RsOiBtb3ZlLndkbCxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogbW92ZS5jYXRlZ29yeSBhcyBcIndpblwiIHwgXCJkcmF3XCIgfCBcImxvc3NcIixcbiAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICA6IFtdLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgbG9nZ2VyLmluZm8oXCJBbmFseXNpcyBjb21wbGV0ZVwiLCB7XG4gICAgICB3ZGw6IHRhYmxlYmFzZVJlc3VsdC5yZXN1bHQud2RsLFxuICAgICAgdG9wTW92ZXNDb3VudDogZXZhbHVhdGlvbi50YWJsZWJhc2U/LnRvcE1vdmVzPy5sZW5ndGgsXG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXZhbHVhdGlvbixcbiAgICAgIHJhd1RhYmxlYmFzZVJlc3VsdDogdGFibGViYXNlUmVzdWx0LnJlc3VsdCxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBwb3NpdGlvbiBhbmFseXNpcyBvciByZXR1cm4gZW1wdHkgZXZhbHVhdGlvblxuICAgKlxuICAgKiBAcGFyYW0gZmVuIC0gUG9zaXRpb24gaW4gRkVOIG5vdGF0aW9uXG4gICAqIEBwYXJhbSBtb3ZlTGltaXQgLSBNYXhpbXVtIG51bWJlciBvZiBtb3ZlcyB0byBmZXRjaFxuICAgKiBAcmV0dXJucyBQb3NpdGlvbiBhbmFseXNpcyAoZW1wdHkgaWYgbm8gdGFibGViYXNlIGRhdGEpXG4gICAqL1xuICBhc3luYyBnZXRQb3NpdGlvbkFuYWx5c2lzT3JFbXB0eShcbiAgICBmZW46IHN0cmluZyxcbiAgICBtb3ZlTGltaXQ6IG51bWJlciA9IDUsXG4gICk6IFByb21pc2U8UG9zaXRpb25BbmFseXNpcz4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2V0UG9zaXRpb25BbmFseXNpcyhmZW4sIG1vdmVMaW1pdCk7XG5cbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgLy8gUmV0dXJuIGVtcHR5IGV2YWx1YXRpb24gd2hlbiBubyB0YWJsZWJhc2UgZGF0YVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmVuLFxuICAgICAgICBldmFsdWF0aW9uOiAwLFxuICAgICAgICB0YWJsZWJhc2U6IHVuZGVmaW5lZCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdC5ldmFsdWF0aW9uO1xuICB9XG59XG5cbi8qKlxuICogU2luZ2xldG9uIGluc3RhbmNlIG9mIEFuYWx5c2lzU2VydmljZVxuICovXG5leHBvcnQgY29uc3QgYW5hbHlzaXNTZXJ2aWNlID0gbmV3IEFuYWx5c2lzU2VydmljZSgpO1xuIl0sIm5hbWVzIjpbImFuYWx5c2lzU2VydmljZSIsImxvZ2dlciIsImdldExvZ2dlciIsInNldENvbnRleHQiLCJBbmFseXNpc1NlcnZpY2UiLCJnZXRQb3NpdGlvbkFuYWx5c2lzIiwiZmVuIiwibW92ZUxpbWl0IiwiZXZhbHVhdGlvbiIsImluZm8iLCJzbGljZSIsInRhYmxlYmFzZVJlc3VsdCIsInRhYmxlYmFzZVNlcnZpY2UiLCJnZXRFdmFsdWF0aW9uIiwiaXNBdmFpbGFibGUiLCJyZXN1bHQiLCJkZWJ1ZyIsImRpc3BsYXlEYXRhIiwiZm9ybWF0UG9zaXRpb25BbmFseXNpcyIsInRvcE1vdmVzIiwiZ2V0VG9wTW92ZXMiLCJzY29yZSIsIm1hdGVJbk1vdmVzIiwiaXNXaW4iLCJkdHoiLCJNYXRoIiwiYWJzIiwidW5kZWZpbmVkIiwidGFibGViYXNlIiwiaXNUYWJsZWJhc2VQb3NpdGlvbiIsIndkbEFmdGVyIiwid2RsIiwiY2F0ZWdvcnkiLCJtb3ZlcyIsIm1hcCIsIm1vdmUiLCJ1Y2kiLCJzYW4iLCJkdG0iLCJ0b3BNb3Zlc0NvdW50IiwibGVuZ3RoIiwicmF3VGFibGViYXNlUmVzdWx0IiwiZ2V0UG9zaXRpb25BbmFseXNpc09yRW1wdHkiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQzs7OzsrQkFpSVlBOzs7ZUFBQUE7OztrQ0EvSG9COzJDQUNNO3lCQUNiO0FBRzFCLE1BQU1DLFNBQVNDLElBQUFBLGtCQUFTLElBQUdDLFVBQVUsQ0FBQztBQWV0Qzs7Q0FFQyxHQUNELE1BQU1DO0lBQ0o7Ozs7Ozs7Ozs7OztHQVlDLEdBQ0QsTUFBTUMsb0JBQ0pDLEdBQVcsRUFDWEMsWUFBb0IsQ0FBQyxFQUNXO1lBaURmQyxnQ0FBQUE7UUFoRGpCUCxPQUFPUSxJQUFJLENBQUMsNkJBQTZCO1lBQ3ZDSCxLQUFLQSxJQUFJSSxLQUFLLENBQUMsR0FBRyxNQUFNO1lBQ3hCSDtRQUNGO1FBRUEsc0RBQXNEO1FBQ3RELE1BQU1JLGtCQUFrQixNQUFNQyxrQ0FBZ0IsQ0FBQ0MsYUFBYSxDQUFDUDtRQUU3RCxJQUFJLENBQUNLLGdCQUFnQkcsV0FBVyxJQUFJLENBQUNILGdCQUFnQkksTUFBTSxFQUFFO1lBQzNEZCxPQUFPZSxLQUFLLENBQUM7WUFDYixPQUFPO1FBQ1Q7UUFFQSxzQ0FBc0M7UUFDdEMsTUFBTUMsY0FBY0MsSUFBQUEsaURBQXNCLEVBQUNQLGdCQUFnQkksTUFBTTtRQUVqRSxnRUFBZ0U7UUFDaEUsTUFBTUksV0FBVyxNQUFNUCxrQ0FBZ0IsQ0FBQ1EsV0FBVyxDQUFDZCxLQUFLQztZQWNoREk7UUFaVCxxQ0FBcUM7UUFDckMsTUFBTUgsYUFBK0I7WUFDbkNGO1lBQ0FFLFlBQVlTLFlBQVlJLEtBQUs7WUFDN0JDLGFBQ0VMLFlBQVlNLEtBQUssSUFBSVosZ0JBQWdCSSxNQUFNLENBQUNTLEdBQUcsR0FDM0NDLEtBQUtDLEdBQUcsQ0FBQ2YsZ0JBQWdCSSxNQUFNLENBQUNTLEdBQUcsSUFDbkNHO1lBQ05DLFdBQVc7Z0JBQ1RDLHFCQUFxQjtnQkFDckJDLFVBQVVuQixnQkFBZ0JJLE1BQU0sQ0FBQ2dCLEdBQUc7Z0JBQ3BDQyxVQUFVckIsZ0JBQWdCSSxNQUFNLENBQUNpQixRQUFRO2dCQUN6Q1IsS0FBS2IsQ0FBQUEsOEJBQUFBLGdCQUFnQkksTUFBTSxDQUFDUyxHQUFHLGNBQTFCYix5Q0FBQUEsOEJBQThCZ0I7Z0JBQ25DUixVQUNFQSxTQUFTTCxXQUFXLElBQUlLLFNBQVNjLEtBQUssR0FDbENkLFNBQVNjLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLENBQUNDLE9BQVUsQ0FBQTt3QkFDNUJBLE1BQU1BLEtBQUtDLEdBQUc7d0JBQ2RDLEtBQUtGLEtBQUtFLEdBQUc7d0JBQ2JiLEtBQUtXLEtBQUtYLEdBQUcsSUFBSTt3QkFDakJjLEtBQUtILEtBQUtHLEdBQUcsSUFBSTt3QkFDakJQLEtBQUtJLEtBQUtKLEdBQUc7d0JBQ2JDLFVBQVVHLEtBQUtILFFBQVE7b0JBQ3pCLENBQUEsS0FDQSxFQUFFO1lBQ1Y7UUFDRjtRQUVBL0IsT0FBT1EsSUFBSSxDQUFDLHFCQUFxQjtZQUMvQnNCLEtBQUtwQixnQkFBZ0JJLE1BQU0sQ0FBQ2dCLEdBQUc7WUFDL0JRLGFBQWEsR0FBRS9CLHdCQUFBQSxXQUFXb0IsU0FBUyxjQUFwQnBCLDZDQUFBQSxpQ0FBQUEsc0JBQXNCVyxRQUFRLGNBQTlCWCxxREFBQUEsK0JBQWdDZ0MsTUFBTTtRQUN2RDtRQUVBLE9BQU87WUFDTGhDO1lBQ0FpQyxvQkFBb0I5QixnQkFBZ0JJLE1BQU07UUFDNUM7SUFDRjtJQUVBOzs7Ozs7R0FNQyxHQUNELE1BQU0yQiwyQkFDSnBDLEdBQVcsRUFDWEMsWUFBb0IsQ0FBQyxFQUNNO1FBQzNCLE1BQU1RLFNBQVMsTUFBTSxJQUFJLENBQUNWLG1CQUFtQixDQUFDQyxLQUFLQztRQUVuRCxJQUFJLENBQUNRLFFBQVE7WUFDWCxpREFBaUQ7WUFDakQsT0FBTztnQkFDTFQ7Z0JBQ0FFLFlBQVk7Z0JBQ1pvQixXQUFXRDtZQUNiO1FBQ0Y7UUFFQSxPQUFPWixPQUFPUCxVQUFVO0lBQzFCO0FBQ0Y7QUFLTyxNQUFNUixrQkFBa0IsSUFBSUkifQ==