{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/AnalysisService.ts"],"sourcesContent":["/**\n * Analysis Service - Common Logic for Position Analysis\n *\n * @remarks\n * This service encapsulates the shared logic for fetching and formatting\n * tablebase data, reducing duplication between hooks and store actions.\n */\n\nimport { tablebaseService } from \"./TablebaseService\";\nimport { formatPositionAnalysis } from \"../utils/positionAnalysisFormatter\";\nimport { getLogger } from \"./logging\";\nimport type { PositionAnalysis } from \"../types\";\n\nconst logger = getLogger().setContext(\"AnalysisService\");\n\n/**\n * Analysis result with formatted data\n */\nexport interface AnalysisResult {\n  evaluation: PositionAnalysis;\n  rawTablebaseResult: {\n    wdl: number;\n    dtz: number | null;\n    dtm: number | null;\n    category: string;\n  };\n}\n\n/**\n * Service for position analysis operations\n */\nclass AnalysisService {\n  /**\n   * Get complete position analysis with tablebase data\n   *\n   * @param fen - Position in FEN notation\n   * @param moveLimit - Maximum number of moves to fetch (default: 5)\n   * @returns Complete analysis result or null if no tablebase data\n   *\n   * @remarks\n   * This method consolidates the logic previously duplicated between\n   * usePositionAnalysis hook and requestPositionEvaluation action.\n   * It makes two calls to tablebaseService but they're deduplicated\n   * by the service's internal cache.\n   */\n  async getPositionAnalysis(\n    fen: string,\n    moveLimit: number = 5,\n  ): Promise<AnalysisResult | null> {\n    logger.info(\"Getting position analysis\", {\n      fen: fen.slice(0, 20) + \"...\",\n      moveLimit,\n    });\n\n    // Get tablebase evaluation - this populates the cache\n    const tablebaseResult = await tablebaseService.getEvaluation(fen);\n\n    if (!tablebaseResult.isAvailable || !tablebaseResult.result) {\n      logger.debug(\"No tablebase data available for position\");\n      return null;\n    }\n\n    // Format tablebase result for display\n    const displayData = formatPositionAnalysis(tablebaseResult.result);\n\n    // Get top moves - this uses the cached data from the first call\n    const topMoves = await tablebaseService.getTopMoves(fen, moveLimit);\n\n    // Convert to PositionAnalysis format\n    const evaluation: PositionAnalysis = {\n      fen,\n      evaluation: displayData.score,\n      mateInMoves:\n        displayData.isWin && tablebaseResult.result.dtz\n          ? Math.abs(tablebaseResult.result.dtz)\n          : undefined,\n      tablebase: {\n        isTablebasePosition: true,\n        wdlAfter: tablebaseResult.result.wdl,\n        category: tablebaseResult.result.category as \"win\" | \"draw\" | \"loss\",\n        dtz: tablebaseResult.result.dtz ?? undefined,\n        topMoves:\n          topMoves.isAvailable && topMoves.moves\n            ? topMoves.moves.map((move) => ({\n                move: move.uci,\n                san: move.san,\n                dtz: move.dtz || 0,\n                dtm: move.dtm || 0,\n                wdl: move.wdl,\n                category: move.category as \"win\" | \"draw\" | \"loss\",\n              }))\n            : [],\n      },\n    };\n\n    logger.info(\"Analysis complete\", {\n      wdl: tablebaseResult.result.wdl,\n      topMovesCount: evaluation.tablebase?.topMoves?.length,\n    });\n\n    return {\n      evaluation,\n      rawTablebaseResult: tablebaseResult.result,\n    };\n  }\n\n  /**\n   * Get position analysis or return empty evaluation\n   *\n   * @param fen - Position in FEN notation\n   * @param moveLimit - Maximum number of moves to fetch\n   * @returns Position analysis (empty if no tablebase data)\n   */\n  async getPositionAnalysisOrEmpty(\n    fen: string,\n    moveLimit: number = 5,\n  ): Promise<PositionAnalysis> {\n    const result = await this.getPositionAnalysis(fen, moveLimit);\n\n    if (!result) {\n      // Return empty evaluation when no tablebase data\n      return {\n        fen,\n        evaluation: 0,\n        tablebase: undefined,\n      };\n    }\n\n    return result.evaluation;\n  }\n}\n\n/**\n * Singleton instance of AnalysisService\n */\nexport const analysisService = new AnalysisService();\n"],"names":["analysisService","logger","getLogger","setContext","AnalysisService","getPositionAnalysis","fen","moveLimit","evaluation","info","slice","tablebaseResult","tablebaseService","getEvaluation","isAvailable","result","debug","displayData","formatPositionAnalysis","topMoves","getTopMoves","score","mateInMoves","isWin","dtz","Math","abs","undefined","tablebase","isTablebasePosition","wdlAfter","wdl","category","moves","map","move","uci","san","dtm","topMovesCount","length","rawTablebaseResult","getPositionAnalysisOrEmpty"],"mappings":"AAAA;;;;;;CAMC;;;;+BAiIYA;;;eAAAA;;;kCA/HoB;2CACM;yBACb;AAG1B,MAAMC,SAASC,IAAAA,kBAAS,IAAGC,UAAU,CAAC;AAetC;;CAEC,GACD,MAAMC;IACJ;;;;;;;;;;;;GAYC,GACD,MAAMC,oBACJC,GAAW,EACXC,YAAoB,CAAC,EACW;YAiDfC,gCAAAA;QAhDjBP,OAAOQ,IAAI,CAAC,6BAA6B;YACvCH,KAAKA,IAAII,KAAK,CAAC,GAAG,MAAM;YACxBH;QACF;QAEA,sDAAsD;QACtD,MAAMI,kBAAkB,MAAMC,kCAAgB,CAACC,aAAa,CAACP;QAE7D,IAAI,CAACK,gBAAgBG,WAAW,IAAI,CAACH,gBAAgBI,MAAM,EAAE;YAC3Dd,OAAOe,KAAK,CAAC;YACb,OAAO;QACT;QAEA,sCAAsC;QACtC,MAAMC,cAAcC,IAAAA,iDAAsB,EAACP,gBAAgBI,MAAM;QAEjE,gEAAgE;QAChE,MAAMI,WAAW,MAAMP,kCAAgB,CAACQ,WAAW,CAACd,KAAKC;YAchDI;QAZT,qCAAqC;QACrC,MAAMH,aAA+B;YACnCF;YACAE,YAAYS,YAAYI,KAAK;YAC7BC,aACEL,YAAYM,KAAK,IAAIZ,gBAAgBI,MAAM,CAACS,GAAG,GAC3CC,KAAKC,GAAG,CAACf,gBAAgBI,MAAM,CAACS,GAAG,IACnCG;YACNC,WAAW;gBACTC,qBAAqB;gBACrBC,UAAUnB,gBAAgBI,MAAM,CAACgB,GAAG;gBACpCC,UAAUrB,gBAAgBI,MAAM,CAACiB,QAAQ;gBACzCR,KAAKb,CAAAA,8BAAAA,gBAAgBI,MAAM,CAACS,GAAG,cAA1Bb,yCAAAA,8BAA8BgB;gBACnCR,UACEA,SAASL,WAAW,IAAIK,SAASc,KAAK,GAClCd,SAASc,KAAK,CAACC,GAAG,CAAC,CAACC,OAAU,CAAA;wBAC5BA,MAAMA,KAAKC,GAAG;wBACdC,KAAKF,KAAKE,GAAG;wBACbb,KAAKW,KAAKX,GAAG,IAAI;wBACjBc,KAAKH,KAAKG,GAAG,IAAI;wBACjBP,KAAKI,KAAKJ,GAAG;wBACbC,UAAUG,KAAKH,QAAQ;oBACzB,CAAA,KACA,EAAE;YACV;QACF;QAEA/B,OAAOQ,IAAI,CAAC,qBAAqB;YAC/BsB,KAAKpB,gBAAgBI,MAAM,CAACgB,GAAG;YAC/BQ,aAAa,GAAE/B,wBAAAA,WAAWoB,SAAS,cAApBpB,6CAAAA,iCAAAA,sBAAsBW,QAAQ,cAA9BX,qDAAAA,+BAAgCgC,MAAM;QACvD;QAEA,OAAO;YACLhC;YACAiC,oBAAoB9B,gBAAgBI,MAAM;QAC5C;IACF;IAEA;;;;;;GAMC,GACD,MAAM2B,2BACJpC,GAAW,EACXC,YAAoB,CAAC,EACM;QAC3B,MAAMQ,SAAS,MAAM,IAAI,CAACV,mBAAmB,CAACC,KAAKC;QAEnD,IAAI,CAACQ,QAAQ;YACX,iDAAiD;YACjD,OAAO;gBACLT;gBACAE,YAAY;gBACZoB,WAAWD;YACb;QACF;QAEA,OAAOZ,OAAOP,UAAU;IAC1B;AACF;AAKO,MAAMR,kBAAkB,IAAII"}