{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/components/tablebase/TablebasePanel.test.tsx"],"sourcesContent":["/**\n * Unit tests for TablebasePanel component\n * Comprehensive test suite with >75% coverage target\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { \n  TablebasePanel, \n  CompactTablebasePanel, \n  TablebasePanelWithErrorBoundary \n} from '@shared/components/tablebase/TablebasePanel';\nimport { type TablebaseData } from '@shared/types/evaluation';\n\ndescribe(\"TablebasePanel\", () => {\n  const mockTablebaseData: TablebaseData = {\n    isTablebasePosition: true,\n    wdlBefore: 2,\n    wdlAfter: 2,\n    category: \"win\",\n    dtz: 5,\n    topMoves: [\n      { move: \"e4\", san: \"e4\", dtz: 3, dtm: 6, wdl: 2, category: \"win\" },\n      { move: \"f4\", san: \"f4\", dtz: 5, dtm: 10, wdl: 2, category: \"win\" },\n      { move: \"e5\", san: \"e5\", dtz: 0, dtm: 0, wdl: 0, category: \"draw\" },\n      { move: \"f6\", san: \"f6\", dtz: -3, dtm: -6, wdl: -2, category: \"loss\" },\n    ],\n  };\n\n  const mockOnMoveSelect = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it(\"should render tablebase panel with moves\", () => {\n    render(\n      <TablebasePanel\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={mockOnMoveSelect}\n      />,\n    );\n\n    expect(screen.getByTestId(\"tablebase-panel\")).toBeInTheDocument();\n    expect(screen.getByText(\"Tablebase\")).toBeInTheDocument();\n    expect(screen.getByText(\"4 moves\")).toBeInTheDocument();\n  });\n\n  it(\"should render move groups correctly\", () => {\n    render(\n      <TablebasePanel\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={mockOnMoveSelect}\n      />,\n    );\n\n    // Check for winning moves group\n    expect(screen.getByText(\"Winning Moves\")).toBeInTheDocument();\n    expect(screen.getByText(\"e4\")).toBeInTheDocument();\n    expect(screen.getByText(\"f4\")).toBeInTheDocument();\n\n    // Check for drawing moves group\n    expect(screen.getByText(\"Drawing Moves\")).toBeInTheDocument();\n    expect(screen.getByText(\"e5\")).toBeInTheDocument();\n\n    // Check for losing moves group (collapsed by default)\n    expect(screen.getByText(\"Losing Moves\")).toBeInTheDocument();\n\n    // Click to expand losing moves group\n    const losingMovesHeader = screen\n      .getByText(\"Losing Moves\")\n      .closest('[role=\"button\"]');\n    fireEvent.click(losingMovesHeader!);\n\n    // Now f6 should be visible\n    expect(screen.getByText(\"f6\")).toBeInTheDocument();\n  });\n\n  it(\"should handle move selection\", () => {\n    render(\n      <TablebasePanel\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={mockOnMoveSelect}\n      />,\n    );\n\n    const moveButton = screen.getByText(\"e4\").closest('[role=\"button\"]');\n    fireEvent.click(moveButton!);\n\n    expect(mockOnMoveSelect).toHaveBeenCalledWith(\"e4\");\n  });\n\n  it(\"should show loading state\", () => {\n    render(\n      <TablebasePanel\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={mockOnMoveSelect}\n        loading={true}\n      />,\n    );\n\n    expect(screen.getByText(\"Tablebase\")).toBeInTheDocument();\n    // Should show loading text\n    expect(screen.getByText(\"Lade Analyse...\")).toBeInTheDocument();\n  });\n\n  it(\"should handle no tablebase data\", () => {\n    const noTablebaseData: TablebaseData = {\n      isTablebasePosition: false,\n    };\n\n    render(\n      <TablebasePanel\n        tablebaseData={noTablebaseData}\n        onMoveSelect={mockOnMoveSelect}\n      />,\n    );\n\n    expect(screen.getByText(\"Tablebase\")).toBeInTheDocument();\n    expect(\n      screen.getByText(\"Keine Tablebase-Daten verfÃ¼gbar\"),\n    ).toBeInTheDocument();\n  });\n\n  it(\"should handle empty moves\", () => {\n    const emptyMovesData: TablebaseData = {\n      isTablebasePosition: true,\n      topMoves: [],\n    };\n\n    render(\n      <TablebasePanel\n        tablebaseData={emptyMovesData}\n        onMoveSelect={mockOnMoveSelect}\n      />,\n    );\n\n    expect(screen.getByText(\"Tablebase\")).toBeInTheDocument();\n    expect(\n      screen.getByText(\"Warte auf Tablebase-Analyse...\"),\n    ).toBeInTheDocument();\n  });\n\n  it(\"should render statistics correctly\", () => {\n    render(\n      <TablebasePanel\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={mockOnMoveSelect}\n      />,\n    );\n\n    // Check statistics section - use more specific selectors to avoid conflicts\n    const winningMovesSection = screen.getByText(\"Winning Moves\");\n    expect(winningMovesSection).toBeInTheDocument();\n\n    // Check counts are displayed correctly\n    const winningCount = screen\n      .getByText(\"Winning Moves\")\n      .parentElement?.querySelector(\".text-xs\");\n    expect(winningCount).toHaveTextContent(\"2\");\n\n    const drawingMovesSection = screen.getByText(\"Drawing Moves\");\n    expect(drawingMovesSection).toBeInTheDocument();\n    const drawingCount =\n      drawingMovesSection.parentElement?.querySelector(\".text-xs\");\n    expect(drawingCount).toHaveTextContent(\"1\");\n\n    const losingMovesSection = screen.getByText(\"Losing Moves\");\n    expect(losingMovesSection).toBeInTheDocument();\n    const losingCount =\n      losingMovesSection.parentElement?.querySelector(\".text-xs\");\n    expect(losingCount).toHaveTextContent(\"1\");\n  });\n\n  it(\"should handle compact mode\", () => {\n    render(\n      <TablebasePanel\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={mockOnMoveSelect}\n        compact={true}\n      />,\n    );\n\n    expect(screen.getByTestId(\"tablebase-panel\")).toBeInTheDocument();\n    expect(screen.getByText(\"Tablebase\")).toBeInTheDocument();\n\n    // Statistics should not be visible in compact mode\n    const statisticsSection = screen.queryByText(\"Winning\");\n    expect(statisticsSection).not.toBeInTheDocument();\n  });\n\n  it(\"should highlight selected move\", () => {\n    render(\n      <TablebasePanel\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={mockOnMoveSelect}\n        selectedMove=\"e4\"\n      />,\n    );\n\n    const selectedMoveElement = screen\n      .getByText(\"e4\")\n      .closest('[role=\"button\"]');\n    expect(selectedMoveElement).toHaveClass(\n      \"bg-blue-50\",\n      \"dark:bg-blue-900/20\",\n    );\n  });\n\n  describe('Error Handling', () => {\n    it('should show error message when error prop is provided', () => {\n      render(\n        <TablebasePanel\n          tablebaseData={mockTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n          error=\"Tablebase service unavailable\"\n        />\n      );\n\n      expect(screen.getByText('Tablebase')).toBeInTheDocument();\n      expect(screen.getByText('Analyse konnte nicht geladen werden')).toBeInTheDocument();\n      \n      // Error state doesn't have data-testid, just the CSS class\n      const panel = screen.getByText('Tablebase').closest('.tablebase-panel');\n      expect(panel).toBeInTheDocument();\n      \n      // Should not show move groups when there's an error\n      expect(screen.queryByText('Winning Moves')).not.toBeInTheDocument();\n    });\n\n    it('should have correct error styling', () => {\n      render(\n        <TablebasePanel\n          tablebaseData={mockTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n          error=\"Test error\"\n        />\n      );\n\n      const errorElement = screen.getByText('Analyse konnte nicht geladen werden');\n      expect(errorElement).toHaveClass('text-sm', 'text-red-600', 'dark:text-red-400');\n      expect(errorElement).toHaveClass('bg-red-50', 'dark:bg-red-900/20');\n    });\n  });\n\n  describe('Custom Props', () => {\n    it('should apply custom className', () => {\n      render(\n        <TablebasePanel\n          tablebaseData={mockTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n          className=\"custom-panel-class\"\n        />\n      );\n\n      const panel = screen.getByTestId('tablebase-panel');\n      expect(panel).toHaveClass('tablebase-panel', 'custom-panel-class');\n    });\n\n    it('should handle undefined selectedMove gracefully', () => {\n      render(\n        <TablebasePanel\n          tablebaseData={mockTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n          selectedMove={undefined}\n        />\n      );\n\n      // Should render without errors\n      expect(screen.getByTestId('tablebase-panel')).toBeInTheDocument();\n      \n      // No moves should have selected styling\n      const moveButtons = screen.getAllByRole('button');\n      moveButtons.forEach(button => {\n        expect(button).not.toHaveClass('bg-blue-50');\n      });\n    });\n\n    it('should work with all default props', () => {\n      render(\n        <TablebasePanel\n          tablebaseData={mockTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n        />\n      );\n\n      expect(screen.getByTestId('tablebase-panel')).toBeInTheDocument();\n      expect(screen.getByText('Tablebase')).toBeInTheDocument();\n    });\n  });\n\n  describe('Move Data Edge Cases', () => {\n    it('should handle undefined topMoves', () => {\n      const undefinedMovesData: TablebaseData = {\n        isTablebasePosition: true,\n        topMoves: undefined\n      };\n\n      render(\n        <TablebasePanel\n          tablebaseData={undefinedMovesData}\n          onMoveSelect={mockOnMoveSelect}\n        />\n      );\n\n      expect(screen.getByText('Warte auf Tablebase-Analyse...')).toBeInTheDocument();\n    });\n\n    it('should handle moves with missing DTM values', () => {\n      const incompleteMoveData: TablebaseData = {\n        isTablebasePosition: true,\n        topMoves: [\n          { move: 'e4', san: 'e4', dtz: 3, dtm: 0, wdl: 2, category: 'win' }\n        ]\n      };\n\n      render(\n        <TablebasePanel\n          tablebaseData={incompleteMoveData}\n          onMoveSelect={mockOnMoveSelect}\n        />\n      );\n\n      expect(screen.getByText('Tablebase')).toBeInTheDocument();\n      expect(screen.getByText('1 moves')).toBeInTheDocument();\n      expect(screen.getByText('e4')).toBeInTheDocument();\n    });\n\n    it('should handle only winning moves', () => {\n      const winOnlyData: TablebaseData = {\n        isTablebasePosition: true,\n        topMoves: [\n          { move: 'e4', san: 'e4', dtz: 3, dtm: 6, wdl: 2, category: 'win' },\n          { move: 'f4', san: 'f4', dtz: 5, dtm: 10, wdl: 2, category: 'win' }\n        ]\n      };\n\n      render(\n        <TablebasePanel\n          tablebaseData={winOnlyData}\n          onMoveSelect={mockOnMoveSelect}\n        />\n      );\n\n      expect(screen.getByText('Winning Moves')).toBeInTheDocument();\n      expect(screen.queryByText('Drawing Moves')).not.toBeInTheDocument();\n      expect(screen.queryByText('Losing Moves')).not.toBeInTheDocument();\n      expect(screen.getByText('2 moves')).toBeInTheDocument();\n    });\n\n    it('should handle only drawing moves', () => {\n      const drawOnlyData: TablebaseData = {\n        isTablebasePosition: true,\n        topMoves: [\n          { move: 'e5', san: 'e5', dtz: 0, dtm: 0, wdl: 0, category: 'draw' }\n        ]\n      };\n\n      render(\n        <TablebasePanel\n          tablebaseData={drawOnlyData}\n          onMoveSelect={mockOnMoveSelect}\n        />\n      );\n\n      expect(screen.queryByText('Winning Moves')).not.toBeInTheDocument();\n      expect(screen.getByText('Drawing Moves')).toBeInTheDocument();\n      expect(screen.queryByText('Losing Moves')).not.toBeInTheDocument();\n      expect(screen.getByText('1 moves')).toBeInTheDocument();\n    });\n\n    it('should handle only losing moves', () => {\n      const lossOnlyData: TablebaseData = {\n        isTablebasePosition: true,\n        topMoves: [\n          { move: 'f6', san: 'f6', dtz: -3, dtm: -6, wdl: -2, category: 'loss' }\n        ]\n      };\n\n      render(\n        <TablebasePanel\n          tablebaseData={lossOnlyData}\n          onMoveSelect={mockOnMoveSelect}\n        />\n      );\n\n      expect(screen.queryByText('Winning Moves')).not.toBeInTheDocument();\n      expect(screen.queryByText('Drawing Moves')).not.toBeInTheDocument();\n      expect(screen.getByText('Losing Moves')).toBeInTheDocument();\n      expect(screen.getByText('1 moves')).toBeInTheDocument();\n    });\n  });\n\n  describe('Loading State Variations', () => {\n    it('should show loading with custom className', () => {\n      render(\n        <TablebasePanel\n          tablebaseData={mockTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n          loading={true}\n          className=\"loading-custom-class\"\n        />\n      );\n\n      const panel = screen.getByText('Lade Analyse...').closest('.tablebase-panel');\n      expect(panel).toHaveClass('loading-custom-class');\n    });\n\n    it('should prioritize error over loading state', () => {\n      render(\n        <TablebasePanel\n          tablebaseData={mockTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n          loading={true}\n          error=\"Connection failed\"\n        />\n      );\n\n      // Error state takes priority - checked first in the component\n      expect(screen.getByText('Analyse konnte nicht geladen werden')).toBeInTheDocument();\n      expect(screen.queryByText('Lade Analyse...')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('State Priority Logic', () => {\n    it('should prioritize error over no tablebase data', () => {\n      const noTablebaseData: TablebaseData = {\n        isTablebasePosition: false\n      };\n\n      render(\n        <TablebasePanel\n          tablebaseData={noTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n          error=\"Connection failed\"\n        />\n      );\n\n      expect(screen.getByText('Analyse konnte nicht geladen werden')).toBeInTheDocument();\n      expect(screen.queryByText('Keine Tablebase-Daten verfÃ¼gbar')).not.toBeInTheDocument();\n    });\n\n    it('should prioritize loading over no tablebase data', () => {\n      const noTablebaseData: TablebaseData = {\n        isTablebasePosition: false\n      };\n\n      render(\n        <TablebasePanel\n          tablebaseData={noTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n          loading={true}\n        />\n      );\n\n      expect(screen.getByText('Lade Analyse...')).toBeInTheDocument();\n      expect(screen.queryByText('Keine Tablebase-Daten verfÃ¼gbar')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Visual States and Styling', () => {\n    it('should show correct state colors and messages', () => {\n      // Test all different message states with proper styling\n      const { rerender } = render(\n        <TablebasePanel\n          tablebaseData={mockTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n          error=\"Test error\"\n        />\n      );\n\n      // Error state\n      expect(screen.getByText('Analyse konnte nicht geladen werden')).toHaveClass('text-red-600');\n\n      // Loading state\n      rerender(\n        <TablebasePanel\n          tablebaseData={mockTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n          loading={true}\n        />\n      );\n      expect(screen.getByText('Lade Analyse...')).toHaveClass('text-gray-500');\n\n      // No tablebase data\n      const noTablebaseData: TablebaseData = { isTablebasePosition: false };\n      rerender(\n        <TablebasePanel\n          tablebaseData={noTablebaseData}\n          onMoveSelect={mockOnMoveSelect}\n        />\n      );\n      expect(screen.getByText('Keine Tablebase-Daten verfÃ¼gbar')).toHaveClass('text-amber-600');\n\n      // Waiting for analysis\n      const emptyMovesData: TablebaseData = { isTablebasePosition: true, topMoves: [] };\n      rerender(\n        <TablebasePanel\n          tablebaseData={emptyMovesData}\n          onMoveSelect={mockOnMoveSelect}\n        />\n      );\n      expect(screen.getByText('Warte auf Tablebase-Analyse...')).toHaveClass('text-green-600');\n    });\n  });\n});\n\ndescribe('CompactTablebasePanel', () => {\n  const mockTablebaseData: TablebaseData = {\n    isTablebasePosition: true,\n    topMoves: [\n      { move: 'e4', san: 'e4', dtz: 3, dtm: 6, wdl: 2, category: 'win' }\n    ]\n  };\n\n  it('should render in compact mode by default', () => {\n    render(\n      <CompactTablebasePanel\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={jest.fn()}\n      />\n    );\n\n    const panel = screen.getByTestId('tablebase-panel');\n    expect(panel).toBeInTheDocument();\n    expect(panel).toHaveClass('compact-tablebase-panel');\n  });\n\n  it('should combine custom className with compact class', () => {\n    render(\n      <CompactTablebasePanel\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={jest.fn()}\n        className=\"custom-compact-class\"\n      />\n    );\n\n    const panel = screen.getByTestId('tablebase-panel');\n    expect(panel).toHaveClass('compact-tablebase-panel', 'custom-compact-class');\n  });\n\n  it('should pass through all props correctly', () => {\n    const mockOnMoveSelect = jest.fn();\n    render(\n      <CompactTablebasePanel\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={mockOnMoveSelect}\n        selectedMove=\"e4\"\n        loading={false}\n        error={undefined}\n      />\n    );\n\n    expect(screen.getByText('Tablebase')).toBeInTheDocument();\n    expect(screen.getByText('1 moves')).toBeInTheDocument();\n\n    const moveButton = screen.getByText('e4').closest('[role=\"button\"]');\n    fireEvent.click(moveButton!);\n    expect(mockOnMoveSelect).toHaveBeenCalledWith('e4');\n  });\n});\n\ndescribe('TablebasePanelWithErrorBoundary', () => {\n  const mockTablebaseData: TablebaseData = {\n    isTablebasePosition: true,\n    topMoves: [\n      { move: 'e4', san: 'e4', dtz: 3, dtm: 6, wdl: 2, category: 'win' }\n    ]\n  };\n\n  it('should render normally when no error occurs', () => {\n    render(\n      <TablebasePanelWithErrorBoundary\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={jest.fn()}\n      />\n    );\n\n    expect(screen.getByTestId('tablebase-panel')).toBeInTheDocument();\n    expect(screen.getByText('Tablebase')).toBeInTheDocument();\n  });\n\n  it('should be the same component as TablebasePanel', () => {\n    // This tests that the error boundary wrapper is just an alias\n    expect(TablebasePanelWithErrorBoundary).toBe(TablebasePanel);\n  });\n\n  it('should pass through all props correctly', () => {\n    const mockOnMoveSelect = jest.fn();\n    render(\n      <TablebasePanelWithErrorBoundary\n        tablebaseData={mockTablebaseData}\n        onMoveSelect={mockOnMoveSelect}\n        className=\"error-boundary-test\"\n      />\n    );\n\n    const panel = screen.getByTestId('tablebase-panel');\n    expect(panel).toHaveClass('error-boundary-test');\n\n    const moveButton = screen.getByText('e4').closest('[role=\"button\"]');\n    fireEvent.click(moveButton!);\n    expect(mockOnMoveSelect).toHaveBeenCalledWith('e4');\n  });\n});\n"],"names":["describe","mockTablebaseData","isTablebasePosition","wdlBefore","wdlAfter","category","dtz","topMoves","move","san","dtm","wdl","mockOnMoveSelect","jest","fn","beforeEach","clearAllMocks","it","render","TablebasePanel","tablebaseData","onMoveSelect","expect","screen","getByTestId","toBeInTheDocument","getByText","losingMovesHeader","closest","fireEvent","click","moveButton","toHaveBeenCalledWith","loading","noTablebaseData","emptyMovesData","drawingMovesSection","losingMovesSection","winningMovesSection","winningCount","parentElement","querySelector","toHaveTextContent","drawingCount","losingCount","compact","statisticsSection","queryByText","not","selectedMove","selectedMoveElement","toHaveClass","error","panel","errorElement","className","undefined","moveButtons","getAllByRole","forEach","button","undefinedMovesData","incompleteMoveData","winOnlyData","drawOnlyData","lossOnlyData","rerender","CompactTablebasePanel","TablebasePanelWithErrorBoundary","toBe"],"mappings":"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"}