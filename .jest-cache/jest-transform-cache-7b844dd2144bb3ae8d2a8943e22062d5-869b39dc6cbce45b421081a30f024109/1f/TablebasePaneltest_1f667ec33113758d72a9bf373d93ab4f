12c96d1582b82b4a2d37f6d57fb20e86
/**
 * Unit tests for TablebasePanel component
 * Comprehensive test suite with >75% coverage target
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _TablebasePanel = require("../../../../shared/components/tablebase/TablebasePanel");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("TablebasePanel", ()=>{
    const mockTablebaseData = {
        isTablebasePosition: true,
        wdlBefore: 2,
        wdlAfter: 2,
        category: "win",
        dtz: 5,
        topMoves: [
            {
                move: "e4",
                san: "e4",
                dtz: 3,
                dtm: 6,
                wdl: 2,
                category: "win"
            },
            {
                move: "f4",
                san: "f4",
                dtz: 5,
                dtm: 10,
                wdl: 2,
                category: "win"
            },
            {
                move: "e5",
                san: "e5",
                dtz: 0,
                dtm: 0,
                wdl: 0,
                category: "draw"
            },
            {
                move: "f6",
                san: "f6",
                dtz: -3,
                dtm: -6,
                wdl: -2,
                category: "loss"
            }
        ]
    };
    const mockOnMoveSelect = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it("should render tablebase panel with moves", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: mockOnMoveSelect
        }));
        expect(_react1.screen.getByTestId("tablebase-panel")).toBeInTheDocument();
        expect(_react1.screen.getByText("Tablebase")).toBeInTheDocument();
        expect(_react1.screen.getByText("4 moves")).toBeInTheDocument();
    });
    it("should render move groups correctly", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: mockOnMoveSelect
        }));
        // Check for winning moves group
        expect(_react1.screen.getByText("Winning Moves")).toBeInTheDocument();
        expect(_react1.screen.getByText("e4")).toBeInTheDocument();
        expect(_react1.screen.getByText("f4")).toBeInTheDocument();
        // Check for drawing moves group
        expect(_react1.screen.getByText("Drawing Moves")).toBeInTheDocument();
        expect(_react1.screen.getByText("e5")).toBeInTheDocument();
        // Check for losing moves group (collapsed by default)
        expect(_react1.screen.getByText("Losing Moves")).toBeInTheDocument();
        // Click to expand losing moves group
        const losingMovesHeader = _react1.screen.getByText("Losing Moves").closest('[role="button"]');
        _react1.fireEvent.click(losingMovesHeader);
        // Now f6 should be visible
        expect(_react1.screen.getByText("f6")).toBeInTheDocument();
    });
    it("should handle move selection", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: mockOnMoveSelect
        }));
        const moveButton = _react1.screen.getByText("e4").closest('[role="button"]');
        _react1.fireEvent.click(moveButton);
        expect(mockOnMoveSelect).toHaveBeenCalledWith("e4");
    });
    it("should show loading state", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: mockOnMoveSelect,
            loading: true
        }));
        expect(_react1.screen.getByText("Tablebase")).toBeInTheDocument();
        // Should show loading text
        expect(_react1.screen.getByText("Lade Analyse...")).toBeInTheDocument();
    });
    it("should handle no tablebase data", ()=>{
        const noTablebaseData = {
            isTablebasePosition: false
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
            tablebaseData: noTablebaseData,
            onMoveSelect: mockOnMoveSelect
        }));
        expect(_react1.screen.getByText("Tablebase")).toBeInTheDocument();
        expect(_react1.screen.getByText("Keine Tablebase-Daten verfÃ¼gbar")).toBeInTheDocument();
    });
    it("should handle empty moves", ()=>{
        const emptyMovesData = {
            isTablebasePosition: true,
            topMoves: []
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
            tablebaseData: emptyMovesData,
            onMoveSelect: mockOnMoveSelect
        }));
        expect(_react1.screen.getByText("Tablebase")).toBeInTheDocument();
        expect(_react1.screen.getByText("Warte auf Tablebase-Analyse...")).toBeInTheDocument();
    });
    it("should render statistics correctly", ()=>{
        var _screen_getByText_parentElement, _drawingMovesSection_parentElement, _losingMovesSection_parentElement;
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: mockOnMoveSelect
        }));
        // Check statistics section - use more specific selectors to avoid conflicts
        const winningMovesSection = _react1.screen.getByText("Winning Moves");
        expect(winningMovesSection).toBeInTheDocument();
        // Check counts are displayed correctly
        const winningCount = (_screen_getByText_parentElement = _react1.screen.getByText("Winning Moves").parentElement) === null || _screen_getByText_parentElement === void 0 ? void 0 : _screen_getByText_parentElement.querySelector(".text-xs");
        expect(winningCount).toHaveTextContent("2");
        const drawingMovesSection = _react1.screen.getByText("Drawing Moves");
        expect(drawingMovesSection).toBeInTheDocument();
        const drawingCount = (_drawingMovesSection_parentElement = drawingMovesSection.parentElement) === null || _drawingMovesSection_parentElement === void 0 ? void 0 : _drawingMovesSection_parentElement.querySelector(".text-xs");
        expect(drawingCount).toHaveTextContent("1");
        const losingMovesSection = _react1.screen.getByText("Losing Moves");
        expect(losingMovesSection).toBeInTheDocument();
        const losingCount = (_losingMovesSection_parentElement = losingMovesSection.parentElement) === null || _losingMovesSection_parentElement === void 0 ? void 0 : _losingMovesSection_parentElement.querySelector(".text-xs");
        expect(losingCount).toHaveTextContent("1");
    });
    it("should handle compact mode", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: mockOnMoveSelect,
            compact: true
        }));
        expect(_react1.screen.getByTestId("tablebase-panel")).toBeInTheDocument();
        expect(_react1.screen.getByText("Tablebase")).toBeInTheDocument();
        // Statistics should not be visible in compact mode
        const statisticsSection = _react1.screen.queryByText("Winning");
        expect(statisticsSection).not.toBeInTheDocument();
    });
    it("should highlight selected move", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: mockOnMoveSelect,
            selectedMove: "e4"
        }));
        const selectedMoveElement = _react1.screen.getByText("e4").closest('[role="button"]');
        expect(selectedMoveElement).toHaveClass("bg-blue-50", "dark:bg-blue-900/20");
    });
    describe('Error Handling', ()=>{
        it('should show error message when error prop is provided', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: mockTablebaseData,
                onMoveSelect: mockOnMoveSelect,
                error: "Tablebase service unavailable"
            }));
            expect(_react1.screen.getByText('Tablebase')).toBeInTheDocument();
            expect(_react1.screen.getByText('Analyse konnte nicht geladen werden')).toBeInTheDocument();
            // Error state doesn't have data-testid, just the CSS class
            const panel = _react1.screen.getByText('Tablebase').closest('.tablebase-panel');
            expect(panel).toBeInTheDocument();
            // Should not show move groups when there's an error
            expect(_react1.screen.queryByText('Winning Moves')).not.toBeInTheDocument();
        });
        it('should have correct error styling', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: mockTablebaseData,
                onMoveSelect: mockOnMoveSelect,
                error: "Test error"
            }));
            const errorElement = _react1.screen.getByText('Analyse konnte nicht geladen werden');
            expect(errorElement).toHaveClass('text-sm', 'text-red-600', 'dark:text-red-400');
            expect(errorElement).toHaveClass('bg-red-50', 'dark:bg-red-900/20');
        });
    });
    describe('Custom Props', ()=>{
        it('should apply custom className', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: mockTablebaseData,
                onMoveSelect: mockOnMoveSelect,
                className: "custom-panel-class"
            }));
            const panel = _react1.screen.getByTestId('tablebase-panel');
            expect(panel).toHaveClass('tablebase-panel', 'custom-panel-class');
        });
        it('should handle undefined selectedMove gracefully', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: mockTablebaseData,
                onMoveSelect: mockOnMoveSelect,
                selectedMove: undefined
            }));
            // Should render without errors
            expect(_react1.screen.getByTestId('tablebase-panel')).toBeInTheDocument();
            // No moves should have selected styling
            const moveButtons = _react1.screen.getAllByRole('button');
            moveButtons.forEach((button)=>{
                expect(button).not.toHaveClass('bg-blue-50');
            });
        });
        it('should work with all default props', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: mockTablebaseData,
                onMoveSelect: mockOnMoveSelect
            }));
            expect(_react1.screen.getByTestId('tablebase-panel')).toBeInTheDocument();
            expect(_react1.screen.getByText('Tablebase')).toBeInTheDocument();
        });
    });
    describe('Move Data Edge Cases', ()=>{
        it('should handle undefined topMoves', ()=>{
            const undefinedMovesData = {
                isTablebasePosition: true,
                topMoves: undefined
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: undefinedMovesData,
                onMoveSelect: mockOnMoveSelect
            }));
            expect(_react1.screen.getByText('Warte auf Tablebase-Analyse...')).toBeInTheDocument();
        });
        it('should handle moves with missing DTM values', ()=>{
            const incompleteMoveData = {
                isTablebasePosition: true,
                topMoves: [
                    {
                        move: 'e4',
                        san: 'e4',
                        dtz: 3,
                        dtm: 0,
                        wdl: 2,
                        category: 'win'
                    }
                ]
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: incompleteMoveData,
                onMoveSelect: mockOnMoveSelect
            }));
            expect(_react1.screen.getByText('Tablebase')).toBeInTheDocument();
            expect(_react1.screen.getByText('1 moves')).toBeInTheDocument();
            expect(_react1.screen.getByText('e4')).toBeInTheDocument();
        });
        it('should handle only winning moves', ()=>{
            const winOnlyData = {
                isTablebasePosition: true,
                topMoves: [
                    {
                        move: 'e4',
                        san: 'e4',
                        dtz: 3,
                        dtm: 6,
                        wdl: 2,
                        category: 'win'
                    },
                    {
                        move: 'f4',
                        san: 'f4',
                        dtz: 5,
                        dtm: 10,
                        wdl: 2,
                        category: 'win'
                    }
                ]
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: winOnlyData,
                onMoveSelect: mockOnMoveSelect
            }));
            expect(_react1.screen.getByText('Winning Moves')).toBeInTheDocument();
            expect(_react1.screen.queryByText('Drawing Moves')).not.toBeInTheDocument();
            expect(_react1.screen.queryByText('Losing Moves')).not.toBeInTheDocument();
            expect(_react1.screen.getByText('2 moves')).toBeInTheDocument();
        });
        it('should handle only drawing moves', ()=>{
            const drawOnlyData = {
                isTablebasePosition: true,
                topMoves: [
                    {
                        move: 'e5',
                        san: 'e5',
                        dtz: 0,
                        dtm: 0,
                        wdl: 0,
                        category: 'draw'
                    }
                ]
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: drawOnlyData,
                onMoveSelect: mockOnMoveSelect
            }));
            expect(_react1.screen.queryByText('Winning Moves')).not.toBeInTheDocument();
            expect(_react1.screen.getByText('Drawing Moves')).toBeInTheDocument();
            expect(_react1.screen.queryByText('Losing Moves')).not.toBeInTheDocument();
            expect(_react1.screen.getByText('1 moves')).toBeInTheDocument();
        });
        it('should handle only losing moves', ()=>{
            const lossOnlyData = {
                isTablebasePosition: true,
                topMoves: [
                    {
                        move: 'f6',
                        san: 'f6',
                        dtz: -3,
                        dtm: -6,
                        wdl: -2,
                        category: 'loss'
                    }
                ]
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: lossOnlyData,
                onMoveSelect: mockOnMoveSelect
            }));
            expect(_react1.screen.queryByText('Winning Moves')).not.toBeInTheDocument();
            expect(_react1.screen.queryByText('Drawing Moves')).not.toBeInTheDocument();
            expect(_react1.screen.getByText('Losing Moves')).toBeInTheDocument();
            expect(_react1.screen.getByText('1 moves')).toBeInTheDocument();
        });
    });
    describe('Loading State Variations', ()=>{
        it('should show loading with custom className', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: mockTablebaseData,
                onMoveSelect: mockOnMoveSelect,
                loading: true,
                className: "loading-custom-class"
            }));
            const panel = _react1.screen.getByText('Lade Analyse...').closest('.tablebase-panel');
            expect(panel).toHaveClass('loading-custom-class');
        });
        it('should prioritize error over loading state', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: mockTablebaseData,
                onMoveSelect: mockOnMoveSelect,
                loading: true,
                error: "Connection failed"
            }));
            // Error state takes priority - checked first in the component
            expect(_react1.screen.getByText('Analyse konnte nicht geladen werden')).toBeInTheDocument();
            expect(_react1.screen.queryByText('Lade Analyse...')).not.toBeInTheDocument();
        });
    });
    describe('State Priority Logic', ()=>{
        it('should prioritize error over no tablebase data', ()=>{
            const noTablebaseData = {
                isTablebasePosition: false
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: noTablebaseData,
                onMoveSelect: mockOnMoveSelect,
                error: "Connection failed"
            }));
            expect(_react1.screen.getByText('Analyse konnte nicht geladen werden')).toBeInTheDocument();
            expect(_react1.screen.queryByText('Keine Tablebase-Daten verfÃ¼gbar')).not.toBeInTheDocument();
        });
        it('should prioritize loading over no tablebase data', ()=>{
            const noTablebaseData = {
                isTablebasePosition: false
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: noTablebaseData,
                onMoveSelect: mockOnMoveSelect,
                loading: true
            }));
            expect(_react1.screen.getByText('Lade Analyse...')).toBeInTheDocument();
            expect(_react1.screen.queryByText('Keine Tablebase-Daten verfÃ¼gbar')).not.toBeInTheDocument();
        });
    });
    describe('Visual States and Styling', ()=>{
        it('should show correct state colors and messages', ()=>{
            // Test all different message states with proper styling
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: mockTablebaseData,
                onMoveSelect: mockOnMoveSelect,
                error: "Test error"
            }));
            // Error state
            expect(_react1.screen.getByText('Analyse konnte nicht geladen werden')).toHaveClass('text-red-600');
            // Loading state
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: mockTablebaseData,
                onMoveSelect: mockOnMoveSelect,
                loading: true
            }));
            expect(_react1.screen.getByText('Lade Analyse...')).toHaveClass('text-gray-500');
            // No tablebase data
            const noTablebaseData = {
                isTablebasePosition: false
            };
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: noTablebaseData,
                onMoveSelect: mockOnMoveSelect
            }));
            expect(_react1.screen.getByText('Keine Tablebase-Daten verfÃ¼gbar')).toHaveClass('text-amber-600');
            // Waiting for analysis
            const emptyMovesData = {
                isTablebasePosition: true,
                topMoves: []
            };
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
                tablebaseData: emptyMovesData,
                onMoveSelect: mockOnMoveSelect
            }));
            expect(_react1.screen.getByText('Warte auf Tablebase-Analyse...')).toHaveClass('text-green-600');
        });
    });
});
describe('CompactTablebasePanel', ()=>{
    const mockTablebaseData = {
        isTablebasePosition: true,
        topMoves: [
            {
                move: 'e4',
                san: 'e4',
                dtz: 3,
                dtm: 6,
                wdl: 2,
                category: 'win'
            }
        ]
    };
    it('should render in compact mode by default', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.CompactTablebasePanel, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: jest.fn()
        }));
        const panel = _react1.screen.getByTestId('tablebase-panel');
        expect(panel).toBeInTheDocument();
        expect(panel).toHaveClass('compact-tablebase-panel');
    });
    it('should combine custom className with compact class', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.CompactTablebasePanel, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: jest.fn(),
            className: "custom-compact-class"
        }));
        const panel = _react1.screen.getByTestId('tablebase-panel');
        expect(panel).toHaveClass('compact-tablebase-panel', 'custom-compact-class');
    });
    it('should pass through all props correctly', ()=>{
        const mockOnMoveSelect = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.CompactTablebasePanel, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: mockOnMoveSelect,
            selectedMove: "e4",
            loading: false,
            error: undefined
        }));
        expect(_react1.screen.getByText('Tablebase')).toBeInTheDocument();
        expect(_react1.screen.getByText('1 moves')).toBeInTheDocument();
        const moveButton = _react1.screen.getByText('e4').closest('[role="button"]');
        _react1.fireEvent.click(moveButton);
        expect(mockOnMoveSelect).toHaveBeenCalledWith('e4');
    });
});
describe('TablebasePanelWithErrorBoundary', ()=>{
    const mockTablebaseData = {
        isTablebasePosition: true,
        topMoves: [
            {
                move: 'e4',
                san: 'e4',
                dtz: 3,
                dtm: 6,
                wdl: 2,
                category: 'win'
            }
        ]
    };
    it('should render normally when no error occurs', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanelWithErrorBoundary, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: jest.fn()
        }));
        expect(_react1.screen.getByTestId('tablebase-panel')).toBeInTheDocument();
        expect(_react1.screen.getByText('Tablebase')).toBeInTheDocument();
    });
    it('should be the same component as TablebasePanel', ()=>{
        // This tests that the error boundary wrapper is just an alias
        expect(_TablebasePanel.TablebasePanelWithErrorBoundary).toBe(_TablebasePanel.TablebasePanel);
    });
    it('should pass through all props correctly', ()=>{
        const mockOnMoveSelect = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanelWithErrorBoundary, {
            tablebaseData: mockTablebaseData,
            onMoveSelect: mockOnMoveSelect,
            className: "error-boundary-test"
        }));
        const panel = _react1.screen.getByTestId('tablebase-panel');
        expect(panel).toHaveClass('error-boundary-test');
        const moveButton = _react1.screen.getByText('e4').closest('[role="button"]');
        _react1.fireEvent.click(moveButton);
        expect(mockOnMoveSelect).toHaveBeenCalledWith('e4');
    });
});

//# sourceMappingURL=data:application/json;base64,