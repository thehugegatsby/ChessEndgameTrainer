{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/training/TablebaseAnalysisPanel/index.tsx"],"sourcesContent":["/**\n * @file Tablebase analysis panel with interactive move selection\n * @module components/training/TablebaseAnalysisPanel\n *\n * @description\n * Integration component that connects the tablebase analysis display with\n * the game state. Provides an interactive interface for exploring tablebase\n * moves and directly playing them on the board. Acts as a bridge between\n * the analysis UI and the Zustand store.\n *\n * @remarks\n * Key features:\n * - Real-time position analysis using tablebase API\n * - Interactive move selection that updates the game state\n * - Loading state management during API calls\n * - Conditional rendering based on visibility\n * - Integration with usePositionAnalysis hook for data fetching\n * - Direct store integration for move execution\n *\n * This component handles the complexity of coordinating between the\n * analysis display and the game logic, ensuring moves are properly\n * validated and executed through the store's action system.\n */\n\n\"use client\";\n\nimport React from \"react\";\nimport { usePositionAnalysis } from \"@shared/hooks/usePositionAnalysis\";\nimport { TablebasePanel } from \"@shared/components/tablebase/TablebasePanel\";\nimport { useTrainingStore } from \"@shared/store/hooks\";\n\n/**\n * Props for the TablebaseAnalysisPanel component\n *\n * @interface TablebaseAnalysisPanelProps\n *\n * @property {string} fen - Current position in FEN notation to analyze\n * @property {boolean} isVisible - Controls panel visibility and API calls\n * @property {string} [previousFen] - Previous position for move context\n */\ninterface TablebaseAnalysisPanelProps {\n  fen: string;\n  isVisible: boolean;\n  previousFen?: string;\n}\n\n/**\n * Tablebase analysis panel component\n *\n * @component\n * @description\n * Provides an interactive tablebase analysis interface that allows users to\n * explore optimal moves and directly play them. The component manages the\n * connection between the tablebase UI and the game state through the Zustand\n * store.\n *\n * @remarks\n * Component behavior:\n * - Only fetches tablebase data when visible (performance optimization)\n * - Displays loading state during API calls\n * - Allows direct move selection that updates the game\n * - Returns null when not visible (conditional rendering)\n *\n * The handleMoveSelect callback converts the selected move from the\n * tablebase panel into a game action through the store's handlePlayerMove.\n *\n * @example\n * ```tsx\n * <TablebaseAnalysisPanel\n *   fen=\"r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 4 4\"\n *   isVisible={showAnalysis}\n *   previousFen={previousPosition}\n * />\n * ```\n *\n * @param {TablebaseAnalysisPanelProps} props - Component configuration\n * @returns {JSX.Element | null} Rendered panel or null if not visible\n */\nexport const TablebaseAnalysisPanel: React.FC<TablebaseAnalysisPanelProps> = ({\n  fen,\n  isVisible,\n  previousFen,\n}) => {\n  const { lastEvaluation, isEvaluating, error } = usePositionAnalysis({\n    fen,\n    isEnabled: isVisible,\n    previousFen,\n  });\n\n  const [, trainingActions] = useTrainingStore();\n\n  /**\n   * Handle move selection from tablebase panel\n   *\n   * @private\n   * @param {string} moveSan - Move in Standard Algebraic Notation\n   *\n   * @description\n   * Bridges the gap between the tablebase UI and the game logic.\n   * When a user clicks on a move in the tablebase panel, this handler\n   * executes that move through the store's action system.\n   *\n   * @remarks\n   * The store's handlePlayerMove action accepts SAN strings directly\n   * and handles all validation, state updates, and side effects.\n   */\n  const handleMoveSelect = (moveSan: string) => {\n    // The store action accepts SAN strings directly\n    // MoveResultGroup passes move.san, which chess.js can parse\n    trainingActions.handlePlayerMove(moveSan);\n  };\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"tablebase-analysis-panel\"\n      data-testid=\"tablebase-analysis-panel\"\n    >\n      <TablebasePanel\n        tablebaseData={\n          lastEvaluation?.tablebase || { isTablebasePosition: false }\n        }\n        onMoveSelect={handleMoveSelect}\n        selectedMove={undefined}\n        loading={isEvaluating}\n        error={error || undefined}\n        compact={false}\n      />\n    </div>\n  );\n};\n"],"names":["TablebaseAnalysisPanel","fen","isVisible","previousFen","lastEvaluation","isEvaluating","error","usePositionAnalysis","isEnabled","trainingActions","useTrainingStore","handleMoveSelect","moveSan","handlePlayerMove","div","className","data-testid","TablebasePanel","tablebaseData","tablebase","isTablebasePosition","onMoveSelect","selectedMove","undefined","loading","compact"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;CAsBC,GAED;;;;;+BAsDaA;;;eAAAA;;;;8DApDK;qCACkB;gCACL;uBACE;;;;;;AAiD1B,MAAMA,yBAAgE,CAAC,EAC5EC,GAAG,EACHC,SAAS,EACTC,WAAW,EACZ;IACC,MAAM,EAAEC,cAAc,EAAEC,YAAY,EAAEC,KAAK,EAAE,GAAGC,IAAAA,wCAAmB,EAAC;QAClEN;QACAO,WAAWN;QACXC;IACF;IAEA,MAAM,GAAGM,gBAAgB,GAAGC,IAAAA,uBAAgB;IAE5C;;;;;;;;;;;;;;GAcC,GACD,MAAMC,mBAAmB,CAACC;QACxB,gDAAgD;QAChD,4DAA4D;QAC5DH,gBAAgBI,gBAAgB,CAACD;IACnC;IAEA,IAAI,CAACV,WAAW;QACd,OAAO;IACT;IAEA,qBACE,qBAACY;QACCC,WAAU;QACVC,eAAY;kBAEZ,cAAA,qBAACC,8BAAc;YACbC,eACEd,CAAAA,2BAAAA,qCAAAA,eAAgBe,SAAS,KAAI;gBAAEC,qBAAqB;YAAM;YAE5DC,cAAcV;YACdW,cAAcC;YACdC,SAASnB;YACTC,OAAOA,SAASiB;YAChBE,SAAS;;;AAIjB"}