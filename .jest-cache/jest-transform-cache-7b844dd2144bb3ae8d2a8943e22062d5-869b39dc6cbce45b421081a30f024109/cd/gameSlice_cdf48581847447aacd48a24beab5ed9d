2ffde845d8c9e88d2f69cdb1fd02b496
/**
 * @file Game state slice for Zustand store
 * @module store/slices/gameSlice
 * @description Manages chess game state including board position, move history, and game flow.
 * This slice handles the core chess logic and maintains the current game state.
 *
 * @example
 * ```typescript
 * // Using the game slice in a component
 * import { useStore } from '@/store';
 * import { gameSelectors } from '@/store/slices/gameSlice';
 *
 * function ChessBoard() {
 *   const fen = useStore(gameSelectors.selectCurrentFen);
 *   const moveHistory = useStore(gameSelectors.selectMoveHistory);
 *   const makeMove = useStore(state => state.makeMove);
 *
 *   const handleMove = (move) => {
 *     makeMove(move);
 *   };
 * }
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createGameSlice () {
        return createGameSlice;
    },
    get createInitialGameState () {
        return createInitialGameState;
    },
    get gameSelectors () {
        return gameSelectors;
    },
    get initialGameState () {
        return initialGameState;
    }
});
const _ChessService = require("../../services/ChessService");
const initialGameState = {
    // game field removed - Chess instance managed by ChessService
    currentFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
    currentPgn: "",
    moveHistory: [],
    currentMoveIndex: -1,
    isGameFinished: false,
    gameResult: null,
    // Game status flags
    isCheckmate: false,
    isDraw: false,
    isStalemate: false
};
const createInitialGameState = ()=>({
        ...initialGameState
    });
const createGameSlice = (set, get)=>({
        // Initial state
        ...createInitialGameState(),
        // Actions
        // State management actions
        // setGame removed - Chess instances created on-demand from FEN
        updatePosition: (fen, pgn)=>set((state)=>{
                state.game.currentFen = fen;
                state.game.currentPgn = pgn;
            }),
        addMove: (move)=>{
            const { game: gameState } = get();
            const newHistory = gameState.moveHistory.slice(0, gameState.currentMoveIndex + 1);
            newHistory.push(move);
            set((state)=>{
                state.game.moveHistory = newHistory;
                state.game.currentMoveIndex = newHistory.length - 1;
            });
        },
        setMoveHistory: (moves)=>set((state)=>{
                state.game.moveHistory = moves;
            }),
        setCurrentMoveIndex: (index)=>set((state)=>{
                state.game.currentMoveIndex = index;
            }),
        setGameFinished: (finished)=>set((state)=>{
                state.game.isGameFinished = finished;
            }),
        setGameStatus: (isCheckmate, isDraw, isStalemate)=>set((state)=>{
                state.game.isCheckmate = isCheckmate;
                state.game.isDraw = isDraw;
                state.game.isStalemate = isStalemate;
            }),
        /**
   * Initializes a new chess game with the given FEN position
   *
   * @param {string} fen - The FEN string representing the starting position
   * @returns {boolean} Whether the game was successfully initialized
   *
   * @fires stateChange - When game is initialized
   *
   * @remarks
   * - Uses ChessService to validate and initialize position
   * - Resets move history and game state
   * - Returns false if FEN is invalid
   *
   * @example
   * ```typescript
   * // Initialize with standard starting position
   * const success = store.getState().initializeGame(
   *   "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
   * );
   *
   * // Initialize with endgame position
   * store.getState().initializeGame("8/8/8/8/8/8/R7/K3k3 w - - 0 1");
   * ```
   */ initializeGame: (fen)=>{
            // ChessService will emit 'load' event, triggering automatic sync via rootStore subscription
            return _ChessService.chessService.initialize(fen);
        },
        /**
   * Makes a move on the chess board
   *
   * @param {Object|string} move - Move object with from/to/promotion or algebraic notation
   * @param {string} move.from - Starting square (e.g., "e2")
   * @param {string} move.to - Target square (e.g., "e4")
   * @param {string} [move.promotion] - Promotion piece ("q", "r", "b", "n")
   * @returns {ValidatedMove|null} The validated move object or null if invalid
   *
   * @fires stateChange - When move is successfully made
   *
   * @remarks
   * - Validates moves using chess.js rules
   * - Updates move history and current position
   * - Checks for game ending conditions
   * - Handles pawn promotion
   * - Truncates future moves if moving from middle of history
   *
   * @example
   * ```typescript
   * // Make a move using object notation
   * const move = store.getState().makeMove({ from: "e2", to: "e4" });
   *
   * // Make a move with promotion
   * const promotion = store.getState().makeMove({
   *   from: "e7",
   *   to: "e8",
   *   promotion: "q"
   * });
   *
   * // Make a move using algebraic notation
   * const algMove = store.getState().makeMove("Nf3");
   * ```
   */ makeMove: (move)=>{
            // ChessService will emit 'move' event, triggering automatic sync via rootStore subscription
            return _ChessService.chessService.move(move);
        },
        /**
   * Undoes the last move
   *
   * @returns {boolean} Whether the undo was successful
   *
   * @fires stateChange - When move is undone
   *
   * @remarks
   * - Can only undo if there are moves in history
   * - Updates the game state to the previous position
   * - Maintains move history for redo functionality
   *
   * @example
   * ```typescript
   * // Undo the last move
   * const success = store.getState().undoMove();
   * if (!success) {
   *   console.log("No moves to undo");
   * }
   * ```
   */ undoMove: ()=>{
            // ChessService will emit 'undo' event, triggering automatic sync via rootStore subscription
            return _ChessService.chessService.undo();
        },
        /**
   * Redoes a previously undone move
   *
   * @returns {boolean} Whether the redo was successful
   *
   * @fires stateChange - When move is redone
   *
   * @remarks
   * - Can only redo if there are future moves in history
   * - Restores the game state to the next position
   * - Preserves the original move timestamps
   *
   * @example
   * ```typescript
   * // Redo a previously undone move
   * const success = store.getState().redoMove();
   * if (!success) {
   *   console.log("No moves to redo");
   * }
   * ```
   */ redoMove: ()=>{
            // ChessService will emit 'redo' event, triggering automatic sync via rootStore subscription
            return _ChessService.chessService.redo();
        },
        /**
   * Navigates to a specific move in the game history
   *
   * @param {number} moveIndex - The index of the move to go to (-1 for start position)
   * @returns {boolean} Whether the navigation was successful
   *
   * @fires stateChange - When position changes
   *
   * @remarks
   * - Allows jumping to any position in the game history
   * - Index -1 represents the starting position
   * - Validates the index is within bounds
   * - Updates all game state to match the target position
   *
   * @example
   * ```typescript
   * // Go to starting position
   * store.getState().goToMove(-1);
   *
   * // Go to move 5
   * store.getState().goToMove(4); // 0-indexed
   *
   * // Go to last move
   * const history = store.getState().moveHistory;
   * store.getState().goToMove(history.length - 1);
   * ```
   */ goToMove: (moveIndex)=>{
            // ChessService will emit 'load' event, triggering automatic sync via rootStore subscription
            return _ChessService.chessService.goToMove(moveIndex);
        },
        /**
   * Navigates to the first move (starting position)
   *
   * @fires stateChange - When position changes
   *
   * @remarks
   * This is a convenience method that calls goToMove(-1)
   *
   * @example
   * ```typescript
   * // Go to starting position
   * store.getState().goToFirst();
   * ```
   */ goToFirst: ()=>{
            _ChessService.chessService.goToMove(-1);
        },
        /**
   * Navigates to the previous move
   *
   * @fires stateChange - When position changes
   *
   * @remarks
   * If no current move index is set, assumes we're at the last move
   *
   * @example
   * ```typescript
   * // Go to previous move
   * store.getState().goToPrevious();
   * ```
   */ goToPrevious: ()=>{
            const { game } = get();
            var _game_currentMoveIndex;
            const currentIndex = (_game_currentMoveIndex = game.currentMoveIndex) !== null && _game_currentMoveIndex !== void 0 ? _game_currentMoveIndex : game.moveHistory.length - 1;
            _ChessService.chessService.goToMove(currentIndex - 1);
        },
        /**
   * Navigates to the next move
   *
   * @fires stateChange - When position changes
   *
   * @remarks
   * If no current move index is set, assumes we're at the starting position
   *
   * @example
   * ```typescript
   * // Go to next move
   * store.getState().goToNext();
   * ```
   */ goToNext: ()=>{
            const { game } = get();
            var _game_currentMoveIndex;
            const currentIndex = (_game_currentMoveIndex = game.currentMoveIndex) !== null && _game_currentMoveIndex !== void 0 ? _game_currentMoveIndex : -1;
            _ChessService.chessService.goToMove(currentIndex + 1);
        },
        /**
   * Navigates to the last move
   *
   * @fires stateChange - When position changes
   *
   * @remarks
   * This is a convenience method that navigates to the last move in history
   *
   * @example
   * ```typescript
   * // Go to last move
   * store.getState().goToLast();
   * ```
   */ goToLast: ()=>{
            const { game } = get();
            _ChessService.chessService.goToMove(game.moveHistory.length - 1);
        },
        /**
   * Resets the game to the initial position
   *
   * @fires stateChange - When game is reset
   *
   * @remarks
   * - Clears all move history
   * - Resets to standard chess starting position
   * - Resets all game flags (isGameOver, gameResult)
   *
   * @example
   * ```typescript
   * // Reset the game
   * store.getState().resetGame();
   * ```
   */ resetGame: ()=>{
            // ChessService will emit 'reset' event, triggering automatic sync via rootStore subscription
            _ChessService.chessService.reset();
        },
        /**
   * Sets the current FEN position directly
   *
   * @param {string} fen - The FEN string to set
   * @returns {boolean} Whether the FEN was successfully set
   *
   * @fires stateChange - When FEN is updated
   *
   * @remarks
   * - Validates the FEN string before setting
   * - Clears move history when setting a new position
   * - Use initializeGame instead if you want to start a new game
   *
   * @example
   * ```typescript
   * // Set an endgame position
   * const success = store.getState().setCurrentFen(
   *   "8/8/8/8/8/8/R7/K3k3 w - - 0 1"
   * );
   * ```
   */ setCurrentFen: (fen)=>{
            return _ChessService.chessService.initialize(fen);
        }
    });
const gameSelectors = {
    // selectGame removed - Chess instance now managed by ChessService
    /**
   * Selects the current FEN position
   * @param {GameSlice} state - The game slice of the store
   * @returns {string} The current position in FEN notation
   */ selectCurrentFen: (state)=>state.currentFen,
    /**
   * Selects the move history
   * @param {GameSlice} state - The game slice of the store
   * @returns {ValidatedMove[]} Array of validated moves
   */ selectMoveHistory: (state)=>state.moveHistory,
    /**
   * Selects the current move index
   * @param {GameSlice} state - The game slice of the store
   * @returns {number} Current position in move history (-1 for start)
   */ selectCurrentMoveIndex: (state)=>state.currentMoveIndex,
    /**
   * Selects whether the game is over
   * @param {GameSlice} state - The game slice of the store
   * @returns {boolean} Whether the game has ended
   */ selectIsGameOver: (state)=>state.isGameFinished,
    /**
   * Selects the game result
   * @param {GameSlice} state - The game slice of the store
   * @returns {string|null} Game result or null if ongoing
   */ selectGameResult: (state)=>state.gameResult,
    /**
   * Selects whether it's white's turn
   * @param {GameSlice} state - The game slice of the store
   * @returns {boolean} True if white to move, false if black
   */ selectIsWhiteTurn: (state)=>{
        // Derive from FEN string (turn is the second part)
        const parts = state.currentFen.split(' ');
        return parts[1] === 'w';
    },
    /**
   * Selects whether undo is possible
   * @param {GameSlice} state - The game slice of the store
   * @returns {boolean} True if there are moves to undo
   */ selectCanUndo: (state)=>state.currentMoveIndex >= 0,
    /**
   * Selects whether redo is possible
   * @param {GameSlice} state - The game slice of the store
   * @returns {boolean} True if there are moves to redo
   */ selectCanRedo: (state)=>state.currentMoveIndex < state.moveHistory.length - 1,
    /**
   * Selects the last move made
   * @param {GameSlice} state - The game slice of the store
   * @returns {ValidatedMove|null} The last move or null if no moves
   */ selectLastMove: (state)=>{
        const { currentMoveIndex, moveHistory } = state;
        return currentMoveIndex >= 0 ? moveHistory[currentMoveIndex] : null;
    },
    /**
   * Selects legal moves for a square
   * @param {string} square - The square to get moves for (e.g., "e2")
   * @returns {Function} Selector function that returns array of legal moves
   *
   * @example
   * ```typescript
   * const e2Moves = useStore(gameSelectors.selectLegalMoves('e2'));
   * ```
   */ selectLegalMoves: (square)=>(_state)=>{
            // Use ChessService to get legal moves
            try {
                return _ChessService.chessService.moves({
                    square,
                    verbose: true
                });
            } catch  {
                return [];
            }
        }
};

//# sourceMappingURL=data:application/json;base64,