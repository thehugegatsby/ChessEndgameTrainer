{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/types/tablebaseSchemas.ts"],"sourcesContent":["/**\n * Zod schemas for Lichess Tablebase API responses\n *\n * @remarks\n * These schemas validate the shape of API responses to ensure\n * data integrity at service boundaries. They provide type safety\n * and clear documentation of the expected API contract.\n */\n\nimport { z } from \"zod\";\n\n/**\n * Schema for individual moves in tablebase response\n */\nexport const TablebaseMoveSchema = z.object({\n  uci: z.string(),\n  san: z.string(),\n  category: z.string(),\n  dtz: z.number().nullable(),\n  dtm: z.number().nullable(),\n  zeroing: z.boolean().optional().default(false),\n  checkmate: z.boolean().optional().default(false),\n  stalemate: z.boolean().optional().default(false),\n  variant_win: z.boolean().optional().default(false),\n  variant_loss: z.boolean().optional().default(false),\n  insufficient_material: z.boolean().optional().default(false),\n});\n\n/**\n * Schema for main tablebase API response\n */\nexport const LichessTablebaseResponseSchema = z.object({\n  category: z.string(), // Required - every position has a category\n  dtz: z.number().nullable(), // Required but can be null\n  dtm: z.number().nullable().optional(), // Optional - not always present in API response\n  precise_dtz: z.union([z.number(), z.boolean()]).optional(), // Can be number or boolean\n  dtw: z.number().nullable().optional(), // Add missing fields from actual API\n  dtc: z.number().nullable().optional(),\n  checkmate: z.boolean().optional().default(false),\n  stalemate: z.boolean().optional().default(false),\n  variant_win: z.boolean().optional().default(false),\n  variant_loss: z.boolean().optional().default(false),\n  insufficient_material: z.boolean().optional().default(false),\n  moves: z.array(TablebaseMoveSchema).optional().default([]),\n});\n"],"names":["LichessTablebaseResponseSchema","TablebaseMoveSchema","z","object","uci","string","san","category","dtz","number","nullable","dtm","zeroing","boolean","optional","default","checkmate","stalemate","variant_win","variant_loss","insufficient_material","precise_dtz","union","dtw","dtc","moves","array"],"mappings":"AAAA;;;;;;;CAOC;;;;;;;;;;;QAwBYA;eAAAA;;QAjBAC;eAAAA;;;qBALK;AAKX,MAAMA,sBAAsBC,MAAC,CAACC,MAAM,CAAC;IAC1CC,KAAKF,MAAC,CAACG,MAAM;IACbC,KAAKJ,MAAC,CAACG,MAAM;IACbE,UAAUL,MAAC,CAACG,MAAM;IAClBG,KAAKN,MAAC,CAACO,MAAM,GAAGC,QAAQ;IACxBC,KAAKT,MAAC,CAACO,MAAM,GAAGC,QAAQ;IACxBE,SAASV,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IACxCC,WAAWd,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC1CE,WAAWf,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC1CG,aAAahB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC5CI,cAAcjB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC7CK,uBAAuBlB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;AACxD;AAKO,MAAMf,iCAAiCE,MAAC,CAACC,MAAM,CAAC;IACrDI,UAAUL,MAAC,CAACG,MAAM;IAClBG,KAAKN,MAAC,CAACO,MAAM,GAAGC,QAAQ;IACxBC,KAAKT,MAAC,CAACO,MAAM,GAAGC,QAAQ,GAAGI,QAAQ;IACnCO,aAAanB,MAAC,CAACoB,KAAK,CAAC;QAACpB,MAAC,CAACO,MAAM;QAAIP,MAAC,CAACW,OAAO;KAAG,EAAEC,QAAQ;IACxDS,KAAKrB,MAAC,CAACO,MAAM,GAAGC,QAAQ,GAAGI,QAAQ;IACnCU,KAAKtB,MAAC,CAACO,MAAM,GAAGC,QAAQ,GAAGI,QAAQ;IACnCE,WAAWd,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC1CE,WAAWf,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC1CG,aAAahB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC5CI,cAAcjB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC7CK,uBAAuBlB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IACtDU,OAAOvB,MAAC,CAACwB,KAAK,CAACzB,qBAAqBa,QAAQ,GAAGC,OAAO,CAAC,EAAE;AAC3D"}