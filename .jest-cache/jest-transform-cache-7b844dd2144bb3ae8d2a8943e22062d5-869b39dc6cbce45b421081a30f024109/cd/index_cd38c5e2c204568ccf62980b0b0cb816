70684a215aa72cec0a68c693fc9e5748
/**
 * @file Tablebase analysis panel with interactive move selection
 * @module components/training/TablebaseAnalysisPanel
 *
 * @description
 * Integration component that connects the tablebase analysis display with
 * the game state. Provides an interactive interface for exploring tablebase
 * moves and directly playing them on the board. Acts as a bridge between
 * the analysis UI and the Zustand store.
 *
 * @remarks
 * Key features:
 * - Real-time position analysis using tablebase API
 * - Interactive move selection that updates the game state
 * - Loading state management during API calls
 * - Conditional rendering based on visibility
 * - Integration with usePositionAnalysis hook for data fetching
 * - Direct store integration for move execution
 *
 * This component handles the complexity of coordinating between the
 * analysis display and the game logic, ensuring moves are properly
 * validated and executed through the store's action system.
 */ "use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "TablebaseAnalysisPanel", {
    enumerable: true,
    get: function() {
        return TablebaseAnalysisPanel;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _usePositionAnalysis = require("../../../hooks/usePositionAnalysis");
const _TablebasePanel = require("../../tablebase/TablebasePanel");
const _hooks = require("../../../store/hooks");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const TablebaseAnalysisPanel = ({ fen, isVisible, previousFen })=>{
    const { lastEvaluation, isEvaluating, error } = (0, _usePositionAnalysis.usePositionAnalysis)({
        fen,
        isEnabled: isVisible,
        previousFen
    });
    const [, trainingActions] = (0, _hooks.useTrainingStore)();
    /**
   * Handle move selection from tablebase panel
   *
   * @private
   * @param {string} moveSan - Move in Standard Algebraic Notation
   *
   * @description
   * Bridges the gap between the tablebase UI and the game logic.
   * When a user clicks on a move in the tablebase panel, this handler
   * executes that move through the store's action system.
   *
   * @remarks
   * The store's handlePlayerMove action accepts SAN strings directly
   * and handles all validation, state updates, and side effects.
   */ const handleMoveSelect = (moveSan)=>{
        // The store action accepts SAN strings directly
        // MoveResultGroup passes move.san, which chess.js can parse
        trainingActions.handlePlayerMove(moveSan);
    };
    if (!isVisible) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: "tablebase-analysis-panel",
        "data-testid": "tablebase-analysis-panel",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_TablebasePanel.TablebasePanel, {
            tablebaseData: (lastEvaluation === null || lastEvaluation === void 0 ? void 0 : lastEvaluation.tablebase) || {
                isTablebasePosition: false
            },
            onMoveSelect: handleMoveSelect,
            selectedMove: undefined,
            loading: isEvaluating,
            error: error || undefined,
            compact: false
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL2NvbXBvbmVudHMvdHJhaW5pbmcvVGFibGViYXNlQW5hbHlzaXNQYW5lbC9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBUYWJsZWJhc2UgYW5hbHlzaXMgcGFuZWwgd2l0aCBpbnRlcmFjdGl2ZSBtb3ZlIHNlbGVjdGlvblxuICogQG1vZHVsZSBjb21wb25lbnRzL3RyYWluaW5nL1RhYmxlYmFzZUFuYWx5c2lzUGFuZWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEludGVncmF0aW9uIGNvbXBvbmVudCB0aGF0IGNvbm5lY3RzIHRoZSB0YWJsZWJhc2UgYW5hbHlzaXMgZGlzcGxheSB3aXRoXG4gKiB0aGUgZ2FtZSBzdGF0ZS4gUHJvdmlkZXMgYW4gaW50ZXJhY3RpdmUgaW50ZXJmYWNlIGZvciBleHBsb3JpbmcgdGFibGViYXNlXG4gKiBtb3ZlcyBhbmQgZGlyZWN0bHkgcGxheWluZyB0aGVtIG9uIHRoZSBib2FyZC4gQWN0cyBhcyBhIGJyaWRnZSBiZXR3ZWVuXG4gKiB0aGUgYW5hbHlzaXMgVUkgYW5kIHRoZSBadXN0YW5kIHN0b3JlLlxuICpcbiAqIEByZW1hcmtzXG4gKiBLZXkgZmVhdHVyZXM6XG4gKiAtIFJlYWwtdGltZSBwb3NpdGlvbiBhbmFseXNpcyB1c2luZyB0YWJsZWJhc2UgQVBJXG4gKiAtIEludGVyYWN0aXZlIG1vdmUgc2VsZWN0aW9uIHRoYXQgdXBkYXRlcyB0aGUgZ2FtZSBzdGF0ZVxuICogLSBMb2FkaW5nIHN0YXRlIG1hbmFnZW1lbnQgZHVyaW5nIEFQSSBjYWxsc1xuICogLSBDb25kaXRpb25hbCByZW5kZXJpbmcgYmFzZWQgb24gdmlzaWJpbGl0eVxuICogLSBJbnRlZ3JhdGlvbiB3aXRoIHVzZVBvc2l0aW9uQW5hbHlzaXMgaG9vayBmb3IgZGF0YSBmZXRjaGluZ1xuICogLSBEaXJlY3Qgc3RvcmUgaW50ZWdyYXRpb24gZm9yIG1vdmUgZXhlY3V0aW9uXG4gKlxuICogVGhpcyBjb21wb25lbnQgaGFuZGxlcyB0aGUgY29tcGxleGl0eSBvZiBjb29yZGluYXRpbmcgYmV0d2VlbiB0aGVcbiAqIGFuYWx5c2lzIGRpc3BsYXkgYW5kIHRoZSBnYW1lIGxvZ2ljLCBlbnN1cmluZyBtb3ZlcyBhcmUgcHJvcGVybHlcbiAqIHZhbGlkYXRlZCBhbmQgZXhlY3V0ZWQgdGhyb3VnaCB0aGUgc3RvcmUncyBhY3Rpb24gc3lzdGVtLlxuICovXG5cblwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VQb3NpdGlvbkFuYWx5c2lzIH0gZnJvbSBcIkBzaGFyZWQvaG9va3MvdXNlUG9zaXRpb25BbmFseXNpc1wiO1xuaW1wb3J0IHsgVGFibGViYXNlUGFuZWwgfSBmcm9tIFwiQHNoYXJlZC9jb21wb25lbnRzL3RhYmxlYmFzZS9UYWJsZWJhc2VQYW5lbFwiO1xuaW1wb3J0IHsgdXNlVHJhaW5pbmdTdG9yZSB9IGZyb20gXCJAc2hhcmVkL3N0b3JlL2hvb2tzXCI7XG5cbi8qKlxuICogUHJvcHMgZm9yIHRoZSBUYWJsZWJhc2VBbmFseXNpc1BhbmVsIGNvbXBvbmVudFxuICpcbiAqIEBpbnRlcmZhY2UgVGFibGViYXNlQW5hbHlzaXNQYW5lbFByb3BzXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGZlbiAtIEN1cnJlbnQgcG9zaXRpb24gaW4gRkVOIG5vdGF0aW9uIHRvIGFuYWx5emVcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNWaXNpYmxlIC0gQ29udHJvbHMgcGFuZWwgdmlzaWJpbGl0eSBhbmQgQVBJIGNhbGxzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3ByZXZpb3VzRmVuXSAtIFByZXZpb3VzIHBvc2l0aW9uIGZvciBtb3ZlIGNvbnRleHRcbiAqL1xuaW50ZXJmYWNlIFRhYmxlYmFzZUFuYWx5c2lzUGFuZWxQcm9wcyB7XG4gIGZlbjogc3RyaW5nO1xuICBpc1Zpc2libGU6IGJvb2xlYW47XG4gIHByZXZpb3VzRmVuPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRhYmxlYmFzZSBhbmFseXNpcyBwYW5lbCBjb21wb25lbnRcbiAqXG4gKiBAY29tcG9uZW50XG4gKiBAZGVzY3JpcHRpb25cbiAqIFByb3ZpZGVzIGFuIGludGVyYWN0aXZlIHRhYmxlYmFzZSBhbmFseXNpcyBpbnRlcmZhY2UgdGhhdCBhbGxvd3MgdXNlcnMgdG9cbiAqIGV4cGxvcmUgb3B0aW1hbCBtb3ZlcyBhbmQgZGlyZWN0bHkgcGxheSB0aGVtLiBUaGUgY29tcG9uZW50IG1hbmFnZXMgdGhlXG4gKiBjb25uZWN0aW9uIGJldHdlZW4gdGhlIHRhYmxlYmFzZSBVSSBhbmQgdGhlIGdhbWUgc3RhdGUgdGhyb3VnaCB0aGUgWnVzdGFuZFxuICogc3RvcmUuXG4gKlxuICogQHJlbWFya3NcbiAqIENvbXBvbmVudCBiZWhhdmlvcjpcbiAqIC0gT25seSBmZXRjaGVzIHRhYmxlYmFzZSBkYXRhIHdoZW4gdmlzaWJsZSAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICogLSBEaXNwbGF5cyBsb2FkaW5nIHN0YXRlIGR1cmluZyBBUEkgY2FsbHNcbiAqIC0gQWxsb3dzIGRpcmVjdCBtb3ZlIHNlbGVjdGlvbiB0aGF0IHVwZGF0ZXMgdGhlIGdhbWVcbiAqIC0gUmV0dXJucyBudWxsIHdoZW4gbm90IHZpc2libGUgKGNvbmRpdGlvbmFsIHJlbmRlcmluZylcbiAqXG4gKiBUaGUgaGFuZGxlTW92ZVNlbGVjdCBjYWxsYmFjayBjb252ZXJ0cyB0aGUgc2VsZWN0ZWQgbW92ZSBmcm9tIHRoZVxuICogdGFibGViYXNlIHBhbmVsIGludG8gYSBnYW1lIGFjdGlvbiB0aHJvdWdoIHRoZSBzdG9yZSdzIGhhbmRsZVBsYXllck1vdmUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogPFRhYmxlYmFzZUFuYWx5c2lzUGFuZWxcbiAqICAgZmVuPVwicjFicWtibnIvcHBwcDFwcHAvMm41LzRwMy80UDMvNU4yL1BQUFAxUFBQL1JOQlFLQjFSIHcgS1FrcSAtIDQgNFwiXG4gKiAgIGlzVmlzaWJsZT17c2hvd0FuYWx5c2lzfVxuICogICBwcmV2aW91c0Zlbj17cHJldmlvdXNQb3NpdGlvbn1cbiAqIC8+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1RhYmxlYmFzZUFuYWx5c2lzUGFuZWxQcm9wc30gcHJvcHMgLSBDb21wb25lbnQgY29uZmlndXJhdGlvblxuICogQHJldHVybnMge0pTWC5FbGVtZW50IHwgbnVsbH0gUmVuZGVyZWQgcGFuZWwgb3IgbnVsbCBpZiBub3QgdmlzaWJsZVxuICovXG5leHBvcnQgY29uc3QgVGFibGViYXNlQW5hbHlzaXNQYW5lbDogUmVhY3QuRkM8VGFibGViYXNlQW5hbHlzaXNQYW5lbFByb3BzPiA9ICh7XG4gIGZlbixcbiAgaXNWaXNpYmxlLFxuICBwcmV2aW91c0Zlbixcbn0pID0+IHtcbiAgY29uc3QgeyBsYXN0RXZhbHVhdGlvbiwgaXNFdmFsdWF0aW5nLCBlcnJvciB9ID0gdXNlUG9zaXRpb25BbmFseXNpcyh7XG4gICAgZmVuLFxuICAgIGlzRW5hYmxlZDogaXNWaXNpYmxlLFxuICAgIHByZXZpb3VzRmVuLFxuICB9KTtcblxuICBjb25zdCBbLCB0cmFpbmluZ0FjdGlvbnNdID0gdXNlVHJhaW5pbmdTdG9yZSgpO1xuXG4gIC8qKlxuICAgKiBIYW5kbGUgbW92ZSBzZWxlY3Rpb24gZnJvbSB0YWJsZWJhc2UgcGFuZWxcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1vdmVTYW4gLSBNb3ZlIGluIFN0YW5kYXJkIEFsZ2VicmFpYyBOb3RhdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQnJpZGdlcyB0aGUgZ2FwIGJldHdlZW4gdGhlIHRhYmxlYmFzZSBVSSBhbmQgdGhlIGdhbWUgbG9naWMuXG4gICAqIFdoZW4gYSB1c2VyIGNsaWNrcyBvbiBhIG1vdmUgaW4gdGhlIHRhYmxlYmFzZSBwYW5lbCwgdGhpcyBoYW5kbGVyXG4gICAqIGV4ZWN1dGVzIHRoYXQgbW92ZSB0aHJvdWdoIHRoZSBzdG9yZSdzIGFjdGlvbiBzeXN0ZW0uXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIFRoZSBzdG9yZSdzIGhhbmRsZVBsYXllck1vdmUgYWN0aW9uIGFjY2VwdHMgU0FOIHN0cmluZ3MgZGlyZWN0bHlcbiAgICogYW5kIGhhbmRsZXMgYWxsIHZhbGlkYXRpb24sIHN0YXRlIHVwZGF0ZXMsIGFuZCBzaWRlIGVmZmVjdHMuXG4gICAqL1xuICBjb25zdCBoYW5kbGVNb3ZlU2VsZWN0ID0gKG1vdmVTYW46IHN0cmluZykgPT4ge1xuICAgIC8vIFRoZSBzdG9yZSBhY3Rpb24gYWNjZXB0cyBTQU4gc3RyaW5ncyBkaXJlY3RseVxuICAgIC8vIE1vdmVSZXN1bHRHcm91cCBwYXNzZXMgbW92ZS5zYW4sIHdoaWNoIGNoZXNzLmpzIGNhbiBwYXJzZVxuICAgIHRyYWluaW5nQWN0aW9ucy5oYW5kbGVQbGF5ZXJNb3ZlKG1vdmVTYW4pO1xuICB9O1xuXG4gIGlmICghaXNWaXNpYmxlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT1cInRhYmxlYmFzZS1hbmFseXNpcy1wYW5lbFwiXG4gICAgICBkYXRhLXRlc3RpZD1cInRhYmxlYmFzZS1hbmFseXNpcy1wYW5lbFwiXG4gICAgPlxuICAgICAgPFRhYmxlYmFzZVBhbmVsXG4gICAgICAgIHRhYmxlYmFzZURhdGE9e1xuICAgICAgICAgIGxhc3RFdmFsdWF0aW9uPy50YWJsZWJhc2UgfHwgeyBpc1RhYmxlYmFzZVBvc2l0aW9uOiBmYWxzZSB9XG4gICAgICAgIH1cbiAgICAgICAgb25Nb3ZlU2VsZWN0PXtoYW5kbGVNb3ZlU2VsZWN0fVxuICAgICAgICBzZWxlY3RlZE1vdmU9e3VuZGVmaW5lZH1cbiAgICAgICAgbG9hZGluZz17aXNFdmFsdWF0aW5nfVxuICAgICAgICBlcnJvcj17ZXJyb3IgfHwgdW5kZWZpbmVkfVxuICAgICAgICBjb21wYWN0PXtmYWxzZX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbIlRhYmxlYmFzZUFuYWx5c2lzUGFuZWwiLCJmZW4iLCJpc1Zpc2libGUiLCJwcmV2aW91c0ZlbiIsImxhc3RFdmFsdWF0aW9uIiwiaXNFdmFsdWF0aW5nIiwiZXJyb3IiLCJ1c2VQb3NpdGlvbkFuYWx5c2lzIiwiaXNFbmFibGVkIiwidHJhaW5pbmdBY3Rpb25zIiwidXNlVHJhaW5pbmdTdG9yZSIsImhhbmRsZU1vdmVTZWxlY3QiLCJtb3ZlU2FuIiwiaGFuZGxlUGxheWVyTW92ZSIsImRpdiIsImNsYXNzTmFtZSIsImRhdGEtdGVzdGlkIiwiVGFibGViYXNlUGFuZWwiLCJ0YWJsZWJhc2VEYXRhIiwidGFibGViYXNlIiwiaXNUYWJsZWJhc2VQb3NpdGlvbiIsIm9uTW92ZVNlbGVjdCIsInNlbGVjdGVkTW92ZSIsInVuZGVmaW5lZCIsImxvYWRpbmciLCJjb21wYWN0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXNCQyxHQUVEOzs7OzsrQkFzRGFBOzs7ZUFBQUE7Ozs7OERBcERLO3FDQUNrQjtnQ0FDTDt1QkFDRTs7Ozs7O0FBaUQxQixNQUFNQSx5QkFBZ0UsQ0FBQyxFQUM1RUMsR0FBRyxFQUNIQyxTQUFTLEVBQ1RDLFdBQVcsRUFDWjtJQUNDLE1BQU0sRUFBRUMsY0FBYyxFQUFFQyxZQUFZLEVBQUVDLEtBQUssRUFBRSxHQUFHQyxJQUFBQSx3Q0FBbUIsRUFBQztRQUNsRU47UUFDQU8sV0FBV047UUFDWEM7SUFDRjtJQUVBLE1BQU0sR0FBR00sZ0JBQWdCLEdBQUdDLElBQUFBLHVCQUFnQjtJQUU1Qzs7Ozs7Ozs7Ozs7Ozs7R0FjQyxHQUNELE1BQU1DLG1CQUFtQixDQUFDQztRQUN4QixnREFBZ0Q7UUFDaEQsNERBQTREO1FBQzVESCxnQkFBZ0JJLGdCQUFnQixDQUFDRDtJQUNuQztJQUVBLElBQUksQ0FBQ1YsV0FBVztRQUNkLE9BQU87SUFDVDtJQUVBLHFCQUNFLHFCQUFDWTtRQUNDQyxXQUFVO1FBQ1ZDLGVBQVk7a0JBRVosY0FBQSxxQkFBQ0MsOEJBQWM7WUFDYkMsZUFDRWQsQ0FBQUEsMkJBQUFBLHFDQUFBQSxlQUFnQmUsU0FBUyxLQUFJO2dCQUFFQyxxQkFBcUI7WUFBTTtZQUU1REMsY0FBY1Y7WUFDZFcsY0FBY0M7WUFDZEMsU0FBU25CO1lBQ1RDLE9BQU9BLFNBQVNpQjtZQUNoQkUsU0FBUzs7O0FBSWpCIn0=