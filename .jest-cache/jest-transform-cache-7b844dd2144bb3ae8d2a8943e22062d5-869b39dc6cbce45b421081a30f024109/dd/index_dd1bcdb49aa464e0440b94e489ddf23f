0a234b365a2418b4959425a6812da3ea
/**
 * @file Handle player move orchestrator (refactored modular version)
 * @module store/orchestrators/handlePlayerMove
 *
 * @description
 * Clean orchestrator that coordinates player moves using specialized modules.
 * Demonstrates proper separation of concerns with focused responsibilities.
 *
 * @remarks
 * This orchestrator uses the following modules:
 * - MoveValidator: Move validation logic
 * - MoveQualityEvaluator: Tablebase quality analysis
 * - PawnPromotionHandler: Pawn promotion detection and handling
 * - MoveDialogManager: Dialog interactions (error, promotion, confirmation)
 * - OpponentTurnHandler: Opponent move scheduling and execution
 *
 * @example
 * ```typescript
 * const success = await handlePlayerMove(api, { from: "e2", to: "e4" });
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get cancelScheduledOpponentTurn () {
        return _OpponentTurnHandler.cancelScheduledOpponentTurn;
    },
    get createHandlePlayerMove () {
        return createHandlePlayerMove;
    },
    get handlePlayerMove () {
        return handlePlayerMove;
    },
    get scheduleOpponentTurn () {
        return _OpponentTurnHandler.scheduleOpponentTurn;
    }
});
const _ChessService = require("../../../services/ChessService");
const _ErrorService = require("../../../services/ErrorService");
const _logging = require("../../../services/logging");
const _movecompletion = require("./move.completion");
const _MoveValidator = require("./MoveValidator");
const _MoveQualityEvaluator = require("./MoveQualityEvaluator");
const _PawnPromotionHandler = require("./PawnPromotionHandler");
const _MoveDialogManager = require("./MoveDialogManager");
const _OpponentTurnHandler = require("./OpponentTurnHandler");
// Default module instances for backward compatibility
const defaultDependencies = {
    moveValidator: new _MoveValidator.MoveValidator(),
    moveQualityEvaluator: new _MoveQualityEvaluator.MoveQualityEvaluator(),
    pawnPromotionHandler: new _PawnPromotionHandler.PawnPromotionHandler(),
    moveDialogManager: new _MoveDialogManager.MoveDialogManager()
};
function createHandlePlayerMove(dependencies) {
    const deps = {
        ...defaultDependencies,
        ...dependencies
    };
    return async function handlePlayerMoveWithDeps(api, move) {
        const { getState, setState } = api;
        const state = getState();
        // Early validation - check if it's player's turn
        if (!state.training.isPlayerTurn || state.training.isOpponentThinking) {
            (0, _logging.getLogger)().debug("[handlePlayerMove] Early return - not player turn or opponent thinking", {
                isPlayerTurn: state.training.isPlayerTurn,
                isOpponentThinking: state.training.isOpponentThinking
            });
            return false;
        }
        try {
            var _state_training_currentPosition_colorToTrain, _state_training_currentPosition;
            setState((draft)=>{
                draft.ui.loading.position = true;
            });
            // Step 1: Validate move using MoveValidator
            const validationResult = await deps.moveValidator.validateMove(move);
            if (!validationResult.isValid) {
                setState((draft)=>{
                    draft.ui.toasts.push({
                        id: Date.now().toString(),
                        message: validationResult.errorMessage || "Invalid move",
                        type: "error"
                    });
                });
                return false;
            }
            // Step 2: Get position before move for evaluation
            const fenBefore = _ChessService.chessService.getFen();
            // Step 3: Apply move to game state
            const validatedMove = _ChessService.chessService.move(move);
            if (!validatedMove) {
                (0, _logging.getLogger)().error("[handlePlayerMove] Move execution failed after validation");
                return false;
            }
            const fenAfter = _ChessService.chessService.getFen();
            // Step 4: Handle pawn promotion if applicable
            const promotionInfo = deps.pawnPromotionHandler.checkPromotion(validatedMove);
            if (promotionInfo.isPromotion) {
                (0, _logging.getLogger)().info("[handlePlayerMove] Pawn promotion detected:", promotionInfo);
                // Check if promotion leads to auto-win
                const isAutoWin = await deps.pawnPromotionHandler.evaluatePromotionOutcome(fenAfter, validatedMove.color);
                if (isAutoWin) {
                    await deps.pawnPromotionHandler.handleAutoWin(api, {
                        ...promotionInfo,
                        isAutoWin: true
                    });
                    return true; // Training completed
                }
                // Show success dialog for all queen promotions, not just auto-win
                if (promotionInfo.promotionPiece === "q") {
                    const promotionPieceLabel = deps.pawnPromotionHandler.getPromotionPieceLabel(promotionInfo.promotionPiece);
                    setState((draft)=>{
                        draft.training.moveSuccessDialog = {
                            isOpen: true,
                            promotionPiece: promotionPieceLabel,
                            moveDescription: promotionInfo.moveDescription
                        };
                    });
                }
            }
            // Step 5: Evaluate move quality using MoveQualityEvaluator
            // Pass current evaluation baseline if available and valid
            const currentBaseline = state.training.evaluationBaseline;
            const validBaseline = currentBaseline && currentBaseline.wdl !== null && currentBaseline.fen !== null ? {
                wdl: currentBaseline.wdl,
                fen: currentBaseline.fen
            } : null;
            const qualityResult = await deps.moveQualityEvaluator.evaluateMoveQuality(fenBefore, fenAfter, validatedMove, validBaseline);
            // Step 6: Show error dialog if move was suboptimal and outcome changed
            if (qualityResult.shouldShowErrorDialog) {
                var _state_training_currentPosition_colorToTrain1, _state_training_currentPosition1;
                // Set turn state before showing dialog so "Weiterspielen" can trigger opponent move
                const currentTurn = _ChessService.chessService.turn();
                const trainingColor = (_state_training_currentPosition1 = state.training.currentPosition) === null || _state_training_currentPosition1 === void 0 ? void 0 : (_state_training_currentPosition_colorToTrain1 = _state_training_currentPosition1.colorToTrain) === null || _state_training_currentPosition_colorToTrain1 === void 0 ? void 0 : _state_training_currentPosition_colorToTrain1.charAt(0);
                if (currentTurn !== trainingColor) {
                    (0, _logging.getLogger)().info("[handlePlayerMove] Setting turn state for opponent before error dialog");
                    setState((draft)=>{
                        draft.training.isPlayerTurn = false;
                        draft.training.isOpponentThinking = false; // Not thinking yet, waiting for dialog
                    });
                }
                deps.moveDialogManager.showMoveErrorDialog(api, qualityResult.wdlBefore || 0, qualityResult.wdlAfter || 0, qualityResult.bestMove);
                (0, _logging.getLogger)().info("[handlePlayerMove] Showing error dialog - opponent turn will be scheduled after 'Weiterspielen'");
                return true;
            }
            // Step 7: Check if game is finished
            if (_ChessService.chessService.isGameOver()) {
                await (0, _movecompletion.handleTrainingCompletion)(api, true);
                return true;
            }
            // Step 8: Handle opponent turn if needed
            const currentTurn = _ChessService.chessService.turn();
            const trainingColor = (_state_training_currentPosition = state.training.currentPosition) === null || _state_training_currentPosition === void 0 ? void 0 : (_state_training_currentPosition_colorToTrain = _state_training_currentPosition.colorToTrain) === null || _state_training_currentPosition_colorToTrain === void 0 ? void 0 : _state_training_currentPosition_colorToTrain.charAt(0);
            if (currentTurn !== trainingColor) {
                (0, _logging.getLogger)().debug("[handlePlayerMove] Scheduling opponent turn");
                setState((draft)=>{
                    draft.training.isPlayerTurn = false;
                    draft.training.isOpponentThinking = true;
                });
                // Schedule opponent turn using dedicated handler
                (0, _OpponentTurnHandler.scheduleOpponentTurn)(api);
            }
            return true;
        } catch (error) {
            (0, _logging.getLogger)().error("[handlePlayerMove] Error in orchestrator:", error);
            const userMessage = _ErrorService.ErrorService.handleUIError(error instanceof Error ? error : new Error(String(error)), "MakeUserMove", {
                component: "MakeUserMove",
                action: "orchestrate"
            });
            setState((draft)=>{
                draft.ui.toasts.push({
                    id: Date.now().toString(),
                    message: userMessage,
                    type: "error"
                });
            });
            (0, _logging.getLogger)().error("[handlePlayerMove] Move handling failed:", error);
            return false;
        } finally{
            // Clear loading state
            setState((draft)=>{
                draft.ui.loading.position = false;
            });
        }
    };
}
const handlePlayerMove = createHandlePlayerMove();

//# sourceMappingURL=data:application/json;base64,