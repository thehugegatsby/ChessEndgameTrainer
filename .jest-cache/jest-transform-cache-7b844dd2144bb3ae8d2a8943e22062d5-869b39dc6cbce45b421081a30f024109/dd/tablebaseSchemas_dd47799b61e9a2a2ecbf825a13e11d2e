246edf0f837a264f1d05f5db2a4e8486
/**
 * Zod schemas for Lichess Tablebase API responses
 *
 * @remarks
 * These schemas validate the shape of API responses to ensure
 * data integrity at service boundaries. They provide type safety
 * and clear documentation of the expected API contract.
 */"use strict";

/* istanbul ignore next */
function cov_2nhg48k0ee() {
  var path = "/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/types/tablebaseSchemas.ts";
  var hash = "1cf25aa34496dbe588f808f93e7be896fbca1574";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/types/tablebaseSchemas.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "1": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 16,
          column: 7
        }
      },
      "2": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 16,
          column: 7
        }
      },
      "3": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "4": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 46
        }
      },
      "5": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 35
        }
      },
      "6": {
        start: {
          line: 26,
          column: 13
        },
        end: {
          line: 26,
          column: 27
        }
      },
      "7": {
        start: {
          line: 27,
          column: 28
        },
        end: {
          line: 39,
          column: 2
        }
      },
      "8": {
        start: {
          line: 40,
          column: 39
        },
        end: {
          line: 56,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 16
          }
        },
        loc: {
          start: {
            line: 12,
            column: 30
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 42
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 31
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/types/tablebaseSchemas.ts"],
      sourcesContent: ["/**\n * Zod schemas for Lichess Tablebase API responses\n *\n * @remarks\n * These schemas validate the shape of API responses to ensure\n * data integrity at service boundaries. They provide type safety\n * and clear documentation of the expected API contract.\n */\n\nimport { z } from \"zod\";\n\n/**\n * Schema for individual moves in tablebase response\n */\nexport const TablebaseMoveSchema = z.object({\n  uci: z.string(),\n  san: z.string(),\n  category: z.string(),\n  dtz: z.number().nullable(),\n  dtm: z.number().nullable(),\n  zeroing: z.boolean().optional().default(false),\n  checkmate: z.boolean().optional().default(false),\n  stalemate: z.boolean().optional().default(false),\n  variant_win: z.boolean().optional().default(false),\n  variant_loss: z.boolean().optional().default(false),\n  insufficient_material: z.boolean().optional().default(false),\n});\n\n/**\n * Schema for main tablebase API response\n */\nexport const LichessTablebaseResponseSchema = z.object({\n  category: z.string(), // Required - every position has a category\n  dtz: z.number().nullable(), // Required but can be null\n  dtm: z.number().nullable().optional(), // Optional - not always present in API response\n  precise_dtz: z.union([z.number(), z.boolean()]).optional(), // Can be number or boolean\n  dtw: z.number().nullable().optional(), // Add missing fields from actual API\n  dtc: z.number().nullable().optional(),\n  checkmate: z.boolean().optional().default(false),\n  stalemate: z.boolean().optional().default(false),\n  variant_win: z.boolean().optional().default(false),\n  variant_loss: z.boolean().optional().default(false),\n  insufficient_material: z.boolean().optional().default(false),\n  moves: z.array(TablebaseMoveSchema).optional().default([]),\n});\n"],
      names: ["LichessTablebaseResponseSchema", "TablebaseMoveSchema", "z", "object", "uci", "string", "san", "category", "dtz", "number", "nullable", "dtm", "zeroing", "boolean", "optional", "default", "checkmate", "stalemate", "variant_win", "variant_loss", "insufficient_material", "precise_dtz", "union", "dtw", "dtc", "moves", "array"],
      mappings: "AAAA;;;;;;;CAOC;;;;;;;;;;;QAwBYA;eAAAA;;QAjBAC;eAAAA;;;qBALK;AAKX,MAAMA,sBAAsBC,MAAC,CAACC,MAAM,CAAC;IAC1CC,KAAKF,MAAC,CAACG,MAAM;IACbC,KAAKJ,MAAC,CAACG,MAAM;IACbE,UAAUL,MAAC,CAACG,MAAM;IAClBG,KAAKN,MAAC,CAACO,MAAM,GAAGC,QAAQ;IACxBC,KAAKT,MAAC,CAACO,MAAM,GAAGC,QAAQ;IACxBE,SAASV,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IACxCC,WAAWd,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC1CE,WAAWf,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC1CG,aAAahB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC5CI,cAAcjB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC7CK,uBAAuBlB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;AACxD;AAKO,MAAMf,iCAAiCE,MAAC,CAACC,MAAM,CAAC;IACrDI,UAAUL,MAAC,CAACG,MAAM;IAClBG,KAAKN,MAAC,CAACO,MAAM,GAAGC,QAAQ;IACxBC,KAAKT,MAAC,CAACO,MAAM,GAAGC,QAAQ,GAAGI,QAAQ;IACnCO,aAAanB,MAAC,CAACoB,KAAK,CAAC;QAACpB,MAAC,CAACO,MAAM;QAAIP,MAAC,CAACW,OAAO;KAAG,EAAEC,QAAQ;IACxDS,KAAKrB,MAAC,CAACO,MAAM,GAAGC,QAAQ,GAAGI,QAAQ;IACnCU,KAAKtB,MAAC,CAACO,MAAM,GAAGC,QAAQ,GAAGI,QAAQ;IACnCE,WAAWd,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC1CE,WAAWf,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC1CG,aAAahB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC5CI,cAAcjB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IAC7CK,uBAAuBlB,MAAC,CAACW,OAAO,GAAGC,QAAQ,GAAGC,OAAO,CAAC;IACtDU,OAAOvB,MAAC,CAACwB,KAAK,CAACzB,qBAAqBa,QAAQ,GAAGC,OAAO,CAAC,EAAE;AAC3D"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1cf25aa34496dbe588f808f93e7be896fbca1574"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2nhg48k0ee = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2nhg48k0ee();
cov_2nhg48k0ee().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2nhg48k0ee().f[0]++;
  cov_2nhg48k0ee().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2nhg48k0ee().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2nhg48k0ee().s[3]++;
_export(exports, {
  get LichessTablebaseResponseSchema() {
    /* istanbul ignore next */
    cov_2nhg48k0ee().f[1]++;
    cov_2nhg48k0ee().s[4]++;
    return LichessTablebaseResponseSchema;
  },
  get TablebaseMoveSchema() {
    /* istanbul ignore next */
    cov_2nhg48k0ee().f[2]++;
    cov_2nhg48k0ee().s[5]++;
    return TablebaseMoveSchema;
  }
});
const _zod =
/* istanbul ignore next */
(cov_2nhg48k0ee().s[6]++, require("zod"));
const TablebaseMoveSchema =
/* istanbul ignore next */
(cov_2nhg48k0ee().s[7]++, _zod.z.object({
  uci: _zod.z.string(),
  san: _zod.z.string(),
  category: _zod.z.string(),
  dtz: _zod.z.number().nullable(),
  dtm: _zod.z.number().nullable(),
  zeroing: _zod.z.boolean().optional().default(false),
  checkmate: _zod.z.boolean().optional().default(false),
  stalemate: _zod.z.boolean().optional().default(false),
  variant_win: _zod.z.boolean().optional().default(false),
  variant_loss: _zod.z.boolean().optional().default(false),
  insufficient_material: _zod.z.boolean().optional().default(false)
}));
const LichessTablebaseResponseSchema =
/* istanbul ignore next */
(cov_2nhg48k0ee().s[8]++, _zod.z.object({
  category: _zod.z.string(),
  dtz: _zod.z.number().nullable(),
  dtm: _zod.z.number().nullable().optional(),
  precise_dtz: _zod.z.union([_zod.z.number(), _zod.z.boolean()]).optional(),
  dtw: _zod.z.number().nullable().optional(),
  dtc: _zod.z.number().nullable().optional(),
  checkmate: _zod.z.boolean().optional().default(false),
  stalemate: _zod.z.boolean().optional().default(false),
  variant_win: _zod.z.boolean().optional().default(false),
  variant_loss: _zod.z.boolean().optional().default(false),
  insufficient_material: _zod.z.boolean().optional().default(false),
  moves: _zod.z.array(TablebaseMoveSchema).optional().default([])
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,