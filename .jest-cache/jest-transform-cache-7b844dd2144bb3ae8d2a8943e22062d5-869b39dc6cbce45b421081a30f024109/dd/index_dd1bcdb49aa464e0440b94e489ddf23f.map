{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/orchestrators/handlePlayerMove/index.ts"],"sourcesContent":["/**\n * @file Handle player move orchestrator (refactored modular version)\n * @module store/orchestrators/handlePlayerMove\n *\n * @description\n * Clean orchestrator that coordinates player moves using specialized modules.\n * Demonstrates proper separation of concerns with focused responsibilities.\n *\n * @remarks\n * This orchestrator uses the following modules:\n * - MoveValidator: Move validation logic\n * - MoveQualityEvaluator: Tablebase quality analysis\n * - PawnPromotionHandler: Pawn promotion detection and handling\n * - MoveDialogManager: Dialog interactions (error, promotion, confirmation)\n * - OpponentTurnHandler: Opponent move scheduling and execution\n *\n * @example\n * ```typescript\n * const success = await handlePlayerMove(api, { from: \"e2\", to: \"e4\" });\n * ```\n */\n\nimport type { StoreApi } from \"../types\";\nimport type { Move as ChessJsMove } from \"chess.js\";\nimport { chessService } from \"@shared/services/ChessService\";\nimport { ErrorService } from \"@shared/services/ErrorService\";\nimport { getLogger } from \"@shared/services/logging\";\nimport { handleTrainingCompletion } from \"./move.completion\";\n\n// Import specialized modules\nimport { MoveValidator } from \"./MoveValidator\";\nimport { MoveQualityEvaluator } from \"./MoveQualityEvaluator\";\nimport { PawnPromotionHandler } from \"./PawnPromotionHandler\";\nimport { MoveDialogManager } from \"./MoveDialogManager\";\nimport {\n  scheduleOpponentTurn,\n  cancelScheduledOpponentTurn,\n} from \"./OpponentTurnHandler\";\n\n// Re-export types for consumers\nexport type { MoveEvaluation, MoveExecutionResult } from \"./move.types\";\n\n// Re-export opponent turn functions for external use\nexport { cancelScheduledOpponentTurn, scheduleOpponentTurn };\n\n/**\n * Dependencies for the handlePlayerMove orchestrator\n * \n * @interface HandlePlayerMoveDependencies\n * \n * @description\n * Allows dependency injection for better testability and flexibility.\n * All dependencies are optional and will use default implementations if not provided.\n */\nexport interface HandlePlayerMoveDependencies {\n  moveValidator?: MoveValidator;\n  moveQualityEvaluator?: MoveQualityEvaluator;\n  pawnPromotionHandler?: PawnPromotionHandler;\n  moveDialogManager?: MoveDialogManager;\n}\n\n// Default module instances for backward compatibility\nconst defaultDependencies: Required<HandlePlayerMoveDependencies> = {\n  moveValidator: new MoveValidator(),\n  moveQualityEvaluator: new MoveQualityEvaluator(),\n  pawnPromotionHandler: new PawnPromotionHandler(),\n  moveDialogManager: new MoveDialogManager(),\n};\n\n/**\n * Creates a handlePlayerMove function with injected dependencies\n * \n * @param {HandlePlayerMoveDependencies} [dependencies] - Optional custom dependencies\n * @returns {Function} A handlePlayerMove function with the specified dependencies\n * \n * @description\n * Factory function that creates a handlePlayerMove orchestrator with custom dependencies.\n * This enables better testability by allowing mock implementations to be injected.\n * \n * @example\n * ```typescript\n * // For testing with mocks\n * const mockValidator = new MockMoveValidator();\n * const handleMove = createHandlePlayerMove({ moveValidator: mockValidator });\n * \n * // For production (uses defaults)\n * const handleMove = createHandlePlayerMove();\n * ```\n */\nexport function createHandlePlayerMove(dependencies?: HandlePlayerMoveDependencies) {\n  const deps = { ...defaultDependencies, ...dependencies };\n  \n  return async function handlePlayerMoveWithDeps(\n    api: StoreApi,\n    move: ChessJsMove | { from: string; to: string; promotion?: string } | string,\n  ): Promise<boolean> {\n    const { getState, setState } = api;\n    const state = getState();\n\n    // Early validation - check if it's player's turn\n    if (!state.training.isPlayerTurn || state.training.isOpponentThinking) {\n      getLogger().debug(\n        \"[handlePlayerMove] Early return - not player turn or opponent thinking\",\n        {\n          isPlayerTurn: state.training.isPlayerTurn,\n          isOpponentThinking: state.training.isOpponentThinking,\n        },\n      );\n      return false;\n    }\n\n    try {\n      setState((draft) => {\n        draft.ui.loading.position = true;\n      });\n\n      // Step 1: Validate move using MoveValidator\n      const validationResult = await deps.moveValidator.validateMove(move);\n\n      if (!validationResult.isValid) {\n        setState((draft) => {\n          draft.ui.toasts.push({\n            id: Date.now().toString(),\n            message: validationResult.errorMessage || \"Invalid move\",\n            type: \"error\",\n          });\n        });\n        return false;\n      }\n\n      // Step 2: Get position before move for evaluation\n      const fenBefore = chessService.getFen();\n\n      // Step 3: Apply move to game state\n      const validatedMove = chessService.move(move);\n\n      if (!validatedMove) {\n        getLogger().error(\n          \"[handlePlayerMove] Move execution failed after validation\",\n        );\n        return false;\n      }\n\n      const fenAfter = chessService.getFen();\n\n      // Step 4: Handle pawn promotion if applicable\n      const promotionInfo = deps.pawnPromotionHandler.checkPromotion(validatedMove);\n      if (promotionInfo.isPromotion) {\n        getLogger().info(\n          \"[handlePlayerMove] Pawn promotion detected:\",\n          promotionInfo,\n        );\n\n        // Check if promotion leads to auto-win\n        const isAutoWin = await deps.pawnPromotionHandler.evaluatePromotionOutcome(\n          fenAfter,\n          validatedMove.color,\n        );\n\n        if (isAutoWin) {\n          await deps.pawnPromotionHandler.handleAutoWin(api, {\n            ...promotionInfo,\n            isAutoWin: true,\n          });\n          return true; // Training completed\n        }\n\n        // Show success dialog for all queen promotions, not just auto-win\n        if (promotionInfo.promotionPiece === \"q\") {\n          const promotionPieceLabel = deps.pawnPromotionHandler.getPromotionPieceLabel(\n            promotionInfo.promotionPiece,\n          );\n          setState((draft) => {\n            draft.training.moveSuccessDialog = {\n              isOpen: true,\n              promotionPiece: promotionPieceLabel,\n              moveDescription: promotionInfo.moveDescription,\n            };\n          });\n        }\n      }\n\n      // Step 5: Evaluate move quality using MoveQualityEvaluator\n      // Pass current evaluation baseline if available and valid\n      const currentBaseline = state.training.evaluationBaseline;\n      const validBaseline = currentBaseline && \n                           currentBaseline.wdl !== null && \n                           currentBaseline.fen !== null \n        ? { wdl: currentBaseline.wdl, fen: currentBaseline.fen }\n        : null;\n      const qualityResult = await deps.moveQualityEvaluator.evaluateMoveQuality(\n        fenBefore,\n        fenAfter,\n        validatedMove,\n        validBaseline,\n      );\n\n      // Step 6: Show error dialog if move was suboptimal and outcome changed\n      if (qualityResult.shouldShowErrorDialog) {\n        // Set turn state before showing dialog so \"Weiterspielen\" can trigger opponent move\n        const currentTurn = chessService.turn();\n        const trainingColor =\n          state.training.currentPosition?.colorToTrain?.charAt(0);\n        \n        if (currentTurn !== trainingColor) {\n          getLogger().info(\n            \"[handlePlayerMove] Setting turn state for opponent before error dialog\",\n          );\n          setState((draft) => {\n            draft.training.isPlayerTurn = false;\n            draft.training.isOpponentThinking = false; // Not thinking yet, waiting for dialog\n          });\n        }\n        \n        deps.moveDialogManager.showMoveErrorDialog(\n          api,\n          qualityResult.wdlBefore || 0,\n          qualityResult.wdlAfter || 0,\n          qualityResult.bestMove,\n        );\n\n        getLogger().info(\n          \"[handlePlayerMove] Showing error dialog - opponent turn will be scheduled after 'Weiterspielen'\",\n        );\n        return true;\n      }\n\n      // Step 7: Check if game is finished\n      if (chessService.isGameOver()) {\n        await handleTrainingCompletion(api, true);\n        return true;\n      }\n\n      // Step 8: Handle opponent turn if needed\n      const currentTurn = chessService.turn();\n      const trainingColor =\n        state.training.currentPosition?.colorToTrain?.charAt(0);\n\n      if (currentTurn !== trainingColor) {\n        getLogger().debug(\"[handlePlayerMove] Scheduling opponent turn\");\n        setState((draft) => {\n          draft.training.isPlayerTurn = false;\n          draft.training.isOpponentThinking = true;\n        });\n\n        // Schedule opponent turn using dedicated handler\n        scheduleOpponentTurn(api);\n      }\n\n      return true;\n    } catch (error) {\n      getLogger().error(\"[handlePlayerMove] Error in orchestrator:\", error);\n      const userMessage = ErrorService.handleUIError(\n        error instanceof Error ? error : new Error(String(error)),\n        \"MakeUserMove\",\n        {\n          component: \"MakeUserMove\",\n          action: \"orchestrate\",\n        },\n      );\n\n      setState((draft) => {\n        draft.ui.toasts.push({\n          id: Date.now().toString(),\n          message: userMessage,\n          type: \"error\",\n        });\n      });\n\n      getLogger().error(\"[handlePlayerMove] Move handling failed:\", error);\n      return false;\n    } finally {\n      // Clear loading state\n      setState((draft) => {\n        draft.ui.loading.position = false;\n      });\n    }\n  };\n}\n\n/**\n * Handles a player move using modular orchestration (default implementation)\n *\n * @param {StoreApi} api - Store API for accessing state and actions\n * @param {ChessJsMove | {from: string; to: string; promotion?: string} | string} move - The move to make\n * @returns {Promise<boolean>} Whether the move was successful\n *\n * @remarks\n * This is the default implementation using standard dependencies.\n * For testing or custom implementations, use createHandlePlayerMove() instead.\n * \n * Modular flow using specialized handlers:\n * 1. Validate move using MoveValidator\n * 2. Apply move and update state\n * 3. Handle pawn promotion with PawnPromotionHandler\n * 4. Evaluate quality using MoveQualityEvaluator\n * 5. Show dialogs using MoveDialogManager\n * 6. Handle completion or opponent turn with OpponentTurnHandler\n * \n * @example\n * ```typescript\n * // Standard usage\n * const success = await handlePlayerMove(api, { from: \"e2\", to: \"e4\" });\n * ```\n */\nexport const handlePlayerMove = createHandlePlayerMove();"],"names":["cancelScheduledOpponentTurn","createHandlePlayerMove","handlePlayerMove","scheduleOpponentTurn","defaultDependencies","moveValidator","MoveValidator","moveQualityEvaluator","MoveQualityEvaluator","pawnPromotionHandler","PawnPromotionHandler","moveDialogManager","MoveDialogManager","dependencies","deps","handlePlayerMoveWithDeps","api","move","getState","setState","state","training","isPlayerTurn","isOpponentThinking","getLogger","debug","draft","ui","loading","position","validationResult","validateMove","isValid","toasts","push","id","Date","now","toString","message","errorMessage","type","fenBefore","chessService","getFen","validatedMove","error","fenAfter","promotionInfo","checkPromotion","isPromotion","info","isAutoWin","evaluatePromotionOutcome","color","handleAutoWin","promotionPiece","promotionPieceLabel","getPromotionPieceLabel","moveSuccessDialog","isOpen","moveDescription","currentBaseline","evaluationBaseline","validBaseline","wdl","fen","qualityResult","evaluateMoveQuality","shouldShowErrorDialog","currentTurn","turn","trainingColor","currentPosition","colorToTrain","charAt","showMoveErrorDialog","wdlBefore","wdlAfter","bestMove","isGameOver","handleTrainingCompletion","userMessage","ErrorService","handleUIError","Error","String","component","action"],"mappings":"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"}