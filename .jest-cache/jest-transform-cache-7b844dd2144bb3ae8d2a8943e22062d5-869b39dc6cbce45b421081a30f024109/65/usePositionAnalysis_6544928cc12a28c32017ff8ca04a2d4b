193df9d8f181fe95957e8d7aee740db5
/**
 * Position Analysis hook using TablebaseService directly
 * Acts as adapter between TablebaseService and UI components
 *
 * @remarks
 * This hook manages the lifecycle of position evaluations:
 * - Debounces rapid position changes to avoid API spam
 * - Cancels in-flight requests when position changes
 * - Caches evaluations for the session
 * - Provides error handling with German user messages
 *
 * @performance
 * - Debouncing: 300ms delay before evaluation
 * - Request cancellation: <1ms using AbortController
 * - Memory: Stores up to 100 evaluations per session
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "usePositionAnalysis", {
    enumerable: true,
    get: function() {
        return usePositionAnalysis;
    }
});
const _react = require("react");
const _AnalysisService = require("../services/AnalysisService");
const _ErrorService = require("../services/ErrorService");
const _Logger = require("../services/logging/Logger");
const logger = new _Logger.Logger();
function usePositionAnalysis({ fen, isEnabled }) {
    const [evaluations, setEvaluations] = (0, _react.useState)([]);
    const [lastEvaluation, setLastEvaluation] = (0, _react.useState)(null);
    const [isEvaluating, setIsEvaluating] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    const abortControllerRef = (0, _react.useRef)(null);
    const addEvaluation = (0, _react.useCallback)((evaluation)=>{
        setEvaluations((prev)=>[
                ...prev,
                evaluation
            ]);
        setLastEvaluation(evaluation);
    }, []);
    const clearEvaluations = (0, _react.useCallback)(()=>{
        setEvaluations([]);
        setLastEvaluation(null);
        setError(null);
    }, []);
    (0, _react.useEffect)(()=>{
        logger.info("[usePositionAnalysis] Effect triggered", {
            isEnabled,
            fen: (fen === null || fen === void 0 ? void 0 : fen.slice(0, 20)) + "..."
        });
        if (!isEnabled || !fen) {
            logger.debug("[usePositionAnalysis] Skipping evaluation - not enabled or no FEN");
            return;
        }
        // Cancel any pending evaluation
        if (abortControllerRef.current) {
            logger.debug("[usePositionAnalysis] Aborting previous evaluation");
            abortControllerRef.current.abort();
        }
        /**
     * Evaluate current position using tablebase
     * @performance Typical latency: 50-200ms (cached: <1ms)
     */ const evaluatePosition = async ()=>{
            const abortController = new AbortController();
            abortControllerRef.current = abortController;
            setIsEvaluating(true);
            setError(null);
            logger.info("[usePositionAnalysis] Starting evaluation");
            try {
                var _evaluation_tablebase_topMoves, _evaluation_tablebase;
                // Get position analysis from the centralized service
                const evaluation = await _AnalysisService.analysisService.getPositionAnalysisOrEmpty(fen, 5);
                if (abortController.signal.aborted) {
                    return;
                }
                logger.info("[usePositionAnalysis] Got tablebase evaluation", {
                    hasTablebase: !!evaluation.tablebase,
                    topMovesCount: (_evaluation_tablebase = evaluation.tablebase) === null || _evaluation_tablebase === void 0 ? void 0 : (_evaluation_tablebase_topMoves = _evaluation_tablebase.topMoves) === null || _evaluation_tablebase_topMoves === void 0 ? void 0 : _evaluation_tablebase_topMoves.length
                });
                if (!abortController.signal.aborted) {
                    addEvaluation(evaluation);
                }
            } catch (err) {
                if (err.name !== "AbortError") {
                    var _abortControllerRef_current;
                    logger.error("[usePositionAnalysis] Evaluation failed", err);
                    const userMessage = _ErrorService.ErrorService.handleTablebaseError(err, {
                        component: "usePositionAnalysis",
                        action: "evaluatePosition",
                        additionalData: {
                            fen
                        }
                    });
                    // Only set error if component is still mounted and request not aborted
                    if (!((_abortControllerRef_current = abortControllerRef.current) === null || _abortControllerRef_current === void 0 ? void 0 : _abortControllerRef_current.signal.aborted)) {
                        setError(userMessage);
                    }
                } else {
                    logger.debug("[usePositionAnalysis] Evaluation aborted");
                }
            } finally{
                var _abortControllerRef_current1;
                if (!((_abortControllerRef_current1 = abortControllerRef.current) === null || _abortControllerRef_current1 === void 0 ? void 0 : _abortControllerRef_current1.signal.aborted)) {
                    setIsEvaluating(false);
                }
            }
        };
        evaluatePosition();
        return ()=>{
            if (abortControllerRef.current) {
                abortControllerRef.current.abort();
            }
        };
    }, [
        fen,
        isEnabled,
        addEvaluation
    ]);
    return {
        evaluations,
        lastEvaluation,
        isEvaluating,
        error,
        addEvaluation,
        clearEvaluations
    };
}

//# sourceMappingURL=data:application/json;base64,