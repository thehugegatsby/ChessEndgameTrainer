{"version":3,"names":["cov_17mw7yy3a9","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","tablebaseService","logger","_logging","getLogger","setContext","TablebaseService","getEvaluation","fen","entry","_getOrFetchTablebaseEntry","isAvailable","result","wdl","position","dtz","dtm","category","precise","evaluation","error","Error","message","getTopMoves","limit","_sortedMoves_","moves","length","sortedMoves","sort","a","_a_dtm","_ref","aDtx","_b_dtm","_ref1","bDtx","Math","abs","_a_dtm1","_ref2","_b_dtm1","_ref3","_sortedMoves__wdl","bestWdl","bestMoves","filter","move","topInternalMoves","slice","topMoves","map","uci","san","info","requestedLimit","totalMovesFromAPI","movesWithBestWdl","returnedMoves","returnedMoveDetails","m","sortingApplied","_normalizeFen","split","join","validation","_fenValidator","validateAndSanitizeFen","isValid","errors","sanitizedFen","sanitized","normalizedFen","pieceCount","_countPieces","maxPieces","debug","cached","cache","get","expiry","Date","now","metrics","recordCacheHit","recordCacheMiss","pending","pendingRequests","recordDeduplication","request","_fetchAndTransform","promiseWithCleanup","finally","delete","set","MAX_RETRIES","recordApiCall","attempt","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","_constants","APP_CONFIG","TABLEBASE_API_URL","encodeURIComponent","signal","clearTimeout","ok","recordApiError","status","_cacheEntry","delay","min","pow","random","warn","Promise","resolve","responseData","json","validatedData","_tablebaseSchemas","LichessTablebaseResponseSchema","parse","_zod","z","ZodError","issues","received","_transformApiResponse","positionCategory","moveCount","errorMessage","startsWith","api","isBlackToMove","positionWdl","_categoryToWdl","apiMove","moveCategory","_invertCategory","moveWdl","zeroing","_api_dtm","precise_dtz","_getEvaluationText","timestamp","cacheTtl","size","key","value","entries","piecesPart","replace","clearCache","clear","getMetrics","_define_property","Map","cacheHits","cacheMisses","apiCalls","apiErrors","requestsDeduplicated","total","cacheHitRate","totalApiCalls","errorBreakdown","Object","fromEntries","dedupedRequests"],"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/TablebaseService.ts"],"sourcesContent":["/**\n * Optimized Tablebase Service - Single API Call Architecture\n *\n * @remarks\n * This service uses the Lichess Tablebase API's \"moves\" field to get all move\n * evaluations in a single API call, instead of making N+1 calls.\n *\n * Key improvements:\n * - 1 API call instead of 20-40 for getTopMoves\n * - Caches complete tablebase entries including moves\n * - Correct WDL perspective handling\n * - No chess.js dependency for move generation\n * - FEN normalization for improved cache hit rate\n *\n * Important limitations:\n * - DTM (Distance to Mate) values are only available for positions with â‰¤5 pieces\n * - Positions with 6-7 pieces only have DTZ (Distance to Zeroing) values\n * - Rate limiting applies (~130 rapid requests trigger limits)\n */\n\nimport { validateAndSanitizeFen } from \"../utils/fenValidator\";\nimport { getLogger } from \"../services/logging\";\nimport { APP_CONFIG } from \"@/config/constants\";\nimport { z } from \"zod\";\nimport { LichessTablebaseResponseSchema } from \"../types/tablebaseSchemas\";\nimport type {\n  LichessTablebaseResponse,\n  TablebaseEntry,\n  TablebaseCategory,\n  TablebaseCacheEntry,\n  TablebaseMoveInternal,\n  TablebaseMove,\n  TablebaseResult,\n  TablebaseEvaluation,\n  TablebaseMovesResult,\n} from \"../types/tablebase\";\n\n// Re-export types for backward compatibility\nexport type {\n  TablebaseMove,\n  TablebaseResult,\n  TablebaseEvaluation,\n  TablebaseMovesResult,\n};\n\nconst logger = getLogger().setContext(\"TablebaseService\");\n\nclass TablebaseService {\n  private cache = new Map<string, TablebaseCacheEntry>();\n  private readonly maxPieces = 7; // Lichess uses 7-piece Syzygy tablebases\n  private readonly cacheTtl = 300000; // 5 minutes\n  private pendingRequests = new Map<string, Promise<TablebaseEntry | null>>();\n\n  // Metrics for monitoring\n  private metrics = {\n    cacheHits: 0,\n    cacheMisses: 0,\n    apiCalls: 0,\n    apiErrors: new Map<number, number>(),\n    requestsDeduplicated: 0,\n\n    recordCacheHit() {\n      this.cacheHits++;\n    },\n    recordCacheMiss() {\n      this.cacheMisses++;\n    },\n    recordApiCall() {\n      this.apiCalls++;\n    },\n    recordApiError(status: number) {\n      this.apiErrors.set(status, (this.apiErrors.get(status) || 0) + 1);\n    },\n    recordDeduplication() {\n      this.requestsDeduplicated++;\n    },\n\n    getMetrics() {\n      const total = this.cacheHits + this.cacheMisses;\n      return {\n        cacheHitRate: total > 0 ? this.cacheHits / total : 0,\n        totalApiCalls: this.apiCalls,\n        errorBreakdown: Object.fromEntries(this.apiErrors),\n        dedupedRequests: this.requestsDeduplicated,\n      };\n    },\n  };\n\n  /**\n   * Get tablebase evaluation for a position\n   * @param {string} fen - Position in FEN notation\n   * @returns {Promise<TablebaseEvaluation>} Evaluation result\n   *\n   * @example\n   * const eval = await tablebaseService.getEvaluation(fen);\n   * if (eval.isAvailable) {\n   *   logger.info(`Position is ${eval.result.category}`);\n   * }\n   */\n  async getEvaluation(fen: string): Promise<TablebaseEvaluation> {\n    try {\n      const entry = await this._getOrFetchTablebaseEntry(fen);\n\n      if (!entry) {\n        return { isAvailable: false };\n      }\n\n      return {\n        isAvailable: true,\n        result: {\n          wdl: entry.position.wdl,\n          dtz: entry.position.dtz,\n          dtm: entry.position.dtm,\n          category: entry.position.category,\n          precise: entry.position.precise,\n          evaluation: entry.position.evaluation,\n        },\n      };\n    } catch (error) {\n      logger.error(\"Failed to get evaluation\", error as Error, { fen });\n      return {\n        isAvailable: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  /**\n   * Get top moves from tablebase\n   * @param {string} fen - Position in FEN notation\n   * @param {number} limit - Maximum number of moves to return\n   * @returns {Promise<TablebaseMovesResult>} Top moves with evaluations\n   *\n   * @remarks\n   * This now makes only ONE API call and returns moves from the cached entry.\n   * The Lichess API already provides all moves sorted by quality.\n   *\n   * @example\n   * const moves = await tablebaseService.getTopMoves(fen, 5);\n   * if (moves.isAvailable) {\n   *   logger.info(`Best move: ${moves.moves[0].san}`);\n   * }\n   */\n  async getTopMoves(\n    fen: string,\n    limit: number = 3,\n  ): Promise<TablebaseMovesResult> {\n    try {\n      const entry = await this._getOrFetchTablebaseEntry(fen);\n\n      if (!entry || !entry.moves.length) {\n        return {\n          isAvailable: false,\n          error: \"No moves available for this position\",\n        };\n      }\n\n      // Sort moves by quality (WDL value, then DTZ)\n      // Higher WDL = better for the player, then lower DTZ = faster to goal\n      const sortedMoves = [...entry.moves].sort((a, b) => {\n        // Primary sort: by WDL (higher is better)\n        if (a.wdl !== b.wdl) {\n          return b.wdl - a.wdl;\n        }\n\n        // Secondary sort: for moves that are \"wins\" from opponent's perspective after our move,\n        // we want to choose the move that gives the opponent the LONGEST path to win (best defense)\n        if (a.wdl > 0) {\n          // These are \"winning\" positions for the opponent after our move\n          // For optimal defense: prefer moves that give opponent HIGHER DTM (slower win for them)\n          const aDtx = a.dtm ?? a.dtz ?? 0;\n          const bDtx = b.dtm ?? b.dtz ?? 0;\n          return Math.abs(aDtx) - Math.abs(bDtx); // FIXED: Lower DTM first for faster wins\n        } else if (a.wdl < 0) {\n          // Losing - prefer slower loss (larger absolute DTM value)\n          const aDtx = a.dtm ?? a.dtz ?? 0;\n          const bDtx = b.dtm ?? b.dtz ?? 0;\n          return Math.abs(bDtx) - Math.abs(aDtx);\n        }\n\n        // Draw - prefer maintaining draw (DTZ doesn't matter much)\n        return 0;\n      });\n\n      // Take only the best moves (same WDL as the absolute best)\n      const bestWdl = sortedMoves[0]?.wdl ?? 0;\n      const bestMoves = sortedMoves.filter((move) => move.wdl === bestWdl);\n\n      // Return up to 'limit' of the best moves\n      const topInternalMoves = bestMoves.slice(0, limit);\n\n      // Convert internal moves to external format (without zeroing field)\n      const topMoves: TablebaseMove[] = topInternalMoves.map((move) => ({\n        uci: move.uci,\n        san: move.san,\n        wdl: move.wdl,\n        dtz: move.dtz,\n        dtm: move.dtm,\n        category: move.category,\n      }));\n\n      // ENHANCED DEBUG LOGGING\n      logger.info(\"TablebaseService.getTopMoves DETAILED OUTPUT\", {\n        fen,\n        requestedLimit: limit,\n        totalMovesFromAPI: entry.moves.length,\n        bestWdl,\n        movesWithBestWdl: bestMoves.length,\n        returnedMoves: topMoves.length,\n        returnedMoveDetails: topMoves.map((m) => ({\n          san: m.san,\n          wdl: m.wdl,\n          dtm: m.dtm,\n          category: m.category,\n        })),\n        sortingApplied:\n          bestWdl < 0\n            ? \"Defensive (highest DTM first)\"\n            : bestWdl > 0\n              ? \"Offensive (lowest DTM first)\"\n              : \"Draw\",\n      });\n\n      return {\n        isAvailable: true,\n        moves: topMoves,\n      };\n    } catch (error) {\n      logger.error(\"Failed to get top moves\", error as Error, { fen });\n      return {\n        isAvailable: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  /**\n   * Normalize FEN for tablebase lookup\n   * @private\n   * @param {string} fen - Full FEN string\n   * @returns {string} Normalized FEN (first 4 fields only)\n   *\n   * @remarks\n   * Tablebase only cares about:\n   * 1. Piece placement\n   * 2. Side to move\n   * 3. Castling rights\n   * 4. En passant square\n   *\n   * Halfmove clock and fullmove number are irrelevant for tablebase lookup\n   */\n  private _normalizeFen(fen: string): string {\n    return fen.split(\" \").slice(0, 4).join(\" \");\n  }\n\n  /**\n   * Core method to fetch or retrieve cached tablebase data\n   * @private\n   * @param {string} fen - Position to look up\n   * @returns {Promise<TablebaseEntry | null>} Complete tablebase data or null\n   *\n   * @remarks\n   * This method:\n   * 1. Validates and normalizes the FEN\n   * 2. Checks the cache\n   * 3. Makes ONE API call if needed\n   * 4. Transforms the response to our internal format\n   * 5. Caches the complete entry including all moves\n   */\n  private async _getOrFetchTablebaseEntry(\n    fen: string,\n  ): Promise<TablebaseEntry | null> {\n    // Validate FEN\n    const validation = validateAndSanitizeFen(fen);\n    if (!validation.isValid) {\n      throw new Error(`Invalid FEN: ${validation.errors.join(\", \")}`);\n    }\n    const sanitizedFen = validation.sanitized;\n    const normalizedFen = this._normalizeFen(sanitizedFen);\n\n    // Check piece count\n    const pieceCount = this._countPieces(sanitizedFen);\n    if (pieceCount > this.maxPieces) {\n      logger.debug(\"Too many pieces for tablebase\", {\n        fen: sanitizedFen,\n        pieceCount,\n      });\n      return null;\n    }\n\n    // Check cache with normalized FEN\n    const cached = this.cache.get(normalizedFen);\n    if (cached && cached.expiry > Date.now()) {\n      logger.debug(\"Cache hit for tablebase entry\", { fen: normalizedFen });\n      this.metrics.recordCacheHit();\n      return cached.entry;\n    }\n    this.metrics.recordCacheMiss();\n\n    // Check if request already in flight (request deduplication)\n    const pending = this.pendingRequests.get(normalizedFen);\n    if (pending) {\n      logger.debug(\"Request already in flight, waiting\", {\n        fen: normalizedFen,\n      });\n      this.metrics.recordDeduplication();\n      return pending;\n    }\n\n    // Create new request with proper cleanup on both success and failure\n    const request = this._fetchAndTransform(sanitizedFen, normalizedFen);\n\n    // Store the promise with cleanup handler\n    const promiseWithCleanup = request.finally(() => {\n      // Remove from pending requests on both success and failure\n      this.pendingRequests.delete(normalizedFen);\n    });\n\n    this.pendingRequests.set(normalizedFen, promiseWithCleanup);\n    return promiseWithCleanup;\n  }\n\n  /**\n   * Fetch from API and transform response\n   * @private\n   * @param {string} fen - Original sanitized FEN for API call\n   * @param {string} normalizedFen - Normalized FEN for caching\n   */\n  private async _fetchAndTransform(\n    fen: string,\n    normalizedFen: string,\n  ): Promise<TablebaseEntry | null> {\n    const MAX_RETRIES = 3;\n    this.metrics.recordApiCall();\n\n    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {\n      try {\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n        // Always request moves to get complete tablebase entry\n        const response = await fetch(\n          `${APP_CONFIG.TABLEBASE_API_URL}/standard?fen=${encodeURIComponent(fen)}&moves=20`,\n          { signal: controller.signal },\n        );\n\n        clearTimeout(timeoutId);\n\n        if (!response.ok) {\n          this.metrics.recordApiError(response.status);\n\n          if (response.status === 404) {\n            // Position not in tablebase - cache this to avoid repeated queries\n            logger.info(\"Position not in tablebase, caching null\", {\n              fen: normalizedFen,\n            });\n            this._cacheEntry(normalizedFen, null);\n            return null;\n          }\n\n          // Rate limiting - retry with exponential backoff\n          if (response.status === 429) {\n            const delay = Math.min(\n              1000 * Math.pow(2, attempt) + Math.random() * 1000,\n              10000,\n            );\n            logger.warn(`Rate limited, retrying in ${delay}ms`, {\n              attempt,\n              delay,\n            });\n            await new Promise((resolve) => setTimeout(resolve, delay));\n            continue;\n          }\n\n          // Don't retry other client errors\n          if (response.status >= 400 && response.status < 500) {\n            throw new Error(`Client error: ${response.status}`);\n          }\n\n          throw new Error(`API error: ${response.status}`);\n        }\n\n        const responseData = await response.json();\n\n        // Validate the API response structure\n        let validatedData: LichessTablebaseResponse;\n        try {\n          validatedData = LichessTablebaseResponseSchema.parse(responseData);\n        } catch (error) {\n          if (error instanceof z.ZodError) {\n            logger.error(\"Malformed Lichess API response\", {\n              fen,\n              errors: error.issues,\n              received: responseData,\n            });\n            throw new Error(\"Malformed API response\");\n          }\n          throw error;\n        }\n\n        // Transform to our internal format\n        const entry = this._transformApiResponse(validatedData, fen);\n\n        // Cache the transformed entry with normalized FEN\n        this._cacheEntry(normalizedFen, entry);\n\n        logger.info(\"Successfully fetched and cached tablebase entry\", {\n          fen,\n          positionCategory: entry.position.category,\n          moveCount: entry.moves.length,\n        });\n\n        return entry;\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : \"Unknown error\";\n        logger.warn(`Tablebase API attempt ${attempt}/${MAX_RETRIES} failed`, {\n          fen,\n          error: errorMessage,\n        });\n\n        // Don't retry client errors\n        if (\n          error instanceof Error &&\n          error.message.startsWith(\"Client error\")\n        ) {\n          throw error;\n        }\n\n        // Last attempt failed\n        if (attempt === MAX_RETRIES) {\n          logger.error(\"API call failed after max retries\", { error, fen });\n          if (error instanceof Error && error.name === \"AbortError\") {\n            throw new Error(`Request timeout after ${MAX_RETRIES} retries`);\n          }\n          throw new Error(\n            `Max retries (${MAX_RETRIES}) exceeded. Last error: ${errorMessage}`,\n          );\n        }\n\n        // Wait before retry with exponential backoff\n        await new Promise((resolve) => setTimeout(resolve, 250 * attempt));\n      }\n    }\n\n    // Should never reach here\n    throw new Error(\"Unexpected error in fetch loop\");\n  }\n\n  /**\n   * Transform Lichess API response to internal format\n   * @private\n   *\n   * @remarks\n   * Critical transformations:\n   * 1. Convert category strings to typed categories\n   * 2. Calculate WDL values from categories\n   * 3. Invert move evaluations to player-to-move perspective\n   * 4. Handle Black's perspective correctly\n   */\n  private _transformApiResponse(\n    api: LichessTablebaseResponse,\n    fen: string,\n  ): TablebaseEntry {\n    const isBlackToMove = fen.split(\" \")[1] === \"b\";\n\n    // Transform position evaluation\n    const positionCategory = api.category as TablebaseCategory;\n    let positionWdl = this._categoryToWdl(positionCategory);\n\n    // WDL is already from the perspective of the side to move\n    // No need to negate for Black positions - the API gives the result from the mover's perspective\n    // Handle -0 case to ensure it's just 0\n    if (positionWdl === -0) {\n      positionWdl = 0;\n    }\n\n    // Transform moves with correct perspective (moves array guaranteed by schema)\n    const moves: TablebaseMoveInternal[] = (api.moves || []).map((apiMove) => {\n      // API gives evaluation AFTER the move (from opponent's perspective)\n      // We need to invert it to get the evaluation FROM the mover's perspective\n      const moveCategory = this._invertCategory(\n        apiMove.category,\n      ) as TablebaseCategory;\n      let moveWdl = this._categoryToWdl(moveCategory);\n\n      // For Black, we need to negate WDL since it's from White's perspective\n      if (isBlackToMove) {\n        moveWdl = -moveWdl;\n      }\n\n      return {\n        uci: apiMove.uci,\n        san: apiMove.san,\n        category: moveCategory,\n        wdl: moveWdl,\n        dtz: apiMove.dtz,\n        dtm: apiMove.dtm,\n        zeroing: apiMove.zeroing || false,\n      };\n    });\n\n    return {\n      position: {\n        category: positionCategory,\n        wdl: positionWdl,\n        dtz: api.dtz,\n        dtm: api.dtm ?? null,\n        precise: api.precise_dtz !== undefined && api.precise_dtz !== null,\n        evaluation: this._getEvaluationText(positionCategory, api.dtz),\n      },\n      moves,\n      fen,\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Cache an entry with TTL\n   * @private\n   */\n  private _cacheEntry(fen: string, entry: TablebaseEntry | null): void {\n    this.cache.set(fen, {\n      entry,\n      expiry: Date.now() + this.cacheTtl,\n    });\n\n    // Clean up old entries if cache is getting large\n    if (this.cache.size > 200) {\n      const now = Date.now();\n      for (const [key, value] of this.cache.entries()) {\n        if (value.expiry < now) {\n          this.cache.delete(key);\n        }\n      }\n    }\n  }\n\n  /**\n   * Convert category to WDL value\n   * @private\n   */\n  private _categoryToWdl(category: string): number {\n    switch (category) {\n      case \"win\":\n        return 2;\n      case \"cursed-win\":\n      case \"maybe-win\":\n        return 1;\n      case \"draw\":\n      case \"unknown\":\n        return 0;\n      case \"blessed-loss\":\n      case \"maybe-loss\":\n        return -1;\n      case \"loss\":\n        return -2;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Invert category for perspective change\n   * @private\n   */\n  private _invertCategory(category: string): string {\n    switch (category) {\n      case \"win\":\n        return \"loss\";\n      case \"loss\":\n        return \"win\";\n      case \"cursed-win\":\n        return \"blessed-loss\";\n      case \"blessed-loss\":\n        return \"cursed-win\";\n      case \"maybe-win\":\n        return \"maybe-loss\";\n      case \"maybe-loss\":\n        return \"maybe-win\";\n      case \"draw\":\n      case \"unknown\":\n      default:\n        return category;\n    }\n  }\n\n  /**\n   * Generate evaluation text in German\n   * @private\n   */\n  private _getEvaluationText(category: string, dtz?: number | null): string {\n    switch (category) {\n      case \"win\":\n        return dtz\n          ? `Gewinn in ${Math.abs(dtz)} ZÃ¼gen`\n          : \"Theoretisch gewonnen\";\n      case \"cursed-win\":\n        return dtz\n          ? `Gewinn in ${Math.abs(dtz)} ZÃ¼gen (50-Zug-Regel)`\n          : \"Gewinn mit 50-Zug-Regel\";\n      case \"maybe-win\":\n        return \"Wahrscheinlicher Gewinn\";\n      case \"draw\":\n        return \"Theoretisches Remis\";\n      case \"blessed-loss\":\n        return dtz\n          ? `Verlust in ${Math.abs(dtz)} ZÃ¼gen (50-Zug-Regel)`\n          : \"Verlust mit 50-Zug-Regel\";\n      case \"maybe-loss\":\n        return \"Wahrscheinlicher Verlust\";\n      case \"loss\":\n        return dtz\n          ? `Verlust in ${Math.abs(dtz)} ZÃ¼gen`\n          : \"Theoretisch verloren\";\n      case \"unknown\":\n        return \"Unbekannte Bewertung\";\n      default:\n        return \"Bewertung nicht verfÃ¼gbar\";\n    }\n  }\n\n  /**\n   * Count pieces in FEN\n   * @private\n   */\n  private _countPieces(fen: string): number {\n    const piecesPart = fen.split(\" \")[0];\n    return piecesPart.replace(/[^a-zA-Z]/g, \"\").length;\n  }\n\n  /**\n   * Clear cache (for testing)\n   */\n  clearCache(): void {\n    this.cache.clear();\n    this.pendingRequests.clear();\n  }\n\n  /**\n   * Get service metrics for monitoring\n   * @returns {object} Current metrics\n   */\n  getMetrics() {\n    return this.metrics.getMetrics();\n  }\n}\n\n/**\n * Singleton instance of optimized TablebaseService\n *\n * @example\n * import { tablebaseService } from '@shared/services/TablebaseService';\n *\n * // Get position evaluation (1 API call)\n * const eval = await tablebaseService.getEvaluation(fen);\n *\n * // Get top moves (uses same API call, no additional requests!)\n * const moves = await tablebaseService.getTopMoves(fen, 5);\n */\nexport const tablebaseService = new TablebaseService();\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;GAkBC;;AAAA;AAAA,SAAAA,ecAAA;MAAAC,OAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,KAAA;MAAAC,QAAA;IAAA;IAAAC,eAAA;IAAA3B,IAAA;EAAA;EAAA,IAAA4B,QAAA,GAAA3B,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAyB,QAAA,CAAA7B,IAAA,KAAA6B,QAAA,CAAA7B,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAA4B,QAAA,CAAA7B,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAyB,cAAA,GAAAD,QAAA,CAAA7B,IAAA;EAAA;;;;;;;;;;;;;;;+BAkoBY;;;;;;WAAA+B,gBAAA;;;;;kCAhoB0B;;;kCACb;;;kCACC;;;kCACT;;;kCAC6B;;;;;;;;;;;;;;;;;;;;;;;;;AAqB/C,MAAMC,MAAA;AAAA;AAAA,CAAAjC,cAAA,GAAAoB,CAAA,QAAS,IAAAc,QAAA,CAAAC,SAAS,IAAGC,UAAU,CAAC;AAEtC,MAAMC,gBAAA;EAyCJ;;;;;;;;;;;EAWA,MAAMC,cAAcC,GAAW,EAAgC;IAAA;IAAAvC,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC7D,IAAI;MACF,MAAMoB,KAAA;MAAA;MAAA,CAAAxC,cAAA,GAAAoB,CAAA,QAAQ,MAAM,IAAI,CAACqB,yBAAyB,CAACF,GAAA;MAAA;MAAAvC,cAAA,GAAAoB,CAAA;MAEnD,IAAI,CAACoB,KAAA,EAAO;QAAA;QAAAxC,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACV,OAAO;UAAEsB,WAAA,EAAa;QAAM;MAC9B;MAAA;MAAA;QAAA1C,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAEA,OAAO;QACLsB,WAAA,EAAa;QACbC,MAAA,EAAQ;UACNC,GAAA,EAAKJ,KAAA,CAAMK,QAAQ,CAACD,GAAG;UACvBE,GAAA,EAAKN,KAAA,CAAMK,QAAQ,CAACC,GAAG;UACvBC,GAAA,EAAKP,KAAA,CAAMK,QAAQ,CAACE,GAAG;UACvBC,QAAA,EAAUR,KAAA,CAAMK,QAAQ,CAACG,QAAQ;UACjCC,OAAA,EAAST,KAAA,CAAMK,QAAQ,CAACI,OAAO;UAC/BC,UAAA,EAAYV,KAAA,CAAMK,QAAQ,CAACK;QAC7B;MACF;IACF,EAAE,OAAOC,KAAA,EAAO;MAAA;MAAAnD,cAAA,GAAAoB,CAAA;MACda,MAAA,CAAOkB,KAAK,CAAC,4BAA4BA,KAAA,EAAgB;QAAEZ;MAAI;MAAA;MAAAvC,cAAA,GAAAoB,CAAA;MAC/D,OAAO;QACLsB,WAAA,EAAa;QACbS,KAAA,EAAOA,KAAA,YAAiBC,KAAA;QAAA;QAAA,CAAApD,cAAA,GAAAsB,CAAA,UAAQ6B,KAAA,CAAME,OAAO;QAAA;QAAA,CAAArD,cAAA,GAAAsB,CAAA,UAAG;MAClD;IACF;EACF;EAEA;;;;;;;;;;;;;;;;EAgBA,MAAMgC,YACJf,GAAW,EACXgB,KAAA;EAAA;EAAA,CAAAvD,cAAA,GAAAsB,CAAA,UAAgB,CAAC,GACc;IAAA;IAAAtB,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC/B,IAAI;UAsCcoC,aAAA;MArChB,MAAMhB,KAAA;MAAA;MAAA,CAAAxC,cAAA,GAAAoB,CAAA,QAAQ,MAAM,IAAI,CAACqB,yBAAyB,CAACF,GAAA;MAAA;MAAAvC,cAAA,GAAAoB,CAAA;MAEnD;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,WAACkB,KAAA;MAAA;MAAA,CAAAxC,cAAA,GAAAsB,CAAA,UAAS,CAACkB,KAAA,CAAMiB,KAAK,CAACC,MAAM,GAAE;QAAA;QAAA1D,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACjC,OAAO;UACLsB,WAAA,EAAa;UACbS,KAAA,EAAO;QACT;MACF;MAAA;MAAA;QAAAnD,cAAA,GAAAsB,CAAA;MAAA;MAEA;MACA;MACA,MAAMqC,WAAA;MAAA;MAAA,CAAA3D,cAAA,GAAAoB,CAAA,QAAc,C,GAAIoB,KAAA,CAAMiB,KAAK,CAAC,CAACG,IAAI,CAAC,CAACC,CAAA,EAAGvC,CAAA;QAAA;QAAAtB,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAC5C;QACA,IAAIyC,CAAA,CAAEjB,GAAG,KAAKtB,CAAA,CAAEsB,GAAG,EAAE;UAAA;UAAA5C,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACnB,OAAOE,CAAA,CAAEsB,GAAG,GAAGiB,CAAA,CAAEjB,GAAG;QACtB;QAAA;QAAA;UAAA5C,cAAA,GAAAsB,CAAA;QAAA;QAEA;QACA;QAAAtB,cAAA,GAAAoB,CAAA;QACA,IAAIyC,CAAA,CAAEjB,GAAG,GAAG,GAAG;UAAA;UAAA5C,cAAA,GAAAsB,CAAA;cAGAwC,MAAA,EAAAC,IAAA;UAFb;UACA;UACA,MAAMC,IAAA;UAAA;UAAA,CAAAhE,cAAA,GAAAoB,CAAA;UAAO;UAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAyC,IAAA;UAAA;UAAA,CAAA/D,cAAA,GAAAsB,CAAA,YAAAwC,MAAA,GAAAD,CAAA,CAAEd,GAAG;UAAA;UAAA,CAAA/C,cAAA,GAAAsB,CAAA,WAALwC,MAAA;UAAA;UAAA,CAAA9D,cAAA,GAAAsB,CAAA,WAAAwC,MAAA;UAAA;UAAA,CAAA9D,cAAA,GAAAsB,CAAA,WAASuC,CAAA,CAAEf,GAAG;UAAA;UAAA,CAAA9C,cAAA,GAAAsB,CAAA,UAAdyC,IAAA;UAAA;UAAA,CAAA/D,cAAA,GAAAsB,CAAA,UAAAyC,IAAA;UAAA;UAAA,CAAA/D,cAAA,GAAAsB,CAAA,UAAkB;cAClB2C,MAAA,EAAAC,KAAA;UAAb,MAAMC,IAAA;UAAA;UAAA,CAAAnE,cAAA,GAAAoB,CAAA;UAAO;UAAA,CAAApB,cAAA,GAAAsB,CAAA,YAAA4C,KAAA;UAAA;UAAA,CAAAlE,cAAA,GAAAsB,CAAA,YAAA2C,MAAA,GAAA3C,CAAA,CAAEyB,GAAG;UAAA;UAAA,CAAA/C,cAAA,GAAAsB,CAAA,WAAL2C,MAAA;UAAA;UAAA,CAAAjE,cAAA,GAAAsB,CAAA,WAAA2C,MAAA;UAAA;UAAA,CAAAjE,cAAA,GAAAsB,CAAA,WAASA,CAAA,CAAEwB,GAAG;UAAA;UAAA,CAAA9C,cAAA,GAAAsB,CAAA,WAAd4C,KAAA;UAAA;UAAA,CAAAlE,cAAA,GAAAsB,CAAA,WAAA4C,KAAA;UAAA;UAAA,CAAAlE,cAAA,GAAAsB,CAAA,WAAkB;UAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAC/B,OAAOgD,IAAA,CAAKC,GAAG,CAACL,IAAA,IAAQI,IAAA,CAAKC,GAAG,CAACF,IAAA,GAAO;QAC1C,OAAO;UAAA;UAAAnE,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAAA,IAAIyC,CAAA,CAAEjB,GAAG,GAAG,GAAG;YAAA;YAAA5C,cAAA,GAAAsB,CAAA;gBAEPgD,OAAA,EAAAC,KAAA;YADb;YACA,MAAMP,IAAA;YAAA;YAAA,CAAAhE,cAAA,GAAAoB,CAAA;YAAO;YAAA,CAAApB,cAAA,GAAAsB,CAAA,YAAAiD,KAAA;YAAA;YAAA,CAAAvE,cAAA,GAAAsB,CAAA,YAAAgD,OAAA,GAAAT,CAAA,CAAEd,GAAG;YAAA;YAAA,CAAA/C,cAAA,GAAAsB,CAAA,WAALgD,OAAA;YAAA;YAAA,CAAAtE,cAAA,GAAAsB,CAAA,WAAAgD,OAAA;YAAA;YAAA,CAAAtE,cAAA,GAAAsB,CAAA,WAASuC,CAAA,CAAEf,GAAG;YAAA;YAAA,CAAA9C,cAAA,GAAAsB,CAAA,WAAdiD,KAAA;YAAA;YAAA,CAAAvE,cAAA,GAAAsB,CAAA,WAAAiD,KAAA;YAAA;YAAA,CAAAvE,cAAA,GAAAsB,CAAA,WAAkB;gBAClBkD,OAAA,EAAAC,KAAA;YAAb,MAAMN,IAAA;YAAA;YAAA,CAAAnE,cAAA,GAAAoB,CAAA;YAAO;YAAA,CAAApB,cAAA,GAAAsB,CAAA,YAAAmD,KAAA;YAAA;YAAA,CAAAzE,cAAA,GAAAsB,CAAA,YAAAkD,OAAA,GAAAlD,CAAA,CAAEyB,GAAG;YAAA;YAAA,CAAA/C,cAAA,GAAAsB,CAAA,WAALkD,OAAA;YAAA;YAAA,CAAAxE,cAAA,GAAAsB,CAAA,WAAAkD,OAAA;YAAA;YAAA,CAAAxE,cAAA,GAAAsB,CAAA,WAASA,CAAA,CAAEwB,GAAG;YAAA;YAAA,CAAA9C,cAAA,GAAAsB,CAAA,WAAdmD,KAAA;YAAA;YAAA,CAAAzE,cAAA,GAAAsB,CAAA,WAAAmD,KAAA;YAAA;YAAA,CAAAzE,cAAA,GAAAsB,CAAA,WAAkB;YAAA;YAAAtB,cAAA,GAAAoB,CAAA;YAC/B,OAAOgD,IAAA,CAAKC,GAAG,CAACF,IAAA,IAAQC,IAAA,CAAKC,GAAG,CAACL,IAAA;UACnC;UAAA;UAAA;YAAAhE,cAAA,GAAAsB,CAAA;UAAA;QAAA;QAEA;QAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACA,OAAO;MACT;UAGgBsD,iBAAA;MADhB;MACA,MAAMC,OAAA;MAAA;MAAA,CAAA3E,cAAA,GAAAoB,CAAA;MAAU;MAAA,CAAApB,cAAA,GAAAsB,CAAA,YAAAoD,iBAAA;MAAA;MAAA,CAAA1E,cAAA,GAAAsB,CAAA,YAAAkC,aAAA,GAAAG,WAAW,CAAC,EAAE;MAAA;MAAA,CAAA3D,cAAA,GAAAsB,CAAA,WAAdkC,aAAA;MAAA;MAAA,CAAAxD,cAAA,GAAAsB,CAAA;MAAA;MAAA,CAAAtB,cAAA,GAAAsB,CAAA,WAAAkC,aAAA,CAAgBZ,GAAG;MAAA;MAAA,CAAA5C,cAAA,GAAAsB,CAAA,WAAnBoD,iBAAA;MAAA;MAAA,CAAA1E,cAAA,GAAAsB,CAAA,WAAAoD,iBAAA;MAAA;MAAA,CAAA1E,cAAA,GAAAsB,CAAA,WAAuB;MACvC,MAAMsD,SAAA;MAAA;MAAA,CAAA5E,cAAA,GAAAoB,CAAA,QAAYuC,WAAA,CAAYkB,MAAM,CAAEC,IAAA,IAAS;QAAA;QAAA9E,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAAA,OAAA0D,IAAA,CAAKlC,GAAG,KAAK+B,OAAA;MAAA;MAE5D;MACA,MAAMI,gBAAA;MAAA;MAAA,CAAA/E,cAAA,GAAAoB,CAAA,QAAmBwD,SAAA,CAAUI,KAAK,CAAC,GAAGzB,KAAA;MAE5C;MACA,MAAM0B,QAAA;MAAA;MAAA,CAAAjF,cAAA,GAAAoB,CAAA,QAA4B2D,gBAAA,CAAiBG,GAAG,CAAEJ,IAAA,IAAU;QAAA;QAAA9E,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAAA;UAChE+D,GAAA,EAAKL,IAAA,CAAKK,GAAG;UACbC,GAAA,EAAKN,IAAA,CAAKM,GAAG;UACbxC,GAAA,EAAKkC,IAAA,CAAKlC,GAAG;UACbE,GAAA,EAAKgC,IAAA,CAAKhC,GAAG;UACbC,GAAA,EAAK+B,IAAA,CAAK/B,GAAG;UACbC,QAAA,EAAU8B,IAAA,CAAK9B;QACjB;MAAA;MAEA;MAAA;MAAAhD,cAAA,GAAAoB,CAAA;MACAa,MAAA,CAAOoD,IAAI,CAAC,gDAAgD;QAC1D9C,GAAA;QACA+C,cAAA,EAAgB/B,KAAA;QAChBgC,iBAAA,EAAmB/C,KAAA,CAAMiB,KAAK,CAACC,MAAM;QACrCiB,OAAA;QACAa,gBAAA,EAAkBZ,SAAA,CAAUlB,MAAM;QAClC+B,aAAA,EAAeR,QAAA,CAASvB,MAAM;QAC9BgC,mBAAA,EAAqBT,QAAA,CAASC,GAAG,CAAES,CAAA,IAAO;UAAA;UAAA3F,cAAA,GAAAqB,CAAA;UAAArB,cAAA,GAAAoB,CAAA;UAAA;YACxCgE,GAAA,EAAKO,CAAA,CAAEP,GAAG;YACVxC,GAAA,EAAK+C,CAAA,CAAE/C,GAAG;YACVG,GAAA,EAAK4C,CAAA,CAAE5C,GAAG;YACVC,QAAA,EAAU2C,CAAA,CAAE3C;UACd;QAAA;QACA4C,cAAA,EACEjB,OAAA,GAAU;QAAA;QAAA,CAAA3E,cAAA,GAAAsB,CAAA,WACN;QAAA;QAAA,CAAAtB,cAAA,GAAAsB,CAAA,WACAqD,OAAA,GAAU;QAAA;QAAA,CAAA3E,cAAA,GAAAsB,CAAA,WACR;QAAA;QAAA,CAAAtB,cAAA,GAAAsB,CAAA,WACA;MACV;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAEA,OAAO;QACLsB,WAAA,EAAa;QACbe,KAAA,EAAOwB;MACT;IACF,EAAE,OAAO9B,KAAA,EAAO;MAAA;MAAAnD,cAAA,GAAAoB,CAAA;MACda,MAAA,CAAOkB,KAAK,CAAC,2BAA2BA,KAAA,EAAgB;QAAEZ;MAAI;MAAA;MAAAvC,cAAA,GAAAoB,CAAA;MAC9D,OAAO;QACLsB,WAAA,EAAa;QACbS,KAAA,EAAOA,KAAA,YAAiBC,KAAA;QAAA;QAAA,CAAApD,cAAA,GAAAsB,CAAA,WAAQ6B,KAAA,CAAME,OAAO;QAAA;QAAA,CAAArD,cAAA,GAAAsB,CAAA,WAAG;MAClD;IACF;EACF;EAEA;;;;;;;;;;;;;;;EAeAuE,aAAQA,CAActD,GAAW,EAAU;IAAA;IAAAvC,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACzC,OAAOmB,GAAA,CAAIuD,KAAK,CAAC,KAAKd,KAAK,CAAC,GAAG,GAAGe,IAAI,CAAC;EACzC;EAEA;;;;;;;;;;;;;;EAcA,MAActD,0BACZF,GAAW,EACqB;IAAA;IAAAvC,cAAA,GAAAqB,CAAA;IAChC;IACA,MAAM2E,UAAA;IAAA;IAAA,CAAAhG,cAAA,GAAAoB,CAAA,QAAa,IAAA6E,aAAA,CAAAC,sBAAsB,EAAC3D,GAAA;IAAA;IAAAvC,cAAA,GAAAoB,CAAA;IAC1C,IAAI,CAAC4E,UAAA,CAAWG,OAAO,EAAE;MAAA;MAAAnG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACvB,MAAM,IAAIgC,KAAA,CAAM,gBAAgB4C,UAAA,CAAWI,MAAM,CAACL,IAAI,CAAC,OAAO;IAChE;IAAA;IAAA;MAAA/F,cAAA,GAAAsB,CAAA;IAAA;IACA,MAAM+E,YAAA;IAAA;IAAA,CAAArG,cAAA,GAAAoB,CAAA,QAAe4E,UAAA,CAAWM,SAAS;IACzC,MAAMC,aAAA;IAAA;IAAA,CAAAvG,cAAA,GAAAoB,CAAA,QAAgB,IAAI,CAACyE,aAAa,CAACQ,YAAA;IAEzC;IACA,MAAMG,UAAA;IAAA;IAAA,CAAAxG,cAAA,GAAAoB,CAAA,QAAa,IAAI,CAACqF,YAAY,CAACJ,YAAA;IAAA;IAAArG,cAAA,GAAAoB,CAAA;IACrC,IAAIoF,UAAA,GAAa,IAAI,CAACE,SAAS,EAAE;MAAA;MAAA1G,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC/Ba,MAAA,CAAO0E,KAAK,CAAC,iCAAiC;QAC5CpE,GAAA,EAAK8D,YAAA;QACLG;MACF;MAAA;MAAAxG,cAAA,GAAAoB,CAAA;MACA,OAAO;IACT;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAEA;IACA,MAAMsF,MAAA;IAAA;IAAA,CAAA5G,cAAA,GAAAoB,CAAA,QAAS,IAAI,CAACyF,KAAK,CAACC,GAAG,CAACP,aAAA;IAAA;IAAAvG,cAAA,GAAAoB,CAAA;IAC9B;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAsF,MAAA;IAAA;IAAA,CAAA5G,cAAA,GAAAsB,CAAA,WAAUsF,MAAA,CAAOG,MAAM,GAAGC,IAAA,CAAKC,GAAG,KAAI;MAAA;MAAAjH,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACxCa,MAAA,CAAO0E,KAAK,CAAC,iCAAiC;QAAEpE,GAAA,EAAKgE;MAAc;MAAA;MAAAvG,cAAA,GAAAoB,CAAA;MACnE,IAAI,CAAC8F,OAAO,CAACC,cAAc;MAAA;MAAAnH,cAAA,GAAAoB,CAAA;MAC3B,OAAOwF,MAAA,CAAOpE,KAAK;IACrB;IAAA;IAAA;MAAAxC,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IACA,IAAI,CAAC8F,OAAO,CAACE,eAAe;IAE5B;IACA,MAAMC,OAAA;IAAA;IAAA,CAAArH,cAAA,GAAAoB,CAAA,QAAU,IAAI,CAACkG,eAAe,CAACR,GAAG,CAACP,aAAA;IAAA;IAAAvG,cAAA,GAAAoB,CAAA;IACzC,IAAIiG,OAAA,EAAS;MAAA;MAAArH,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACXa,MAAA,CAAO0E,KAAK,CAAC,sCAAsC;QACjDpE,GAAA,EAAKgE;MACP;MAAA;MAAAvG,cAAA,GAAAoB,CAAA;MACA,IAAI,CAAC8F,OAAO,CAACK,mBAAmB;MAAA;MAAAvH,cAAA,GAAAoB,CAAA;MAChC,OAAOiG,OAAA;IACT;IAAA;IAAA;MAAArH,cAAA,GAAAsB,CAAA;IAAA;IAEA;IACA,MAAMkG,OAAA;IAAA;IAAA,CAAAxH,cAAA,GAAAoB,CAAA,QAAU,IAAI,CAACqG,kBAAkB,CAACpB,YAAA,EAAcE,aAAA;IAEtD;IACA,MAAMmB,kBAAA;IAAA;IAAA,CAAA1H,cAAA,GAAAoB,CAAA,QAAqBoG,OAAA,CAAQG,OAAO,CAAC;MAAA;MAAA3H,cAAA,GAAAqB,CAAA;MAAArB,cAAA,GAAAoB,CAAA;MACzC;MACA,IAAI,CAACkG,eAAe,CAACM,MAAM,CAACrB,aAAA;IAC9B;IAAA;IAAAvG,cAAA,GAAAoB,CAAA;IAEA,IAAI,CAACkG,eAAe,CAACO,GAAG,CAACtB,aAAA,EAAemB,kBAAA;IAAA;IAAA1H,cAAA,GAAAoB,CAAA;IACxC,OAAOsG,kBAAA;EACT;EAEA;;;;;;EAMA,MAAcD,mBACZlF,GAAW,EACXgE,aAAqB,EACW;IAAA;IAAAvG,cAAA,GAAAqB,CAAA;IAChC,MAAMyG,WAAA;IAAA;IAAA,CAAA9H,cAAA,GAAAoB,CAAA,QAAc;IAAA;IAAApB,cAAA,GAAAoB,CAAA;IACpB,IAAI,CAAC8F,OAAO,CAACa,aAAa;IAAA;IAAA/H,cAAA,GAAAoB,CAAA;IAE1B,KAAK,IAAI4G,OAAA;IAAA;IAAA,CAAAhI,cAAA,GAAAoB,CAAA,QAAU,IAAG4G,OAAA,IAAWF,WAAA,EAAaE,OAAA,IAAW;MAAA;MAAAhI,cAAA,GAAAoB,CAAA;MACvD,IAAI;QACF,MAAM6G,UAAA;QAAA;QAAA,CAAAjI,cAAA,GAAAoB,CAAA,QAAa,IAAI8G,eAAA;QACvB,MAAMC,SAAA;QAAA;QAAA,CAAAnI,cAAA,GAAAoB,CAAA,QAAYgH,UAAA,CAAW,MAAM;UAAA;UAAApI,cAAA,GAAAqB,CAAA;UAAArB,cAAA,GAAAoB,CAAA;UAAA,OAAA6G,UAAA,CAAWI,KAAK;QAAA,GAAI;QAEvD;QACA,MAAMC,QAAA;QAAA;QAAA,CAAAtI,cAAA,GAAAoB,CAAA,QAAW,MAAMmH,KAAA,CACrB,GAAGC,UAAA,CAAAC,UAAU,CAACC,iBAAiB,iBAAiBC,kBAAA,CAAmBpG,GAAA,YAAe,EAClF;UAAEqG,MAAA,EAAQX,UAAA,CAAWW;QAAO;QAAA;QAAA5I,cAAA,GAAAoB,CAAA;QAG9ByH,YAAA,CAAaV,SAAA;QAAA;QAAAnI,cAAA,GAAAoB,CAAA;QAEb,IAAI,CAACkH,QAAA,CAASQ,EAAE,EAAE;UAAA;UAAA9I,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAChB,IAAI,CAAC8F,OAAO,CAAC6B,cAAc,CAACT,QAAA,CAASU,MAAM;UAAA;UAAAhJ,cAAA,GAAAoB,CAAA;UAE3C,IAAIkH,QAAA,CAASU,MAAM,KAAK,KAAK;YAAA;YAAAhJ,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YAC3B;YACAa,MAAA,CAAOoD,IAAI,CAAC,2CAA2C;cACrD9C,GAAA,EAAKgE;YACP;YAAA;YAAAvG,cAAA,GAAAoB,CAAA;YACA,IAAI,CAAC6H,WAAW,CAAC1C,aAAA,EAAe;YAAA;YAAAvG,cAAA,GAAAoB,CAAA;YAChC,OAAO;UACT;UAAA;UAAA;YAAApB,cAAA,GAAAsB,CAAA;UAAA;UAEA;UAAAtB,cAAA,GAAAoB,CAAA;UACA,IAAIkH,QAAA,CAASU,MAAM,KAAK,KAAK;YAAA;YAAAhJ,cAAA,GAAAsB,CAAA;YAC3B,MAAM4H,KAAA;YAAA;YAAA,CAAAlJ,cAAA,GAAAoB,CAAA,QAAQgD,IAAA,CAAK+E,GAAG,CACpB,OAAO/E,IAAA,CAAKgF,GAAG,CAAC,GAAGpB,OAAA,IAAW5D,IAAA,CAAKiF,MAAM,KAAK,MAC9C;YAAA;YAAArJ,cAAA,GAAAoB,CAAA;YAEFa,MAAA,CAAOqH,IAAI,CAAC,6BAA6BJ,KAAA,IAAS,EAAE;cAClDlB,OAAA;cACAkB;YACF;YAAA;YAAAlJ,cAAA,GAAAoB,CAAA;YACA,MAAM,IAAImI,OAAA,CAASC,OAAA,IAAY;cAAA;cAAAxJ,cAAA,GAAAqB,CAAA;cAAArB,cAAA,GAAAoB,CAAA;cAAA,OAAAgH,UAAA,CAAWoB,OAAA,EAASN,KAAA;YAAA;YAAA;YAAAlJ,cAAA,GAAAoB,CAAA;YACnD;UACF;UAAA;UAAA;YAAApB,cAAA,GAAAsB,CAAA;UAAA;UAEA;UAAAtB,cAAA,GAAAoB,CAAA;UACA;UAAI;UAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAgH,QAAA,CAASU,MAAM,IAAI;UAAA;UAAA,CAAAhJ,cAAA,GAAAsB,CAAA,WAAOgH,QAAA,CAASU,MAAM,GAAG,MAAK;YAAA;YAAAhJ,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YACnD,MAAM,IAAIgC,KAAA,CAAM,iBAAiBkF,QAAA,CAASU,MAAM,EAAE;UACpD;UAAA;UAAA;YAAAhJ,cAAA,GAAAsB,CAAA;UAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAEA,MAAM,IAAIgC,KAAA,CAAM,cAAckF,QAAA,CAASU,MAAM,EAAE;QACjD;QAAA;QAAA;UAAAhJ,cAAA,GAAAsB,CAAA;QAAA;QAEA,MAAMmI,YAAA;QAAA;QAAA,CAAAzJ,cAAA,GAAAoB,CAAA,QAAe,MAAMkH,QAAA,CAASoB,IAAI;QAExC;QACA,IAAIC,aAAA;QAAA;QAAA3J,cAAA,GAAAoB,CAAA;QACJ,IAAI;UAAA;UAAApB,cAAA,GAAAoB,CAAA;UACFuI,aAAA,GAAgBC,iBAAA,CAAAC,8BAA8B,CAACC,KAAK,CAACL,YAAA;QACvD,EAAE,OAAOtG,KAAA,EAAO;UAAA;UAAAnD,cAAA,GAAAoB,CAAA;UACd,IAAI+B,KAAA,YAAiB4G,IAAA,CAAAC,CAAC,CAACC,QAAQ,EAAE;YAAA;YAAAjK,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YAC/Ba,MAAA,CAAOkB,KAAK,CAAC,kCAAkC;cAC7CZ,GAAA;cACA6D,MAAA,EAAQjD,KAAA,CAAM+G,MAAM;cACpBC,QAAA,EAAUV;YACZ;YAAA;YAAAzJ,cAAA,GAAAoB,CAAA;YACA,MAAM,IAAIgC,KAAA,CAAM;UAClB;UAAA;UAAA;YAAApD,cAAA,GAAAsB,CAAA;UAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACA,MAAM+B,KAAA;QACR;QAEA;QACA,MAAMX,KAAA;QAAA;QAAA,CAAAxC,cAAA,GAAAoB,CAAA,SAAQ,IAAI,CAACgJ,qBAAqB,CAACT,aAAA,EAAepH,GAAA;QAExD;QAAA;QAAAvC,cAAA,GAAAoB,CAAA;QACA,IAAI,CAAC6H,WAAW,CAAC1C,aAAA,EAAe/D,KAAA;QAAA;QAAAxC,cAAA,GAAAoB,CAAA;QAEhCa,MAAA,CAAOoD,IAAI,CAAC,mDAAmD;UAC7D9C,GAAA;UACA8H,gBAAA,EAAkB7H,KAAA,CAAMK,QAAQ,CAACG,QAAQ;UACzCsH,SAAA,EAAW9H,KAAA,CAAMiB,KAAK,CAACC;QACzB;QAAA;QAAA1D,cAAA,GAAAoB,CAAA;QAEA,OAAOoB,KAAA;MACT,EAAE,OAAOW,KAAA,EAAO;QACd,MAAMoH,YAAA;QAAA;QAAA,CAAAvK,cAAA,GAAAoB,CAAA,SACJ+B,KAAA,YAAiBC,KAAA;QAAA;QAAA,CAAApD,cAAA,GAAAsB,CAAA,WAAQ6B,KAAA,CAAME,OAAO;QAAA;QAAA,CAAArD,cAAA,GAAAsB,CAAA,WAAG;QAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC3Ca,MAAA,CAAOqH,IAAI,CAAC,yBAAyBtB,OAAA,IAAWF,WAAA,SAAoB,EAAE;UACpEvF,GAAA;UACAY,KAAA,EAAOoH;QACT;QAEA;QAAA;QAAAvK,cAAA,GAAAoB,CAAA;QACA;QACE;QAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAA6B,KAAA,YAAiBC,KAAA;QAAA;QAAA,CAAApD,cAAA,GAAAsB,CAAA,WACjB6B,KAAA,CAAME,OAAO,CAACmH,UAAU,CAAC,kBACzB;UAAA;UAAAxK,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACA,MAAM+B,KAAA;QACR;QAAA;QAAA;UAAAnD,cAAA,GAAAsB,CAAA;QAAA;QAEA;QAAAtB,cAAA,GAAAoB,CAAA;QACA,IAAI4G,OAAA,KAAYF,WAAA,EAAa;UAAA;UAAA9H,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAC3Ba,MAAA,CAAOkB,KAAK,CAAC,qCAAqC;YAAEA,KAAA;YAAOZ;UAAI;UAAA;UAAAvC,cAAA,GAAAoB,CAAA;UAC/D;UAAI;UAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAA6B,KAAA,YAAiBC,KAAA;UAAA;UAAA,CAAApD,cAAA,GAAAsB,CAAA,WAAS6B,KAAA,CAAMtC,IAAI,KAAK,eAAc;YAAA;YAAAb,cAAA,GAAAsB,CAAA;YAAAtB,cAAA,GAAAoB,CAAA;YACzD,MAAM,IAAIgC,KAAA,CAAM,yBAAyB0E,WAAA,UAAqB;UAChE;UAAA;UAAA;YAAA9H,cAAA,GAAAsB,CAAA;UAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACA,MAAM,IAAIgC,KAAA,CACR,gBAAgB0E,WAAA,2BAAsCyC,YAAA,EAAc;QAExE;QAAA;QAAA;UAAAvK,cAAA,GAAAsB,CAAA;QAAA;QAEA;QAAAtB,cAAA,GAAAoB,CAAA;QACA,MAAM,IAAImI,OAAA,CAASC,OAAA,IAAY;UAAA;UAAAxJ,cAAA,GAAAqB,CAAA;UAAArB,cAAA,GAAAoB,CAAA;UAAA,OAAAgH,UAAA,CAAWoB,OAAA,EAAS,MAAMxB,OAAA;QAAA;MAC3D;IACF;IAEA;IAAA;IAAAhI,cAAA,GAAAoB,CAAA;IACA,MAAM,IAAIgC,KAAA,CAAM;EAClB;EAEA;;;;;;;;;;;EAWAgH,qBAAQA,CACNK,GAA6B,EAC7BlI,GAAW,EACK;IAAA;IAAAvC,cAAA,GAAAqB,CAAA;IAChB,MAAMqJ,aAAA;IAAA;IAAA,CAAA1K,cAAA,GAAAoB,CAAA,SAAgBmB,GAAA,CAAIuD,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK;IAE5C;IACA,MAAMuE,gBAAA;IAAA;IAAA,CAAArK,cAAA,GAAAoB,CAAA,SAAmBqJ,GAAA,CAAIzH,QAAQ;IACrC,IAAI2H,WAAA;IAAA;IAAA,CAAA3K,cAAA,GAAAoB,CAAA,SAAc,IAAI,CAACwJ,cAAc,CAACP,gBAAA;IAEtC;IACA;IACA;IAAA;IAAArK,cAAA,GAAAoB,CAAA;IACA,IAAIuJ,WAAA,KAAgB,CAAC,GAAG;MAAA;MAAA3K,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACtBuJ,WAAA,GAAc;IAChB;IAAA;IAAA;MAAA3K,cAAA,GAAAsB,CAAA;IAAA;IAEA;IACA,MAAMmC,KAAA;IAAA;IAAA,CAAAzD,cAAA,GAAAoB,CAAA,SAAiC;IAAC;IAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAmJ,GAAA,CAAIhH,KAAK;IAAA;IAAA,CAAAzD,cAAA,GAAAsB,CAAA,WAAI,EAAE,GAAE4D,GAAG,CAAE2F,OAAA;MAAA;MAAA7K,cAAA,GAAAqB,CAAA;MAC5D;MACA;MACA,MAAMyJ,YAAA;MAAA;MAAA,CAAA9K,cAAA,GAAAoB,CAAA,SAAe,IAAI,CAAC2J,eAAe,CACvCF,OAAA,CAAQ7H,QAAQ;MAElB,IAAIgI,OAAA;MAAA;MAAA,CAAAhL,cAAA,GAAAoB,CAAA,SAAU,IAAI,CAACwJ,cAAc,CAACE,YAAA;MAElC;MAAA;MAAA9K,cAAA,GAAAoB,CAAA;MACA,IAAIsJ,aAAA,EAAe;QAAA;QAAA1K,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACjB4J,OAAA,GAAU,CAACA,OAAA;MACb;MAAA;MAAA;QAAAhL,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAEA,OAAO;QACL+D,GAAA,EAAK0F,OAAA,CAAQ1F,GAAG;QAChBC,GAAA,EAAKyF,OAAA,CAAQzF,GAAG;QAChBpC,QAAA,EAAU8H,YAAA;QACVlI,GAAA,EAAKoI,OAAA;QACLlI,GAAA,EAAK+H,OAAA,CAAQ/H,GAAG;QAChBC,GAAA,EAAK8H,OAAA,CAAQ9H,GAAG;QAChBkI,OAAA;QAAS;QAAA,CAAAjL,cAAA,GAAAsB,CAAA,WAAAuJ,OAAA,CAAQI,OAAO;QAAA;QAAA,CAAAjL,cAAA,GAAAsB,CAAA,WAAI;MAC9B;IACF;QAOS4J,QAAA;IAAA;IAAAlL,cAAA,GAAAoB,CAAA;IALT,OAAO;MACLyB,QAAA,EAAU;QACRG,QAAA,EAAUqH,gBAAA;QACVzH,GAAA,EAAK+H,WAAA;QACL7H,GAAA,EAAK2H,GAAA,CAAI3H,GAAG;QACZC,GAAA;QAAK;QAAA,CAAA/C,cAAA,GAAAsB,CAAA,YAAA4J,QAAA,GAAAT,GAAA,CAAI1H,GAAG;QAAA;QAAA,CAAA/C,cAAA,GAAAsB,CAAA,WAAP4J,QAAA;QAAA;QAAA,CAAAlL,cAAA,GAAAsB,CAAA,WAAA4J,QAAA;QAAA;QAAA,CAAAlL,cAAA,GAAAsB,CAAA,WAAW;QAChB2B,OAAA;QAAS;QAAA,CAAAjD,cAAA,GAAAsB,CAAA,WAAAmJ,GAAA,CAAIU,WAAW,KAAKhK,SAAA;QAAA;QAAA,CAAAnB,cAAA,GAAAsB,CAAA,WAAamJ,GAAA,CAAIU,WAAW,KAAK;QAC9DjI,UAAA,EAAY,IAAI,CAACkI,kBAAkB,CAACf,gBAAA,EAAkBI,GAAA,CAAI3H,GAAG;MAC/D;MACAW,KAAA;MACAlB,GAAA;MACA8I,SAAA,EAAWrE,IAAA,CAAKC,GAAG;IACrB;EACF;EAEA;;;;EAIAgC,WAAQA,CAAY1G,GAAW,EAAEC,KAA4B,EAAQ;IAAA;IAAAxC,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACnE,IAAI,CAACyF,KAAK,CAACgB,GAAG,CAACtF,GAAA,EAAK;MAClBC,KAAA;MACAuE,MAAA,EAAQC,IAAA,CAAKC,GAAG,KAAK,IAAI,CAACqE;IAC5B;IAEA;IAAA;IAAAtL,cAAA,GAAAoB,CAAA;IACA,IAAI,IAAI,CAACyF,KAAK,CAAC0E,IAAI,GAAG,KAAK;MAAA;MAAAvL,cAAA,GAAAsB,CAAA;MACzB,MAAM2F,GAAA;MAAA;MAAA,CAAAjH,cAAA,GAAAoB,CAAA,SAAM4F,IAAA,CAAKC,GAAG;MAAA;MAAAjH,cAAA,GAAAoB,CAAA;MACpB,KAAK,MAAM,CAACoK,GAAA,EAAKC,KAAA,CAAM,IAAI,IAAI,CAAC5E,KAAK,CAAC6E,OAAO,IAAI;QAAA;QAAA1L,cAAA,GAAAoB,CAAA;QAC/C,IAAIqK,KAAA,CAAM1E,MAAM,GAAGE,GAAA,EAAK;UAAA;UAAAjH,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACtB,IAAI,CAACyF,KAAK,CAACe,MAAM,CAAC4D,GAAA;QACpB;QAAA;QAAA;UAAAxL,cAAA,GAAAsB,CAAA;QAAA;MACF;IACF;IAAA;IAAA;MAAAtB,cAAA,GAAAsB,CAAA;IAAA;EACF;EAEA;;;;EAIAsJ,cAAQA,CAAe5H,QAAgB,EAAU;IAAA;IAAAhD,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC/C,QAAQ4B,QAAA;MACN,KAAK;QAAA;QAAAhD,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;MACL,KAAK;QAAA;QAAAtB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;MACL,KAAK;QAAA;QAAAtB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;MACL,KAAK;QAAA;QAAAtB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO,CAAC;MACV,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO,CAAC;MACV;QAAA;QAAApB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACE,OAAO;IACX;EACF;EAEA;;;;EAIA2J,eAAQA,CAAgB/H,QAAgB,EAAU;IAAA;IAAAhD,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAChD,QAAQ4B,QAAA;MACN,KAAK;QAAA;QAAAhD,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;MACL,KAAK;QAAA;QAAAtB,cAAA,GAAAsB,CAAA;MACL;QAAA;QAAAtB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACE,OAAO4B,QAAA;IACX;EACF;EAEA;;;;EAIAoI,kBAAQA,CAAmBpI,QAAgB,EAAEF,GAAmB,EAAU;IAAA;IAAA9C,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACxE,QAAQ4B,QAAA;MACN,KAAK;QAAA;QAAAhD,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO0B,GAAA;QAAA;QAAA,CAAA9C,cAAA,GAAAsB,CAAA,WACH,aAAa8C,IAAA,CAAKC,GAAG,CAACvB,GAAA,SAAY;QAAA;QAAA,CAAA9C,cAAA,GAAAsB,CAAA,WAClC;MACN,KAAK;QAAA;QAAAtB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO0B,GAAA;QAAA;QAAA,CAAA9C,cAAA,GAAAsB,CAAA,WACH,aAAa8C,IAAA,CAAKC,GAAG,CAACvB,GAAA,wBAA2B;QAAA;QAAA,CAAA9C,cAAA,GAAAsB,CAAA,WACjD;MACN,KAAK;QAAA;QAAAtB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO0B,GAAA;QAAA;QAAA,CAAA9C,cAAA,GAAAsB,CAAA,WACH,cAAc8C,IAAA,CAAKC,GAAG,CAACvB,GAAA,wBAA2B;QAAA;QAAA,CAAA9C,cAAA,GAAAsB,CAAA,WAClD;MACN,KAAK;QAAA;QAAAtB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT,KAAK;QAAA;QAAApB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO0B,GAAA;QAAA;QAAA,CAAA9C,cAAA,GAAAsB,CAAA,WACH,cAAc8C,IAAA,CAAKC,GAAG,CAACvB,GAAA,SAAY;QAAA;QAAA,CAAA9C,cAAA,GAAAsB,CAAA,WACnC;MACN,KAAK;QAAA;QAAAtB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACH,OAAO;MACT;QAAA;QAAApB,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACE,OAAO;IACX;EACF;EAEA;;;;EAIAqF,YAAQA,CAAalE,GAAW,EAAU;IAAA;IAAAvC,cAAA,GAAAqB,CAAA;IACxC,MAAMsK,UAAA;IAAA;IAAA,CAAA3L,cAAA,GAAAoB,CAAA,SAAamB,GAAA,CAAIuD,KAAK,CAAC,IAAI,CAAC,EAAE;IAAA;IAAA9F,cAAA,GAAAoB,CAAA;IACpC,OAAOuK,UAAA,CAAWC,OAAO,CAAC,cAAc,IAAIlI,MAAM;EACpD;EAEA;;;EAGAmI,WAAA,EAAmB;IAAA;IAAA7L,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACjB,IAAI,CAACyF,KAAK,CAACiF,KAAK;IAAA;IAAA9L,cAAA,GAAAoB,CAAA;IAChB,IAAI,CAACkG,eAAe,CAACwE,KAAK;EAC5B;EAEA;;;;EAIAC,WAAA,EAAa;IAAA;IAAA/L,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACX,OAAO,IAAI,CAAC8F,OAAO,CAAC6E,UAAU;EAChC;;;;;IArlBAC,gBAAA,OAAQ,SAAQ,IAAIC,GAAA;IAAA;IAAAjM,cAAA,GAAAoB,CAAA;IACpB4K,gBAAA,OAAiB,aAAY,IAAG;IAAA;IAAAhM,cAAA,GAAAoB,CAAA;IAChC4K,gBAAA,OAAiB,YAAW,SAAQ;IAAA;IAAAhM,cAAA,GAAAoB,CAAA;IACpC4K,gBAAA,OAAQ,mBAAkB,IAAIC,GAAA;IAE9B;IAAA;IAAAjM,cAAA,GAAAoB,CAAA;IACA4K,gBAAA,OAAQ,WAAU;MAChBE,SAAA,EAAW;MACXC,WAAA,EAAa;MACbC,QAAA,EAAU;MACVC,SAAA,EAAW,IAAIJ,GAAA;MACfK,oBAAA,EAAsB;MAEtBnF,eAAA;QAAA;QAAAnH,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QACE,IAAI,CAAC8K,SAAS;MAChB;MACA9E,gBAAA;QAAA;QAAApH,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QACE,IAAI,CAAC+K,WAAW;MAClB;MACApE,cAAA;QAAA;QAAA/H,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QACE,IAAI,CAACgL,QAAQ;MACf;MACArD,eAAeC,MAAc;QAAA;QAAAhJ,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAC3B,IAAI,CAACiL,SAAS,CAACxE,GAAG,CAACmB,MAAA,EAAQ;QAAC;QAAA,CAAAhJ,cAAA,GAAAsB,CAAA,eAAI,CAAC+K,SAAS,CAACvF,GAAG,CAACkC,MAAA;QAAA;QAAA,CAAAhJ,cAAA,GAAAsB,CAAA,WAAW,MAAK;MACjE;MACAiG,oBAAA;QAAA;QAAAvH,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QACE,IAAI,CAACkL,oBAAoB;MAC3B;MAEAP,WAAA;QAAA;QAAA/L,cAAA,GAAAqB,CAAA;QACE,MAAMkL,KAAA;QAAA;QAAA,CAAAvM,cAAA,GAAAoB,CAAA,SAAQ,IAAI,CAAC8K,SAAS,GAAG,IAAI,CAACC,WAAW;QAAA;QAAAnM,cAAA,GAAAoB,CAAA;QAC/C,OAAO;UACLoL,YAAA,EAAcD,KAAA,GAAQ;UAAA;UAAA,CAAAvM,cAAA,GAAAsB,CAAA,WAAI,IAAI,CAAC4K,SAAS,GAAGK,KAAA;UAAA;UAAA,CAAAvM,cAAA,GAAAsB,CAAA,WAAQ;UACnDmL,aAAA,EAAe,IAAI,CAACL,QAAQ;UAC5BM,cAAA,EAAgBC,MAAA,CAAOC,WAAW,CAAC,IAAI,CAACP,SAAS;UACjDQ,eAAA,EAAiB,IAAI,CAACP;QACxB;MACF;IACF;;AAgjBF;AAcO,MAAMtK,gBAAA;AAAA;AAAA,CAAAhC,cAAA,GAAAoB,CAAA,SAAmB,IAAIiB,gBAAA","ignoreList":[]}