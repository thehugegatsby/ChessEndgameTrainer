f72c3bb5a948acf96c36172a7be8a409
/**
 * @file Tests for useDialogHandlers hook
 * @module tests/unit/hooks/useDialogHandlers
 * 
 * @description
 * Comprehensive tests for the useDialogHandlers hook that encapsulates
 * all dialog handling logic for chess training interactions.
 * 
 * Tests cover:
 * - Move error dialog actions (take back, restart, continue, show best move)
 * - Move success dialog actions (close, continue)
 * - Training session reset coordination
 * - Opponent turn scheduling and cancellation
 * - Complex state management and service coordination
 */ "use strict";
// Mock dependencies
jest.mock('@shared/services/logging/Logger', ()=>({
        getLogger: jest.fn(()=>({
                setContext: jest.fn(()=>({
                        debug: jest.fn(),
                        info: jest.fn(),
                        warn: jest.fn(),
                        error: jest.fn()
                    })),
                debug: jest.fn(),
                info: jest.fn(),
                warn: jest.fn(),
                error: jest.fn()
            }))
    }));
jest.mock('@shared/services/ChessService', ()=>({
        chessService: {
            getFen: jest.fn(),
            turn: jest.fn()
        }
    }));
jest.mock('@shared/services/TablebaseService', ()=>({
        tablebaseService: {
            getEvaluation: jest.fn()
        }
    }));
jest.mock('@shared/store/orchestrators/handlePlayerMove', ()=>({
        cancelScheduledOpponentTurn: jest.fn(),
        scheduleOpponentTurn: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useDialogHandlers = require("../../../shared/hooks/useDialogHandlers");
const _ChessService = require("../../../shared/services/ChessService");
const _TablebaseService = require("../../../shared/services/TablebaseService");
const _handlePlayerMove = require("../../../shared/store/orchestrators/handlePlayerMove");
describe('useDialogHandlers', ()=>{
    const mockTrainingActions = {
        setPlayerTurn: jest.fn(),
        clearOpponentThinking: jest.fn(),
        setMoveErrorDialog: jest.fn(),
        setMoveSuccessDialog: jest.fn(),
        setEvaluationBaseline: jest.fn(),
        clearEvaluationBaseline: jest.fn()
    };
    const mockGameActions = {
        resetGame: jest.fn()
    };
    const mockUIActions = {
        showToast: jest.fn()
    };
    const mockTrainingState = {
        isPlayerTurn: true,
        isOpponentThinking: false,
        currentPosition: {
            id: 1,
            colorToTrain: 'white'
        },
        moveErrorDialog: {
            bestMove: 'Kh1'
        }
    };
    const mockStoreApi = {
        getState: jest.fn(()=>({
                training: mockTrainingState,
                game: {
                    moveHistory: [
                        'e4',
                        'e5'
                    ]
                }
            })),
        setState: jest.fn()
    };
    const mockTrainingUIState = {
        handleReset: jest.fn()
    };
    const defaultProps = {
        undoMove: jest.fn(),
        resetGame: jest.fn(),
        clearEvaluations: jest.fn(),
        trainingActions: mockTrainingActions,
        gameActions: mockGameActions,
        uiActions: mockUIActions,
        trainingState: mockTrainingState,
        storeApi: mockStoreApi,
        trainingUIState: mockTrainingUIState
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        // Reset mocked services
        _ChessService.chessService.getFen.mockReturnValue('8/8/8/8/8/8/8/8 w - - 0 1');
        _ChessService.chessService.turn.mockReturnValue('w');
        _TablebaseService.tablebaseService.getEvaluation.mockResolvedValue({
            isAvailable: true,
            result: {
                wdl: 1
            }
        });
    });
    describe('Hook Initialization', ()=>{
        it('returns all required handler functions', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            expect(result.current).toHaveProperty('handleMoveErrorTakeBack');
            expect(result.current).toHaveProperty('handleMoveErrorRestart');
            expect(result.current).toHaveProperty('handleMoveErrorContinue');
            expect(result.current).toHaveProperty('handleShowBestMove');
            expect(result.current).toHaveProperty('handleMoveSuccessClose');
            expect(result.current).toHaveProperty('handleMoveSuccessContinue');
            expect(result.current).toHaveProperty('handleReset');
            // All should be functions
            Object.values(result.current).forEach((handler)=>{
                expect(typeof handler).toBe('function');
            });
        });
    });
    describe('handleReset', ()=>{
        it('calls all reset functions in correct order', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            (0, _react.act)(()=>{
                result.current.handleReset();
            });
            expect(defaultProps.resetGame).toHaveBeenCalledTimes(1);
            expect(defaultProps.clearEvaluations).toHaveBeenCalledTimes(1);
            expect(mockTrainingUIState.handleReset).toHaveBeenCalledTimes(1);
            expect(mockGameActions.resetGame).toHaveBeenCalledTimes(1);
            expect(mockTrainingActions.clearEvaluationBaseline).toHaveBeenCalledTimes(1);
        });
    });
    describe('handleMoveErrorTakeBack', ()=>{
        it('cancels scheduled opponent turn before undoing move', ()=>{
            const mockUndoMove = jest.fn().mockReturnValue(true);
            const props = {
                ...defaultProps,
                undoMove: mockUndoMove
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(props));
            (0, _react.act)(()=>{
                result.current.handleMoveErrorTakeBack();
            });
            expect(_handlePlayerMove.cancelScheduledOpponentTurn).toHaveBeenCalledTimes(1);
            expect(mockUndoMove).toHaveBeenCalledTimes(1);
        });
        it('sets player turn and clears opponent thinking after successful undo', ()=>{
            const mockUndoMove = jest.fn().mockReturnValue(true);
            const props = {
                ...defaultProps,
                undoMove: mockUndoMove
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(props));
            (0, _react.act)(()=>{
                result.current.handleMoveErrorTakeBack();
            });
            expect(mockTrainingActions.setPlayerTurn).toHaveBeenCalledWith(true);
            expect(mockTrainingActions.clearOpponentThinking).toHaveBeenCalledTimes(1);
            expect(mockTrainingActions.clearEvaluationBaseline).toHaveBeenCalledTimes(1);
        });
        it('closes move error dialog after successful undo', ()=>{
            const mockUndoMove = jest.fn().mockReturnValue(true);
            const props = {
                ...defaultProps,
                undoMove: mockUndoMove
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(props));
            (0, _react.act)(()=>{
                result.current.handleMoveErrorTakeBack();
            });
            expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);
        });
        it('handles failed undo gracefully', ()=>{
            const mockUndoMove = jest.fn().mockReturnValue(false);
            const props = {
                ...defaultProps,
                undoMove: mockUndoMove
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(props));
            (0, _react.act)(()=>{
                result.current.handleMoveErrorTakeBack();
            });
            // Should still attempt to close dialog even if undo fails
            expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);
        });
        it('handles missing setMoveErrorDialog action gracefully', ()=>{
            const actionsWithoutDialog = {
                ...mockTrainingActions,
                setMoveErrorDialog: undefined
            };
            const props = {
                ...defaultProps,
                trainingActions: actionsWithoutDialog
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(props));
            // Should not throw
            expect(()=>{
                (0, _react.act)(()=>{
                    result.current.handleMoveErrorTakeBack();
                });
            }).not.toThrow();
        });
    });
    describe('handleMoveErrorRestart', ()=>{
        it('calls handleReset and closes error dialog', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            (0, _react.act)(()=>{
                result.current.handleMoveErrorRestart();
            });
            expect(defaultProps.resetGame).toHaveBeenCalledTimes(1);
            expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);
        });
    });
    describe('handleMoveErrorContinue', ()=>{
        it('gets current state and fixes turn state when needed', ()=>{
            const stateWithBlackTurn = {
                training: {
                    ...mockTrainingState,
                    isPlayerTurn: true,
                    currentPosition: {
                        colorToTrain: 'white'
                    }
                },
                game: {
                    moveHistory: []
                }
            };
            const mockStoreApiWithBlackTurn = {
                ...mockStoreApi,
                getState: jest.fn(()=>stateWithBlackTurn)
            };
            // Mock chess service to return black's turn
            _ChessService.chessService.turn.mockReturnValue('b');
            const props = {
                ...defaultProps,
                storeApi: mockStoreApiWithBlackTurn
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(props));
            (0, _react.act)(()=>{
                result.current.handleMoveErrorContinue();
            });
            expect(mockTrainingActions.setPlayerTurn).toHaveBeenCalledWith(false);
        });
        it('closes error dialog and schedules opponent turn', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            (0, _react.act)(()=>{
                result.current.handleMoveErrorContinue();
            });
            expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);
            expect(_handlePlayerMove.scheduleOpponentTurn).toHaveBeenCalledWith(mockStoreApi, 500, expect.objectContaining({
                onOpponentMoveComplete: expect.any(Function)
            }));
        });
        it('schedules opponent turn with evaluation baseline callback', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            (0, _react.act)(()=>{
                result.current.handleMoveErrorContinue();
            });
            // Get the callback passed to scheduleOpponentTurn
            const scheduleCall = _handlePlayerMove.scheduleOpponentTurn.mock.calls[0];
            const callback = scheduleCall[2].onOpponentMoveComplete;
            // Execute the callback
            await (0, _react.act)(async ()=>{
                await callback();
            });
            expect(_TablebaseService.tablebaseService.getEvaluation).toHaveBeenCalled();
            expect(mockTrainingActions.setEvaluationBaseline).toHaveBeenCalledWith(1, '8/8/8/8/8/8/8/8 w - - 0 1');
        });
        it('handles tablebase unavailable gracefully in callback', async ()=>{
            _TablebaseService.tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: false
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            (0, _react.act)(()=>{
                result.current.handleMoveErrorContinue();
            });
            const scheduleCall = _handlePlayerMove.scheduleOpponentTurn.mock.calls[0];
            const callback = scheduleCall[2].onOpponentMoveComplete;
            // Should not throw
            await (0, _react.act)(async ()=>{
                await callback();
            });
            expect(mockTrainingActions.setEvaluationBaseline).not.toHaveBeenCalled();
        });
        it('handles tablebase error gracefully in callback', async ()=>{
            _TablebaseService.tablebaseService.getEvaluation.mockRejectedValue(new Error('API Error'));
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            (0, _react.act)(()=>{
                result.current.handleMoveErrorContinue();
            });
            const scheduleCall = _handlePlayerMove.scheduleOpponentTurn.mock.calls[0];
            const callback = scheduleCall[2].onOpponentMoveComplete;
            // Should not throw
            await (0, _react.act)(async ()=>{
                await callback();
            });
            expect(mockTrainingActions.setEvaluationBaseline).not.toHaveBeenCalled();
        });
    });
    describe('handleShowBestMove', ()=>{
        it('shows toast with best move and closes dialog', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            (0, _react.act)(()=>{
                result.current.handleShowBestMove();
            });
            expect(mockUIActions.showToast).toHaveBeenCalledWith('Der beste Zug war: Kh1', 'info');
            expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);
        });
        it('handles missing best move gracefully', ()=>{
            const stateWithoutBestMove = {
                ...mockTrainingState,
                moveErrorDialog: null
            };
            const props = {
                ...defaultProps,
                trainingState: stateWithoutBestMove
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(props));
            (0, _react.act)(()=>{
                result.current.handleShowBestMove();
            });
            expect(mockUIActions.showToast).not.toHaveBeenCalled();
            expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);
        });
        it('handles missing moveErrorDialog gracefully', ()=>{
            const stateWithoutDialog = {
                ...mockTrainingState,
                moveErrorDialog: undefined
            };
            const props = {
                ...defaultProps,
                trainingState: stateWithoutDialog
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(props));
            // Should not throw
            expect(()=>{
                (0, _react.act)(()=>{
                    result.current.handleShowBestMove();
                });
            }).not.toThrow();
        });
    });
    describe('handleMoveSuccessClose', ()=>{
        it('closes move success dialog', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            (0, _react.act)(()=>{
                result.current.handleMoveSuccessClose();
            });
            expect(mockTrainingActions.setMoveSuccessDialog).toHaveBeenCalledWith(null);
        });
    });
    describe('handleMoveSuccessContinue', ()=>{
        it('closes move success dialog', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            (0, _react.act)(()=>{
                result.current.handleMoveSuccessContinue();
            });
            expect(mockTrainingActions.setMoveSuccessDialog).toHaveBeenCalledWith(null);
        });
    });
    describe('State and Action Dependencies', ()=>{
        it('reacts to trainingState changes', ()=>{
            const { result, rerender } = (0, _react.renderHook)((props)=>(0, _useDialogHandlers.useDialogHandlers)(props), {
                initialProps: defaultProps
            });
            const newTrainingState = {
                ...mockTrainingState,
                moveErrorDialog: {
                    bestMove: 'Qh8+'
                }
            };
            const newProps = {
                ...defaultProps,
                trainingState: newTrainingState
            };
            rerender(newProps);
            (0, _react.act)(()=>{
                result.current.handleShowBestMove();
            });
            expect(mockUIActions.showToast).toHaveBeenCalledWith('Der beste Zug war: Qh8+', 'info');
        });
        it('maintains stable function references between renders', ()=>{
            const { result, rerender } = (0, _react.renderHook)((props)=>(0, _useDialogHandlers.useDialogHandlers)(props), {
                initialProps: defaultProps
            });
            const initialHandlers = {
                ...result.current
            };
            rerender(defaultProps);
            // Functions should be stable due to useCallback
            Object.entries(result.current).forEach(([key, handler])=>{
                expect(handler).toBe(initialHandlers[key]);
            });
        });
        it('updates when dependencies change', ()=>{
            const { result, rerender } = (0, _react.renderHook)((props)=>(0, _useDialogHandlers.useDialogHandlers)(props), {
                initialProps: defaultProps
            });
            const newUndoMove = jest.fn().mockReturnValue(true);
            const newProps = {
                ...defaultProps,
                undoMove: newUndoMove
            };
            rerender(newProps);
            (0, _react.act)(()=>{
                result.current.handleMoveErrorTakeBack();
            });
            expect(newUndoMove).toHaveBeenCalledTimes(1);
            expect(defaultProps.undoMove).not.toHaveBeenCalled();
        });
    });
    describe('Error Handling', ()=>{
        it('handles missing trainingActions gracefully', ()=>{
            const propsWithoutActions = {
                ...defaultProps,
                trainingActions: {}
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(propsWithoutActions));
            // Should not throw when calling handlers
            expect(()=>{
                (0, _react.act)(()=>{
                    result.current.handleMoveSuccessClose();
                });
            }).not.toThrow();
        });
        it('handles storeApi errors gracefully', ()=>{
            const mockStoreApiWithError = {
                ...mockStoreApi,
                getState: jest.fn(()=>{
                    throw new Error('Store error');
                })
            };
            const props = {
                ...defaultProps,
                storeApi: mockStoreApiWithError
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(props));
            // Should not crash on store errors
            expect(()=>{
                (0, _react.act)(()=>{
                    result.current.handleMoveErrorContinue();
                });
            }).not.toThrow();
        });
        it('handles chessService errors gracefully', ()=>{
            _ChessService.chessService.getFen.mockImplementation(()=>{
                throw new Error('Chess service error');
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            // Should not crash
            expect(()=>{
                (0, _react.act)(()=>{
                    result.current.handleMoveErrorContinue();
                });
            }).not.toThrow();
        });
    });
    describe('Complex Integration Scenarios', ()=>{
        it('handles complete error dialog workflow', ()=>{
            const mockUndoMove = jest.fn().mockReturnValue(true);
            const props = {
                ...defaultProps,
                undoMove: mockUndoMove
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(props));
            // User clicks "Take Back"
            (0, _react.act)(()=>{
                result.current.handleMoveErrorTakeBack();
            });
            // Verify complete workflow
            expect(_handlePlayerMove.cancelScheduledOpponentTurn).toHaveBeenCalled();
            expect(mockUndoMove).toHaveBeenCalled();
            expect(mockTrainingActions.setPlayerTurn).toHaveBeenCalledWith(true);
            expect(mockTrainingActions.clearOpponentThinking).toHaveBeenCalled();
            expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);
        });
        it('handles complete continue workflow with opponent turn', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDialogHandlers.useDialogHandlers)(defaultProps));
            // User clicks "Continue Playing"
            (0, _react.act)(()=>{
                result.current.handleMoveErrorContinue();
            });
            expect(mockTrainingActions.setMoveErrorDialog).toHaveBeenCalledWith(null);
            expect(_handlePlayerMove.scheduleOpponentTurn).toHaveBeenCalled();
            // Simulate opponent move completion
            const callback = _handlePlayerMove.scheduleOpponentTurn.mock.calls[0][2].onOpponentMoveComplete;
            await (0, _react.act)(async ()=>{
                await callback();
            });
            expect(mockTrainingActions.setEvaluationBaseline).toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,