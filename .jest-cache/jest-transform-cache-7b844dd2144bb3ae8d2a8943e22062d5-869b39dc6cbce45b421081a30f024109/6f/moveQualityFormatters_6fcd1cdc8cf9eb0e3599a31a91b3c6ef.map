{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/moveQualityFormatters.ts"],"sourcesContent":["/**\n * @file Move quality formatting utilities\n * @module utils/moveQualityFormatters\n *\n * @description\n * Pure utility functions for formatting and displaying move quality\n * analysis results in the UI. Provides consistent visual representation\n * of move quality through emojis, labels, and tooltips.\n *\n * @remarks\n * Key features:\n * - Quality-to-emoji mapping for visual feedback\n * - Localized quality labels (currently English)\n * - Tooltip formatting for detailed move feedback\n * - Type-safe quality classifications\n *\n * These formatters are separated from business logic to maintain\n * clean architecture and enable easy UI customization.\n */\n\nimport type { SimplifiedMoveQualityResult } from \"../types/evaluation\";\n\n/**\n * Gets emoji representation for move quality\n *\n * @param {SimplifiedMoveQualityResult['quality']} quality - Move quality classification\n * @returns {string} Emoji representing the quality\n *\n * @description\n * Maps move quality classifications to intuitive emoji representations\n * for quick visual feedback in the UI.\n *\n * @example\n * ```typescript\n * getQualityEmoji('excellent'); // '🏆'\n * getQualityEmoji('blunder');   // '💥'\n * getQualityEmoji('unknown');   // '❓'\n * ```\n *\n * @remarks\n * Emoji mappings:\n * - excellent: 🏆 (trophy - best possible move)\n * - good: 👍 (thumbs up - solid move)\n * - inaccuracy: ⚠️ (warning - minor error)\n * - mistake: ❌ (cross - significant error)\n * - blunder: 💥 (explosion - critical error)\n * - unknown: ❓ (question - no evaluation available)\n */\nexport const getQualityEmoji = (\n  quality: SimplifiedMoveQualityResult[\"quality\"],\n): string => {\n  switch (quality) {\n    case \"excellent\":\n      return \"🏆\";\n    case \"good\":\n      return \"👍\";\n    case \"inaccuracy\":\n      return \"⚠️\";\n    case \"mistake\":\n      return \"❌\";\n    case \"blunder\":\n      return \"💥\";\n    case \"unknown\":\n    default:\n      return \"❓\";\n  }\n};\n\n/**\n * Gets human-readable quality label\n *\n * @param {SimplifiedMoveQualityResult['quality']} quality - Move quality classification\n * @returns {string} Localized quality label\n *\n * @description\n * Converts technical quality classifications into user-friendly\n * labels suitable for display in the UI.\n *\n * @example\n * ```typescript\n * getQualityLabel('excellent'); // \"Excellent\"\n * getQualityLabel('blunder');   // \"Blunder\"\n * getQualityLabel('unknown');   // \"Unknown\"\n * ```\n *\n * @remarks\n * Labels are currently in English. Future versions may support\n * localization based on user language preferences.\n */\nexport const getQualityLabel = (\n  quality: SimplifiedMoveQualityResult[\"quality\"],\n): string => {\n  switch (quality) {\n    case \"excellent\":\n      return \"Excellent\";\n    case \"good\":\n      return \"Good\";\n    case \"inaccuracy\":\n      return \"Inaccuracy\";\n    case \"mistake\":\n      return \"Mistake\";\n    case \"blunder\":\n      return \"Blunder\";\n    case \"unknown\":\n    default:\n      return \"Unknown\";\n  }\n};\n\n/**\n * Formats move quality result for tooltip display\n *\n * @param {SimplifiedMoveQualityResult} result - Move quality analysis result\n * @returns {string} Formatted string for tooltip\n *\n * @description\n * Creates a comprehensive tooltip string combining emoji, label,\n * and detailed reason for the quality assessment. Provides users\n * with complete feedback about their move quality.\n *\n * @example\n * ```typescript\n * const result = {\n *   quality: 'mistake',\n *   reason: 'Loses material without compensation'\n * };\n * formatQualityTooltip(result);\n * // \"❌ Mistake: Loses material without compensation\"\n * ```\n *\n * @remarks\n * The tooltip format is designed to be concise yet informative,\n * suitable for hover interactions without overwhelming the user.\n */\nexport const formatQualityTooltip = (\n  result: SimplifiedMoveQualityResult,\n): string => {\n  const emoji = getQualityEmoji(result.quality);\n  const label = getQualityLabel(result.quality);\n\n  return `${emoji} ${label}: ${result.reason}`;\n};\n"],"names":["formatQualityTooltip","getQualityEmoji","getQualityLabel","quality","result","emoji","label","reason"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;CAkBC;;;;;;;;;;;QAoHYA;eAAAA;;QAtFAC;eAAAA;;QAyCAC;eAAAA;;;AAzCN,MAAMD,kBAAkB,CAC7BE;IAEA,OAAQA;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;QACL;YACE,OAAO;IACX;AACF;AAuBO,MAAMD,kBAAkB,CAC7BC;IAEA,OAAQA;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;QACL;YACE,OAAO;IACX;AACF;AA2BO,MAAMH,uBAAuB,CAClCI;IAEA,MAAMC,QAAQJ,gBAAgBG,OAAOD,OAAO;IAC5C,MAAMG,QAAQJ,gBAAgBE,OAAOD,OAAO;IAE5C,OAAO,GAAGE,MAAM,CAAC,EAAEC,MAAM,EAAE,EAAEF,OAAOG,MAAM,EAAE;AAC9C"}