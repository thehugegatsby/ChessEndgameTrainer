{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/test/BrowserTestApi.ts"],"sourcesContent":["/**\n * @file Browser Test API - Exposes test API for E2E tests\n * @version 1.0.0\n * @description Browser-specific implementation that exposes the Test API\n * to the window object for Playwright tests. Works with TestBridge for tablebase control.\n */\n\nimport { TestApiService } from \"./TestApiService\";\nimport type {\n  TestMoveResponse,\n  TestGameState,\n  TestTablebaseConfig,\n} from \"./TestApiService\";\nimport type { TestBridge } from \"@shared/types/test-bridge\";\nimport { getLogger } from \"@shared/services/logging\";\n\nconst logger = getLogger().setContext(\"BrowserTestApi\");\n\n/**\n * Browser Test API\n *\n * @class BrowserTestApi\n * @description\n * Exposes test methods to the browser window object for E2E tests.\n * Acts as a bridge between Playwright test scripts and the application's\n * internal test infrastructure, providing a clean API for browser automation.\n *\n * @remarks\n * Key responsibilities:\n * - Window object API exposure for E2E tests\n * - TestApiService integration and lifecycle management\n * - TestBridge coordination for tablebase control\n * - Legacy API compatibility support\n * - Browser environment safety checks\n * - Automatic cleanup on page unload\n *\n * Security features:\n * - Test environment validation\n * - API exposure only in test mode\n * - Safe cleanup on navigation\n *\n * @example\n * ```typescript\n * // Browser usage (exposed to window)\n * const result = await window.__testApi.makeMove('e2-e4');\n * const state = window.__testApi.getGameState();\n *\n * // Legacy compatibility\n * await window.e2e_makeMove('Nf3');\n * const gameState = window.e2e_getGameState();\n * ```\n */\nexport class BrowserTestApi {\n  private testApi: TestApiService;\n  private initialized = false;\n  private testBridge: TestBridge | null = null;\n\n  constructor() {\n    this.testApi = TestApiService.getInstance();\n  }\n\n  /**\n   * Initialize browser test API\n   *\n   * @description\n   * Initializes the browser test API by setting up window object exposure,\n   * TestBridge integration, and legacy compatibility methods. Only functions\n   * in test environments for security.\n   *\n   * @param {any} [storeAccess] - Store access object with actions and state\n   * @returns {Promise<void>} Promise that resolves when initialization is complete\n   *\n   * @remarks\n   * Initialization process:\n   * - Validates test environment (NODE_ENV=test or NEXT_PUBLIC_IS_E2E_TEST=true)\n   * - Initializes underlying TestApiService\n   * - Connects to TestBridge for tablebase control\n   * - Exposes modern API methods to window.__testApi\n   * - Sets up legacy compatibility methods (e2e_makeMove, e2e_getGameState)\n   * - Registers cleanup handlers for page unload\n   *\n   * @example\n   * ```typescript\n   * const browserTestApi = new BrowserTestApi();\n   * await browserTestApi.initialize(storeAccess);\n   * // Now window.__testApi is available\n   * ```\n   */\n  public async initialize(storeAccess?: any): Promise<void> {\n    if (\n      process.env.NODE_ENV !== \"test\" &&\n      process.env.NEXT_PUBLIC_IS_E2E_TEST !== \"true\"\n    ) {\n      logger.warn(\"Test API is only available in test environment\");\n      return;\n    }\n\n    if (this.initialized) {\n      return;\n    }\n\n    // Wait for store access to be provided\n    if (!storeAccess) {\n      logger.warn(\n        \"BrowserTestApi: Store access not provided, delaying initialization\",\n      );\n      return;\n    }\n\n    // Initialize test API with store access\n    this.testApi.initialize(storeAccess);\n\n    // Get TestBridge from window (set by _app.tsx)\n    this.testBridge = (window as any).__E2E_TEST_BRIDGE__ || null;\n    if (!this.testBridge) {\n      logger.warn(\n        \"TestBridge not found on window - tablebase control will not be available\",\n      );\n    }\n\n    // Expose methods to window\n    (window as any).__testApi = {\n      makeMove: this.makeMove.bind(this),\n      makeValidatedMove: this.makeValidatedMove.bind(this),\n      getGameState: this.getGameState.bind(this),\n      resetGame: this.resetGame.bind(this),\n      configureTablebase: this.configureTablebase.bind(this),\n      triggerTablebaseAnalysis: this.triggerTablebaseAnalysis.bind(this),\n      addMockTablebaseResponse: this.addMockTablebaseResponse.bind(this),\n      cleanup: this.cleanup.bind(this),\n    };\n\n    // Legacy compatibility - expose old API names\n    /**\n     *\n     * @param move\n     */\n    (window as any).e2e_makeMove = async (move: string) => {\n      const result = await this.makeMove(move);\n      return result;\n    };\n\n    /**\n     *\n     */\n    (window as any).e2e_getGameState = () => {\n      return this.getGameState();\n    };\n\n    this.initialized = true;\n    logger.info(\"Browser Test API initialized\");\n  }\n\n  /**\n   * Clean up browser test API\n   *\n   * @description\n   * Removes all test API methods from the window object and cleans up\n   * the underlying TestApiService. Should be called when tests are\n   * complete or during page navigation to prevent memory leaks.\n   *\n   * @returns {Promise<void>} Promise that resolves when cleanup is complete\n   *\n   * @remarks\n   * Cleanup operations:\n   * - Remove __testApi from window object\n   * - Remove legacy compatibility methods\n   * - Clean up TestApiService instance\n   * - Reset initialization state\n   *\n   * @example\n   * ```typescript\n   * // Manual cleanup\n   * await browserTestApi.cleanup();\n   *\n   * // Automatic cleanup on page unload (already handled)\n   * ```\n   */\n  public async cleanup(): Promise<void> {\n    if (!this.initialized) {\n      return;\n    }\n\n    // Remove from window\n    delete (window as any).__testApi;\n    delete (window as any).e2e_makeMove;\n    delete (window as any).e2e_getGameState;\n\n    // Clean up test API\n    this.testApi.cleanup();\n\n    this.initialized = false;\n  }\n\n  /**\n   * Make a move through test API (bypasses validation)\n   *\n   * @private\n   * @description\n   * Executes a chess move through the TestApiService. This is a private\n   * method that's exposed to the window object during initialization.\n   *\n   * @param {string} move - Move in algebraic notation or from-to format\n   * @returns {Promise<TestMoveResponse>} Promise resolving to move execution result\n   */\n  private async makeMove(move: string): Promise<TestMoveResponse> {\n    return this.testApi.makeMove(move);\n  }\n\n  /**\n   * Make a validated move through test API (full validation pipeline)\n   *\n   * @private\n   * @description\n   * Executes a chess move through the full validation pipeline, including\n   * error dialogs, tablebase checks, etc. This simulates real user interaction.\n   *\n   * @param {string} move - Move in algebraic notation or from-to format\n   * @returns {Promise<TestMoveResponse>} Promise resolving to move execution result\n   */\n  private async makeValidatedMove(move: string): Promise<TestMoveResponse> {\n    return this.testApi.makeValidatedMove(move);\n  }\n\n  /**\n   * Get game state through test API\n   */\n  private getGameState(): TestGameState {\n    return this.testApi.getGameState();\n  }\n\n  /**\n   * Reset game through test API\n   */\n  private async resetGame(): Promise<void> {\n    return this.testApi.resetGame();\n  }\n\n  /**\n   * Configure tablebase through test API\n   * @param config\n   */\n  private configureTablebase(config: TestTablebaseConfig): void {\n    return this.testApi.configureTablebase(config);\n  }\n\n  /**\n   * Trigger tablebase analysis (instant with mock)\n   * @param timeout\n   */\n  private async triggerTablebaseAnalysis(timeout?: number): Promise<boolean> {\n    return this.testApi.triggerTablebaseAnalysis(timeout);\n  }\n\n  /**\n   * Add custom mock tablebase response for testing\n   * @param fen\n   * @param analysis\n   */\n  private addMockTablebaseResponse(fen: string, analysis: any): void {\n    if (!this.testBridge) {\n      logger.error(\n        \"TestBridge not available - cannot add mock tablebase response\",\n      );\n      return;\n    }\n\n    // Use TestBridge to control the MockScenarioTablebase\n    this.testBridge.tablebase.addCustomResponse(fen, analysis);\n  }\n}\n\n/**\n * Browser test API singleton instance\n *\n * @description\n * Pre-created instance of BrowserTestApi that can be used for manual\n * initialization in test environments. Provides a convenient way to\n * access the browser test API without creating multiple instances.\n *\n * @example\n * ```typescript\n * import { browserTestApi } from '@shared/services/test/BrowserTestApi';\n * await browserTestApi.initialize(storeAccess);\n * ```\n */\nexport const browserTestApi = new BrowserTestApi();\n\n// Auto-cleanup on page unload\nif (typeof window !== \"undefined\") {\n  window.addEventListener(\"beforeunload\", () => {\n    browserTestApi.cleanup();\n  });\n}\n"],"names":["BrowserTestApi","browserTestApi","logger","getLogger","setContext","initialize","storeAccess","process","env","NODE_ENV","NEXT_PUBLIC_IS_E2E_TEST","warn","initialized","testApi","testBridge","window","__E2E_TEST_BRIDGE__","__testApi","makeMove","bind","makeValidatedMove","getGameState","resetGame","configureTablebase","triggerTablebaseAnalysis","addMockTablebaseResponse","cleanup","e2e_makeMove","move","result","e2e_getGameState","info","config","timeout","fen","analysis","error","tablebase","addCustomResponse","TestApiService","getInstance","addEventListener"],"mappings":"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"}