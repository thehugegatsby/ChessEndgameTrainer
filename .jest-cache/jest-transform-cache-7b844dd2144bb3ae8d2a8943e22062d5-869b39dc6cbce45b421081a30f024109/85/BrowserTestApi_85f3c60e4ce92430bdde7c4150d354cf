93e4c1cab9397ce43eaff1abc35967e1
/**
 * @file Browser Test API - Exposes test API for E2E tests
 * @version 1.0.0
 * @description Browser-specific implementation that exposes the Test API
 * to the window object for Playwright tests. Works with TestBridge for tablebase control.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get BrowserTestApi () {
        return BrowserTestApi;
    },
    get browserTestApi () {
        return browserTestApi;
    }
});
const _TestApiService = require("./TestApiService");
const _logging = require("../logging");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
const logger = (0, _logging.getLogger)().setContext("BrowserTestApi");
class BrowserTestApi {
    /**
   * Initialize browser test API
   *
   * @description
   * Initializes the browser test API by setting up window object exposure,
   * TestBridge integration, and legacy compatibility methods. Only functions
   * in test environments for security.
   *
   * @param {any} [storeAccess] - Store access object with actions and state
   * @returns {Promise<void>} Promise that resolves when initialization is complete
   *
   * @remarks
   * Initialization process:
   * - Validates test environment (NODE_ENV=test or NEXT_PUBLIC_IS_E2E_TEST=true)
   * - Initializes underlying TestApiService
   * - Connects to TestBridge for tablebase control
   * - Exposes modern API methods to window.__testApi
   * - Sets up legacy compatibility methods (e2e_makeMove, e2e_getGameState)
   * - Registers cleanup handlers for page unload
   *
   * @example
   * ```typescript
   * const browserTestApi = new BrowserTestApi();
   * await browserTestApi.initialize(storeAccess);
   * // Now window.__testApi is available
   * ```
   */ async initialize(storeAccess) {
        if (process.env.NODE_ENV !== "test" && process.env.NEXT_PUBLIC_IS_E2E_TEST !== "true") {
            logger.warn("Test API is only available in test environment");
            return;
        }
        if (this.initialized) {
            return;
        }
        // Wait for store access to be provided
        if (!storeAccess) {
            logger.warn("BrowserTestApi: Store access not provided, delaying initialization");
            return;
        }
        // Initialize test API with store access
        this.testApi.initialize(storeAccess);
        // Get TestBridge from window (set by _app.tsx)
        this.testBridge = window.__E2E_TEST_BRIDGE__ || null;
        if (!this.testBridge) {
            logger.warn("TestBridge not found on window - tablebase control will not be available");
        }
        // Expose methods to window
        window.__testApi = {
            makeMove: this.makeMove.bind(this),
            makeValidatedMove: this.makeValidatedMove.bind(this),
            getGameState: this.getGameState.bind(this),
            resetGame: this.resetGame.bind(this),
            configureTablebase: this.configureTablebase.bind(this),
            triggerTablebaseAnalysis: this.triggerTablebaseAnalysis.bind(this),
            addMockTablebaseResponse: this.addMockTablebaseResponse.bind(this),
            cleanup: this.cleanup.bind(this)
        };
        // Legacy compatibility - expose old API names
        /**
     *
     * @param move
     */ window.e2e_makeMove = async (move)=>{
            const result = await this.makeMove(move);
            return result;
        };
        /**
     *
     */ window.e2e_getGameState = ()=>{
            return this.getGameState();
        };
        this.initialized = true;
        logger.info("Browser Test API initialized");
    }
    /**
   * Clean up browser test API
   *
   * @description
   * Removes all test API methods from the window object and cleans up
   * the underlying TestApiService. Should be called when tests are
   * complete or during page navigation to prevent memory leaks.
   *
   * @returns {Promise<void>} Promise that resolves when cleanup is complete
   *
   * @remarks
   * Cleanup operations:
   * - Remove __testApi from window object
   * - Remove legacy compatibility methods
   * - Clean up TestApiService instance
   * - Reset initialization state
   *
   * @example
   * ```typescript
   * // Manual cleanup
   * await browserTestApi.cleanup();
   *
   * // Automatic cleanup on page unload (already handled)
   * ```
   */ async cleanup() {
        if (!this.initialized) {
            return;
        }
        // Remove from window
        delete window.__testApi;
        delete window.e2e_makeMove;
        delete window.e2e_getGameState;
        // Clean up test API
        this.testApi.cleanup();
        this.initialized = false;
    }
    /**
   * Make a move through test API (bypasses validation)
   *
   * @private
   * @description
   * Executes a chess move through the TestApiService. This is a private
   * method that's exposed to the window object during initialization.
   *
   * @param {string} move - Move in algebraic notation or from-to format
   * @returns {Promise<TestMoveResponse>} Promise resolving to move execution result
   */ async makeMove(move) {
        return this.testApi.makeMove(move);
    }
    /**
   * Make a validated move through test API (full validation pipeline)
   *
   * @private
   * @description
   * Executes a chess move through the full validation pipeline, including
   * error dialogs, tablebase checks, etc. This simulates real user interaction.
   *
   * @param {string} move - Move in algebraic notation or from-to format
   * @returns {Promise<TestMoveResponse>} Promise resolving to move execution result
   */ async makeValidatedMove(move) {
        return this.testApi.makeValidatedMove(move);
    }
    /**
   * Get game state through test API
   */ getGameState() {
        return this.testApi.getGameState();
    }
    /**
   * Reset game through test API
   */ async resetGame() {
        return this.testApi.resetGame();
    }
    /**
   * Configure tablebase through test API
   * @param config
   */ configureTablebase(config) {
        return this.testApi.configureTablebase(config);
    }
    /**
   * Trigger tablebase analysis (instant with mock)
   * @param timeout
   */ async triggerTablebaseAnalysis(timeout) {
        return this.testApi.triggerTablebaseAnalysis(timeout);
    }
    /**
   * Add custom mock tablebase response for testing
   * @param fen
   * @param analysis
   */ addMockTablebaseResponse(fen, analysis) {
        if (!this.testBridge) {
            logger.error("TestBridge not available - cannot add mock tablebase response");
            return;
        }
        // Use TestBridge to control the MockScenarioTablebase
        this.testBridge.tablebase.addCustomResponse(fen, analysis);
    }
    constructor(){
        _define_property(this, "testApi", void 0);
        _define_property(this, "initialized", false);
        _define_property(this, "testBridge", null);
        this.testApi = _TestApiService.TestApiService.getInstance();
    }
}
const browserTestApi = new BrowserTestApi();
// Auto-cleanup on page unload
if (typeof window !== "undefined") {
    window.addEventListener("beforeunload", ()=>{
        browserTestApi.cleanup();
    });
}

//# sourceMappingURL=data:application/json;base64,