{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/services/platform/types.ts"],"sourcesContent":["/**\n * Platform abstraction interfaces\n * Defines contracts for platform-specific implementations\n */\n\n// Storage abstraction\nexport interface IPlatformStorage {\n  save(key: string, data: any): Promise<void>;\n  load<T = any>(key: string): Promise<T | null>;\n  remove(key: string): Promise<void>;\n  clear(): Promise<void>;\n  getAllKeys(): Promise<string[]>;\n}\n\n// Notification abstraction\nexport interface IPlatformNotification {\n  requestPermission(): Promise<boolean>;\n  show(title: string, options?: NotificationOptions): Promise<void>;\n  schedule(notification: ScheduledNotification): Promise<string>;\n  cancel(id: string): Promise<void>;\n  cancelAll(): Promise<void>;\n}\n\nexport interface NotificationOptions {\n  body?: string;\n  icon?: string;\n  badge?: string;\n  tag?: string;\n  data?: any;\n}\n\nexport interface ScheduledNotification {\n  title: string;\n  body: string;\n  trigger: Date | { seconds: number };\n  data?: any;\n}\n\n// Device info abstraction\nexport interface IPlatformDevice {\n  getPlatform(): Platform;\n  getDeviceInfo(): DeviceInfo;\n  getMemoryInfo(): MemoryInfo;\n  getNetworkStatus(): NetworkStatus;\n  isLowEndDevice(): boolean;\n}\n\nexport type Platform =\n  | \"web\"\n  | \"ios\"\n  | \"android\"\n  | \"windows\"\n  | \"macos\"\n  | \"linux\";\n\nexport interface DeviceInfo {\n  model: string;\n  brand?: string;\n  osVersion: string;\n  screenSize: { width: number; height: number };\n  pixelRatio: number;\n  isTablet: boolean;\n}\n\nexport interface MemoryInfo {\n  totalMemory?: number;\n  availableMemory?: number;\n  usedMemory?: number;\n}\n\nexport interface NetworkStatus {\n  isOnline: boolean;\n  type?: \"wifi\" | \"4g\" | \"3g\" | \"2g\" | \"none\";\n  effectiveType?: string;\n  downlink?: number;\n}\n\n// Performance monitoring abstraction\nexport interface IPlatformPerformance {\n  startMeasure(name: string): void;\n  endMeasure(name: string): number;\n  mark(name: string): void;\n  measure(name: string, startMark: string, endMark: string): number;\n  getMetrics(): PerformanceMetrics;\n  clearMetrics(): void;\n}\n\nexport interface PerformanceMetrics {\n  measures: Record<string, number[]>;\n  marks: Record<string, number>;\n  averages: Record<string, number>;\n}\n\n// File system abstraction (for mobile)\nexport interface IPlatformFileSystem {\n  readFile(path: string): Promise<string>;\n  writeFile(path: string, content: string): Promise<void>;\n  deleteFile(path: string): Promise<void>;\n  exists(path: string): Promise<boolean>;\n  mkdir(path: string): Promise<void>;\n  readdir(path: string): Promise<string[]>;\n  getDocumentDirectory(): string;\n  getCacheDirectory(): string;\n}\n\n// Clipboard abstraction\nexport interface IPlatformClipboard {\n  copy(text: string): Promise<void>;\n  paste(): Promise<string>;\n  hasContent(): Promise<boolean>;\n}\n\n// Share abstraction\nexport interface IPlatformShare {\n  canShare(): boolean;\n  share(options: ShareOptions): Promise<void>;\n}\n\nexport interface ShareOptions {\n  title?: string;\n  text?: string;\n  url?: string;\n  files?: File[];\n}\n\n// Analytics abstraction\nexport interface IPlatformAnalytics {\n  track(event: string, properties?: Record<string, any>): void;\n  identify(userId: string, traits?: Record<string, any>): void;\n  page(name: string, properties?: Record<string, any>): void;\n  setUserProperties(properties: Record<string, any>): void;\n}\n\n// Main platform service interface\nexport interface IPlatformService {\n  storage: IPlatformStorage;\n  notifications: IPlatformNotification;\n  device: IPlatformDevice;\n  performance: IPlatformPerformance;\n  fileSystem?: IPlatformFileSystem;\n  clipboard: IPlatformClipboard;\n  share: IPlatformShare;\n  analytics: IPlatformAnalytics;\n}\n\n// Platform detection utilities\nexport interface IPlatformDetection {\n  isWeb(): boolean;\n  isMobile(): boolean;\n  isAndroid(): boolean;\n  isIOS(): boolean;\n  isDesktop(): boolean;\n  isTouchDevice(): boolean;\n  isStandalone(): boolean; // PWA installed\n}\n"],"names":[],"mappings":"AAAA;;;CAGC,GAED,sBAAsB"}