a883ef4a1573769a916fa7b5c9dc4ff2
/**
 * FEN validation using chess.js
 * Simple wrapper around chess.js for consistent FEN validation and normalization
 */"use strict";

/* istanbul ignore next */
function cov_2csgmekghx() {
  var path = "/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/fenValidator.ts";
  var hash = "6d511aa6652bb4d28e56825e9684dcc5a064f6eb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/fenValidator.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 13,
          column: 3
        }
      },
      "2": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "3": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 34
        }
      },
      "4": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 24,
          column: 5
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 23,
          column: 10
        }
      },
      "6": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 33
        }
      },
      "7": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "8": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 28,
          column: 50
        }
      },
      "9": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 34,
          column: 10
        }
      },
      "10": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 83
        }
      },
      "11": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 10
          }
        },
        loc: {
          start: {
            line: 10,
            column: 20
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "validateAndSanitizeFen",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 31
          }
        },
        loc: {
          start: {
            line: 15,
            column: 37
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 12
          }
        }, {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 39
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 37,
            column: 29
          },
          end: {
            line: 37,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 37,
            column: 54
          },
          end: {
            line: 37,
            column: 67
          }
        }, {
          start: {
            line: 37,
            column: 70
          },
          end: {
            line: 37,
            column: 83
          }
        }],
        line: 37
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/fenValidator.ts"],
      sourcesContent: ["/**\n * FEN validation using chess.js\n * Simple wrapper around chess.js for consistent FEN validation and normalization\n */\n\nimport { Chess } from \"chess.js\";\n\n/**\n * Result of FEN string validation\n * @interface FenValidationResult\n * @property {boolean} isValid - Whether the FEN string represents a valid chess position\n * @property {string} sanitized - Normalized FEN string (canonical form from chess.js)\n * @property {string[]} errors - Array of validation error messages if FEN is invalid\n */\nexport interface FenValidationResult {\n  isValid: boolean;\n  sanitized: string;\n  errors: string[];\n}\n\n/**\n * Validates and normalizes a FEN string using chess.js\n *\n * @param {string} fen - The FEN string to validate (Forsyth-Edwards Notation)\n * @returns {FenValidationResult} Validation result with normalized FEN\n *\n * @example\n * // Valid starting position\n * import { getLogger } from '@shared/services/logging/Logger';\n * const logger = getLogger();\n * const result = validateAndSanitizeFen(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\");\n * logger.info(\"Is valid:\", result.isValid); // true\n * logger.info(\"Sanitized:\", result.sanitized); // Normalized FEN from chess.js\n *\n * @example\n * // Invalid FEN (too many kings)\n * import { getLogger } from '@shared/services/logging/Logger';\n * const logger = getLogger();\n * const result = validateAndSanitizeFen(\"K7/K7/8/8/8/8/8/k7 w - - 0 1\");\n * logger.warn(\"Is valid:\", result.isValid); // false\n * logger.warn(\"Errors:\", result.errors); // [\"Invalid FEN: too many kings\"]\n *\n * @remarks\n * This is a thin wrapper around chess.js validation. We use chess.js because:\n * - It provides comprehensive FEN validation including piece placement rules\n * - It normalizes FEN to canonical form (important for caching)\n * - It gives descriptive error messages for debugging\n *\n * @performance O(n) where n is FEN string length, typically <1ms\n */\nexport function validateAndSanitizeFen(fen: string): FenValidationResult {\n  if (!fen || typeof fen !== \"string\") {\n    return {\n      isValid: false,\n      sanitized: \"\",\n      errors: [\"FEN must be a valid string\"],\n    };\n  }\n\n  const trimmedFen = fen.trim();\n\n  try {\n    // chess.js constructor throws on invalid FEN\n    const chess = new Chess(trimmedFen);\n\n    // Return normalized FEN from chess.js\n    return {\n      isValid: true,\n      sanitized: chess.fen(), // Normalized/canonical FEN\n      errors: [],\n    };\n  } catch (error) {\n    // chess.js provides descriptive error messages\n    const errorMessage = error instanceof Error ? error.message : \"Invalid FEN\";\n\n    return {\n      isValid: false,\n      sanitized: trimmedFen, // Return trimmed input on failure\n      errors: [errorMessage],\n    };\n  }\n}\n"],
      names: ["validateAndSanitizeFen", "fen", "isValid", "sanitized", "errors", "trimmedFen", "trim", "chess", "Chess", "error", "errorMessage", "Error", "message"],
      mappings: "AAAA;;;CAGC;;;;+BA+CeA;;;eAAAA;;;uBA7CM;AA6Cf,SAASA,uBAAuBC,GAAW;IAChD,IAAI,CAACA,OAAO,OAAOA,QAAQ,UAAU;QACnC,OAAO;YACLC,SAAS;YACTC,WAAW;YACXC,QAAQ;gBAAC;aAA6B;QACxC;IACF;IAEA,MAAMC,aAAaJ,IAAIK,IAAI;IAE3B,IAAI;QACF,6CAA6C;QAC7C,MAAMC,QAAQ,IAAIC,YAAK,CAACH;QAExB,sCAAsC;QACtC,OAAO;YACLH,SAAS;YACTC,WAAWI,MAAMN,GAAG;YACpBG,QAAQ,EAAE;QACZ;IACF,EAAE,OAAOK,OAAO;QACd,+CAA+C;QAC/C,MAAMC,eAAeD,iBAAiBE,QAAQF,MAAMG,OAAO,GAAG;QAE9D,OAAO;YACLV,SAAS;YACTC,WAAWE;YACXD,QAAQ;gBAACM;aAAa;QACxB;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6d511aa6652bb4d28e56825e9684dcc5a064f6eb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2csgmekghx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2csgmekghx();
cov_2csgmekghx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2csgmekghx().s[1]++;
Object.defineProperty(exports, "validateAndSanitizeFen", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2csgmekghx().f[0]++;
    cov_2csgmekghx().s[2]++;
    return validateAndSanitizeFen;
  }
});
const _chess =
/* istanbul ignore next */
(cov_2csgmekghx().s[3]++, require("chess.js"));
function validateAndSanitizeFen(fen) {
  /* istanbul ignore next */
  cov_2csgmekghx().f[1]++;
  cov_2csgmekghx().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_2csgmekghx().b[1][0]++, !fen) ||
  /* istanbul ignore next */
  (cov_2csgmekghx().b[1][1]++, typeof fen !== "string")) {
    /* istanbul ignore next */
    cov_2csgmekghx().b[0][0]++;
    cov_2csgmekghx().s[5]++;
    return {
      isValid: false,
      sanitized: "",
      errors: ["FEN must be a valid string"]
    };
  } else
  /* istanbul ignore next */
  {
    cov_2csgmekghx().b[0][1]++;
  }
  const trimmedFen =
  /* istanbul ignore next */
  (cov_2csgmekghx().s[6]++, fen.trim());
  /* istanbul ignore next */
  cov_2csgmekghx().s[7]++;
  try {
    // chess.js constructor throws on invalid FEN
    const chess =
    /* istanbul ignore next */
    (cov_2csgmekghx().s[8]++, new _chess.Chess(trimmedFen));
    // Return normalized FEN from chess.js
    /* istanbul ignore next */
    cov_2csgmekghx().s[9]++;
    return {
      isValid: true,
      sanitized: chess.fen(),
      errors: []
    };
  } catch (error) {
    // chess.js provides descriptive error messages
    const errorMessage =
    /* istanbul ignore next */
    (cov_2csgmekghx().s[10]++, error instanceof Error ?
    /* istanbul ignore next */
    (cov_2csgmekghx().b[2][0]++, error.message) :
    /* istanbul ignore next */
    (cov_2csgmekghx().b[2][1]++, "Invalid FEN"));
    /* istanbul ignore next */
    cov_2csgmekghx().s[11]++;
    return {
      isValid: false,
      sanitized: trimmedFen,
      errors: [errorMessage]
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,