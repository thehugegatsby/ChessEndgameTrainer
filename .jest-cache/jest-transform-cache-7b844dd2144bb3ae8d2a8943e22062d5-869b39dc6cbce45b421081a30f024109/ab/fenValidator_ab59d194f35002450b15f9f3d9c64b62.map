{"version":3,"names":["cov_2csgmekghx","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","validateAndSanitizeFen","fen","isValid","sanitized","errors","trimmedFen","trim","chess","_chess","Chess","error","errorMessage","Error","message"],"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/fenValidator.ts"],"sourcesContent":["/**\n * FEN validation using chess.js\n * Simple wrapper around chess.js for consistent FEN validation and normalization\n */\n\nimport { Chess } from \"chess.js\";\n\n/**\n * Result of FEN string validation\n * @interface FenValidationResult\n * @property {boolean} isValid - Whether the FEN string represents a valid chess position\n * @property {string} sanitized - Normalized FEN string (canonical form from chess.js)\n * @property {string[]} errors - Array of validation error messages if FEN is invalid\n */\nexport interface FenValidationResult {\n  isValid: boolean;\n  sanitized: string;\n  errors: string[];\n}\n\n/**\n * Validates and normalizes a FEN string using chess.js\n *\n * @param {string} fen - The FEN string to validate (Forsyth-Edwards Notation)\n * @returns {FenValidationResult} Validation result with normalized FEN\n *\n * @example\n * // Valid starting position\n * import { getLogger } from '@shared/services/logging/Logger';\n * const logger = getLogger();\n * const result = validateAndSanitizeFen(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\");\n * logger.info(\"Is valid:\", result.isValid); // true\n * logger.info(\"Sanitized:\", result.sanitized); // Normalized FEN from chess.js\n *\n * @example\n * // Invalid FEN (too many kings)\n * import { getLogger } from '@shared/services/logging/Logger';\n * const logger = getLogger();\n * const result = validateAndSanitizeFen(\"K7/K7/8/8/8/8/8/k7 w - - 0 1\");\n * logger.warn(\"Is valid:\", result.isValid); // false\n * logger.warn(\"Errors:\", result.errors); // [\"Invalid FEN: too many kings\"]\n *\n * @remarks\n * This is a thin wrapper around chess.js validation. We use chess.js because:\n * - It provides comprehensive FEN validation including piece placement rules\n * - It normalizes FEN to canonical form (important for caching)\n * - It gives descriptive error messages for debugging\n *\n * @performance O(n) where n is FEN string length, typically <1ms\n */\nexport function validateAndSanitizeFen(fen: string): FenValidationResult {\n  if (!fen || typeof fen !== \"string\") {\n    return {\n      isValid: false,\n      sanitized: \"\",\n      errors: [\"FEN must be a valid string\"],\n    };\n  }\n\n  const trimmedFen = fen.trim();\n\n  try {\n    // chess.js constructor throws on invalid FEN\n    const chess = new Chess(trimmedFen);\n\n    // Return normalized FEN from chess.js\n    return {\n      isValid: true,\n      sanitized: chess.fen(), // Normalized/canonical FEN\n      errors: [],\n    };\n  } catch (error) {\n    // chess.js provides descriptive error messages\n    const errorMessage = error instanceof Error ? error.message : \"Invalid FEN\";\n\n    return {\n      isValid: false,\n      sanitized: trimmedFen, // Return trimmed input on failure\n      errors: [errorMessage],\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}