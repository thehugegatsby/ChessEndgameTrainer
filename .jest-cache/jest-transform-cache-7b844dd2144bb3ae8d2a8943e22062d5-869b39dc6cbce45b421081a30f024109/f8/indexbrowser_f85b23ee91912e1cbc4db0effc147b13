58a4f9ea3a7dd634d53d15440cb03ad0
/* @ts-self-types="./index.d.ts" */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get customAlphabet () {
        return customAlphabet;
    },
    get customRandom () {
        return customRandom;
    },
    get nanoid () {
        return nanoid;
    },
    get random () {
        return random;
    },
    get urlAlphabet () {
        return _index.urlAlphabet;
    }
});
const _index = require("./url-alphabet/index.js");
let random = (bytes)=>crypto.getRandomValues(new Uint8Array(bytes));
let customRandom = (alphabet, defaultSize, getRandom)=>{
    let mask = (2 << Math.log2(alphabet.length - 1)) - 1;
    let step = -~(1.6 * mask * defaultSize / alphabet.length);
    return (size = defaultSize)=>{
        let id = '';
        while(true){
            let bytes = getRandom(step);
            let j = step | 0;
            while(j--){
                id += alphabet[bytes[j] & mask] || '';
                if (id.length >= size) return id;
            }
        }
    };
};
let customAlphabet = (alphabet, size = 21)=>customRandom(alphabet, size | 0, random);
let nanoid = (size = 21)=>{
    let id = '';
    let bytes = crypto.getRandomValues(new Uint8Array(size |= 0));
    while(size--){
        id += _index.urlAlphabet[bytes[size] & 63];
    }
    return id;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9ub2RlX21vZHVsZXMvbmFub2lkL2luZGV4LmJyb3dzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQHRzLXNlbGYtdHlwZXM9XCIuL2luZGV4LmQudHNcIiAqL1xuaW1wb3J0IHsgdXJsQWxwaGFiZXQgYXMgc2NvcGVkVXJsQWxwaGFiZXQgfSBmcm9tICcuL3VybC1hbHBoYWJldC9pbmRleC5qcydcbmV4cG9ydCB7IHVybEFscGhhYmV0IH0gZnJvbSAnLi91cmwtYWxwaGFiZXQvaW5kZXguanMnXG5leHBvcnQgbGV0IHJhbmRvbSA9IGJ5dGVzID0+IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoYnl0ZXMpKVxuZXhwb3J0IGxldCBjdXN0b21SYW5kb20gPSAoYWxwaGFiZXQsIGRlZmF1bHRTaXplLCBnZXRSYW5kb20pID0+IHtcbiAgbGV0IG1hc2sgPSAoMiA8PCBNYXRoLmxvZzIoYWxwaGFiZXQubGVuZ3RoIC0gMSkpIC0gMVxuICBsZXQgc3RlcCA9IC1+KCgxLjYgKiBtYXNrICogZGVmYXVsdFNpemUpIC8gYWxwaGFiZXQubGVuZ3RoKVxuICByZXR1cm4gKHNpemUgPSBkZWZhdWx0U2l6ZSkgPT4ge1xuICAgIGxldCBpZCA9ICcnXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxldCBieXRlcyA9IGdldFJhbmRvbShzdGVwKVxuICAgICAgbGV0IGogPSBzdGVwIHwgMFxuICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICBpZCArPSBhbHBoYWJldFtieXRlc1tqXSAmIG1hc2tdIHx8ICcnXG4gICAgICAgIGlmIChpZC5sZW5ndGggPj0gc2l6ZSkgcmV0dXJuIGlkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5leHBvcnQgbGV0IGN1c3RvbUFscGhhYmV0ID0gKGFscGhhYmV0LCBzaXplID0gMjEpID0+XG4gIGN1c3RvbVJhbmRvbShhbHBoYWJldCwgc2l6ZSB8IDAsIHJhbmRvbSlcbmV4cG9ydCBsZXQgbmFub2lkID0gKHNpemUgPSAyMSkgPT4ge1xuICBsZXQgaWQgPSAnJ1xuICBsZXQgYnl0ZXMgPSBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KChzaXplIHw9IDApKSlcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIGlkICs9IHNjb3BlZFVybEFscGhhYmV0W2J5dGVzW3NpemVdICYgNjNdXG4gIH1cbiAgcmV0dXJuIGlkXG59XG4iXSwibmFtZXMiOlsiY3VzdG9tQWxwaGFiZXQiLCJjdXN0b21SYW5kb20iLCJuYW5vaWQiLCJyYW5kb20iLCJ1cmxBbHBoYWJldCIsImJ5dGVzIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDhBcnJheSIsImFscGhhYmV0IiwiZGVmYXVsdFNpemUiLCJnZXRSYW5kb20iLCJtYXNrIiwiTWF0aCIsImxvZzIiLCJsZW5ndGgiLCJzdGVwIiwic2l6ZSIsImlkIiwiaiIsInNjb3BlZFVybEFscGhhYmV0Il0sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7Ozs7Ozs7Ozs7O1FBbUJ0QkE7ZUFBQUE7O1FBZkFDO2VBQUFBOztRQWlCQUM7ZUFBQUE7O1FBbEJBQztlQUFBQTs7UUFERkM7ZUFBQUEsa0JBQVc7Ozt1QkFENkI7QUFFMUMsSUFBSUQsU0FBU0UsQ0FBQUEsUUFBU0MsT0FBT0MsZUFBZSxDQUFDLElBQUlDLFdBQVdIO0FBQzVELElBQUlKLGVBQWUsQ0FBQ1EsVUFBVUMsYUFBYUM7SUFDaEQsSUFBSUMsT0FBTyxBQUFDLENBQUEsS0FBS0MsS0FBS0MsSUFBSSxDQUFDTCxTQUFTTSxNQUFNLEdBQUcsRUFBQyxJQUFLO0lBQ25ELElBQUlDLE9BQU8sQ0FBQyxDQUFFLENBQUEsQUFBQyxNQUFNSixPQUFPRixjQUFlRCxTQUFTTSxNQUFNLEFBQUQ7SUFDekQsT0FBTyxDQUFDRSxPQUFPUCxXQUFXO1FBQ3hCLElBQUlRLEtBQUs7UUFDVCxNQUFPLEtBQU07WUFDWCxJQUFJYixRQUFRTSxVQUFVSztZQUN0QixJQUFJRyxJQUFJSCxPQUFPO1lBQ2YsTUFBT0csSUFBSztnQkFDVkQsTUFBTVQsUUFBUSxDQUFDSixLQUFLLENBQUNjLEVBQUUsR0FBR1AsS0FBSyxJQUFJO2dCQUNuQyxJQUFJTSxHQUFHSCxNQUFNLElBQUlFLE1BQU0sT0FBT0M7WUFDaEM7UUFDRjtJQUNGO0FBQ0Y7QUFDTyxJQUFJbEIsaUJBQWlCLENBQUNTLFVBQVVRLE9BQU8sRUFBRSxHQUM5Q2hCLGFBQWFRLFVBQVVRLE9BQU8sR0FBR2Q7QUFDNUIsSUFBSUQsU0FBUyxDQUFDZSxPQUFPLEVBQUU7SUFDNUIsSUFBSUMsS0FBSztJQUNULElBQUliLFFBQVFDLE9BQU9DLGVBQWUsQ0FBQyxJQUFJQyxXQUFZUyxRQUFRO0lBQzNELE1BQU9BLE9BQVE7UUFDYkMsTUFBTUUsa0JBQWlCLENBQUNmLEtBQUssQ0FBQ1ksS0FBSyxHQUFHLEdBQUc7SUFDM0M7SUFDQSxPQUFPQztBQUNUIn0=