{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/fenValidator.ts"],"sourcesContent":["/**\n * FEN validation using chess.js\n * Simple wrapper around chess.js for consistent FEN validation and normalization\n */\n\nimport { Chess } from \"chess.js\";\n\n/**\n * Result of FEN string validation\n * @interface FenValidationResult\n * @property {boolean} isValid - Whether the FEN string represents a valid chess position\n * @property {string} sanitized - Normalized FEN string (canonical form from chess.js)\n * @property {string[]} errors - Array of validation error messages if FEN is invalid\n */\nexport interface FenValidationResult {\n  isValid: boolean;\n  sanitized: string;\n  errors: string[];\n}\n\n/**\n * Validates and normalizes a FEN string using chess.js\n *\n * @param {string} fen - The FEN string to validate (Forsyth-Edwards Notation)\n * @returns {FenValidationResult} Validation result with normalized FEN\n *\n * @example\n * // Valid starting position\n * import { getLogger } from '@shared/services/logging/Logger';\n * const logger = getLogger();\n * const result = validateAndSanitizeFen(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\");\n * logger.info(\"Is valid:\", result.isValid); // true\n * logger.info(\"Sanitized:\", result.sanitized); // Normalized FEN from chess.js\n *\n * @example\n * // Invalid FEN (too many kings)\n * import { getLogger } from '@shared/services/logging/Logger';\n * const logger = getLogger();\n * const result = validateAndSanitizeFen(\"K7/K7/8/8/8/8/8/k7 w - - 0 1\");\n * logger.warn(\"Is valid:\", result.isValid); // false\n * logger.warn(\"Errors:\", result.errors); // [\"Invalid FEN: too many kings\"]\n *\n * @remarks\n * This is a thin wrapper around chess.js validation. We use chess.js because:\n * - It provides comprehensive FEN validation including piece placement rules\n * - It normalizes FEN to canonical form (important for caching)\n * - It gives descriptive error messages for debugging\n *\n * @performance O(n) where n is FEN string length, typically <1ms\n */\nexport function validateAndSanitizeFen(fen: string): FenValidationResult {\n  if (!fen || typeof fen !== \"string\") {\n    return {\n      isValid: false,\n      sanitized: \"\",\n      errors: [\"FEN must be a valid string\"],\n    };\n  }\n\n  const trimmedFen = fen.trim();\n\n  try {\n    // chess.js constructor throws on invalid FEN\n    const chess = new Chess(trimmedFen);\n\n    // Return normalized FEN from chess.js\n    return {\n      isValid: true,\n      sanitized: chess.fen(), // Normalized/canonical FEN\n      errors: [],\n    };\n  } catch (error) {\n    // chess.js provides descriptive error messages\n    const errorMessage = error instanceof Error ? error.message : \"Invalid FEN\";\n\n    return {\n      isValid: false,\n      sanitized: trimmedFen, // Return trimmed input on failure\n      errors: [errorMessage],\n    };\n  }\n}\n"],"names":["validateAndSanitizeFen","fen","isValid","sanitized","errors","trimmedFen","trim","chess","Chess","error","errorMessage","Error","message"],"mappings":"AAAA;;;CAGC;;;;+BA+CeA;;;eAAAA;;;uBA7CM;AA6Cf,SAASA,uBAAuBC,GAAW;IAChD,IAAI,CAACA,OAAO,OAAOA,QAAQ,UAAU;QACnC,OAAO;YACLC,SAAS;YACTC,WAAW;YACXC,QAAQ;gBAAC;aAA6B;QACxC;IACF;IAEA,MAAMC,aAAaJ,IAAIK,IAAI;IAE3B,IAAI;QACF,6CAA6C;QAC7C,MAAMC,QAAQ,IAAIC,YAAK,CAACH;QAExB,sCAAsC;QACtC,OAAO;YACLH,SAAS;YACTC,WAAWI,MAAMN,GAAG;YACpBG,QAAQ,EAAE;QACZ;IACF,EAAE,OAAOK,OAAO;QACd,+CAA+C;QAC/C,MAAMC,eAAeD,iBAAiBE,QAAQF,MAAMG,OAAO,GAAG;QAE9D,OAAO;YACLV,SAAS;YACTC,WAAWE;YACXD,QAAQ;gBAACM;aAAa;QACxB;IACF;AACF"}