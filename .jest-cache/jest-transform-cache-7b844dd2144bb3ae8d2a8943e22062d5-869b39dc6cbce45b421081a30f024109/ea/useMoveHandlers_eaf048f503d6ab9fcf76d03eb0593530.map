{"version":3,"names":["cov_powfi22ff","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","useMoveHandlers","currentFen","isGameFinished","isPositionReady","trainingState","onMove","uiActions","_hooks","useUIStore","selectedSquare","setSelectedSquare","_react","useState","clearSelection","useCallback","handleMove","move","logger","_Logger","getLogger","setContext","debug","hasCurrentPosition","currentPosition","_trainingState_currentPosition","_trainingState_currentPosition1","warn","currentPositionId","id","currentPositionFen","fen","moveLogger","from","to","square","hasGame","result","error","errorMessage","Error","message","showToast","onDrop","sourceSquare","targetSquare","piece","reason","isPawn","toLowerCase","endsWith","targetRank","isPromotionRank","promotion","onSquareClick","_piece_pieceType","chess","_chess","Chess","currentTurn","turn","pieceColor","pieceType"],"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/hooks/useMoveHandlers.ts"],"sourcesContent":["/**\n * @file Move handlers hook for chess training board\n * @module hooks/useMoveHandlers\n * \n * @description\n * Custom hook that encapsulates all move handling logic for chess training.\n * Extracted from TrainingBoard to separate business logic from UI rendering.\n * Handles drag-and-drop, click-to-move, and core move validation logic.\n * \n * @remarks\n * Key responsibilities:\n * - Chess move validation and execution\n * - Drag-and-drop event handling with promotion detection\n * - Click-to-move functionality with selection state\n * - Position readiness validation\n * - Comprehensive logging and error handling\n * \n * This hook maintains all the complex business logic while providing\n * a clean interface for chess board components.\n * \n * @example\n * ```tsx\n * const { onDrop, onSquareClick, selectedSquare } = useMoveHandlers({\n *   currentFen,\n *   isGameFinished,\n *   isPositionReady,\n *   trainingState,\n *   onMove: makeMove\n * });\n * \n * <Chessboard\n *   fen={currentFen}\n *   onPieceDrop={onDrop}\n *   onSquareClick={onSquareClick}\n *   arePiecesDraggable={!isGameFinished}\n * />\n * ```\n */\n\nimport { useCallback, useState } from 'react';\nimport { Chess } from 'chess.js';\nimport { getLogger } from '@shared/services/logging/Logger';\nimport { useUIStore } from '@shared/store/hooks';\n\n/**\n * Training state structure (subset needed for move handling)\n */\ninterface TrainingStateSubset {\n  currentPosition?: {\n    id: number;\n    fen: string;\n  } | null;\n  isPlayerTurn: boolean;\n  isOpponentThinking: boolean;\n}\n\n/**\n * Props for useMoveHandlers hook\n */\ninterface UseMoveHandlersProps {\n  /** Current FEN position string */\n  currentFen: string;\n  /** Whether the game has finished */\n  isGameFinished: boolean;\n  /** Whether the position is ready for interaction */\n  isPositionReady: boolean;\n  /** Training state subset needed for move validation */\n  trainingState: TrainingStateSubset;\n  /** Callback to execute moves - should be the makeMove function from useTrainingSession */\n  onMove: (move: any) => Promise<boolean | null>;\n}\n\n/**\n * Return value from useMoveHandlers hook\n */\ninterface UseMoveHandlersReturn {\n  /** Event handler for piece drop events from drag-and-drop */\n  onDrop: (sourceSquare: string, targetSquare: string, piece: string) => boolean;\n  /** Event handler for square click events (click-to-move) */\n  onSquareClick: ({ piece, square }: { piece: any; square: string }) => void;\n  /** Currently selected square for click-to-move functionality */\n  selectedSquare: string | null;\n  /** Utility function to clear the current selection */\n  clearSelection: () => void;\n}\n\n/**\n * Custom hook for chess move handling logic\n * \n * @description\n * Encapsulates all move handling logic including:\n * - Core move validation and execution\n * - Drag-and-drop event handling with promotion detection\n * - Click-to-move functionality with selection state management\n * - Position readiness validation and game state checks\n * - Comprehensive logging and error handling\n * \n * @remarks\n * This hook maintains all the complex business logic that was previously\n * embedded in TrainingBoard. It coordinates between multiple services:\n * - Chess.js for move validation\n * - TrainingSession hook for game state via onMove callback\n * - UI actions for user feedback\n * - Logging service for debugging\n * \n * The hook preserves all original functionality while providing a clean\n * interface that separates concerns between UI rendering and business logic.\n * \n * @param props Configuration object with game state and callbacks\n * @returns Object with event handlers and selection state\n */\nexport const useMoveHandlers = ({\n  currentFen,\n  isGameFinished,\n  isPositionReady,\n  trainingState,\n  onMove,\n}: UseMoveHandlersProps): UseMoveHandlersReturn => {\n  const [, uiActions] = useUIStore();\n  \n  // Click-to-move state management\n  const [selectedSquare, setSelectedSquare] = useState<string | null>(null);\n\n  /**\n   * Clear the current square selection\n   */\n  const clearSelection = useCallback(() => {\n    setSelectedSquare(null);\n  }, []);\n\n  /**\n   * Handles chess move execution and validation\n   *\n   * @param {Object} move - Move object with from/to squares\n   * @param {string} move.from - Starting square (e.g., \"e2\")\n   * @param {string} move.to - Target square (e.g., \"e4\")\n   * @param {string} [move.promotion] - Promotion piece if applicable\n   * @returns {Promise<any>} Move result or null if invalid\n   *\n   * @description\n   * Core move handler that:\n   * 1. Validates move legality using chess.js\n   * 2. Executes the move on the game instance\n   * 3. Triggers tablebase analysis for opponent response\n   * 4. Updates all relevant state slices\n   * 5. Handles errors with user feedback\n   *\n   * @remarks\n   * This function coordinates between multiple services:\n   * - Chess.js for move validation\n   * - TrainingSession hook for game state\n   * - Tablebase orchestrator for opponent moves\n   * - UI actions for user feedback\n   *\n   * Invalid moves increment the mistake counter and show\n   * a warning toast without modifying game state.\n   *\n   * @example\n   * ```typescript\n   * // User drags piece\n   * await handleMove({ from: \"e2\", to: \"e4\" });\n   *\n   * // With promotion\n   * await handleMove({ from: \"e7\", to: \"e8\", promotion: \"q\" });\n   * ```\n   */\n  const handleMove = useCallback(\n    async (move: any) => {\n      const logger = getLogger().setContext(\"useMoveHandlers-handleMove\");\n      logger.debug(\"🚀 handleMove called\", {\n        move,\n        isGameFinished,\n        isPositionReady,\n        hasCurrentPosition: !!trainingState.currentPosition,\n        currentFen,\n      });\n\n      // CRITICAL: Block moves if position is not ready\n      if (!isPositionReady) {\n        logger.warn(\"⛔ Position not ready, blocking move\", {\n          hasCurrentPosition: !!trainingState.currentPosition,\n          currentPositionId: trainingState.currentPosition?.id,\n          currentPositionFen: trainingState.currentPosition?.fen,\n        });\n        return false;\n      }\n\n      // Add these critical debug logs\n      const moveLogger = getLogger().setContext(\"useMoveHandlers-handleMove\");\n      moveLogger.debug(\"handleMove called\", { move });\n      moveLogger.debug(\"Current FEN\", { fen: currentFen });\n\n      if (isGameFinished) {\n        logger.warn(\"handleMove early return\", { isGameFinished });\n        return false;\n      }\n\n      // Check if piece was dropped on same square (no move)\n      if (move.from === move.to) {\n        logger.debug(\"Piece dropped on same square, ignoring\", {\n          square: move.from,\n        });\n        return false;\n      }\n\n      try {\n        // Debug: Log game state before validation\n        logger.debug(\"Game state before move validation\", {\n          hasGame: false, // game is now null, handled by ChessService\n          currentFen: currentFen,\n        });\n\n        // Move validation is handled by ChessService in makeMove\n        // We don't need to validate here anymore\n        logger.debug(\"Move validation delegated to ChessService\", {\n          move,\n          currentFen,\n        });\n\n        // First make the move on the local game instance\n        logger.debug(\"Calling onMove callback\", { move });\n        const result = await onMove(move);\n        logger.debug(\"onMove result\", { result });\n\n        // The orchestrator now handles the entire workflow including:\n        // - Move validation\n        // - Error dialog for suboptimal moves\n        // - Opponent turn (only if move was optimal)\n        // TrainingBoard should NOT call handleOpponentTurn directly\n\n        return result;\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : \"Move failed\";\n        uiActions.showToast(errorMessage, \"error\");\n        return false;\n      }\n    },\n    [\n      isGameFinished,\n      onMove,\n      trainingState,\n      uiActions,\n      currentFen,\n      isPositionReady,\n      trainingState.currentPosition,\n    ],\n  );\n\n  /**\n   * Handles piece drop events from the chessboard\n   *\n   * @param {string} sourceSquare - Square where piece was picked up\n   * @param {string} targetSquare - Square where piece was dropped\n   * @param {string} piece - Piece type (required by interface)\n   * @returns {boolean} Whether the drop was accepted\n   *\n   * @description\n   * Converts drag-and-drop events into move objects and delegates\n   * to the main move handler. Always promotes to queen by default.\n   *\n   * @remarks\n   * This is the primary user interaction handler for the chess board.\n   * Returns false if game is finished to prevent further moves.\n   * The actual move validation happens in handleMove.\n   *\n   * @example\n   * ```typescript\n   * // User drags pawn from e2 to e4\n   * onDrop(\"e2\", \"e4\", \"wP\") // returns true if valid\n   * ```\n   */\n  const onDrop = useCallback(\n    (sourceSquare: string, targetSquare: string, piece: string): boolean => {\n      const logger = getLogger().setContext(\"useMoveHandlers-onDrop\");\n\n      logger.debug(\"🎯 onDrop called\", {\n        sourceSquare,\n        targetSquare,\n        piece,\n        isPositionReady,\n        isGameFinished,\n        hasCurrentPosition: !!trainingState.currentPosition,\n        currentFen,\n      });\n\n      // Block drops if position is not ready or game is finished\n      if (!isPositionReady || isGameFinished) {\n        logger.warn(\"⛔ onDrop blocked\", {\n          isPositionReady,\n          isGameFinished,\n          reason: !isPositionReady ? \"position not ready\" : \"game finished\",\n        });\n        return false;\n      }\n\n      // Check if this is a pawn promotion\n      const isPawn = piece.toLowerCase().endsWith(\"p\");\n      const targetRank = targetSquare[1];\n      const isPromotionRank = targetRank === \"8\" || targetRank === \"1\";\n\n      const move: any = {\n        from: sourceSquare,\n        to: targetSquare,\n      };\n\n      // Add promotion if pawn reaches last rank\n      if (isPawn && isPromotionRank) {\n        move.promotion = \"q\"; // Default to queen promotion\n      }\n\n      logger.debug(\"✅ onDrop calling handleMove\", { move });\n      handleMove(move);\n      return true;\n    },\n    [\n      handleMove,\n      isGameFinished,\n      isPositionReady,\n      trainingState.currentPosition,\n      currentFen,\n    ],\n  );\n\n  /**\n   * Handles square click events for click-to-move functionality\n   * \n   * @param {object} args - Arguments from react-chessboard\n   * @param {any} args.piece - Piece on the clicked square (can be null)\n   * @param {string} args.square - Square that was clicked\n   * @returns {void}\n   * \n   * @description\n   * Implements click-to-move interaction pattern for accessibility and E2E testing:\n   * - First click selects piece (if valid piece on square)\n   * - Second click attempts move to target square\n   * - Click on same square deselects piece\n   */\n  const onSquareClick = useCallback(\n    ({ piece, square }: { piece: any; square: string }): void => {\n      const logger = getLogger().setContext(\"useMoveHandlers-onSquareClick\");\n\n      logger.debug(\"🖱️ onSquareClick called\", {\n        square,\n        selectedSquare,\n        isPositionReady,\n        isGameFinished,\n      });\n\n      // Block clicks if position is not ready or game is finished\n      if (!isPositionReady || isGameFinished) {\n        logger.warn(\"⛔ onSquareClick blocked\", {\n          isPositionReady,\n          isGameFinished,\n          reason: !isPositionReady ? \"position not ready\" : \"game finished\",\n        });\n        return;\n      }\n\n      // If no square is selected, select this square if it has a piece\n      if (!selectedSquare) {\n        if (piece) {\n          // Check if it's the right color's turn\n          try {\n            const chess = new Chess(currentFen);\n            const currentTurn = chess.turn();\n            const pieceColor = piece.pieceType?.[0]; // 'w' or 'b'\n            \n            if (pieceColor === currentTurn) {\n              setSelectedSquare(square);\n              logger.debug(\"✅ Square selected\", { square, piece });\n            } else {\n              logger.debug(\"❌ Wrong color piece\", { square, piece, currentTurn });\n            }\n          } catch (error) {\n            logger.error(\"Failed to validate piece color\", error as Error);\n          }\n        } else {\n          logger.debug(\"❌ No piece on square\", { square });\n        }\n        return;\n      }\n\n      // If same square clicked, deselect\n      if (selectedSquare === square) {\n        setSelectedSquare(null);\n        logger.debug(\"🔄 Square deselected\", { square });\n        return;\n      }\n\n      // Try to make move from selected square to clicked square\n      const result = onDrop(selectedSquare, square, \"\"); // Piece type not needed\n      if (result) {\n        setSelectedSquare(null); // Clear selection after successful move\n        logger.debug(\"✅ Move completed via click\", { from: selectedSquare, to: square });\n      } else {\n        logger.debug(\"❌ Move failed via click\", { from: selectedSquare, to: square });\n      }\n    },\n    [selectedSquare, isPositionReady, isGameFinished, currentFen, onDrop],\n  );\n\n  return {\n    onDrop,\n    onSquareClick,\n    selectedSquare,\n    clearSelection,\n  };\n};"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCC;;AAAA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;MAAA;QAAAC,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;IAAA;IAAAO,SAAA;MAAA;QAAAD,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;IAAA;IAAAW,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,cAAA;MAAAC,OAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,KAAA;MAAAC,QAAA;IAAA;IAAAC,eAAA;IAAA3B,IAAA;EAAA;EAAA,IAAA4B,QAAA,GAAA3B,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAyB,QAAA,CAAA7B,IAAA,KAAA6B,QAAA,CAAA7B,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAA4B,QAAA,CAAA7B,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAyB,cAAA,GAAAD,QAAA,CAAA7B,IAAA;EAAA;;;;;;;;;;;;;;;+BA0EY;;;;;;WAAA+B,eAAA;;;;;iCAxEyB;;;iCAChB;;;iCACI;;;iCACC;AAAA;AAAAhC,aAAA,GAAAoB,CAAA;AAqEpB,MAAMY,eAAA,GAAkBA,CAAC;EAC9BC,UAAU;EACVC,cAAc;EACdC,eAAe;EACfC,aAAa;EACbC;AAAM,CACe;EAAA;EAAArC,aAAA,GAAAqB,CAAA;EACrB,MAAM,GAAGiB,SAAA,CAAU;EAAA;EAAA,CAAAtC,aAAA,GAAAoB,CAAA,OAAG,IAAAmB,MAAA,CAAAC,UAAU;EAEhC;EACA,MAAM,CAACC,cAAA,EAAgBC,iBAAA,CAAkB;EAAA;EAAA,CAAA1C,aAAA,GAAAoB,CAAA,OAAG,IAAAuB,MAAA,CAAAC,QAAQ,EAAgB;EAEpE;;;EAGA,MAAMC,cAAA;EAAA;EAAA,CAAA7C,aAAA,GAAAoB,CAAA,QAAiB,IAAAuB,MAAA,CAAAG,WAAW,EAAC;IAAA;IAAA9C,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAoB,CAAA;IACjCsB,iBAAA,CAAkB;EACpB,GAAG,EAAE;EAEL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoCA,MAAMK,UAAA;EAAA;EAAA,CAAA/C,aAAA,GAAAoB,CAAA,QAAa,IAAAuB,MAAA,CAAAG,WAAW,EAC5B,MAAOE,IAAA;IAAA;IAAAhD,aAAA,GAAAqB,CAAA;IACL,MAAM4B,MAAA;IAAA;IAAA,CAAAjD,aAAA,GAAAoB,CAAA,QAAS,IAAA8B,OAAA,CAAAC,SAAS,IAAGC,UAAU,CAAC;IAAA;IAAApD,aAAA,GAAAoB,CAAA;IACtC6B,MAAA,CAAOI,KAAK,CAAC,wBAAwB;MACnCL,IAAA;MACAd,cAAA;MACAC,eAAA;MACAmB,kBAAA,EAAoB,CAAC,CAAClB,aAAA,CAAcmB,eAAe;MACnDtB;IACF;IAEA;IAAA;IAAAjC,aAAA,GAAAoB,CAAA;IACA,IAAI,CAACe,eAAA,EAAiB;MAAA;MAAAnC,aAAA,GAAAsB,CAAA;UAGCkC,8BAAA,EACCC,+BAAA;MAAA;MAAAzD,aAAA,GAAAoB,CAAA;MAHtB6B,MAAA,CAAOS,IAAI,CAAC,uCAAuC;QACjDJ,kBAAA,EAAoB,CAAC,CAAClB,aAAA,CAAcmB,eAAe;QACnDI,iBAAiB;QAAA;QAAA,CAAA3D,aAAA,GAAAsB,CAAA,WAAEkC,8BAAA,GAAApB,aAAA,CAAcmB,eAAe;QAAA;QAAA,CAAAvD,aAAA,GAAAsB,CAAA,UAA7BkC,8BAAA;QAAA;QAAA,CAAAxD,aAAA,GAAAsB,CAAA;QAAA;QAAA,CAAAtB,aAAA,GAAAsB,CAAA,UAAAkC,8BAAA,CAA+BI,EAAE;QACpDC,kBAAkB;QAAA;QAAA,CAAA7D,aAAA,GAAAsB,CAAA,WAAEmC,+BAAA,GAAArB,aAAA,CAAcmB,eAAe;QAAA;QAAA,CAAAvD,aAAA,GAAAsB,CAAA,UAA7BmC,+BAAA;QAAA;QAAA,CAAAzD,aAAA,GAAAsB,CAAA;QAAA;QAAA,CAAAtB,aAAA,GAAAsB,CAAA,UAAAmC,+BAAA,CAA+BK,GAAG;MACxD;MAAA;MAAA9D,aAAA,GAAAoB,CAAA;MACA,OAAO;IACT;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAEA;IACA,MAAMyC,UAAA;IAAA;IAAA,CAAA/D,aAAA,GAAAoB,CAAA,QAAa,IAAA8B,OAAA,CAAAC,SAAS,IAAGC,UAAU,CAAC;IAAA;IAAApD,aAAA,GAAAoB,CAAA;IAC1C2C,UAAA,CAAWV,KAAK,CAAC,qBAAqB;MAAEL;IAAK;IAAA;IAAAhD,aAAA,GAAAoB,CAAA;IAC7C2C,UAAA,CAAWV,KAAK,CAAC,eAAe;MAAES,GAAA,EAAK7B;IAAW;IAAA;IAAAjC,aAAA,GAAAoB,CAAA;IAElD,IAAIc,cAAA,EAAgB;MAAA;MAAAlC,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAClB6B,MAAA,CAAOS,IAAI,CAAC,2BAA2B;QAAExB;MAAe;MAAA;MAAAlC,aAAA,GAAAoB,CAAA;MACxD,OAAO;IACT;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAEA;IAAAtB,aAAA,GAAAoB,CAAA;IACA,IAAI4B,IAAA,CAAKgB,IAAI,KAAKhB,IAAA,CAAKiB,EAAE,EAAE;MAAA;MAAAjE,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACzB6B,MAAA,CAAOI,KAAK,CAAC,0CAA0C;QACrDa,MAAA,EAAQlB,IAAA,CAAKgB;MACf;MAAA;MAAAhE,aAAA,GAAAoB,CAAA;MACA,OAAO;IACT;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAAAtB,aAAA,GAAAoB,CAAA;IAEA,IAAI;MAAA;MAAApB,aAAA,GAAAoB,CAAA;MACF;MACA6B,MAAA,CAAOI,KAAK,CAAC,qCAAqC;QAChDc,OAAA,EAAS;QACTlC,UAAA,EAAYA;MACd;MAEA;MACA;MAAA;MAAAjC,aAAA,GAAAoB,CAAA;MACA6B,MAAA,CAAOI,KAAK,CAAC,6CAA6C;QACxDL,IAAA;QACAf;MACF;MAEA;MAAA;MAAAjC,aAAA,GAAAoB,CAAA;MACA6B,MAAA,CAAOI,KAAK,CAAC,2BAA2B;QAAEL;MAAK;MAC/C,MAAMoB,MAAA;MAAA;MAAA,CAAApE,aAAA,GAAAoB,CAAA,QAAS,MAAMiB,MAAA,CAAOW,IAAA;MAAA;MAAAhD,aAAA,GAAAoB,CAAA;MAC5B6B,MAAA,CAAOI,KAAK,CAAC,iBAAiB;QAAEe;MAAO;MAEvC;MACA;MACA;MACA;MACA;MAAA;MAAApE,aAAA,GAAAoB,CAAA;MAEA,OAAOgD,MAAA;IACT,EAAE,OAAOC,KAAA,EAAO;MACd,MAAMC,YAAA;MAAA;MAAA,CAAAtE,aAAA,GAAAoB,CAAA,QACJiD,KAAA,YAAiBE,KAAA;MAAA;MAAA,CAAAvE,aAAA,GAAAsB,CAAA,UAAQ+C,KAAA,CAAMG,OAAO;MAAA;MAAA,CAAAxE,aAAA,GAAAsB,CAAA,UAAG;MAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAC3CkB,SAAA,CAAUmC,SAAS,CAACH,YAAA,EAAc;MAAA;MAAAtE,aAAA,GAAAoB,CAAA;MAClC,OAAO;IACT;EACF,GACA,CACEc,cAAA,EACAG,MAAA,EACAD,aAAA,EACAE,SAAA,EACAL,UAAA,EACAE,eAAA,EACAC,aAAA,CAAcmB,eAAe,CAC9B;EAGH;;;;;;;;;;;;;;;;;;;;;;;EAuBA,MAAMmB,MAAA;EAAA;EAAA,CAAA1E,aAAA,GAAAoB,CAAA,QAAS,IAAAuB,MAAA,CAAAG,WAAW,EACxB,CAAC6B,YAAA,EAAsBC,YAAA,EAAsBC,KAAA;IAAA;IAAA7E,aAAA,GAAAqB,CAAA;IAC3C,MAAM4B,MAAA;IAAA;IAAA,CAAAjD,aAAA,GAAAoB,CAAA,QAAS,IAAA8B,OAAA,CAAAC,SAAS,IAAGC,UAAU,CAAC;IAAA;IAAApD,aAAA,GAAAoB,CAAA;IAEtC6B,MAAA,CAAOI,KAAK,CAAC,oBAAoB;MAC/BsB,YAAA;MACAC,YAAA;MACAC,KAAA;MACA1C,eAAA;MACAD,cAAA;MACAoB,kBAAA,EAAoB,CAAC,CAAClB,aAAA,CAAcmB,eAAe;MACnDtB;IACF;IAEA;IAAA;IAAAjC,aAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,aAAA,GAAAsB,CAAA,WAACa,eAAA;IAAA;IAAA,CAAAnC,aAAA,GAAAsB,CAAA,UAAmBY,cAAA,GAAgB;MAAA;MAAAlC,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACtC6B,MAAA,CAAOS,IAAI,CAAC,oBAAoB;QAC9BvB,eAAA;QACAD,cAAA;QACA4C,MAAA,EAAQ,CAAC3C,eAAA;QAAA;QAAA,CAAAnC,aAAA,GAAAsB,CAAA,WAAkB;QAAA;QAAA,CAAAtB,aAAA,GAAAsB,CAAA,WAAuB;MACpD;MAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACA,OAAO;IACT;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAEA;IACA,MAAMyD,MAAA;IAAA;IAAA,CAAA/E,aAAA,GAAAoB,CAAA,QAASyD,KAAA,CAAMG,WAAW,GAAGC,QAAQ,CAAC;IAC5C,MAAMC,UAAA;IAAA;IAAA,CAAAlF,aAAA,GAAAoB,CAAA,QAAawD,YAAY,CAAC,EAAE;IAClC,MAAMO,eAAA;IAAA;IAAA,CAAAnF,aAAA,GAAAoB,CAAA;IAAkB;IAAA,CAAApB,aAAA,GAAAsB,CAAA,WAAA4D,UAAA,KAAe;IAAA;IAAA,CAAAlF,aAAA,GAAAsB,CAAA,WAAO4D,UAAA,KAAe;IAE7D,MAAMlC,IAAA;IAAA;IAAA,CAAAhD,aAAA,GAAAoB,CAAA,QAAY;MAChB4C,IAAA,EAAMW,YAAA;MACNV,EAAA,EAAIW;IACN;IAEA;IAAA;IAAA5E,aAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,aAAA,GAAAsB,CAAA,WAAAyD,MAAA;IAAA;IAAA,CAAA/E,aAAA,GAAAsB,CAAA,WAAU6D,eAAA,GAAiB;MAAA;MAAAnF,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAC7B4B,IAAA,CAAKoC,SAAS,GAAG,KAAK;IACxB;IAAA;IAAA;MAAApF,aAAA,GAAAsB,CAAA;IAAA;IAAAtB,aAAA,GAAAoB,CAAA;IAEA6B,MAAA,CAAOI,KAAK,CAAC,+BAA+B;MAAEL;IAAK;IAAA;IAAAhD,aAAA,GAAAoB,CAAA;IACnD2B,UAAA,CAAWC,IAAA;IAAA;IAAAhD,aAAA,GAAAoB,CAAA;IACX,OAAO;EACT,GACA,CACE2B,UAAA,EACAb,cAAA,EACAC,eAAA,EACAC,aAAA,CAAcmB,eAAe,EAC7BtB,UAAA,CACD;EAGH;;;;;;;;;;;;;;EAcA,MAAMoD,aAAA;EAAA;EAAA,CAAArF,aAAA,GAAAoB,CAAA,QAAgB,IAAAuB,MAAA,CAAAG,WAAW,EAC/B,CAAC;IAAE+B,KAAK;IAAEX;EAAM,CAAkC;IAAA;IAAAlE,aAAA,GAAAqB,CAAA;IAChD,MAAM4B,MAAA;IAAA;IAAA,CAAAjD,aAAA,GAAAoB,CAAA,QAAS,IAAA8B,OAAA,CAAAC,SAAS,IAAGC,UAAU,CAAC;IAAA;IAAApD,aAAA,GAAAoB,CAAA;IAEtC6B,MAAA,CAAOI,KAAK,CAAC,4BAA4B;MACvCa,MAAA;MACAzB,cAAA;MACAN,eAAA;MACAD;IACF;IAEA;IAAA;IAAAlC,aAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,aAAA,GAAAsB,CAAA,YAACa,eAAA;IAAA;IAAA,CAAAnC,aAAA,GAAAsB,CAAA,WAAmBY,cAAA,GAAgB;MAAA;MAAAlC,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACtC6B,MAAA,CAAOS,IAAI,CAAC,2BAA2B;QACrCvB,eAAA;QACAD,cAAA;QACA4C,MAAA,EAAQ,CAAC3C,eAAA;QAAA;QAAA,CAAAnC,aAAA,GAAAsB,CAAA,WAAkB;QAAA;QAAA,CAAAtB,aAAA,GAAAsB,CAAA,WAAuB;MACpD;MAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACA;IACF;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAEA;IAAAtB,aAAA,GAAAoB,CAAA;IACA,IAAI,CAACqB,cAAA,EAAgB;MAAA;MAAAzC,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACnB,IAAIyD,KAAA,EAAO;QAAA;QAAA7E,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QACT;QACA,IAAI;cAGiBkE,gBAAA;UAFnB,MAAMC,KAAA;UAAA;UAAA,CAAAvF,aAAA,GAAAoB,CAAA,QAAQ,IAAIoE,MAAA,CAAAC,KAAK,CAACxD,UAAA;UACxB,MAAMyD,WAAA;UAAA;UAAA,CAAA1F,aAAA,GAAAoB,CAAA,QAAcmE,KAAA,CAAMI,IAAI;UAC9B,MAAMC,UAAA;UAAA;UAAA,CAAA5F,aAAA,GAAAoB,CAAA;UAAA;UAAA,CAAApB,aAAA,GAAAsB,CAAA,YAAagE,gBAAA,GAAAT,KAAA,CAAMgB,SAAS;UAAA;UAAA,CAAA7F,aAAA,GAAAsB,CAAA,WAAfgE,gBAAA;UAAA;UAAA,CAAAtF,aAAA,GAAAsB,CAAA;UAAA;UAAA,CAAAtB,aAAA,GAAAsB,CAAA,WAAAgE,gBAAiB,CAAC,EAAE,IAAE;UAAA;UAAAtF,aAAA,GAAAoB,CAAA;UAEzC,IAAIwE,UAAA,KAAeF,WAAA,EAAa;YAAA;YAAA1F,aAAA,GAAAsB,CAAA;YAAAtB,aAAA,GAAAoB,CAAA;YAC9BsB,iBAAA,CAAkBwB,MAAA;YAAA;YAAAlE,aAAA,GAAAoB,CAAA;YAClB6B,MAAA,CAAOI,KAAK,CAAC,qBAAqB;cAAEa,MAAA;cAAQW;YAAM;UACpD,OAAO;YAAA;YAAA7E,aAAA,GAAAsB,CAAA;YAAAtB,aAAA,GAAAoB,CAAA;YACL6B,MAAA,CAAOI,KAAK,CAAC,uBAAuB;cAAEa,MAAA;cAAQW,KAAA;cAAOa;YAAY;UACnE;QACF,EAAE,OAAOrB,KAAA,EAAO;UAAA;UAAArE,aAAA,GAAAoB,CAAA;UACd6B,MAAA,CAAOoB,KAAK,CAAC,kCAAkCA,KAAA;QACjD;MACF,OAAO;QAAA;QAAArE,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAoB,CAAA;QACL6B,MAAA,CAAOI,KAAK,CAAC,wBAAwB;UAAEa;QAAO;MAChD;MAAA;MAAAlE,aAAA,GAAAoB,CAAA;MACA;IACF;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAEA;IAAAtB,aAAA,GAAAoB,CAAA;IACA,IAAIqB,cAAA,KAAmByB,MAAA,EAAQ;MAAA;MAAAlE,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MAC7BsB,iBAAA,CAAkB;MAAA;MAAA1C,aAAA,GAAAoB,CAAA;MAClB6B,MAAA,CAAOI,KAAK,CAAC,wBAAwB;QAAEa;MAAO;MAAA;MAAAlE,aAAA,GAAAoB,CAAA;MAC9C;IACF;IAAA;IAAA;MAAApB,aAAA,GAAAsB,CAAA;IAAA;IAEA;IACA,MAAM8C,MAAA;IAAA;IAAA,CAAApE,aAAA,GAAAoB,CAAA,QAASsD,MAAA,CAAOjC,cAAA,EAAgByB,MAAA,EAAQ,MAAK;IAAA;IAAAlE,aAAA,GAAAoB,CAAA;IACnD,IAAIgD,MAAA,EAAQ;MAAA;MAAApE,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACVsB,iBAAA,CAAkB,OAAO;MAAA;MAAA1C,aAAA,GAAAoB,CAAA;MACzB6B,MAAA,CAAOI,KAAK,CAAC,8BAA8B;QAAEW,IAAA,EAAMvB,cAAA;QAAgBwB,EAAA,EAAIC;MAAO;IAChF,OAAO;MAAA;MAAAlE,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAoB,CAAA;MACL6B,MAAA,CAAOI,KAAK,CAAC,2BAA2B;QAAEW,IAAA,EAAMvB,cAAA;QAAgBwB,EAAA,EAAIC;MAAO;IAC7E;EACF,GACA,CAACzB,cAAA,EAAgBN,eAAA,EAAiBD,cAAA,EAAgBD,UAAA,EAAYyC,MAAA,CAAO;EAAA;EAAA1E,aAAA,GAAAoB,CAAA;EAGvE,OAAO;IACLsD,MAAA;IACAW,aAAA;IACA5C,cAAA;IACAI;EACF;AACF","ignoreList":[]}