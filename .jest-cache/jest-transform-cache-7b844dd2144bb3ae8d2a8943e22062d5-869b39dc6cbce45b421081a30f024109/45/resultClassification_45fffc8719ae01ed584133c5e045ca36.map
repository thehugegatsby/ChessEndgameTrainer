{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/tablebase/resultClassification.ts"],"sourcesContent":["/**\n * @file Tablebase result classification utilities\n * @module utils/tablebase/resultClassification\n *\n * @description\n * Core utilities for classifying and organizing tablebase moves based on DTZ\n * (Distance to Zero) values. Provides a comprehensive suite of functions for\n * categorizing moves into win/draw/loss groups, sorting by quality, and\n * generating UI styling for the Lichess-like tablebase interface.\n *\n * @remarks\n * Key features:\n * - DTZ-based move classification (win/draw/loss)\n * - Move grouping and sorting algorithms\n * - Visual styling utilities (colors, icons, bar widths)\n * - Formatting functions for user-friendly display\n * - Support for both DTZ and WDL evaluation methods\n *\n * The module ensures consistent move categorization throughout the application\n * and provides optimized sorting algorithms for each move category.\n */\n\n/**\n * Move result type classification\n * @typedef {'win' | 'draw' | 'loss'} MoveResultType\n */\nexport type MoveResultType = \"win\" | \"draw\" | \"loss\";\n\n/**\n * Tablebase move data structure\n *\n * @interface TablebaseMove\n * @description\n * Complete move information from tablebase API including evaluation metrics\n * and categorization for UI display.\n *\n * @property {string} move - Move in UCI notation (e.g., \"e2e4\")\n * @property {string} san - Move in Standard Algebraic Notation (e.g., \"e4\")\n * @property {number} dtz - Distance to Zero (moves to game end)\n * @property {number} dtm - Distance to Mate (moves to checkmate)\n * @property {number} wdl - Win/Draw/Loss value (-1, 0, 1)\n * @property {'win' | 'draw' | 'loss'} category - Pre-calculated result category\n */\nexport interface TablebaseMove {\n  move: string;\n  san: string;\n  dtz: number;\n  dtm: number;\n  wdl: number;\n  category: \"win\" | \"draw\" | \"loss\";\n}\n\n/**\n * Moves grouped by result type\n *\n * @interface GroupedMoves\n * @description\n * Container for organizing moves into result categories for efficient\n * rendering and analysis.\n *\n * @property {TablebaseMove[]} win - Array of winning moves\n * @property {TablebaseMove[]} draw - Array of drawing moves\n * @property {TablebaseMove[]} loss - Array of losing moves\n */\nexport interface GroupedMoves {\n  win: TablebaseMove[];\n  draw: TablebaseMove[];\n  loss: TablebaseMove[];\n}\n\n/**\n * Categorized and sorted moves with statistics\n *\n * @interface CategorizedMoves\n * @description\n * Final categorization result with sorted moves and aggregate statistics.\n * Used as the primary data structure for UI components.\n *\n * @property {TablebaseMove[]} winningMoves - Sorted array of winning moves\n * @property {TablebaseMove[]} drawingMoves - Sorted array of drawing moves\n * @property {TablebaseMove[]} losingMoves - Sorted array of losing moves\n * @property {number} totalMoves - Total count of all moves\n */\nexport interface CategorizedMoves {\n  winningMoves: TablebaseMove[];\n  drawingMoves: TablebaseMove[];\n  losingMoves: TablebaseMove[];\n  totalMoves: number;\n}\n\n/**\n * Determines the result type of a move based on its DTZ value\n *\n * @function getMoveResultType\n * @param {number} dtz - Distance to Zero value from tablebase\n * @returns {MoveResultType} Move result type: 'win', 'draw', or 'loss'\n *\n * @description\n * Core classification function using DTZ values:\n * - Positive DTZ: Winning move (player achieves favorable outcome)\n * - Zero DTZ: Drawing move (game remains balanced)\n * - Negative DTZ: Losing move (opponent achieves favorable outcome)\n *\n * @example\n * ```typescript\n * getMoveResultType(15);  // 'win'\n * getMoveResultType(0);   // 'draw'\n * getMoveResultType(-20); // 'loss'\n * ```\n */\nexport const getMoveResultType = (dtz: number): MoveResultType => {\n  if (dtz > 0) return \"win\";\n  if (dtz === 0) return \"draw\";\n  return \"loss\";\n};\n\n/**\n * Determines the result type of a move based on its TablebaseMove data\n *\n * @function getMoveResultTypeFromMove\n * @param {TablebaseMove} move - TablebaseMove object\n * @returns {MoveResultType} Move result type: 'win', 'draw', or 'loss'\n *\n * @description\n * Enhanced classification that prioritizes the pre-calculated category field\n * if available (more reliable from API), otherwise falls back to DTZ-based\n * classification. This two-tier approach ensures accuracy even with\n * incomplete API responses.\n *\n * @example\n * ```typescript\n * const move = { san: 'Ke2', dtz: 10, category: 'win', ... };\n * getMoveResultTypeFromMove(move); // 'win' (uses category)\n * ```\n */\nexport const getMoveResultTypeFromMove = (\n  move: TablebaseMove,\n): MoveResultType => {\n  // Use the category field if available (more reliable)\n  if (move.category) {\n    return move.category;\n  }\n\n  // Fallback to DTZ-based classification\n  return getMoveResultType(move.dtz);\n};\n\n/**\n * Determines the result type based on WDL value (alternative method)\n *\n * @function getMoveResultTypeFromWdl\n * @param {number} wdl - Win/Draw/Loss value from tablebase\n * @returns {MoveResultType} Move result type: 'win', 'draw', or 'loss'\n *\n * @description\n * Alternative classification using WDL (Win/Draw/Loss) values:\n * - Positive WDL (1): Win for the player to move\n * - Zero WDL (0): Draw with best play\n * - Negative WDL (-1): Loss for the player to move\n *\n * @example\n * ```typescript\n * getMoveResultTypeFromWdl(1);   // 'win'\n * getMoveResultTypeFromWdl(0);   // 'draw'\n * getMoveResultTypeFromWdl(-1);  // 'loss'\n * ```\n */\nexport const getMoveResultTypeFromWdl = (wdl: number): MoveResultType => {\n  if (wdl > 0) return \"win\";\n  if (wdl === 0) return \"draw\";\n  return \"loss\";\n};\n\n/**\n * Groups moves by their result type for organized display\n *\n * @function groupMovesByResult\n * @param {TablebaseMove[]} moves - Array of tablebase moves to group\n * @returns {GroupedMoves} Moves organized into win/draw/loss categories\n *\n * @description\n * Efficiently categorizes an array of moves into three groups based on\n * their result type. Uses the reliable getMoveResultTypeFromMove function\n * to ensure accurate categorization even with mixed data sources.\n *\n * @example\n * ```typescript\n * const moves = [\n *   { san: 'Ke2', dtz: 10, category: 'win', ... },\n *   { san: 'Kd2', dtz: 0, category: 'draw', ... },\n *   { san: 'Kc2', dtz: -15, category: 'loss', ... }\n * ];\n * const grouped = groupMovesByResult(moves);\n * // grouped.win = [{ san: 'Ke2', ... }]\n * // grouped.draw = [{ san: 'Kd2', ... }]\n * // grouped.loss = [{ san: 'Kc2', ... }]\n * ```\n */\nexport const groupMovesByResult = (moves: TablebaseMove[]): GroupedMoves => {\n  const grouped: GroupedMoves = {\n    win: [],\n    draw: [],\n    loss: [],\n  };\n\n  for (const move of moves) {\n    const resultType = getMoveResultTypeFromMove(move);\n    grouped[resultType].push(move);\n  }\n\n  return grouped;\n};\n\n/**\n * Sorts moves within each result category by DTZ value\n *\n * @function sortMovesByResult\n * @param {TablebaseMove[]} moves - Array of tablebase moves to sort\n * @returns {TablebaseMove[]} Sorted array maintaining result type grouping\n *\n * @description\n * Applies intelligent sorting based on result type:\n * - Winning moves: Ascending DTZ (fastest wins first) - helps find quickest path to victory\n * - Drawing moves: Alphabetical by SAN notation - provides consistent ordering\n * - Losing moves: Descending DTZ (slowest losses first) - prioritizes stubborn defense\n *\n * Result types are ordered: wins → draws → losses\n *\n * @example\n * ```typescript\n * const moves = [\n *   { san: 'Kb1', dtz: -10, category: 'loss', ... },\n *   { san: 'Ka1', dtz: 5, category: 'win', ... },\n *   { san: 'Kc1', dtz: 15, category: 'win', ... }\n * ];\n * const sorted = sortMovesByResult(moves);\n * // Result: Ka1 (win, dtz=5), Kc1 (win, dtz=15), Kb1 (loss, dtz=-10)\n * ```\n *\n * @remarks\n * The sorting strategy optimizes for practical play:\n * - Players want the fastest wins\n * - In losing positions, they want the most resilient defense\n * - Drawing moves are sorted alphabetically for predictability\n */\nexport const sortMovesByResult = (moves: TablebaseMove[]): TablebaseMove[] => {\n  return [...moves].sort((a, b) => {\n    const aType = getMoveResultTypeFromMove(a);\n    const bType = getMoveResultTypeFromMove(b);\n\n    // First sort by result type priority: win > draw > loss\n    if (aType !== bType) {\n      const typeOrder = { win: 0, draw: 1, loss: 2 };\n      return typeOrder[aType] - typeOrder[bType];\n    }\n\n    // Within same result type, sort by DTZ value\n    if (aType === \"win\") {\n      // Winning moves: ascending DTZ (faster wins first)\n      return a.dtz - b.dtz;\n    } else if (aType === \"draw\") {\n      // Drawing moves: alphabetical by move notation\n      return a.san.localeCompare(b.san);\n    } else {\n      // Losing moves: descending DTZ (slower losses first)\n      return b.dtz - a.dtz;\n    }\n  });\n};\n\n/**\n * Classifies moves by DTZ values with detailed categorization\n *\n * @function classifyMovesByDTZ\n * @param {TablebaseMove[]} moves - Array of tablebase moves to classify\n * @returns {CategorizedMoves} Fully categorized and sorted moves with statistics\n *\n * @description\n * High-level function that combines grouping and sorting to produce a\n * complete classification suitable for UI consumption. This is the primary\n * entry point for move organization in the tablebase interface.\n *\n * @example\n * ```typescript\n * import { getLogger } from '@shared/services/logging/Logger';\n * const logger = getLogger();\n * const moves = getTablebaseMoves(position);\n * const classified = classifyMovesByDTZ(moves);\n *\n * logger.info(`Total moves: ${classified.totalMoves}`);\n * logger.info(`Winning: ${classified.winningMoves.length}`);\n * logger.info(`Drawing: ${classified.drawingMoves.length}`);\n * logger.info(`Losing: ${classified.losingMoves.length}`);\n * ```\n *\n * @remarks\n * The function ensures:\n * - All moves are categorized into exactly one group\n * - Each group is optimally sorted for gameplay\n * - Total move count is preserved for validation\n */\nexport const classifyMovesByDTZ = (\n  moves: TablebaseMove[],\n): CategorizedMoves => {\n  const grouped = groupMovesByResult(moves);\n\n  return {\n    winningMoves: sortMovesByResult(grouped.win),\n    drawingMoves: sortMovesByResult(grouped.draw),\n    losingMoves: sortMovesByResult(grouped.loss),\n    totalMoves: moves.length,\n  };\n};\n\n/**\n * Gets the color class for a move based on its result type\n *\n * @function getColorClass\n * @param {MoveResultType} resultType - The move result type\n * @returns {string} Tailwind CSS classes for complete styling\n *\n * @description\n * Provides comprehensive styling classes including text color, background,\n * and border for consistent visual representation across the UI.\n * Colors follow chess convention: green=good, yellow=neutral, red=bad.\n *\n * @example\n * ```typescript\n * getColorClass('win');\n * // Returns: 'text-green-700 bg-green-100 border-green-300'\n * ```\n *\n * @remarks\n * Returns combined classes for:\n * - Text color (darker shade for contrast)\n * - Background color (light tint)\n * - Border color (medium shade)\n */\nexport const getColorClass = (resultType: MoveResultType): string => {\n  switch (resultType) {\n    case \"win\":\n      return \"text-green-700 bg-green-100 border-green-300\";\n    case \"draw\":\n      return \"text-yellow-700 bg-yellow-100 border-yellow-300\";\n    case \"loss\":\n      return \"text-red-700 bg-red-100 border-red-300\";\n    default:\n      return \"text-gray-700 bg-gray-100 border-gray-300\";\n  }\n};\n\n/**\n * Gets the background color class for evaluation bars\n *\n * @function getEvaluationBarColor\n * @param {MoveResultType} resultType - The move result type\n * @returns {string} Tailwind CSS class for bar background\n *\n * @description\n * Provides solid background colors for evaluation bar visualizations.\n * Uses more saturated colors than getColorClass for better visual impact\n * in progress bar contexts.\n *\n * @example\n * ```typescript\n * <div className={getEvaluationBarColor('win')} style={{width: '75%'}} />\n * // Creates a green bar at 75% width\n * ```\n */\nexport const getEvaluationBarColor = (resultType: MoveResultType): string => {\n  switch (resultType) {\n    case \"win\":\n      return \"bg-green-500\";\n    case \"draw\":\n      return \"bg-yellow-500\";\n    case \"loss\":\n      return \"bg-red-500\";\n    default:\n      return \"bg-gray-500\";\n  }\n};\n\n/**\n * Gets the icon for a move result type\n *\n * @function getResultIcon\n * @param {MoveResultType} resultType - The move result type\n * @returns {string} Unicode icon character\n *\n * @description\n * Returns simple, universally recognized symbols for each result type.\n * These icons work across all platforms without requiring icon fonts.\n *\n * @example\n * ```typescript\n * getResultIcon('win');   // '✓' (checkmark)\n * getResultIcon('draw');  // '=' (equals)\n * getResultIcon('loss');  // '✗' (cross)\n * ```\n *\n * @remarks\n * Icons chosen for clarity:\n * - ✓ (U+2713): Universal symbol for success/win\n * - = (U+003D): Mathematical symbol for equality/draw\n * - ✗ (U+2717): Clear symbol for failure/loss\n * - ? (U+003F): Question mark for unknown states\n */\nexport const getResultIcon = (resultType: MoveResultType): string => {\n  switch (resultType) {\n    case \"win\":\n      return \"✓\";\n    case \"draw\":\n      return \"=\";\n    case \"loss\":\n      return \"✗\";\n    default:\n      return \"?\";\n  }\n};\n\n/**\n * Calculates the evaluation bar width based on DTZ value\n *\n * @function calculateBarWidth\n * @param {number} dtz - Distance to Zero value for the move\n * @param {number} maxDtz - Maximum DTZ value in the current set for normalization\n * @returns {number} Width percentage (20-100)\n *\n * @description\n * Normalizes DTZ values to create proportional bar widths for visual\n * comparison. Ensures minimum visibility (20%) while maintaining relative\n * scale. This creates an intuitive visual hierarchy where longer bars\n * indicate moves that take more time to reach the outcome.\n *\n * @example\n * ```typescript\n * // With max DTZ of 50\n * calculateBarWidth(50, 50);  // 100 (maximum width)\n * calculateBarWidth(25, 50);  // 60 (proportional)\n * calculateBarWidth(0, 50);   // 50 (default for draws)\n * calculateBarWidth(5, 50);   // 28 (minimum visibility)\n * ```\n *\n * @remarks\n * Algorithm details:\n * - Minimum width: 20% (ensures all moves are visible)\n * - Maximum width: 100% (for the longest DTZ)\n * - Linear scaling between min and max\n * - Special handling for zero values (draws)\n */\nexport const calculateBarWidth = (dtz: number, maxDtz: number): number => {\n  if (maxDtz === 0) return 50; // Default width for draws\n\n  const absDtz = Math.abs(dtz);\n  const absMaxDtz = Math.abs(maxDtz);\n\n  if (absMaxDtz === 0) return 50;\n\n  // Calculate width: minimum 20%, maximum 100%\n  const baseWidth = (absDtz / absMaxDtz) * 80 + 20;\n  return Math.min(100, Math.max(20, baseWidth));\n};\n\n/**\n * Formats DTZ value for display\n *\n * @function formatDtzDisplay\n * @param {number} dtz - Distance to Zero value\n * @returns {string} Human-readable outcome description\n *\n * @description\n * Converts raw DTZ numbers into user-friendly descriptions that clearly\n * communicate the game outcome and moves required. Uses chess terminology\n * familiar to players.\n *\n * @example\n * ```typescript\n * formatDtzDisplay(0);    // \"Draw\"\n * formatDtzDisplay(15);   // \"Win in 15\"\n * formatDtzDisplay(-20);  // \"Loss in 20\"\n * ```\n *\n * @remarks\n * The \"in X\" format follows standard chess notation where the number\n * represents half-moves (ply) to the outcome with best play from both sides.\n */\nexport const formatDtzDisplay = (dtz: number): string => {\n  if (dtz === 0) return \"Draw\";\n  if (dtz > 0) return `Win in ${dtz}`;\n  return `Loss in ${Math.abs(dtz)}`;\n};\n\n/**\n * Gets the result type title for group headers\n *\n * @function getResultTypeTitle\n * @param {MoveResultType} resultType - The move result type\n * @returns {string} Pluralized, human-readable title\n *\n * @description\n * Provides consistent group headers for the UI. Returns pluralized\n * titles suitable for section headers in the move grouping interface.\n *\n * @example\n * ```typescript\n * getResultTypeTitle('win');   // \"Winning Moves\"\n * getResultTypeTitle('draw');  // \"Drawing Moves\"\n * getResultTypeTitle('loss');  // \"Losing Moves\"\n * ```\n *\n * @remarks\n * Titles are intentionally pluralized as they represent groups of moves.\n * The \"Unknown Moves\" fallback handles edge cases gracefully.\n */\nexport const getResultTypeTitle = (resultType: MoveResultType): string => {\n  switch (resultType) {\n    case \"win\":\n      return \"Winning Moves\";\n    case \"draw\":\n      return \"Drawing Moves\";\n    case \"loss\":\n      return \"Losing Moves\";\n    default:\n      return \"Unknown Moves\";\n  }\n};\n"],"names":["calculateBarWidth","classifyMovesByDTZ","formatDtzDisplay","getColorClass","getEvaluationBarColor","getMoveResultType","getMoveResultTypeFromMove","getMoveResultTypeFromWdl","getResultIcon","getResultTypeTitle","groupMovesByResult","sortMovesByResult","dtz","move","category","wdl","moves","grouped","win","draw","loss","resultType","push","sort","a","b","aType","bType","typeOrder","san","localeCompare","winningMoves","drawingMoves","losingMoves","totalMoves","length","maxDtz","absDtz","Math","abs","absMaxDtz","baseWidth","min","max"],"mappings":"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"}