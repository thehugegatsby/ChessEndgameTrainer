8a18325b99457e37d82ea41b1766e6c1
/**
 * @file Tablebase result classification utilities
 * @module utils/tablebase/resultClassification
 *
 * @description
 * Core utilities for classifying and organizing tablebase moves based on DTZ
 * (Distance to Zero) values. Provides a comprehensive suite of functions for
 * categorizing moves into win/draw/loss groups, sorting by quality, and
 * generating UI styling for the Lichess-like tablebase interface.
 *
 * @remarks
 * Key features:
 * - DTZ-based move classification (win/draw/loss)
 * - Move grouping and sorting algorithms
 * - Visual styling utilities (colors, icons, bar widths)
 * - Formatting functions for user-friendly display
 * - Support for both DTZ and WDL evaluation methods
 *
 * The module ensures consistent move categorization throughout the application
 * and provides optimized sorting algorithms for each move category.
 */ /**
 * Move result type classification
 * @typedef {'win' | 'draw' | 'loss'} MoveResultType
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get calculateBarWidth () {
        return calculateBarWidth;
    },
    get classifyMovesByDTZ () {
        return classifyMovesByDTZ;
    },
    get formatDtzDisplay () {
        return formatDtzDisplay;
    },
    get getColorClass () {
        return getColorClass;
    },
    get getEvaluationBarColor () {
        return getEvaluationBarColor;
    },
    get getMoveResultType () {
        return getMoveResultType;
    },
    get getMoveResultTypeFromMove () {
        return getMoveResultTypeFromMove;
    },
    get getMoveResultTypeFromWdl () {
        return getMoveResultTypeFromWdl;
    },
    get getResultIcon () {
        return getResultIcon;
    },
    get getResultTypeTitle () {
        return getResultTypeTitle;
    },
    get groupMovesByResult () {
        return groupMovesByResult;
    },
    get sortMovesByResult () {
        return sortMovesByResult;
    }
});
const getMoveResultType = (dtz)=>{
    if (dtz > 0) return "win";
    if (dtz === 0) return "draw";
    return "loss";
};
const getMoveResultTypeFromMove = (move)=>{
    // Use the category field if available (more reliable)
    if (move.category) {
        return move.category;
    }
    // Fallback to DTZ-based classification
    return getMoveResultType(move.dtz);
};
const getMoveResultTypeFromWdl = (wdl)=>{
    if (wdl > 0) return "win";
    if (wdl === 0) return "draw";
    return "loss";
};
const groupMovesByResult = (moves)=>{
    const grouped = {
        win: [],
        draw: [],
        loss: []
    };
    for (const move of moves){
        const resultType = getMoveResultTypeFromMove(move);
        grouped[resultType].push(move);
    }
    return grouped;
};
const sortMovesByResult = (moves)=>{
    return [
        ...moves
    ].sort((a, b)=>{
        const aType = getMoveResultTypeFromMove(a);
        const bType = getMoveResultTypeFromMove(b);
        // First sort by result type priority: win > draw > loss
        if (aType !== bType) {
            const typeOrder = {
                win: 0,
                draw: 1,
                loss: 2
            };
            return typeOrder[aType] - typeOrder[bType];
        }
        // Within same result type, sort by DTZ value
        if (aType === "win") {
            // Winning moves: ascending DTZ (faster wins first)
            return a.dtz - b.dtz;
        } else if (aType === "draw") {
            // Drawing moves: alphabetical by move notation
            return a.san.localeCompare(b.san);
        } else {
            // Losing moves: descending DTZ (slower losses first)
            return b.dtz - a.dtz;
        }
    });
};
const classifyMovesByDTZ = (moves)=>{
    const grouped = groupMovesByResult(moves);
    return {
        winningMoves: sortMovesByResult(grouped.win),
        drawingMoves: sortMovesByResult(grouped.draw),
        losingMoves: sortMovesByResult(grouped.loss),
        totalMoves: moves.length
    };
};
const getColorClass = (resultType)=>{
    switch(resultType){
        case "win":
            return "text-green-700 bg-green-100 border-green-300";
        case "draw":
            return "text-yellow-700 bg-yellow-100 border-yellow-300";
        case "loss":
            return "text-red-700 bg-red-100 border-red-300";
        default:
            return "text-gray-700 bg-gray-100 border-gray-300";
    }
};
const getEvaluationBarColor = (resultType)=>{
    switch(resultType){
        case "win":
            return "bg-green-500";
        case "draw":
            return "bg-yellow-500";
        case "loss":
            return "bg-red-500";
        default:
            return "bg-gray-500";
    }
};
const getResultIcon = (resultType)=>{
    switch(resultType){
        case "win":
            return "✓";
        case "draw":
            return "=";
        case "loss":
            return "✗";
        default:
            return "?";
    }
};
const calculateBarWidth = (dtz, maxDtz)=>{
    if (maxDtz === 0) return 50; // Default width for draws
    const absDtz = Math.abs(dtz);
    const absMaxDtz = Math.abs(maxDtz);
    if (absMaxDtz === 0) return 50;
    // Calculate width: minimum 20%, maximum 100%
    const baseWidth = absDtz / absMaxDtz * 80 + 20;
    return Math.min(100, Math.max(20, baseWidth));
};
const formatDtzDisplay = (dtz)=>{
    if (dtz === 0) return "Draw";
    if (dtz > 0) return `Win in ${dtz}`;
    return `Loss in ${Math.abs(dtz)}`;
};
const getResultTypeTitle = (resultType)=>{
    switch(resultType){
        case "win":
            return "Winning Moves";
        case "draw":
            return "Drawing Moves";
        case "loss":
            return "Losing Moves";
        default:
            return "Unknown Moves";
    }
};

//# sourceMappingURL=data:application/json;base64,