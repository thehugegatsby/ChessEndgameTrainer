e36b90f1601e334dcaca5d9cf09c52dc
/**
 * Mock Factories for Platform Services
 * Jest 30 compatible mocks for all platform services
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get MockScenarios () {
        return MockScenarios;
    },
    get createMockPlatformAnalytics () {
        return createMockPlatformAnalytics;
    },
    get createMockPlatformClipboard () {
        return createMockPlatformClipboard;
    },
    get createMockPlatformDevice () {
        return createMockPlatformDevice;
    },
    get createMockPlatformNotification () {
        return createMockPlatformNotification;
    },
    get createMockPlatformPerformance () {
        return createMockPlatformPerformance;
    },
    get createMockPlatformService () {
        return createMockPlatformService;
    },
    get createMockPlatformShare () {
        return createMockPlatformShare;
    },
    get createMockPlatformStorage () {
        return createMockPlatformStorage;
    }
});
// Helper to create mock functions that work with or without Jest
const mockFn = (impl)=>{
    if (typeof jest !== "undefined" && jest.fn) {
        return impl ? jest.fn(impl) : jest.fn();
    }
    return impl || (()=>{});
};
const asyncMockFn = (impl)=>{
    if (typeof jest !== "undefined" && jest.fn) {
        return impl ? jest.fn(impl) : jest.fn().mockResolvedValue(undefined);
    }
    return impl || (()=>Promise.resolve(undefined));
};
function createMockPlatformStorage() {
    const store = {};
    return {
        save: asyncMockFn(async (key, data)=>{
            store[key] = data;
        }),
        load: asyncMockFn(async (key)=>{
            return store[key] || null;
        }),
        remove: asyncMockFn(async (key)=>{
            delete store[key];
        }),
        clear: asyncMockFn(async ()=>{
            Object.keys(store).forEach((key)=>delete store[key]);
        }),
        getAllKeys: asyncMockFn(async ()=>{
            return Object.keys(store);
        })
    };
}
function createMockPlatformDevice() {
    const mockDeviceInfo = {
        model: "Test Device",
        brand: "Test Brand",
        osVersion: "1.0.0",
        screenSize: {
            width: 1920,
            height: 1080
        },
        pixelRatio: 1,
        isTablet: false
    };
    const mockMemoryInfo = {
        totalMemory: 8 * 1024 * 1024 * 1024,
        availableMemory: 4 * 1024 * 1024 * 1024,
        usedMemory: 4 * 1024 * 1024 * 1024
    };
    const mockNetworkStatus = {
        isOnline: true,
        type: "wifi",
        effectiveType: "4g",
        downlink: 10
    };
    return {
        getPlatform: mockFn(()=>"web"),
        getDeviceInfo: mockFn(()=>mockDeviceInfo),
        getMemoryInfo: mockFn(()=>mockMemoryInfo),
        getNetworkStatus: mockFn(()=>mockNetworkStatus),
        isLowEndDevice: mockFn(()=>false)
    };
}
function createMockPlatformNotification() {
    return {
        requestPermission: asyncMockFn(async ()=>true),
        show: asyncMockFn(),
        schedule: asyncMockFn(async ()=>"mock-notification-id"),
        cancel: asyncMockFn(),
        cancelAll: asyncMockFn()
    };
}
function createMockPlatformPerformance() {
    let mockTime = 0;
    const measures = {};
    const marks = {};
    const mockMetrics = {
        measures,
        marks,
        averages: {}
    };
    return {
        startMeasure: mockFn((name)=>{
            marks[`${name}_start`] = mockTime;
        }),
        endMeasure: mockFn((name)=>{
            const startTime = marks[`${name}_start`] || 0;
            const duration = mockTime - startTime;
            if (!measures[name]) measures[name] = [];
            measures[name].push(duration);
            mockTime += 16.67; // Simulate time passing
            return duration;
        }),
        mark: mockFn((name)=>{
            marks[name] = mockTime;
            mockTime += 1;
        }),
        measure: mockFn((name, startMark, endMark)=>{
            const duration = (marks[endMark] || 0) - (marks[startMark] || 0);
            if (!measures[name]) measures[name] = [];
            measures[name].push(duration);
            return duration;
        }),
        getMetrics: mockFn(()=>mockMetrics),
        clearMetrics: mockFn(()=>{
            Object.keys(measures).forEach((key)=>delete measures[key]);
            Object.keys(marks).forEach((key)=>delete marks[key]);
        })
    };
}
function createMockPlatformClipboard() {
    let clipboardContent = "";
    return {
        copy: asyncMockFn(async (text)=>{
            clipboardContent = text;
        }),
        paste: asyncMockFn(async ()=>clipboardContent),
        hasContent: asyncMockFn(async ()=>clipboardContent.length > 0)
    };
}
function createMockPlatformShare() {
    return {
        canShare: mockFn(()=>true),
        share: asyncMockFn()
    };
}
function createMockPlatformAnalytics() {
    return {
        track: mockFn(),
        identify: mockFn(),
        page: mockFn(),
        setUserProperties: mockFn()
    };
}
function createMockPlatformService() {
    return {
        storage: createMockPlatformStorage(),
        notifications: createMockPlatformNotification(),
        device: createMockPlatformDevice(),
        performance: createMockPlatformPerformance(),
        clipboard: createMockPlatformClipboard(),
        share: createMockPlatformShare(),
        analytics: createMockPlatformAnalytics()
    };
}
const MockScenarios = {
    /**
   * Default mocks for most tests
   */ default: createMockPlatformService,
    /**
   * Offline device scenario
   */ offline: ()=>{
        const service = createMockPlatformService();
        service.device.getNetworkStatus = mockFn(()=>({
                isOnline: false,
                type: "none",
                effectiveType: undefined,
                downlink: 0
            }));
        return service;
    },
    /**
   * Low-end device scenario
   */ lowEndDevice: ()=>{
        const service = createMockPlatformService();
        service.device.isLowEndDevice = mockFn(()=>true);
        service.device.getMemoryInfo = mockFn(()=>({
                totalMemory: 2 * 1024 * 1024 * 1024,
                availableMemory: 512 * 1024 * 1024,
                usedMemory: 1.5 * 1024 * 1024 * 1024
            }));
        return service;
    },
    /**
   * No permissions scenario
   */ noPermissions: ()=>{
        const service = createMockPlatformService();
        service.notifications.requestPermission = asyncMockFn(async ()=>false);
        service.clipboard.hasContent = asyncMockFn(async ()=>false);
        service.share.canShare = mockFn(()=>false);
        return service;
    }
};

//# sourceMappingURL=data:application/json;base64,