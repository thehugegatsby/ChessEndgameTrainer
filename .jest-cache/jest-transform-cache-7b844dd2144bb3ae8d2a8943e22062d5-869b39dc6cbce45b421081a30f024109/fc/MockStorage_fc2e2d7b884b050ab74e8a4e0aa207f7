a124afefcb69f87241157d25d8e0a79f
/**
 * MockStorage Implementation
 * Jest-compatible mock that implements Storage interface with realistic behavior
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MockStorage", {
    enumerable: true,
    get: function() {
        return MockStorage;
    }
});
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
class MockStorage {
    get length() {
        return Object.keys(this.store).length;
    }
    // Helper to pre-populate storage for tests
    seed(data) {
        this.store = {
            ...data
        };
        // Reset call counts when seeding
        this.getItem.mockClear();
        this.setItem.mockClear();
        this.removeItem.mockClear();
        this.clear.mockClear();
        this.key.mockClear();
    }
    // Helper to get current store state (for debugging)
    getStore() {
        return {
            ...this.store
        };
    }
    // Helper to check if key exists
    hasKey(key) {
        return key in this.store;
    }
    constructor(){
        _define_property(this, "store", {});
        // Public Jest mocks for spying
        _define_property(this, "getItem", jest.fn((key)=>{
            return this.store[key] || null;
        }));
        _define_property(this, "setItem", jest.fn((key, value)=>{
            this.store[key] = String(value); // Ensure value is a string, like in real localStorage
        }));
        _define_property(this, "removeItem", jest.fn((key)=>{
            delete this.store[key];
        }));
        _define_property(this, "clear", jest.fn(()=>{
            this.store = {};
        }));
        _define_property(this, "key", jest.fn((index)=>{
            const keys = Object.keys(this.store);
            return keys[index] || null;
        }));
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvdGVzdHMvdXRpbHMvTW9ja1N0b3JhZ2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb2NrU3RvcmFnZSBJbXBsZW1lbnRhdGlvblxuICogSmVzdC1jb21wYXRpYmxlIG1vY2sgdGhhdCBpbXBsZW1lbnRzIFN0b3JhZ2UgaW50ZXJmYWNlIHdpdGggcmVhbGlzdGljIGJlaGF2aW9yXG4gKi9cblxuZXhwb3J0IGNsYXNzIE1vY2tTdG9yYWdlIGltcGxlbWVudHMgU3RvcmFnZSB7XG4gIHByaXZhdGUgc3RvcmU6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcblxuICAvLyBQdWJsaWMgSmVzdCBtb2NrcyBmb3Igc3B5aW5nXG4gIHB1YmxpYyBnZXRJdGVtID0gamVzdC5mbigoa2V5OiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZVtrZXldIHx8IG51bGw7XG4gIH0pO1xuXG4gIHB1YmxpYyBzZXRJdGVtID0gamVzdC5mbigoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICB0aGlzLnN0b3JlW2tleV0gPSBTdHJpbmcodmFsdWUpOyAvLyBFbnN1cmUgdmFsdWUgaXMgYSBzdHJpbmcsIGxpa2UgaW4gcmVhbCBsb2NhbFN0b3JhZ2VcbiAgfSk7XG5cbiAgcHVibGljIHJlbW92ZUl0ZW0gPSBqZXN0LmZuKChrZXk6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgIGRlbGV0ZSB0aGlzLnN0b3JlW2tleV07XG4gIH0pO1xuXG4gIHB1YmxpYyBjbGVhciA9IGplc3QuZm4oKCk6IHZvaWQgPT4ge1xuICAgIHRoaXMuc3RvcmUgPSB7fTtcbiAgfSk7XG5cbiAgcHVibGljIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5zdG9yZSkubGVuZ3RoO1xuICB9XG5cbiAgcHVibGljIGtleSA9IGplc3QuZm4oKGluZGV4OiBudW1iZXIpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5zdG9yZSk7XG4gICAgcmV0dXJuIGtleXNbaW5kZXhdIHx8IG51bGw7XG4gIH0pO1xuXG4gIC8vIEhlbHBlciB0byBwcmUtcG9wdWxhdGUgc3RvcmFnZSBmb3IgdGVzdHNcbiAgcHVibGljIHNlZWQoZGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPikge1xuICAgIHRoaXMuc3RvcmUgPSB7IC4uLmRhdGEgfTtcbiAgICAvLyBSZXNldCBjYWxsIGNvdW50cyB3aGVuIHNlZWRpbmdcbiAgICB0aGlzLmdldEl0ZW0ubW9ja0NsZWFyKCk7XG4gICAgdGhpcy5zZXRJdGVtLm1vY2tDbGVhcigpO1xuICAgIHRoaXMucmVtb3ZlSXRlbS5tb2NrQ2xlYXIoKTtcbiAgICB0aGlzLmNsZWFyLm1vY2tDbGVhcigpO1xuICAgIHRoaXMua2V5Lm1vY2tDbGVhcigpO1xuICB9XG5cbiAgLy8gSGVscGVyIHRvIGdldCBjdXJyZW50IHN0b3JlIHN0YXRlIChmb3IgZGVidWdnaW5nKVxuICBwdWJsaWMgZ2V0U3RvcmUoKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy5zdG9yZSB9O1xuICB9XG5cbiAgLy8gSGVscGVyIHRvIGNoZWNrIGlmIGtleSBleGlzdHNcbiAgcHVibGljIGhhc0tleShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBrZXkgaW4gdGhpcy5zdG9yZTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIk1vY2tTdG9yYWdlIiwibGVuZ3RoIiwiT2JqZWN0Iiwia2V5cyIsInN0b3JlIiwic2VlZCIsImRhdGEiLCJnZXRJdGVtIiwibW9ja0NsZWFyIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjbGVhciIsImtleSIsImdldFN0b3JlIiwiaGFzS2V5IiwiamVzdCIsImZuIiwidmFsdWUiLCJTdHJpbmciLCJpbmRleCJdLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDOzs7OytCQUVZQTs7O2VBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0FBQU4sTUFBTUE7SUFvQlgsSUFBV0MsU0FBaUI7UUFDMUIsT0FBT0MsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ0MsS0FBSyxFQUFFSCxNQUFNO0lBQ3ZDO0lBT0EsMkNBQTJDO0lBQ3BDSSxLQUFLQyxJQUE0QixFQUFFO1FBQ3hDLElBQUksQ0FBQ0YsS0FBSyxHQUFHO1lBQUUsR0FBR0UsSUFBSTtRQUFDO1FBQ3ZCLGlDQUFpQztRQUNqQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsU0FBUztRQUN0QixJQUFJLENBQUNDLE9BQU8sQ0FBQ0QsU0FBUztRQUN0QixJQUFJLENBQUNFLFVBQVUsQ0FBQ0YsU0FBUztRQUN6QixJQUFJLENBQUNHLEtBQUssQ0FBQ0gsU0FBUztRQUNwQixJQUFJLENBQUNJLEdBQUcsQ0FBQ0osU0FBUztJQUNwQjtJQUVBLG9EQUFvRDtJQUM3Q0ssV0FBbUM7UUFDeEMsT0FBTztZQUFFLEdBQUcsSUFBSSxDQUFDVCxLQUFLO1FBQUM7SUFDekI7SUFFQSxnQ0FBZ0M7SUFDekJVLE9BQU9GLEdBQVcsRUFBVztRQUNsQyxPQUFPQSxPQUFPLElBQUksQ0FBQ1IsS0FBSztJQUMxQjs7UUEvQ0EsdUJBQVFBLFNBQWdDLENBQUM7UUFFekMsK0JBQStCO1FBQy9CLHVCQUFPRyxXQUFVUSxLQUFLQyxFQUFFLENBQUMsQ0FBQ0o7WUFDeEIsT0FBTyxJQUFJLENBQUNSLEtBQUssQ0FBQ1EsSUFBSSxJQUFJO1FBQzVCO1FBRUEsdUJBQU9ILFdBQVVNLEtBQUtDLEVBQUUsQ0FBQyxDQUFDSixLQUFhSztZQUNyQyxJQUFJLENBQUNiLEtBQUssQ0FBQ1EsSUFBSSxHQUFHTSxPQUFPRCxRQUFRLHNEQUFzRDtRQUN6RjtRQUVBLHVCQUFPUCxjQUFhSyxLQUFLQyxFQUFFLENBQUMsQ0FBQ0o7WUFDM0IsT0FBTyxJQUFJLENBQUNSLEtBQUssQ0FBQ1EsSUFBSTtRQUN4QjtRQUVBLHVCQUFPRCxTQUFRSSxLQUFLQyxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDWixLQUFLLEdBQUcsQ0FBQztRQUNoQjtRQU1BLHVCQUFPUSxPQUFNRyxLQUFLQyxFQUFFLENBQUMsQ0FBQ0c7WUFDcEIsTUFBTWhCLE9BQU9ELE9BQU9DLElBQUksQ0FBQyxJQUFJLENBQUNDLEtBQUs7WUFDbkMsT0FBT0QsSUFBSSxDQUFDZ0IsTUFBTSxJQUFJO1FBQ3hCOztBQXNCRiJ9