{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/hooks/useProgressStore.ts"],"sourcesContent":["/**\n * @file Progress store hooks\n * @module store/hooks/useProgressStore\n * \n * @description\n * Performance-optimized hooks for accessing progress state and actions.\n * Implements the three-hook pattern for optimal re-render prevention.\n * \n * @example\n * ```typescript\n * // Use only state (component re-renders when state changes)\n * const { userStats, syncStatus } = useProgressState();\n * \n * // Use only actions (component NEVER re-renders)\n * const actions = useProgressActions();\n * actions.updateSessionProgress({ positionsCompleted: 1 });\n * \n * // Use both state and actions\n * const [state, actions] = useProgressStore();\n * ```\n */\n\nimport { useStore } from '../rootStore';\nimport { useShallow } from 'zustand/react/shallow';\nimport type { ProgressState, ProgressActions } from '../slices/types';\nimport { getDueCardsFromMap } from '@shared/services/SpacedRepetitionService';\nimport { useMemo } from 'react';\nimport { dueCardsCacheService, createInputHash } from '@shared/services/DueCardsCacheService';\nimport { filterDueCards, calculateDueCardsStats } from '@shared/types/progress';\nimport { getLogger } from '@shared/services/logging/Logger';\n\n/**\n * Hook for accessing progress state with shallow equality checks\n * Components using this hook will re-render when selected state changes\n * \n * @returns {ProgressState} Current progress state\n * \n * @example\n * ```typescript\n * function ProgressPanel() {\n *   const { userStats, dueCardCount, syncStatus } = useProgressState();\n *   \n *   return (\n *     <div>\n *       <p>Due cards: {dueCardCount}</p>\n *       <p>Sync status: {syncStatus}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nexport const useProgressState = (): ProgressState => {\n  return useStore(\n    useShallow((state) => ({\n      userStats: state.progress.userStats,\n      sessionProgress: state.progress.sessionProgress,\n      cardProgress: state.progress.cardProgress,\n      loading: state.progress.loading,\n      syncStatus: state.progress.syncStatus,\n      lastSync: state.progress.lastSync,\n      syncError: state.progress.syncError,\n    }))\n  );\n};\n\n/**\n * Hook for accessing progress actions without causing re-renders\n * Components using this hook will NEVER re-render\n * \n * @returns {ProgressActions} Progress action functions\n * \n * @example\n * ```typescript\n * function SaveButton() {\n *   const actions = useProgressActions();\n *   \n *   const handleSave = () => {\n *     actions.setSyncStatus('syncing');\n *     // ... perform save\n *     actions.setSyncStatus('idle');\n *   };\n *   \n *   return <button onClick={handleSave}>Save Progress</button>;\n * }\n * ```\n */\nexport const useProgressActions = (): ProgressActions => {\n  return useStore(\n    useShallow((state) => ({\n      // Synchronous actions\n      setUserStats: state.progress.setUserStats,\n      updateSessionProgress: state.progress.updateSessionProgress,\n      setLoading: state.progress.setLoading,\n      setSyncStatus: state.progress.setSyncStatus,\n      setLastSync: state.progress.setLastSync,\n      setSyncError: state.progress.setSyncError,\n      initializeCards: state.progress.initializeCards,\n      recordAttempt: state.progress.recordAttempt,\n      resetCardProgress: state.progress.resetCardProgress,\n      setCardProgress: state.progress.setCardProgress,\n      batchUpdateProgress: state.progress.batchUpdateProgress,\n      resetProgress: state.progress.resetProgress,\n      \n      // Async Firebase actions\n      loadUserProgress: state.progress.loadUserProgress,\n      saveUserStats: state.progress.saveUserStats,\n      saveCardProgress: state.progress.saveCardProgress,\n      saveSessionComplete: state.progress.saveSessionComplete,\n      getDueCards: state.progress.getDueCards,\n      syncAllProgress: state.progress.syncAllProgress,\n    }))\n  );\n};\n\n/**\n * Combined hook for accessing both progress state and actions\n * Convenient for components that need both\n * \n * @returns {[ProgressState, ProgressActions]} Tuple of state and actions\n * \n * @example\n * ```typescript\n * function ProgressManager() {\n *   const [state, actions] = useProgressStore();\n *   \n *   useEffect(() => {\n *     if (state.syncStatus === 'error') {\n *       actions.setSyncStatus('idle');\n *       // Retry logic...\n *     }\n *   }, [state.syncStatus]);\n *   \n *   return (\n *     <div>\n *       <p>Total positions: {state.userStats?.totalPositions ?? 0}</p>\n *       <button onClick={() => actions.resetProgress()}>\n *         Reset Progress\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n */\nexport const useProgressStore = (): [ProgressState, ProgressActions] => {\n  const state = useProgressState();\n  const actions = useProgressActions();\n  return [state, actions];\n};\n\n/**\n * Enhanced hook for accessing derived progress values with cache-first strategy\n * \n * Features:\n * - Cache-first due cards calculation with localStorage persistence\n * - 24h TTL with UTC midnight invalidation\n * - Performance optimization for large card collections (>500 cards)\n * - Graceful fallback to direct computation on cache miss\n * - Cache statistics for monitoring\n * \n * @param userId - User identifier for cache isolation (required)\n * @returns Derived progress values with cache information\n * \n * @example\n * ```typescript\n * function DueCardsPanel({ userId }: { userId: string }) {\n *   const { \n *     dueCardCount, \n *     dueCards, \n *     successRate, \n *     cacheStats,\n *     isFromCache \n *   } = useDerivedProgress(userId);\n *   \n *   return (\n *     <div>\n *       <h2>Due for review: {dueCardCount}</h2>\n *       <p>Success rate: {successRate.toFixed(1)}%</p>\n *       {isFromCache && <small>ðŸ“‹ Cached result</small>}\n *     </div>\n *   );\n * }\n * ```\n */\nexport const useDerivedProgress = (userId: string | null = null) => {\n  const logger = useMemo(() => getLogger().setContext('useDerivedProgress'), []);\n\n  // Get stable state values\n  const cardProgress = useStore(useShallow((state) => state.progress.cardProgress));\n  const sessionProgress = useStore(useShallow((state) => state.progress.sessionProgress));\n\n  return useMemo(() => {\n    const now = Date.now();\n    const allCards = Object.values(cardProgress);\n    \n    // Calculate session success rate (always computed fresh)\n    const { positionsCorrect, positionsAttempted } = sessionProgress;\n    const successRate = positionsAttempted > 0 \n      ? (positionsCorrect / positionsAttempted) * 100 \n      : 0;\n\n    // If no userId provided, fall back to direct computation\n    if (!userId) {\n      logger.debug('No userId provided, using direct computation');\n      const dueCards = getDueCardsFromMap(cardProgress, now);\n      \n      return {\n        dueCardCount: dueCards.length,\n        dueCards,\n        successRate,\n        totalCards: allCards.length,\n        isFromCache: false,\n        cacheStats: { available: false, totalEntries: 0, estimatedSize: 0, lastCleanup: null }\n      };\n    }\n\n    // Create input hash for cache validation\n    const inputHash = createInputHash({\n      userId,\n      cardCount: allCards.length,\n      cardIds: allCards.map(c => c.id).sort(), // Sorted for consistency\n      timestamp: Math.floor(now / (5 * 60 * 1000)) * (5 * 60 * 1000) // 5-minute buckets\n    });\n\n    // Try to get cached result\n    const cachedResult = dueCardsCacheService.getDueCards(userId, inputHash);\n    \n    if (cachedResult) {\n      logger.debug('Cache hit for due cards calculation', { \n        userId, \n        dueCount: cachedResult.dueCards.length,\n        cacheAge: now - cachedResult.calculatedAt\n      });\n\n      return {\n        dueCardCount: cachedResult.dueCards.length,\n        dueCards: cachedResult.dueCards,\n        successRate,\n        totalCards: allCards.length,\n        isFromCache: true,\n        cacheStats: dueCardsCacheService.getCacheStats(),\n        stats: cachedResult.stats\n      };\n    }\n\n    // Cache miss: compute fresh and cache result\n    logger.debug('Cache miss, computing fresh due cards', { userId, cardCount: allCards.length });\n    \n    const dueCards = filterDueCards(allCards, now);\n    const stats = calculateDueCardsStats(allCards, dueCards, now);\n    \n    // Cache the result for future use\n    try {\n      dueCardsCacheService.setDueCards(userId, dueCards, stats, inputHash);\n      logger.debug('Cached due cards calculation result', { \n        userId, \n        dueCount: dueCards.length \n      });\n    } catch (error) {\n      logger.warn('Failed to cache due cards result', { \n        userId, \n        error: (error as Error).message \n      });\n    }\n\n    return {\n      dueCardCount: dueCards.length,\n      dueCards,\n      successRate,\n      totalCards: allCards.length,\n      isFromCache: false,\n      cacheStats: dueCardsCacheService.getCacheStats(),\n      stats\n    };\n  }, [cardProgress, sessionProgress, userId, logger]);\n};\n\n/**\n * Cache management hook for due cards cache\n * Provides cache control functions for advanced usage\n * \n * @returns Cache management functions\n * \n * @example\n * ```typescript\n * function CacheManager() {\n *   const { clearUserCache, clearAllCache, getCacheStats, forceCleanup } = useDueCardsCache();\n *   const stats = getCacheStats();\n *   \n *   return (\n *     <div>\n *       <p>Cache entries: {stats.totalEntries}</p>\n *       <button onClick={() => clearAllCache()}>Clear All Cache</button>\n *       <button onClick={() => forceCleanup()}>Force Cleanup</button>\n *     </div>\n *   );\n * }\n * ```\n */\nexport const useDueCardsCache = () => {\n  return useMemo(() => ({\n    clearUserCache: (userId: string) => dueCardsCacheService.clearUserCache(userId),\n    clearAllCache: () => dueCardsCacheService.clearAllCache(),\n    getCacheStats: () => dueCardsCacheService.getCacheStats(),\n    forceCleanup: () => dueCardsCacheService.forceCleanup(),\n  }), []);\n};"],"names":["useDerivedProgress","useDueCardsCache","useProgressActions","useProgressState","useProgressStore","useStore","useShallow","state","userStats","progress","sessionProgress","cardProgress","loading","syncStatus","lastSync","syncError","setUserStats","updateSessionProgress","setLoading","setSyncStatus","setLastSync","setSyncError","initializeCards","recordAttempt","resetCardProgress","setCardProgress","batchUpdateProgress","resetProgress","loadUserProgress","saveUserStats","saveCardProgress","saveSessionComplete","getDueCards","syncAllProgress","actions","userId","logger","useMemo","getLogger","setContext","now","Date","allCards","Object","values","positionsCorrect","positionsAttempted","successRate","debug","dueCards","getDueCardsFromMap","dueCardCount","length","totalCards","isFromCache","cacheStats","available","totalEntries","estimatedSize","lastCleanup","inputHash","createInputHash","cardCount","cardIds","map","c","id","sort","timestamp","Math","floor","cachedResult","dueCardsCacheService","dueCount","cacheAge","calculatedAt","getCacheStats","stats","filterDueCards","calculateDueCardsStats","setDueCards","error","warn","message","clearUserCache","clearAllCache","forceCleanup"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;CAoBC;;;;;;;;;;;QAmKYA;eAAAA;;QAmHAC;eAAAA;;QApNAC;eAAAA;;QAnCAC;eAAAA;;QA4FAC;eAAAA;;;2BAzHY;yBACE;yCAEQ;uBACX;sCAC8B;0BACC;wBAC7B;AAsBnB,MAAMD,mBAAmB;IAC9B,OAAOE,IAAAA,mBAAQ,EACbC,IAAAA,mBAAU,EAAC,CAACC,QAAW,CAAA;YACrBC,WAAWD,MAAME,QAAQ,CAACD,SAAS;YACnCE,iBAAiBH,MAAME,QAAQ,CAACC,eAAe;YAC/CC,cAAcJ,MAAME,QAAQ,CAACE,YAAY;YACzCC,SAASL,MAAME,QAAQ,CAACG,OAAO;YAC/BC,YAAYN,MAAME,QAAQ,CAACI,UAAU;YACrCC,UAAUP,MAAME,QAAQ,CAACK,QAAQ;YACjCC,WAAWR,MAAME,QAAQ,CAACM,SAAS;QACrC,CAAA;AAEJ;AAuBO,MAAMb,qBAAqB;IAChC,OAAOG,IAAAA,mBAAQ,EACbC,IAAAA,mBAAU,EAAC,CAACC,QAAW,CAAA;YACrB,sBAAsB;YACtBS,cAAcT,MAAME,QAAQ,CAACO,YAAY;YACzCC,uBAAuBV,MAAME,QAAQ,CAACQ,qBAAqB;YAC3DC,YAAYX,MAAME,QAAQ,CAACS,UAAU;YACrCC,eAAeZ,MAAME,QAAQ,CAACU,aAAa;YAC3CC,aAAab,MAAME,QAAQ,CAACW,WAAW;YACvCC,cAAcd,MAAME,QAAQ,CAACY,YAAY;YACzCC,iBAAiBf,MAAME,QAAQ,CAACa,eAAe;YAC/CC,eAAehB,MAAME,QAAQ,CAACc,aAAa;YAC3CC,mBAAmBjB,MAAME,QAAQ,CAACe,iBAAiB;YACnDC,iBAAiBlB,MAAME,QAAQ,CAACgB,eAAe;YAC/CC,qBAAqBnB,MAAME,QAAQ,CAACiB,mBAAmB;YACvDC,eAAepB,MAAME,QAAQ,CAACkB,aAAa;YAE3C,yBAAyB;YACzBC,kBAAkBrB,MAAME,QAAQ,CAACmB,gBAAgB;YACjDC,eAAetB,MAAME,QAAQ,CAACoB,aAAa;YAC3CC,kBAAkBvB,MAAME,QAAQ,CAACqB,gBAAgB;YACjDC,qBAAqBxB,MAAME,QAAQ,CAACsB,mBAAmB;YACvDC,aAAazB,MAAME,QAAQ,CAACuB,WAAW;YACvCC,iBAAiB1B,MAAME,QAAQ,CAACwB,eAAe;QACjD,CAAA;AAEJ;AA+BO,MAAM7B,mBAAmB;IAC9B,MAAMG,QAAQJ;IACd,MAAM+B,UAAUhC;IAChB,OAAO;QAACK;QAAO2B;KAAQ;AACzB;AAoCO,MAAMlC,qBAAqB,CAACmC,SAAwB,IAAI;IAC7D,MAAMC,SAASC,IAAAA,cAAO,EAAC,IAAMC,IAAAA,iBAAS,IAAGC,UAAU,CAAC,uBAAuB,EAAE;IAE7E,0BAA0B;IAC1B,MAAM5B,eAAeN,IAAAA,mBAAQ,EAACC,IAAAA,mBAAU,EAAC,CAACC,QAAUA,MAAME,QAAQ,CAACE,YAAY;IAC/E,MAAMD,kBAAkBL,IAAAA,mBAAQ,EAACC,IAAAA,mBAAU,EAAC,CAACC,QAAUA,MAAME,QAAQ,CAACC,eAAe;IAErF,OAAO2B,IAAAA,cAAO,EAAC;QACb,MAAMG,MAAMC,KAAKD,GAAG;QACpB,MAAME,WAAWC,OAAOC,MAAM,CAACjC;QAE/B,yDAAyD;QACzD,MAAM,EAAEkC,gBAAgB,EAAEC,kBAAkB,EAAE,GAAGpC;QACjD,MAAMqC,cAAcD,qBAAqB,IACrC,AAACD,mBAAmBC,qBAAsB,MAC1C;QAEJ,yDAAyD;QACzD,IAAI,CAACX,QAAQ;YACXC,OAAOY,KAAK,CAAC;YACb,MAAMC,WAAWC,IAAAA,2CAAkB,EAACvC,cAAc6B;YAElD,OAAO;gBACLW,cAAcF,SAASG,MAAM;gBAC7BH;gBACAF;gBACAM,YAAYX,SAASU,MAAM;gBAC3BE,aAAa;gBACbC,YAAY;oBAAEC,WAAW;oBAAOC,cAAc;oBAAGC,eAAe;oBAAGC,aAAa;gBAAK;YACvF;QACF;QAEA,yCAAyC;QACzC,MAAMC,YAAYC,IAAAA,qCAAe,EAAC;YAChC1B;YACA2B,WAAWpB,SAASU,MAAM;YAC1BW,SAASrB,SAASsB,GAAG,CAACC,CAAAA,IAAKA,EAAEC,EAAE,EAAEC,IAAI;YACrCC,WAAWC,KAAKC,KAAK,CAAC9B,MAAO,CAAA,IAAI,KAAK,IAAG,KAAO,CAAA,IAAI,KAAK,KAAM,mBAAmB;YAAtB;QAC9D;QAEA,2BAA2B;QAC3B,MAAM+B,eAAeC,0CAAoB,CAACxC,WAAW,CAACG,QAAQyB;QAE9D,IAAIW,cAAc;YAChBnC,OAAOY,KAAK,CAAC,uCAAuC;gBAClDb;gBACAsC,UAAUF,aAAatB,QAAQ,CAACG,MAAM;gBACtCsB,UAAUlC,MAAM+B,aAAaI,YAAY;YAC3C;YAEA,OAAO;gBACLxB,cAAcoB,aAAatB,QAAQ,CAACG,MAAM;gBAC1CH,UAAUsB,aAAatB,QAAQ;gBAC/BF;gBACAM,YAAYX,SAASU,MAAM;gBAC3BE,aAAa;gBACbC,YAAYiB,0CAAoB,CAACI,aAAa;gBAC9CC,OAAON,aAAaM,KAAK;YAC3B;QACF;QAEA,6CAA6C;QAC7CzC,OAAOY,KAAK,CAAC,yCAAyC;YAAEb;YAAQ2B,WAAWpB,SAASU,MAAM;QAAC;QAE3F,MAAMH,WAAW6B,IAAAA,wBAAc,EAACpC,UAAUF;QAC1C,MAAMqC,QAAQE,IAAAA,gCAAsB,EAACrC,UAAUO,UAAUT;QAEzD,kCAAkC;QAClC,IAAI;YACFgC,0CAAoB,CAACQ,WAAW,CAAC7C,QAAQc,UAAU4B,OAAOjB;YAC1DxB,OAAOY,KAAK,CAAC,uCAAuC;gBAClDb;gBACAsC,UAAUxB,SAASG,MAAM;YAC3B;QACF,EAAE,OAAO6B,OAAO;YACd7C,OAAO8C,IAAI,CAAC,oCAAoC;gBAC9C/C;gBACA8C,OAAO,AAACA,MAAgBE,OAAO;YACjC;QACF;QAEA,OAAO;YACLhC,cAAcF,SAASG,MAAM;YAC7BH;YACAF;YACAM,YAAYX,SAASU,MAAM;YAC3BE,aAAa;YACbC,YAAYiB,0CAAoB,CAACI,aAAa;YAC9CC;QACF;IACF,GAAG;QAAClE;QAAcD;QAAiByB;QAAQC;KAAO;AACpD;AAwBO,MAAMnC,mBAAmB;IAC9B,OAAOoC,IAAAA,cAAO,EAAC,IAAO,CAAA;YACpB+C,gBAAgB,CAACjD,SAAmBqC,0CAAoB,CAACY,cAAc,CAACjD;YACxEkD,eAAe,IAAMb,0CAAoB,CAACa,aAAa;YACvDT,eAAe,IAAMJ,0CAAoB,CAACI,aAAa;YACvDU,cAAc,IAAMd,0CAAoB,CAACc,YAAY;QACvD,CAAA,GAAI,EAAE;AACR"}