7ff7f87fd6f2c86fcb6ec0120d3a48a1
/**
 * @file Progress store hooks
 * @module store/hooks/useProgressStore
 * 
 * @description
 * Performance-optimized hooks for accessing progress state and actions.
 * Implements the three-hook pattern for optimal re-render prevention.
 * 
 * @example
 * ```typescript
 * // Use only state (component re-renders when state changes)
 * const { userStats, syncStatus } = useProgressState();
 * 
 * // Use only actions (component NEVER re-renders)
 * const actions = useProgressActions();
 * actions.updateSessionProgress({ positionsCompleted: 1 });
 * 
 * // Use both state and actions
 * const [state, actions] = useProgressStore();
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useDerivedProgress () {
        return useDerivedProgress;
    },
    get useDueCardsCache () {
        return useDueCardsCache;
    },
    get useProgressActions () {
        return useProgressActions;
    },
    get useProgressState () {
        return useProgressState;
    },
    get useProgressStore () {
        return useProgressStore;
    }
});
const _rootStore = require("../rootStore");
const _shallow = require("zustand/react/shallow");
const _SpacedRepetitionService = require("../../services/SpacedRepetitionService");
const _react = require("react");
const _DueCardsCacheService = require("../../services/DueCardsCacheService");
const _progress = require("../../types/progress");
const _Logger = require("../../services/logging/Logger");
const useProgressState = ()=>{
    return (0, _rootStore.useStore)((0, _shallow.useShallow)((state)=>({
            userStats: state.progress.userStats,
            sessionProgress: state.progress.sessionProgress,
            cardProgress: state.progress.cardProgress,
            loading: state.progress.loading,
            syncStatus: state.progress.syncStatus,
            lastSync: state.progress.lastSync,
            syncError: state.progress.syncError
        })));
};
const useProgressActions = ()=>{
    return (0, _rootStore.useStore)((0, _shallow.useShallow)((state)=>({
            // Synchronous actions
            setUserStats: state.progress.setUserStats,
            updateSessionProgress: state.progress.updateSessionProgress,
            setLoading: state.progress.setLoading,
            setSyncStatus: state.progress.setSyncStatus,
            setLastSync: state.progress.setLastSync,
            setSyncError: state.progress.setSyncError,
            initializeCards: state.progress.initializeCards,
            recordAttempt: state.progress.recordAttempt,
            resetCardProgress: state.progress.resetCardProgress,
            setCardProgress: state.progress.setCardProgress,
            batchUpdateProgress: state.progress.batchUpdateProgress,
            resetProgress: state.progress.resetProgress,
            // Async Firebase actions
            loadUserProgress: state.progress.loadUserProgress,
            saveUserStats: state.progress.saveUserStats,
            saveCardProgress: state.progress.saveCardProgress,
            saveSessionComplete: state.progress.saveSessionComplete,
            getDueCards: state.progress.getDueCards,
            syncAllProgress: state.progress.syncAllProgress
        })));
};
const useProgressStore = ()=>{
    const state = useProgressState();
    const actions = useProgressActions();
    return [
        state,
        actions
    ];
};
const useDerivedProgress = (userId = null)=>{
    const logger = (0, _react.useMemo)(()=>(0, _Logger.getLogger)().setContext('useDerivedProgress'), []);
    // Get stable state values
    const cardProgress = (0, _rootStore.useStore)((0, _shallow.useShallow)((state)=>state.progress.cardProgress));
    const sessionProgress = (0, _rootStore.useStore)((0, _shallow.useShallow)((state)=>state.progress.sessionProgress));
    return (0, _react.useMemo)(()=>{
        const now = Date.now();
        const allCards = Object.values(cardProgress);
        // Calculate session success rate (always computed fresh)
        const { positionsCorrect, positionsAttempted } = sessionProgress;
        const successRate = positionsAttempted > 0 ? positionsCorrect / positionsAttempted * 100 : 0;
        // If no userId provided, fall back to direct computation
        if (!userId) {
            logger.debug('No userId provided, using direct computation');
            const dueCards = (0, _SpacedRepetitionService.getDueCardsFromMap)(cardProgress, now);
            return {
                dueCardCount: dueCards.length,
                dueCards,
                successRate,
                totalCards: allCards.length,
                isFromCache: false,
                cacheStats: {
                    available: false,
                    totalEntries: 0,
                    estimatedSize: 0,
                    lastCleanup: null
                }
            };
        }
        // Create input hash for cache validation
        const inputHash = (0, _DueCardsCacheService.createInputHash)({
            userId,
            cardCount: allCards.length,
            cardIds: allCards.map((c)=>c.id).sort(),
            timestamp: Math.floor(now / (5 * 60 * 1000)) * (5 * 60 * 1000 // 5-minute buckets
            )
        });
        // Try to get cached result
        const cachedResult = _DueCardsCacheService.dueCardsCacheService.getDueCards(userId, inputHash);
        if (cachedResult) {
            logger.debug('Cache hit for due cards calculation', {
                userId,
                dueCount: cachedResult.dueCards.length,
                cacheAge: now - cachedResult.calculatedAt
            });
            return {
                dueCardCount: cachedResult.dueCards.length,
                dueCards: cachedResult.dueCards,
                successRate,
                totalCards: allCards.length,
                isFromCache: true,
                cacheStats: _DueCardsCacheService.dueCardsCacheService.getCacheStats(),
                stats: cachedResult.stats
            };
        }
        // Cache miss: compute fresh and cache result
        logger.debug('Cache miss, computing fresh due cards', {
            userId,
            cardCount: allCards.length
        });
        const dueCards = (0, _progress.filterDueCards)(allCards, now);
        const stats = (0, _progress.calculateDueCardsStats)(allCards, dueCards, now);
        // Cache the result for future use
        try {
            _DueCardsCacheService.dueCardsCacheService.setDueCards(userId, dueCards, stats, inputHash);
            logger.debug('Cached due cards calculation result', {
                userId,
                dueCount: dueCards.length
            });
        } catch (error) {
            logger.warn('Failed to cache due cards result', {
                userId,
                error: error.message
            });
        }
        return {
            dueCardCount: dueCards.length,
            dueCards,
            successRate,
            totalCards: allCards.length,
            isFromCache: false,
            cacheStats: _DueCardsCacheService.dueCardsCacheService.getCacheStats(),
            stats
        };
    }, [
        cardProgress,
        sessionProgress,
        userId,
        logger
    ]);
};
const useDueCardsCache = ()=>{
    return (0, _react.useMemo)(()=>({
            clearUserCache: (userId)=>_DueCardsCacheService.dueCardsCacheService.clearUserCache(userId),
            clearAllCache: ()=>_DueCardsCacheService.dueCardsCacheService.clearAllCache(),
            getCacheStats: ()=>_DueCardsCacheService.dueCardsCacheService.getCacheStats(),
            forceCleanup: ()=>_DueCardsCacheService.dueCardsCacheService.forceCleanup()
        }), []);
};

//# sourceMappingURL=data:application/json;base64,