{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/tablebase/MoveResultGroup.tsx"],"sourcesContent":["/**\n * @file Move result grouping component\n * @module components/tablebase/MoveResultGroup\n *\n * @description\n * Groups tablebase moves by result type (Win/Draw/Loss) with collapsible sections\n * and clear visual organization. Provides an intuitive interface similar to the\n * Lichess tablebase display for exploring move categories.\n *\n * @remarks\n * Key features:\n * - Collapsible groups for space efficiency\n * - Visual icons and color coding by outcome\n * - Move count display per group\n * - Keyboard accessible expand/collapse\n * - Automatic DTZ normalization within groups\n * - Summary statistics component\n *\n * The component automatically calculates the maximum DTZ within each group\n * to ensure consistent bar scaling for visual comparison.\n */\n\n\"use client\";\n\nimport React, { useState } from \"react\";\nimport { MoveEvaluationBar } from \"./MoveEvaluationBar\";\nimport {\n  type MoveResultType,\n  type TablebaseMove,\n  getResultTypeTitle,\n  getResultIcon,\n} from \"@shared/utils/tablebase/resultClassification\";\n\n/**\n * Props for the MoveResultGroup component\n *\n * @interface MoveResultGroupProps\n *\n * @description\n * Configuration for grouping and displaying moves by outcome type,\n * with support for collapsible sections and move selection.\n */\ninterface MoveResultGroupProps {\n  /** Array of moves for this result type */\n  moves: TablebaseMove[];\n  /** The result type for this group */\n  resultType: MoveResultType;\n  /** Custom title for the group (optional) */\n  title?: string;\n  /** Callback when a move is selected */\n  onMoveSelect: (move: string) => void;\n  /** Currently selected move */\n  selectedMove?: string;\n  /** Whether the group should be initially expanded */\n  initiallyExpanded?: boolean;\n  /** Whether to show compact layout */\n  compact?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Move result grouping component\n *\n * @component\n * @description\n * Displays tablebase moves grouped by outcome type (Win/Draw/Loss) with\n * collapsible sections for better organization. Each group shows move count,\n * visual outcome indicators, and can be expanded/collapsed for space efficiency.\n *\n * @remarks\n * Features:\n * - Automatic DTZ normalization within groups for consistent bar scaling\n * - Keyboard accessible with Enter/Space for expand/collapse\n * - Visual color coding: green (win), yellow (draw), red (loss)\n * - Hover states for better interactivity\n * - ARIA labels for screen reader support\n *\n * The component calculates the maximum DTZ within each group to ensure\n * evaluation bars scale proportionally for easy visual comparison.\n *\n * @example\n * ```tsx\n * <MoveResultGroup\n *   moves={winningMoves}\n *   resultType=\"win\"\n *   onMoveSelect={(move) => makeMove(move)}\n *   selectedMove={currentMove}\n *   initiallyExpanded={true}\n * />\n * ```\n *\n * @param {MoveResultGroupProps} props - Component configuration\n * @returns {JSX.Element | null} Rendered group or null if no moves\n */\nexport const MoveResultGroup: React.FC<MoveResultGroupProps> = ({\n  moves,\n  resultType,\n  title,\n  onMoveSelect,\n  selectedMove,\n  initiallyExpanded = true,\n  compact = false,\n  className = \"\",\n}) => {\n  const [isExpanded, setIsExpanded] = useState(initiallyExpanded);\n\n  if (moves.length === 0) {\n    return null;\n  }\n\n  const groupTitle = title || getResultTypeTitle(resultType);\n  const icon = getResultIcon(resultType);\n  const maxDtz = Math.max(...moves.map((move) => Math.abs(move.dtz)));\n\n  /**\n   * Gets CSS color class for result type icons\n   *\n   * @private\n   * @param {MoveResultType} type - The result type to style\n   * @returns {string} Tailwind CSS classes for text color\n   *\n   * @description\n   * Maps result types to appropriate color classes with dark mode support.\n   * Colors follow standard chess conventions: green for wins, yellow for draws,\n   * red for losses, and gray for unknown/unclassified results.\n   */\n  const getTextColorClass = (type: MoveResultType): string => {\n    switch (type) {\n      case \"win\":\n        return \"text-green-600 dark:text-green-400\";\n      case \"draw\":\n        return \"text-yellow-600 dark:text-yellow-400\";\n      case \"loss\":\n        return \"text-red-600 dark:text-red-400\";\n      default:\n        return \"text-gray-600 dark:text-gray-400\";\n    }\n  };\n\n  return (\n    <div className={`move-result-group ${className}`}>\n      {/* Group Header */}\n      <div\n        className={`\n          flex items-center justify-between py-2 px-1 cursor-pointer\n          transition-all duration-200 hover:bg-gray-50 dark:hover:bg-gray-800/50\n        `}\n        onClick={() => setIsExpanded(!isExpanded)}\n        role=\"button\"\n        tabIndex={0}\n        aria-label={`${groupTitle} section, ${moves.length} moves`}\n        aria-expanded={isExpanded}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            setIsExpanded(!isExpanded);\n          }\n        }}\n      >\n        <div className=\"flex items-center space-x-3\">\n          <span\n            className={`text-sm font-medium ${getTextColorClass(resultType)}`}\n            aria-hidden=\"true\"\n          >\n            {icon}\n          </span>\n          <h3 className=\"font-medium text-sm text-gray-700 dark:text-gray-300\">\n            {groupTitle}\n          </h3>\n          <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n            {moves.length}\n          </span>\n        </div>\n\n        {/* Expand/Collapse indicator */}\n        <div\n          className={`\n            transition-transform duration-200 text-xs text-gray-400\n            ${isExpanded ? \"rotate-180\" : \"\"}\n          `}\n          aria-hidden=\"true\"\n        >\n          â–¼\n        </div>\n      </div>\n\n      {/* Moves List */}\n      {isExpanded && (\n        <div className=\"mt-1 space-y-0\">\n          {moves.map((move, index) => (\n            <MoveEvaluationBar\n              key={`${move.san}-${index}`}\n              move={move.san}\n              dtz={move.dtz}\n              maxDtz={maxDtz}\n              onClick={() => onMoveSelect(move.san)}\n              isSelected={selectedMove === move.san}\n              className={compact ? \"text-xs\" : \"\"}\n              category={move.category}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * Compact version of MoveResultGroup for dense layouts\n *\n * @component\n * @description\n * A space-optimized variant of MoveResultGroup designed for sidebars,\n * mobile layouts, or any context where screen real estate is limited.\n * Maintains full functionality while reducing visual footprint.\n *\n * @remarks\n * This is a convenience wrapper that passes compact=true to the base\n * MoveResultGroup component. The compact mode affects:\n * - Reduced padding and margins\n * - Smaller font sizes in child components\n * - Tighter spacing between elements\n *\n * @example\n * ```tsx\n * <CompactMoveResultGroup\n *   moves={drawMoves}\n *   resultType=\"draw\"\n *   onMoveSelect={handleMoveSelect}\n *   initiallyExpanded={false}\n * />\n * ```\n *\n * @param {MoveResultGroupProps} props - Same props as MoveResultGroup\n * @returns {JSX.Element} Compact move result group\n */\nexport const CompactMoveResultGroup: React.FC<MoveResultGroupProps> = (\n  props,\n) => {\n  return (\n    <MoveResultGroup\n      {...props}\n      compact={true}\n      className={`compact-move-group ${props.className || \"\"}`}\n    />\n  );\n};\n\n/**\n * Summary statistics for a move result group\n *\n * @component\n * @description\n * Displays aggregate statistics for a group of moves including count,\n * minimum/maximum/average DTZ values. Provides a quick overview of move\n * distribution and quality within a result category.\n *\n * @remarks\n * Statistics displayed:\n * - Count: Total number of moves in the group\n * - Min DTZ: Fastest path to outcome\n * - Avg DTZ: Average distance to outcome\n * - Max DTZ: Slowest path to outcome\n *\n * Color coding matches the result type for visual consistency.\n * Background colors provide subtle visual separation.\n *\n * @example\n * ```tsx\n * <MoveResultGroupSummary\n *   moves={lossingMoves}\n *   resultType=\"loss\"\n * />\n * // Displays: \"Count: 3  Min DTZ: 5  Avg DTZ: 12.3  Max DTZ: 20\"\n * ```\n *\n * @param {Object} props - Component props\n * @param {TablebaseMove[]} props.moves - Array of moves to summarize\n * @param {MoveResultType} props.resultType - Type of result for styling\n * @returns {JSX.Element | null} Summary statistics or null if no moves\n */\nexport const MoveResultGroupSummary: React.FC<{\n  moves: TablebaseMove[];\n  resultType: MoveResultType;\n}> = ({ moves, resultType }) => {\n  if (moves.length === 0) return null;\n\n  const avgDtz =\n    moves.reduce((sum, move) => sum + Math.abs(move.dtz), 0) / moves.length;\n  const minDtz = Math.min(...moves.map((move) => Math.abs(move.dtz)));\n  const maxDtz = Math.max(...moves.map((move) => Math.abs(move.dtz)));\n\n  /**\n   * Gets background and text color classes for statistics display\n   *\n   * @private\n   * @param {MoveResultType} type - The result type to style\n   * @returns {string} Combined Tailwind CSS classes for styling\n   *\n   * @description\n   * Provides subtle background colors with matching text for the summary\n   * statistics component. Uses light backgrounds to avoid overwhelming\n   * the interface while maintaining visual consistency.\n   */\n  const getStatsColorClass = (type: MoveResultType): string => {\n    switch (type) {\n      case \"win\":\n        return \"text-green-600 bg-green-50\";\n      case \"draw\":\n        return \"text-yellow-600 bg-yellow-50\";\n      case \"loss\":\n        return \"text-red-600 bg-red-50\";\n      default:\n        return \"text-gray-600 bg-gray-50\";\n    }\n  };\n\n  const statsColorClass = getStatsColorClass(resultType);\n\n  return (\n    <div className={`text-xs p-2 rounded ${statsColorClass}`}>\n      <div className=\"flex justify-between items-center\">\n        <span>Count: {moves.length}</span>\n        <span>Min DTZ: {minDtz}</span>\n        <span>Avg DTZ: {avgDtz.toFixed(1)}</span>\n        <span>Max DTZ: {maxDtz}</span>\n      </div>\n    </div>\n  );\n};\n"],"names":["CompactMoveResultGroup","MoveResultGroup","MoveResultGroupSummary","moves","resultType","title","onMoveSelect","selectedMove","initiallyExpanded","compact","className","isExpanded","setIsExpanded","useState","length","groupTitle","getResultTypeTitle","icon","getResultIcon","maxDtz","Math","max","map","move","abs","dtz","getTextColorClass","type","div","onClick","role","tabIndex","aria-label","aria-expanded","onKeyDown","e","key","preventDefault","span","aria-hidden","h3","index","MoveEvaluationBar","san","isSelected","category","props","avgDtz","reduce","sum","minDtz","min","getStatsColorClass","statsColorClass","toFixed"],"mappings":"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"}