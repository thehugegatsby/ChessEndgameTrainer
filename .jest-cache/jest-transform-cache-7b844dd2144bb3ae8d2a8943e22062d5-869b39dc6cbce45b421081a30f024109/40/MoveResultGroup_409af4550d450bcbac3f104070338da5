38e84f8cad0d40e2f7ca22fc03e6dca0
/**
 * @file Move result grouping component
 * @module components/tablebase/MoveResultGroup
 *
 * @description
 * Groups tablebase moves by result type (Win/Draw/Loss) with collapsible sections
 * and clear visual organization. Provides an intuitive interface similar to the
 * Lichess tablebase display for exploring move categories.
 *
 * @remarks
 * Key features:
 * - Collapsible groups for space efficiency
 * - Visual icons and color coding by outcome
 * - Move count display per group
 * - Keyboard accessible expand/collapse
 * - Automatic DTZ normalization within groups
 * - Summary statistics component
 *
 * The component automatically calculates the maximum DTZ within each group
 * to ensure consistent bar scaling for visual comparison.
 */ "use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get CompactMoveResultGroup () {
        return CompactMoveResultGroup;
    },
    get MoveResultGroup () {
        return MoveResultGroup;
    },
    get MoveResultGroupSummary () {
        return MoveResultGroupSummary;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _MoveEvaluationBar = require("./MoveEvaluationBar");
const _resultClassification = require("../../utils/tablebase/resultClassification");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const MoveResultGroup = ({ moves, resultType, title, onMoveSelect, selectedMove, initiallyExpanded = true, compact = false, className = "" })=>{
    const [isExpanded, setIsExpanded] = (0, _react.useState)(initiallyExpanded);
    if (moves.length === 0) {
        return null;
    }
    const groupTitle = title || (0, _resultClassification.getResultTypeTitle)(resultType);
    const icon = (0, _resultClassification.getResultIcon)(resultType);
    const maxDtz = Math.max(...moves.map((move)=>Math.abs(move.dtz)));
    /**
   * Gets CSS color class for result type icons
   *
   * @private
   * @param {MoveResultType} type - The result type to style
   * @returns {string} Tailwind CSS classes for text color
   *
   * @description
   * Maps result types to appropriate color classes with dark mode support.
   * Colors follow standard chess conventions: green for wins, yellow for draws,
   * red for losses, and gray for unknown/unclassified results.
   */ const getTextColorClass = (type)=>{
        switch(type){
            case "win":
                return "text-green-600 dark:text-green-400";
            case "draw":
                return "text-yellow-600 dark:text-yellow-400";
            case "loss":
                return "text-red-600 dark:text-red-400";
            default:
                return "text-gray-600 dark:text-gray-400";
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `move-result-group ${className}`,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: `
          flex items-center justify-between py-2 px-1 cursor-pointer
          transition-all duration-200 hover:bg-gray-50 dark:hover:bg-gray-800/50
        `,
                onClick: ()=>setIsExpanded(!isExpanded),
                role: "button",
                tabIndex: 0,
                "aria-label": `${groupTitle} section, ${moves.length} moves`,
                "aria-expanded": isExpanded,
                onKeyDown: (e)=>{
                    if (e.key === "Enter" || e.key === " ") {
                        e.preventDefault();
                        setIsExpanded(!isExpanded);
                    }
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-3",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: `text-sm font-medium ${getTextColorClass(resultType)}`,
                                "aria-hidden": "true",
                                children: icon
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                className: "font-medium text-sm text-gray-700 dark:text-gray-300",
                                children: groupTitle
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-xs text-gray-500 dark:text-gray-400",
                                children: moves.length
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: `
            transition-transform duration-200 text-xs text-gray-400
            ${isExpanded ? "rotate-180" : ""}
          `,
                        "aria-hidden": "true",
                        children: "â–¼"
                    })
                ]
            }),
            isExpanded && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "mt-1 space-y-0",
                children: moves.map((move, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveEvaluationBar.MoveEvaluationBar, {
                        move: move.san,
                        dtz: move.dtz,
                        maxDtz: maxDtz,
                        onClick: ()=>onMoveSelect(move.san),
                        isSelected: selectedMove === move.san,
                        className: compact ? "text-xs" : "",
                        category: move.category
                    }, `${move.san}-${index}`))
            })
        ]
    });
};
const CompactMoveResultGroup = (props)=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(MoveResultGroup, {
        ...props,
        compact: true,
        className: `compact-move-group ${props.className || ""}`
    });
};
const MoveResultGroupSummary = ({ moves, resultType })=>{
    if (moves.length === 0) return null;
    const avgDtz = moves.reduce((sum, move)=>sum + Math.abs(move.dtz), 0) / moves.length;
    const minDtz = Math.min(...moves.map((move)=>Math.abs(move.dtz)));
    const maxDtz = Math.max(...moves.map((move)=>Math.abs(move.dtz)));
    /**
   * Gets background and text color classes for statistics display
   *
   * @private
   * @param {MoveResultType} type - The result type to style
   * @returns {string} Combined Tailwind CSS classes for styling
   *
   * @description
   * Provides subtle background colors with matching text for the summary
   * statistics component. Uses light backgrounds to avoid overwhelming
   * the interface while maintaining visual consistency.
   */ const getStatsColorClass = (type)=>{
        switch(type){
            case "win":
                return "text-green-600 bg-green-50";
            case "draw":
                return "text-yellow-600 bg-yellow-50";
            case "loss":
                return "text-red-600 bg-red-50";
            default:
                return "text-gray-600 bg-gray-50";
        }
    };
    const statsColorClass = getStatsColorClass(resultType);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `text-xs p-2 rounded ${statsColorClass}`,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "flex justify-between items-center",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                    children: [
                        "Count: ",
                        moves.length
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                    children: [
                        "Min DTZ: ",
                        minDtz
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                    children: [
                        "Avg DTZ: ",
                        avgDtz.toFixed(1)
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                    children: [
                        "Max DTZ: ",
                        maxDtz
                    ]
                })
            ]
        })
    });
};

//# sourceMappingURL=data:application/json;base64,