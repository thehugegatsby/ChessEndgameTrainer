2926090e107944a975618051f11c4407
/**
 * @file Pawn promotion handler module
 * @module store/orchestrators/handlePlayerMove/PawnPromotionHandler
 *
 * @description
 * Comprehensive pawn promotion management for chess endgame training.
 * Handles detection, evaluation, auto-win scenarios, and future UI integration
 * with sophisticated tablebase analysis for optimal training feedback.
 *
 * @remarks
 * **Core Functionality:**
 * - Detects pawn promotion moves using chess.js flags and properties
 * - Evaluates promotion outcomes using tablebase analysis
 * - Identifies auto-win scenarios for immediate training completion
 * - Provides foundation for future promotion choice UI
 *
 * **Tablebase Integration:**
 * - WDL perspective conversion for accurate player evaluation
 * - Category analysis (mate, win) for auto-win detection
 * - Error resilient evaluation with graceful fallbacks
 *
 * **Training Flow Integration:**
 * - Seamless integration with move orchestration
 * - Automatic training completion for winning promotions
 * - User feedback through German localized messages
 *
 * **Future Extensibility:**
 * - Designed for promotion choice UI implementation
 * - Supports all promotion pieces (Q, R, N, B)
 * - Modular architecture for easy UI integration
 *
 * @example
 * ```typescript
 * const promotionHandler = new PawnPromotionHandler();
 *
 * // Check if move involves promotion
 * const promotionInfo = promotionHandler.checkPromotion(validatedMove);
 * if (promotionInfo.isPromotion) {
 *   // Evaluate if promotion leads to auto-win
 *   const isAutoWin = await promotionHandler.evaluatePromotionOutcome(
 *     fenAfter,
 *     validatedMove.color
 *   );
 *
 *   if (isAutoWin) {
 *     await promotionHandler.handleAutoWin(api, { ...promotionInfo, isAutoWin: true });
 *   }
 * }
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PROMOTION_CHOICES () {
        return PROMOTION_CHOICES;
    },
    get PawnPromotionHandler () {
        return PawnPromotionHandler;
    }
});
const _ChessService = require("../../../services/ChessService");
const _TablebaseService = require("../../../services/TablebaseService");
const _logging = require("../../../services/logging");
const _movecompletion = require("./move.completion");
const PROMOTION_CHOICES = [
    {
        piece: "q",
        label: "Dame",
        description: "Stärkste Figur - kann in alle Richtungen ziehen"
    },
    {
        piece: "r",
        label: "Turm",
        description: "Zieht horizontal und vertikal"
    },
    {
        piece: "n",
        label: "Springer",
        description: "Zieht in L-Form, kann über Figuren springen"
    },
    {
        piece: "b",
        label: "Läufer",
        description: "Zieht diagonal"
    }
];
class PawnPromotionHandler {
    /**
   * Checks if a move involves pawn promotion
   *
   * @param move - The validated move that was executed
   * @returns Promotion information
   */ checkPromotion(move) {
        // chess.js sets the 'promotion' property in the move object
        // and flags contain 'p' for promotion
        const isPromotion = move.flags && move.flags.includes("p");
        if (!isPromotion) {
            return {
                isPromotion: false
            };
        }
        (0, _logging.getLogger)().debug("[PawnPromotion] Promotion detected:", {
            from: move.from,
            to: move.to,
            piece: move.piece,
            promotion: move.promotion,
            flags: move.flags
        });
        // Validate promotion piece type
        const promotionPiece = this.isValidPromotionPiece(move.promotion) ? move.promotion : undefined;
        return {
            isPromotion: true,
            promotionPiece,
            from: move.from,
            to: move.to,
            isAutoWin: false,
            moveDescription: move.san
        };
    }
    /**
   * Evaluates if a promotion leads to an immediate win
   *
   * @param currentFen - FEN position after promotion
   * @param promotingColor - Color of the player who promoted ('w' or 'b')
   * @returns Promise<boolean> - True if promotion leads to auto-win
   */ async evaluatePromotionOutcome(currentFen, promotingColor) {
        try {
            // Basic FEN validation
            if (!currentFen || !currentFen.includes(" ")) {
                (0, _logging.getLogger)().warn("[PawnPromotion] Invalid FEN format:", currentFen);
                return false;
            }
            // Check if game is immediately over after promotion
            if (_ChessService.chessService.isGameOver()) {
                const isCheckmate = _ChessService.chessService.isCheckmate();
                (0, _logging.getLogger)().debug("[PawnPromotion] Game over after promotion:", {
                    isCheckmate,
                    fen: currentFen.split(" ")[0]
                });
                return isCheckmate; // Checkmate = auto-win
            }
            // Use tablebase to evaluate the resulting position
            const evaluation = await _TablebaseService.tablebaseService.getEvaluation(currentFen).catch(()=>({
                    isAvailable: false
                }));
            if (evaluation.isAvailable && "result" in evaluation && evaluation.result && "wdl" in evaluation.result && typeof evaluation.result.wdl === "number") {
                // Check if promotion created a winning position from promoting player's perspective
                // WDL is from white's perspective: positive = good for white, negative = good for black
                const wdlFromPromotingPlayerPerspective = promotingColor === "w" ? evaluation.result.wdl : -evaluation.result.wdl;
                const isWinning = wdlFromPromotingPlayerPerspective > 0;
                (0, _logging.getLogger)().debug("[PawnPromotion] Tablebase evaluation:", {
                    wdl: evaluation.result.wdl,
                    wdlFromPromotingPlayerPerspective,
                    promotingColor,
                    category: evaluation.result.category,
                    isWinning,
                    fen: currentFen.split(" ")[0]
                });
                // Consider it an auto-win if it's a forced mate or other winning category
                // Categories like 'mate', 'win', etc. indicate definitive winning scenarios
                const category = evaluation.result.category;
                const isAutoWinCategory = !!(category && typeof category === "string" && (category.includes("mate") || category.includes("win")));
                return isWinning && isAutoWinCategory;
            }
            return false;
        } catch (error) {
            (0, _logging.getLogger)().error("[PawnPromotion] Error evaluating promotion outcome:", error);
            return false;
        }
    }
    /**
   * Handles auto-win scenario after promotion
   *
   * @param api - Store API for state updates
   * @param promotionInfo - Information about the promotion
   */ async handleAutoWin(api, promotionInfo) {
        (0, _logging.getLogger)().info("[PawnPromotion] Auto-win detected - completing training session");
        const { setState } = api;
        // Show celebration dialog instead of toast
        const promotionPieceLabel = promotionInfo.promotionPiece ? this.getPromotionPieceLabel(promotionInfo.promotionPiece) : "Dame"; // Default to queen if undefined
        setState((draft)=>{
            draft.training.moveSuccessDialog = {
                isOpen: true,
                promotionPiece: promotionPieceLabel,
                moveDescription: promotionInfo.moveDescription
            };
        });
        // Complete training session as won
        await (0, _movecompletion.handleTrainingCompletion)(api, true);
    }
    /**
   * Shows promotion choice dialog (for future UI implementation)
   *
   * @param api - Store API for state updates
   * @param from - Source square (e.g., "e7")
   * @param to - Target square (e.g., "e8")
   * @param callback - Callback to execute with chosen piece
   */ showPromotionDialog(api, from, to, callback) {
        (0, _logging.getLogger)().debug("[PawnPromotion] Showing promotion dialog:", {
            from,
            to
        });
        const { setState } = api;
        // For now, just auto-promote to queen and call callback
        // TODO: Implement actual promotion choice UI
        const chosenPiece = "q";
        setState((draft)=>{
            draft.ui.toasts.push({
                id: Date.now().toString(),
                message: `Bauernumwandlung: ${from}-${to} → Dame`,
                type: "info"
            });
        });
        callback(chosenPiece);
    }
    /**
   * Validates promotion piece choice
   *
   * @param piece - Promotion piece character (can be undefined)
   * @returns True if valid promotion piece
   */ isValidPromotionPiece(piece) {
        return typeof piece === "string" && [
            "q",
            "r",
            "n",
            "b"
        ].includes(piece);
    }
    /**
   * Gets promotion piece label for UI display
   *
   * @param piece - Promotion piece character
   * @returns German label for the piece
   */ getPromotionPieceLabel(piece) {
        const choice = PROMOTION_CHOICES.find((c)=>c.piece === piece);
        return (choice === null || choice === void 0 ? void 0 : choice.label) || piece.toUpperCase();
    }
}

//# sourceMappingURL=data:application/json;base64,