5abd2b2f88a09b76c379cf64f8d68781
/**
 * @file Progress-related branded types
 * @description Type-safe Due Card implementations with branded types
 * 
 * This module provides branded types for Due Cards to ensure type safety
 * and prevent runtime errors when working with spaced repetition cards.
 * 
 * @example
 * ```typescript
 * // Type-safe due card filtering
 * const cards: CardProgress[] = getUserCards();
 * const dueCards: DueCard[] = filterDueCards(cards);
 * 
 * // Type guard usage
 * if (isDueCard(card)) {
 *   // TypeScript knows 'card' is DueCard here
 *   processCard(card);
 * }
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get areDueCards () {
        return areDueCards;
    },
    get calculateDueCardsStats () {
        return calculateDueCardsStats;
    },
    get createDueCardsMap () {
        return createDueCardsMap;
    },
    get filterDueCards () {
        return filterDueCards;
    },
    get fromDueCard () {
        return fromDueCard;
    },
    get isDueCard () {
        return isDueCard;
    },
    get toDueCard () {
        return toDueCard;
    }
});
const _Logger = require("../services/logging/Logger");
const logger = (0, _Logger.getLogger)().setContext('ProgressTypes');
function isDueCard(card, now = Date.now()) {
    // Validate card structure
    if (!card || typeof card.nextReviewAt !== 'number') {
        logger.warn('Invalid card structure in isDueCard check', {
            card
        });
        return false;
    }
    // Check if card is due based on nextReviewAt timestamp
    return card.nextReviewAt <= now;
}
function toDueCard(card, now = Date.now()) {
    if (!isDueCard(card, now)) {
        const nextReview = new Date(card.nextReviewAt).toISOString();
        const currentTime = new Date(now).toISOString();
        throw new Error(`Card '${card.id}' is not due for review. ` + `Next review: ${nextReview}, Current: ${currentTime}`);
    }
    // Create branded DueCard
    return {
        ...card,
        __isDue: true,
        __brand: 'DueCard'
    };
}
function filterDueCards(cards, now = Date.now()) {
    if (!Array.isArray(cards)) {
        logger.warn('Invalid cards array in filterDueCards', {
            cards
        });
        return [];
    }
    const dueCards = [];
    // Optimized loop for large collections
    for(let i = 0; i < cards.length; i++){
        const card = cards[i];
        // Skip invalid cards
        if (!card || typeof card.nextReviewAt !== 'number') {
            continue;
        }
        // Check if due and add to result
        if (card.nextReviewAt <= now) {
            dueCards.push({
                ...card,
                __isDue: true,
                __brand: 'DueCard'
            });
        }
    }
    logger.debug('Filtered due cards', {
        totalCards: cards.length,
        dueCards: dueCards.length,
        percentage: Math.round(dueCards.length / cards.length * 100) || 0
    });
    return dueCards;
}
function fromDueCard(dueCard) {
    const { __isDue, __brand, ...cardProgress } = dueCard;
    return cardProgress;
}
function areDueCards(cards) {
    return cards.every((card)=>typeof card === 'object' && card !== null && '__isDue' in card && '__brand' in card && card.__brand === 'DueCard');
}
function createDueCardsMap(dueCards) {
    const map = new Map();
    for (const card of dueCards){
        if (card.id) {
            map.set(card.id, card);
        }
    }
    return map;
}
function calculateDueCardsStats(allCards, dueCards, now = Date.now()) {
    const totalCards = allCards.length;
    const dueCount = dueCards.length;
    const duePercentage = totalCards > 0 ? Math.round(dueCount / totalCards * 100) : 0;
    // Find next due card
    const futureDueCards = allCards.filter((card)=>card.nextReviewAt > now).sort((a, b)=>a.nextReviewAt - b.nextReviewAt);
    const nextDueAt = futureDueCards.length > 0 ? futureDueCards[0].nextReviewAt : null;
    // Calculate average interval for due cards
    const totalInterval = dueCards.reduce((sum, card)=>sum + card.interval, 0);
    const averageInterval = dueCount > 0 ? Math.round(totalInterval / dueCount) : 0;
    return {
        totalCards,
        dueCount,
        duePercentage,
        nextDueAt,
        averageInterval
    };
}

//# sourceMappingURL=data:application/json;base64,