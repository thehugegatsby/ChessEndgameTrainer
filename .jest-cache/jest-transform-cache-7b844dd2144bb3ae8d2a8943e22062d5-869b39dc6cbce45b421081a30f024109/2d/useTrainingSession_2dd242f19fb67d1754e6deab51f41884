cfa8bfbc0bd7e38490fd46b631e34c5c
/**
 * @file Hook for managing chess endgame training sessions
 * @module hooks/useTrainingSession
 *
 * @description
 * Core hook that connects React components to the Zustand store for chess training.
 * Provides a clean API for move execution, history navigation, and game state management.
 * Uses the store as the single source of truth for all chess state.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useTrainingSession", {
    enumerable: true,
    get: function() {
        return useTrainingSession;
    }
});
const _react = require("react");
const _hooks = require("../store/hooks");
const _ErrorService = require("../services/ErrorService");
const _Logger = require("../services/logging/Logger");
const useTrainingSession = ({ onComplete, onPositionChange })=>{
    var _trainingState_currentPosition;
    const [gameState, gameActions] = (0, _hooks.useGameStore)();
    const [trainingState, trainingActions] = (0, _hooks.useTrainingStore)();
    /**
   * Execute a chess move and update the game state
   * @param {Object} move - Move to execute
   * @param {string} move.from - Source square (e.g., 'e2')
   * @param {string} move.to - Target square (e.g., 'e4')
   * @param {string} [move.promotion] - Promotion piece ('q', 'r', 'b', 'n')
   * @returns {Promise<boolean>} True if move was successful, false otherwise
   */ const makeMove = (0, _react.useCallback)(async (move)=>{
        var _gameState_moveHistory;
        const logger = (0, _Logger.getLogger)().setContext("useTrainingSession");
        logger.debug("makeMove called", {
            move
        });
        // CRITICAL DEBUG: Log the exact reason why moves might be blocked
        logger.debug("gameState.isGameFinished check", {
            isGameFinished: gameState.isGameFinished,
            gameResult: gameState.gameResult,
            currentFen: gameState.currentFen,
            moveHistoryLength: (_gameState_moveHistory = gameState.moveHistory) === null || _gameState_moveHistory === void 0 ? void 0 : _gameState_moveHistory.length,
            checkmate: gameState.isCheckmate,
            draw: gameState.isDraw,
            stalemate: gameState.isStalemate
        });
        if (gameState.isGameFinished) {
            logger.warn("EARLY RETURN: gameState.isGameFinished is true, blocking move", {
                isGameFinished: gameState.isGameFinished,
                gameResult: gameState.gameResult
            });
            return false;
        }
        try {
            // Simply delegate to Store - no double validation needed
            // Store will validate the move and update all states atomically
            logger.debug("Calling trainingActions.handlePlayerMove");
            const moveResult = await trainingActions.handlePlayerMove(move);
            logger.debug("trainingActions.handlePlayerMove result", {
                moveResult
            });
            if (!moveResult) return false;
            // Check if game is finished after move
            if (gameState.isGameFinished) {
                // Game result is already determined by ChessService
                const success = gameState.gameResult !== null;
                trainingActions.completeTraining(success);
                onComplete === null || onComplete === void 0 ? void 0 : onComplete(success);
            }
            // Notify position change with current Store state
            onPositionChange === null || onPositionChange === void 0 ? void 0 : onPositionChange(gameState.currentFen || "", gameState.currentPgn || "");
            return true;
        } catch (error) {
            _ErrorService.ErrorService.handleUIError(error instanceof Error ? error : new Error(String(error)), "useTrainingSession", {
                action: "makeMove",
                additionalData: {
                    move
                }
            });
            return false;
        }
    }, [
        gameState.isGameFinished,
        gameState.currentFen,
        gameState.currentPgn,
        trainingActions.handlePlayerMove,
        trainingActions.completeTraining,
        trainingState.currentPosition,
        onComplete,
        onPositionChange
    ]);
    /**
   * Navigate to a specific move in the game history
   * @param {number} moveIndex - Move number to jump to (1-based index)
   */ const jumpToMove = (0, _react.useCallback)((moveIndex)=>{
        // Convert 1-based index to 0-based for store
        const zeroBasedIndex = moveIndex - 1;
        gameActions.goToMove(zeroBasedIndex);
        // Notify position change
        if (onPositionChange && gameState.currentFen) {
            onPositionChange(gameState.currentFen, gameState.currentPgn || "");
        }
    }, [
        gameActions.goToMove,
        gameState.currentFen,
        gameState.currentPgn,
        onPositionChange
    ]);
    /**
   * Reset the game to initial position
   * Clears move history and resets to starting FEN
   */ const resetGame = (0, _react.useCallback)(()=>{
        gameActions.resetGame();
        // Notify position change
        if (onPositionChange && trainingState.currentPosition) {
            onPositionChange(trainingState.currentPosition.fen, "");
        }
    }, [
        gameActions.resetGame,
        trainingState.currentPosition,
        onPositionChange
    ]);
    /**
   * Undo the last move in the game
   * @returns {boolean} True if move was undone, false if no moves to undo
   */ const undoMoveAction = (0, _react.useCallback)(()=>{
        if (gameState.moveHistory.length === 0) return false;
        // Use the store's undoMove action
        gameActions.undoMove();
        // Notify position change
        if (onPositionChange && gameState.currentFen) {
            onPositionChange(gameState.currentFen, gameState.currentPgn || "");
        }
        return true;
    }, [
        gameState.moveHistory,
        gameState.currentFen,
        gameState.currentPgn,
        gameActions.undoMove,
        onPositionChange
    ]);
    return {
        game: null,
        history: gameState.moveHistory,
        isGameFinished: gameState.isGameFinished,
        currentFen: gameState.currentFen || ((_trainingState_currentPosition = trainingState.currentPosition) === null || _trainingState_currentPosition === void 0 ? void 0 : _trainingState_currentPosition.fen) || "",
        currentPgn: gameState.currentPgn || "",
        makeMove,
        jumpToMove,
        resetGame,
        undoMove: undoMoveAction
    };
};

//# sourceMappingURL=data:application/json;base64,