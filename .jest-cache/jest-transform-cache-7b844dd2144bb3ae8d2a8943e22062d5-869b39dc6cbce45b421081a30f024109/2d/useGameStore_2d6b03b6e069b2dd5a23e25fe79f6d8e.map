{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/store/hooks/useGameStore.ts"],"sourcesContent":["/**\n * @file Game store hooks with state/action separation\n * @module store/hooks/useGameStore\n *\n * @description\n * Provides optimized hooks for game-related state and actions with proper separation.\n * This pattern prevents unnecessary re-renders in action-only components while\n * maintaining excellent developer experience.\n *\n * Three hooks are exported:\n * - useGameState(): For components that need reactive state\n * - useGameActions(): For components that only dispatch actions (no re-renders)\n * - useGameStore(): Convenience hook returning [state, actions] tuple\n */\n\nimport { useMemo } from \"react\";\nimport { useStore, useStoreApi } from \"../StoreContext\";\nimport { useShallow } from \"zustand/react/shallow\";\nimport type {\n  RootState,\n  GameState as GameStateType,\n  GameActions as GameActionsType,\n} from \"../slices/types\";\n\n/**\n * Hook for reactive game state properties\n *\n * @description\n * Subscribes components to game state changes. Use this in components\n * that need to display or react to game data. Will re-render when any\n * selected game state changes.\n *\n * @returns {GameStateType} Game state properties\n *\n * @example\n * ```tsx\n * const { currentFen, moveHistory, isGameFinished } = useGameState();\n *\n * // Component will re-render when these values change\n * return <div>Position: {currentFen}</div>;\n * ```\n */\nexport const useGameState = (): GameStateType => {\n  return useStore(\n    useShallow((state: RootState) => ({\n      // Pure game state from nested structure\n      currentFen: state.game.currentFen,\n      currentPgn: state.game.currentPgn,\n      moveHistory: state.game.moveHistory,\n      currentMoveIndex: state.game.currentMoveIndex,\n      isGameFinished: state.game.isGameFinished,\n      gameResult: state.game.gameResult,\n      isCheckmate: state.game.isCheckmate,\n      isDraw: state.game.isDraw,\n      isStalemate: state.game.isStalemate,\n    })),\n  );\n};\n\n/**\n * Hook for game action functions\n *\n * @description\n * Returns stable action functions that never cause re-renders.\n * Use this in components that only need to trigger game actions\n * without subscribing to state changes.\n *\n * @returns {GameActionsType} Game action functions\n *\n * @example\n * ```tsx\n * const { makeMove, resetGame } = useGameActions();\n *\n * // This component will never re-render due to game state changes\n * return <button onClick={resetGame}>Reset</button>;\n * ```\n */\nexport const useGameActions = (): GameActionsType => {\n  // Non-reactive access to avoid SSR issues\n  const storeApi = useStoreApi();\n  const state = storeApi.getState();\n  const actions = state.game;\n\n  // Memoize the actions object to ensure stable reference\n  return useMemo(\n    () => ({\n      // State management actions\n      updatePosition: actions.updatePosition,\n      addMove: actions.addMove,\n      setMoveHistory: actions.setMoveHistory,\n      setCurrentMoveIndex: actions.setCurrentMoveIndex,\n      setGameFinished: actions.setGameFinished,\n      setGameStatus: actions.setGameStatus,\n      resetGame: actions.resetGame,\n\n      // Game operations\n      initializeGame: actions.initializeGame,\n      makeMove: actions.makeMove,\n      undoMove: actions.undoMove,\n      redoMove: actions.redoMove,\n\n      // Navigation actions\n      goToMove: actions.goToMove,\n      goToFirst: actions.goToFirst,\n      goToPrevious: actions.goToPrevious,\n      goToNext: actions.goToNext,\n      goToLast: actions.goToLast,\n      setCurrentFen: actions.setCurrentFen,\n    }),\n    [actions],\n  );\n};\n\n/**\n * Convenience hook for components that need both state and actions\n *\n * @description\n * Returns a tuple of [state, actions] for components that need both.\n * This maintains the familiar pattern while benefiting from the\n * optimized separation under the hood.\n *\n * @returns {[GameStateType, GameActionsType]} Tuple of game state and actions\n *\n * @example\n * ```tsx\n * const [gameState, gameActions] = useGameStore();\n *\n * const handleMove = (move: string) => {\n *   if (!gameState.isGameFinished) {\n *     gameActions.makeMove(move);\n *   }\n * };\n * ```\n */\nexport const useGameStore = (): [GameStateType, GameActionsType] => {\n  return [useGameState(), useGameActions()];\n};\n"],"names":["useGameActions","useGameState","useGameStore","useStore","useShallow","state","currentFen","game","currentPgn","moveHistory","currentMoveIndex","isGameFinished","gameResult","isCheckmate","isDraw","isStalemate","storeApi","useStoreApi","getState","actions","useMemo","updatePosition","addMove","setMoveHistory","setCurrentMoveIndex","setGameFinished","setGameStatus","resetGame","initializeGame","makeMove","undoMove","redoMove","goToMove","goToFirst","goToPrevious","goToNext","goToLast","setCurrentFen"],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;;;;;;;;QAgEYA;eAAAA;;QAnCAC;eAAAA;;QA4FAC;eAAAA;;;uBAvHW;8BACc;yBACX;AAyBpB,MAAMD,eAAe;IAC1B,OAAOE,IAAAA,sBAAQ,EACbC,IAAAA,mBAAU,EAAC,CAACC,QAAsB,CAAA;YAChC,wCAAwC;YACxCC,YAAYD,MAAME,IAAI,CAACD,UAAU;YACjCE,YAAYH,MAAME,IAAI,CAACC,UAAU;YACjCC,aAAaJ,MAAME,IAAI,CAACE,WAAW;YACnCC,kBAAkBL,MAAME,IAAI,CAACG,gBAAgB;YAC7CC,gBAAgBN,MAAME,IAAI,CAACI,cAAc;YACzCC,YAAYP,MAAME,IAAI,CAACK,UAAU;YACjCC,aAAaR,MAAME,IAAI,CAACM,WAAW;YACnCC,QAAQT,MAAME,IAAI,CAACO,MAAM;YACzBC,aAAaV,MAAME,IAAI,CAACQ,WAAW;QACrC,CAAA;AAEJ;AAoBO,MAAMf,iBAAiB;IAC5B,0CAA0C;IAC1C,MAAMgB,WAAWC,IAAAA,yBAAW;IAC5B,MAAMZ,QAAQW,SAASE,QAAQ;IAC/B,MAAMC,UAAUd,MAAME,IAAI;IAE1B,wDAAwD;IACxD,OAAOa,IAAAA,cAAO,EACZ,IAAO,CAAA;YACL,2BAA2B;YAC3BC,gBAAgBF,QAAQE,cAAc;YACtCC,SAASH,QAAQG,OAAO;YACxBC,gBAAgBJ,QAAQI,cAAc;YACtCC,qBAAqBL,QAAQK,mBAAmB;YAChDC,iBAAiBN,QAAQM,eAAe;YACxCC,eAAeP,QAAQO,aAAa;YACpCC,WAAWR,QAAQQ,SAAS;YAE5B,kBAAkB;YAClBC,gBAAgBT,QAAQS,cAAc;YACtCC,UAAUV,QAAQU,QAAQ;YAC1BC,UAAUX,QAAQW,QAAQ;YAC1BC,UAAUZ,QAAQY,QAAQ;YAE1B,qBAAqB;YACrBC,UAAUb,QAAQa,QAAQ;YAC1BC,WAAWd,QAAQc,SAAS;YAC5BC,cAAcf,QAAQe,YAAY;YAClCC,UAAUhB,QAAQgB,QAAQ;YAC1BC,UAAUjB,QAAQiB,QAAQ;YAC1BC,eAAelB,QAAQkB,aAAa;QACtC,CAAA,GACA;QAAClB;KAAQ;AAEb;AAuBO,MAAMjB,eAAe;IAC1B,OAAO;QAACD;QAAgBD;KAAiB;AAC3C"}