f8c6f7710a2104cbe04bb986542d5753
/**
 * @file Game store hooks with state/action separation
 * @module store/hooks/useGameStore
 *
 * @description
 * Provides optimized hooks for game-related state and actions with proper separation.
 * This pattern prevents unnecessary re-renders in action-only components while
 * maintaining excellent developer experience.
 *
 * Three hooks are exported:
 * - useGameState(): For components that need reactive state
 * - useGameActions(): For components that only dispatch actions (no re-renders)
 * - useGameStore(): Convenience hook returning [state, actions] tuple
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useGameActions () {
        return useGameActions;
    },
    get useGameState () {
        return useGameState;
    },
    get useGameStore () {
        return useGameStore;
    }
});
const _react = require("react");
const _StoreContext = require("../StoreContext");
const _shallow = require("zustand/react/shallow");
const useGameState = ()=>{
    return (0, _StoreContext.useStore)((0, _shallow.useShallow)((state)=>({
            // Pure game state from nested structure
            currentFen: state.game.currentFen,
            currentPgn: state.game.currentPgn,
            moveHistory: state.game.moveHistory,
            currentMoveIndex: state.game.currentMoveIndex,
            isGameFinished: state.game.isGameFinished,
            gameResult: state.game.gameResult,
            isCheckmate: state.game.isCheckmate,
            isDraw: state.game.isDraw,
            isStalemate: state.game.isStalemate
        })));
};
const useGameActions = ()=>{
    // Non-reactive access to avoid SSR issues
    const storeApi = (0, _StoreContext.useStoreApi)();
    const state = storeApi.getState();
    const actions = state.game;
    // Memoize the actions object to ensure stable reference
    return (0, _react.useMemo)(()=>({
            // State management actions
            updatePosition: actions.updatePosition,
            addMove: actions.addMove,
            setMoveHistory: actions.setMoveHistory,
            setCurrentMoveIndex: actions.setCurrentMoveIndex,
            setGameFinished: actions.setGameFinished,
            setGameStatus: actions.setGameStatus,
            resetGame: actions.resetGame,
            // Game operations
            initializeGame: actions.initializeGame,
            makeMove: actions.makeMove,
            undoMove: actions.undoMove,
            redoMove: actions.redoMove,
            // Navigation actions
            goToMove: actions.goToMove,
            goToFirst: actions.goToFirst,
            goToPrevious: actions.goToPrevious,
            goToNext: actions.goToNext,
            goToLast: actions.goToLast,
            setCurrentFen: actions.setCurrentFen
        }), [
        actions
    ]);
};
const useGameStore = ()=>{
    return [
        useGameState(),
        useGameActions()
    ];
};

//# sourceMappingURL=data:application/json;base64,