f7cda70f2f5dd86136e8534fc5a76ea7
/**
 * Test suite for the new "Weiterspielen" (continue playing) feature
 * Verifies that after clicking "Weiterspielen", the opponent makes a move
 */ "use strict";
// Mock the scheduleOpponentTurn function to verify it's called
jest.mock("@shared/store/orchestrators/handlePlayerMove", ()=>({
        scheduleOpponentTurn: jest.fn(),
        cancelScheduledOpponentTurn: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _MoveErrorDialog = require("../../../../shared/components/ui/MoveErrorDialog");
const _handlePlayerMove = require("../../../../shared/store/orchestrators/handlePlayerMove");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockScheduleOpponentTurn = _handlePlayerMove.scheduleOpponentTurn;
describe("MoveErrorDialog - Continue Playing Feature", ()=>{
    const defaultProps = {
        isOpen: true,
        wdlBefore: 2,
        wdlAfter: 0,
        bestMove: "Kf6",
        onClose: jest.fn(),
        onTakeBack: jest.fn()
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it("should show 'Weiterspielen' button instead of 'Verstanden'", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
            ...defaultProps
        }));
        // Verify the new button text
        expect(_react1.screen.getByRole("button", {
            name: "Weiterspielen"
        })).toBeInTheDocument();
        expect(_react1.screen.queryByRole("button", {
            name: "Verstanden"
        })).not.toBeInTheDocument();
    });
    it("should call onClose when Weiterspielen button is clicked", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
            ...defaultProps
        }));
        const weiterSpielenButton = _react1.screen.getByRole("button", {
            name: "Weiterspielen"
        });
        _react1.fireEvent.click(weiterSpielenButton);
        expect(defaultProps.onClose).toHaveBeenCalledTimes(1);
    });
    it("should display appropriate error message", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
            ...defaultProps
        }));
        // Should show win-ruining message for wdlBefore=2, wdlAfter=0
        expect(_react1.screen.getByText("Dieser Zug verdirbt den Gewinn!")).toBeInTheDocument();
        expect(_react1.screen.getByText("Bester Zug war:")).toBeInTheDocument();
        expect(_react1.screen.getByText("Kf6")).toBeInTheDocument();
    });
    it("should display both action buttons", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
            ...defaultProps
        }));
        // Should have both Weiterspielen and Zur端cknehmen buttons
        expect(_react1.screen.getByRole("button", {
            name: "Weiterspielen"
        })).toBeInTheDocument();
        expect(_react1.screen.getByRole("button", {
            name: "Zur端cknehmen"
        })).toBeInTheDocument();
    });
    it("should show different messages for different WDL changes", ()=>{
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
            ...defaultProps,
            wdlBefore: 0,
            wdlAfter: -2
        }));
        expect(_react1.screen.getByText("Dieser Zug f端hrt zum Verlust!")).toBeInTheDocument();
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
            ...defaultProps,
            wdlBefore: 1,
            wdlAfter: -1
        }));
        expect(_react1.screen.getByText("Dieser Zug verschlechtert die Stellung!")).toBeInTheDocument();
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
            ...defaultProps,
            wdlBefore: 0,
            wdlAfter: 0
        }));
        expect(_react1.screen.getByText("Dieser Zug ist ein Fehler!")).toBeInTheDocument();
    });
    describe("Integration with TrainingBoard (mocked scenario)", ()=>{
        it("verifies the expected behavior flow", ()=>{
            // This test documents the expected behavior:
            // 1. User makes suboptimal move
            // 2. Error dialog shows with "Weiterspielen" and "Zur端cknehmen" options
            // 3. User clicks "Weiterspielen"
            // 4. Dialog closes via onClose callback
            // 5. TrainingBoard's handleMoveErrorContinue function should:
            //    - Close the dialog (trainingActions.setMoveErrorDialog(null))
            //    - Schedule opponent turn (scheduleOpponentTurn(storeApi))
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveErrorDialog.MoveErrorDialog, {
                ...defaultProps
            }));
            // Verify the dialog is showing the error state correctly
            expect(_react1.screen.getByText("Fehler erkannt!")).toBeInTheDocument();
            expect(_react1.screen.getByText("Dieser Zug verdirbt den Gewinn!")).toBeInTheDocument();
            expect(_react1.screen.getByText("Bester Zug war:")).toBeInTheDocument();
            expect(_react1.screen.getByText("Kf6")).toBeInTheDocument();
            // Click Weiterspielen
            const weiterSpielenButton = _react1.screen.getByRole("button", {
                name: "Weiterspielen"
            });
            _react1.fireEvent.click(weiterSpielenButton);
            // Verify onClose was called (this will trigger handleMoveErrorContinue in TrainingBoard)
            expect(defaultProps.onClose).toHaveBeenCalledTimes(1);
            // Note: The actual scheduleOpponentTurn call happens in TrainingBoard's
            // handleMoveErrorContinue function, not directly in the dialog
            console.log("\n=== EXPECTED BEHAVIOR ===");
            console.log("1. User clicks 'Weiterspielen'");
            console.log("2. Dialog closes (onClose called)");
            console.log("3. TrainingBoard.handleMoveErrorContinue executes:");
            console.log("   - trainingActions.setMoveErrorDialog(null)");
            console.log("   - scheduleOpponentTurn(storeApi)");
            console.log("4. Opponent makes next move automatically");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,