{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/components/analysis/MoveQualityIndicator.tsx"],"sourcesContent":["/**\n * @file Move quality indicator component\n * @module components/analysis/MoveQualityIndicator\n * \n * @description\n * Isolated component for displaying move quality assessment indicators.\n * Each instance manages its own state independently to avoid shared state\n * issues and provides clean separation of concerns with minimal UI footprint.\n * \n * @remarks\n * Key features:\n * - Independent state management per move\n * - Real-time move quality analysis using tablebase data\n * - Visual quality indicators with emoji feedback\n * - Tooltip support for detailed quality explanations\n * - Error handling with graceful degradation\n * - Clean architecture with isolated responsibilities\n * - Optimized performance with per-move analysis\n * \n * The component integrates with the move quality analysis system to provide\n * immediate feedback on chess move quality without affecting other moves.\n */\n\nimport React from \"react\";\nimport { useMoveQuality } from \"../../hooks/useMoveQuality\";\nimport {\n  getQualityEmoji,\n  formatQualityTooltip,\n} from \"../../utils/moveQualityFormatters\";\nimport { getLogger } from \"../../services/logging/Logger\";\nimport { ErrorService } from \"../../services/ErrorService\";\n\nconst logger = getLogger().setContext(\"MoveQualityIndicator\");\n\n/**\n * Props for the MoveQualityIndicator component\n * \n * @interface MoveQualityIndicatorProps\n * \n * @property {number} moveIndex - Index of the move in the game history\n * @property {string} moveSan - Move in Standard Algebraic Notation (e.g., \"Nf3\")\n * @property {'w' | 'b'} player - Player who made the move (white or black)\n * @property {(moveIndex: number) => string} getFenBefore - Function to get FEN position before the move\n */\ninterface MoveQualityIndicatorProps {\n  /** Index of the move in the game history */\n  moveIndex: number;\n  /** Move in SAN notation */\n  moveSan: string;\n  /** Player who made the move */\n  player: \"w\" | \"b\";\n  /** Function to get FEN before the move */\n  getFenBefore: (moveIndex: number) => string;\n}\n\n/**\n * Move quality indicator component\n * \n * @component\n * @description\n * Displays a visual indicator for chess move quality assessment.\n * Each instance independently analyzes and displays the quality of a specific\n * move using tablebase data, providing immediate feedback to users about\n * their move choices.\n * \n * @remarks\n * Component behavior:\n * - Analyzes move quality using useMoveQuality hook\n * - Displays emoji indicators for quality levels (üèÜ, üëç, ‚ö†Ô∏è, ‚ùå, üí•)\n * - Shows tooltips with detailed quality explanations\n * - Handles loading states during analysis\n * - Gracefully handles errors with fallback display\n * - Each instance maintains independent state\n * \n * Quality levels:\n * - Excellent: üèÜ (best possible move)\n * - Good: üëç (solid move)\n * - Inaccuracy: ‚ö†Ô∏è (minor error)\n * - Mistake: ‚ùå (significant error)\n * - Blunder: üí• (critical error)\n * \n * The component integrates seamlessly with move lists and provides\n * non-intrusive visual feedback about move quality.\n * \n * @example\n * ```tsx\n * // Basic usage in move list\n * <MoveQualityIndicator\n *   moveIndex={0}\n *   moveSan=\"e4\"\n *   player=\"w\"\n *   getFenBefore={(index) => gameHistory[index].fenBefore}\n * />\n * \n * // In a move panel component\n * {moveHistory.map((move, index) => (\n *   <div key={index} className=\"move-item\">\n *     <span>{move.san}</span>\n *     <MoveQualityIndicator\n *       moveIndex={index}\n *       moveSan={move.san}\n *       player={move.color}\n *       getFenBefore={getFenBeforeMove}\n *     />\n *   </div>\n * ))}\n * ```\n * \n * @param {MoveQualityIndicatorProps} props - Component configuration\n * @returns {JSX.Element} Move quality indicator with emoji feedback\n */\nexport const MoveQualityIndicator: React.FC<MoveQualityIndicatorProps> = ({\n  moveIndex,\n  moveSan,\n  player,\n  getFenBefore,\n}) => {\n  const { data, isLoading, error, assessMove } = useMoveQuality();\n\n  /**\n   * Handle move assessment\n   */\n  const handleAssess = React.useCallback(async () => {\n    try {\n      const fenBefore = getFenBefore(moveIndex);\n      logger.debug(`Assessing move ${moveSan} at index ${moveIndex}`, {\n        fenBefore,\n        player,\n      });\n      await assessMove(fenBefore, moveSan, player);\n    } catch (err) {\n      // Use ErrorService for user-facing error handling\n      ErrorService.handleUIError(\n        err instanceof Error ? err : new Error(String(err)),\n        \"MoveQualityIndicator\",\n        {\n          action: \"assess-move\",\n          additionalData: {\n            moveIndex,\n            moveSan,\n            player,\n          },\n        },\n      );\n    }\n  }, [moveIndex, moveSan, player, getFenBefore, assessMove]);\n\n  // Automatically assess move on mount\n  React.useEffect(() => {\n    // Only assess if we haven't already and not currently loading\n    if (!data && !isLoading && !error) {\n      handleAssess();\n    }\n  }, [data, isLoading, error, handleAssess]);\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <span className=\"ml-1 text-xs\" title=\"Analyzing move...\">\n        ‚è≥\n      </span>\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <button\n        onClick={handleAssess}\n        className=\"ml-1 text-xs hover:text-red-400 transition-colors opacity-60 hover:opacity-100\"\n        title={`Error: ${error.message}. Click to retry.`}\n      >\n        ‚ùóÔ∏è\n      </button>\n    );\n  }\n\n  // Result state\n  if (data) {\n    return (\n      <span\n        className=\"ml-1 text-xs cursor-help\"\n        title={formatQualityTooltip(data)}\n      >\n        {getQualityEmoji(data.quality)}\n      </span>\n    );\n  }\n\n  // Initial state\n  return (\n    <button\n      onClick={handleAssess}\n      className=\"ml-1 text-xs hover:text-blue-400 transition-colors opacity-60 hover:opacity-100\"\n      title=\"Assess move quality\"\n    >\n      üîç\n    </button>\n  );\n};\n\nMoveQualityIndicator.displayName = \"MoveQualityIndicator\";\n"],"names":["MoveQualityIndicator","logger","getLogger","setContext","moveIndex","moveSan","player","getFenBefore","data","isLoading","error","assessMove","useMoveQuality","handleAssess","React","useCallback","fenBefore","debug","err","ErrorService","handleUIError","Error","String","action","additionalData","useEffect","span","className","title","button","onClick","message","formatQualityTooltip","getQualityEmoji","quality","displayName"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;CAqBC;;;;+BA0FYA;;;eAAAA;;;;8DAxFK;gCACa;uCAIxB;wBACmB;8BACG;;;;;;AAE7B,MAAMC,SAASC,IAAAA,iBAAS,IAAGC,UAAU,CAAC;AA+E/B,MAAMH,uBAA4D,CAAC,EACxEI,SAAS,EACTC,OAAO,EACPC,MAAM,EACNC,YAAY,EACb;IACC,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAEC,KAAK,EAAEC,UAAU,EAAE,GAAGC,IAAAA,8BAAc;IAE7D;;GAEC,GACD,MAAMC,eAAeC,cAAK,CAACC,WAAW,CAAC;QACrC,IAAI;YACF,MAAMC,YAAYT,aAAaH;YAC/BH,OAAOgB,KAAK,CAAC,CAAC,eAAe,EAAEZ,QAAQ,UAAU,EAAED,WAAW,EAAE;gBAC9DY;gBACAV;YACF;YACA,MAAMK,WAAWK,WAAWX,SAASC;QACvC,EAAE,OAAOY,KAAK;YACZ,kDAAkD;YAClDC,0BAAY,CAACC,aAAa,CACxBF,eAAeG,QAAQH,MAAM,IAAIG,MAAMC,OAAOJ,OAC9C,wBACA;gBACEK,QAAQ;gBACRC,gBAAgB;oBACdpB;oBACAC;oBACAC;gBACF;YACF;QAEJ;IACF,GAAG;QAACF;QAAWC;QAASC;QAAQC;QAAcI;KAAW;IAEzD,qCAAqC;IACrCG,cAAK,CAACW,SAAS,CAAC;QACd,8DAA8D;QAC9D,IAAI,CAACjB,QAAQ,CAACC,aAAa,CAACC,OAAO;YACjCG;QACF;IACF,GAAG;QAACL;QAAMC;QAAWC;QAAOG;KAAa;IAEzC,gBAAgB;IAChB,IAAIJ,WAAW;QACb,qBACE,qBAACiB;YAAKC,WAAU;YAAeC,OAAM;sBAAoB;;IAI7D;IAEA,cAAc;IACd,IAAIlB,OAAO;QACT,qBACE,qBAACmB;YACCC,SAASjB;YACTc,WAAU;YACVC,OAAO,CAAC,OAAO,EAAElB,MAAMqB,OAAO,CAAC,iBAAiB,CAAC;sBAClD;;IAIL;IAEA,eAAe;IACf,IAAIvB,MAAM;QACR,qBACE,qBAACkB;YACCC,WAAU;YACVC,OAAOI,IAAAA,2CAAoB,EAACxB;sBAE3ByB,IAAAA,sCAAe,EAACzB,KAAK0B,OAAO;;IAGnC;IAEA,gBAAgB;IAChB,qBACE,qBAACL;QACCC,SAASjB;QACTc,WAAU;QACVC,OAAM;kBACP;;AAIL;AAEA5B,qBAAqBmC,WAAW,GAAG"}