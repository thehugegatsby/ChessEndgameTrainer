c4c778309b7da16622cfef026762340a
/**
 * @file Move quality indicator component
 * @module components/analysis/MoveQualityIndicator
 * 
 * @description
 * Isolated component for displaying move quality assessment indicators.
 * Each instance manages its own state independently to avoid shared state
 * issues and provides clean separation of concerns with minimal UI footprint.
 * 
 * @remarks
 * Key features:
 * - Independent state management per move
 * - Real-time move quality analysis using tablebase data
 * - Visual quality indicators with emoji feedback
 * - Tooltip support for detailed quality explanations
 * - Error handling with graceful degradation
 * - Clean architecture with isolated responsibilities
 * - Optimized performance with per-move analysis
 * 
 * The component integrates with the move quality analysis system to provide
 * immediate feedback on chess move quality without affecting other moves.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MoveQualityIndicator", {
    enumerable: true,
    get: function() {
        return MoveQualityIndicator;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _useMoveQuality = require("../../hooks/useMoveQuality");
const _moveQualityFormatters = require("../../utils/moveQualityFormatters");
const _Logger = require("../../services/logging/Logger");
const _ErrorService = require("../../services/ErrorService");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const logger = (0, _Logger.getLogger)().setContext("MoveQualityIndicator");
const MoveQualityIndicator = ({ moveIndex, moveSan, player, getFenBefore })=>{
    const { data, isLoading, error, assessMove } = (0, _useMoveQuality.useMoveQuality)();
    /**
   * Handle move assessment
   */ const handleAssess = _react.default.useCallback(async ()=>{
        try {
            const fenBefore = getFenBefore(moveIndex);
            logger.debug(`Assessing move ${moveSan} at index ${moveIndex}`, {
                fenBefore,
                player
            });
            await assessMove(fenBefore, moveSan, player);
        } catch (err) {
            // Use ErrorService for user-facing error handling
            _ErrorService.ErrorService.handleUIError(err instanceof Error ? err : new Error(String(err)), "MoveQualityIndicator", {
                action: "assess-move",
                additionalData: {
                    moveIndex,
                    moveSan,
                    player
                }
            });
        }
    }, [
        moveIndex,
        moveSan,
        player,
        getFenBefore,
        assessMove
    ]);
    // Automatically assess move on mount
    _react.default.useEffect(()=>{
        // Only assess if we haven't already and not currently loading
        if (!data && !isLoading && !error) {
            handleAssess();
        }
    }, [
        data,
        isLoading,
        error,
        handleAssess
    ]);
    // Loading state
    if (isLoading) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
            className: "ml-1 text-xs",
            title: "Analyzing move...",
            children: "‚è≥"
        });
    }
    // Error state
    if (error) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
            onClick: handleAssess,
            className: "ml-1 text-xs hover:text-red-400 transition-colors opacity-60 hover:opacity-100",
            title: `Error: ${error.message}. Click to retry.`,
            children: "‚ùóÔ∏è"
        });
    }
    // Result state
    if (data) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
            className: "ml-1 text-xs cursor-help",
            title: (0, _moveQualityFormatters.formatQualityTooltip)(data),
            children: (0, _moveQualityFormatters.getQualityEmoji)(data.quality)
        });
    }
    // Initial state
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
        onClick: handleAssess,
        className: "ml-1 text-xs hover:text-blue-400 transition-colors opacity-60 hover:opacity-100",
        title: "Assess move quality",
        children: "üîç"
    });
};
MoveQualityIndicator.displayName = "MoveQualityIndicator";

//# sourceMappingURL=data:application/json;base64,