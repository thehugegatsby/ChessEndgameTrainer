bf2b4e12d6077f49eb9747972e34cb9c
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AppProviders", {
    enumerable: true,
    get: function() {
        return AppProviders;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _navigation = require("next/navigation");
const _StoreContext = require("../shared/store/StoreContext");
const _storeConfig = require("../shared/store/storeConfig");
const _serverPositionService = require("../shared/services/database/serverPositionService");
const _logging = require("../shared/services/logging");
const _TablebaseServicee2emocks = require("../shared/services/TablebaseService.e2e.mocks");
const _useHydration = require("../shared/hooks/useHydration");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Configure store dependencies once at app initialization
// This happens before any component renders
if (typeof window !== "undefined") {
    const positionService = (0, _serverPositionService.createServerPositionService)();
    (0, _storeConfig.configureStore)({
        positionService
    });
    // Setup E2E mocks if in test environment
    (0, _TablebaseServicee2emocks.setupE2ETablebaseMocks)();
}
/**
 * Inner app providers component that uses the store
 * @param props - Component props
 * @param props.children - Child components to render
 * @returns Providers wrapper with app-ready state management
 */ function AppProvidersInner({ children }) {
    const pathname = (0, _navigation.usePathname)();
    const analysisStatus = (0, _StoreContext.useStore)((state)=>state.tablebase.analysisStatus);
    const logger = (0, _logging.getLogger)().setContext("_app");
    const hasHydrated = (0, _useHydration.useStoreHydration)();
    (0, _react.useEffect)(()=>{
        // Update app-ready based on router state
        // Don't wait for tablebase initially as it may not be initialized on all pages
        if (typeof document !== "undefined") {
            let appReadyState;
            // Define ready state based on router and analysis status
            const isReady = pathname !== null; // App Router equivalent of router.isReady
            if (analysisStatus === "error") {
                appReadyState = "error";
            } else if (isReady && (analysisStatus === "idle" || analysisStatus === "success" || !pathname.startsWith("/train"))) {
                // Ready if router is ready AND (analysis is idle/success OR not on a training page)
                appReadyState = "true";
            } else {
                appReadyState = "false";
            }
            // Track transitions for debugging and monitoring
            const previousState = document.body.dataset.appReady || "null";
            const currentState = appReadyState;
            if (previousState !== currentState) {
                logger.info("App ready state transition: " + previousState + " â†’ " + currentState, {
                    router: {
                        isReady,
                        pathname
                    },
                    analysisStatus
                });
            }
            // Set the global app-ready state for other components and tests
            document.body.dataset.appReady = appReadyState;
        }
    }, [
        pathname,
        analysisStatus,
        logger
    ]);
    (0, _react.useEffect)(()=>{
        // Additional effect for error handling if needed
        if (analysisStatus === "error") {
            logger.error("Analysis is in error state during app initialization", {
                pathname,
                analysisStatus
            });
        }
    }, [
        analysisStatus,
        pathname,
        logger
    ]);
    // Show loading state until store is hydrated from localStorage
    if (!hasHydrated) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "h-screen flex items-center justify-center bg-slate-800",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "text-white text-lg",
                children: "Loading..."
            })
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: children
    });
}
function AppProviders({ children }) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_StoreContext.StoreProvider, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(AppProvidersInner, {
            children: children
        })
    });
}

//# sourceMappingURL=data:application/json;base64,