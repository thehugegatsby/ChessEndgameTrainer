{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/app/providers.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect } from \"react\";\nimport { usePathname } from \"next/navigation\";\nimport { useStore, StoreProvider } from \"@shared/store/StoreContext\";\nimport { configureStore } from \"@shared/store/storeConfig\";\nimport { createServerPositionService } from \"@shared/services/database/serverPositionService\";\nimport { getLogger } from \"@shared/services/logging\";\nimport { setupE2ETablebaseMocks } from \"@shared/services/TablebaseService.e2e.mocks\";\nimport { useStoreHydration } from \"@shared/hooks/useHydration\";\n\n// Configure store dependencies once at app initialization\n// This happens before any component renders\nif (typeof window !== \"undefined\") {\n  const positionService = createServerPositionService();\n  configureStore({ positionService });\n\n  // Setup E2E mocks if in test environment\n  setupE2ETablebaseMocks();\n}\n\n/**\n * Inner app providers component that uses the store\n * @param props - Component props\n * @param props.children - Child components to render\n * @returns Providers wrapper with app-ready state management\n */\nfunction AppProvidersInner({ children }: { children: React.ReactNode }) {\n  const pathname = usePathname();\n  const analysisStatus = useStore((state) => state.tablebase.analysisStatus);\n  const logger = getLogger().setContext(\"_app\");\n  const hasHydrated = useStoreHydration();\n\n  useEffect(() => {\n    // Update app-ready based on router state\n    // Don't wait for tablebase initially as it may not be initialized on all pages\n    if (typeof document !== \"undefined\") {\n      let appReadyState: \"true\" | \"false\" | \"error\";\n\n      // Define ready state based on router and analysis status\n      const isReady = pathname !== null; // App Router equivalent of router.isReady\n\n      if (analysisStatus === \"error\") {\n        appReadyState = \"error\";\n      } else if (\n        isReady &&\n        (analysisStatus === \"idle\" ||\n          analysisStatus === \"success\" ||\n          !pathname.startsWith(\"/train\"))\n      ) {\n        // Ready if router is ready AND (analysis is idle/success OR not on a training page)\n        appReadyState = \"true\";\n      } else {\n        appReadyState = \"false\";\n      }\n\n      // Track transitions for debugging and monitoring\n      const previousState = document.body.dataset.appReady || \"null\";\n      const currentState = appReadyState;\n\n      if (previousState !== currentState) {\n        logger.info(\n          \"App ready state transition: \" + previousState + \" â†’ \" + currentState,\n          {\n            router: {\n              isReady,\n              pathname,\n            },\n            analysisStatus,\n          },\n        );\n      }\n\n      // Set the global app-ready state for other components and tests\n      document.body.dataset.appReady = appReadyState;\n    }\n  }, [pathname, analysisStatus, logger]);\n\n  useEffect(() => {\n    // Additional effect for error handling if needed\n    if (analysisStatus === \"error\") {\n      logger.error(\"Analysis is in error state during app initialization\", {\n        pathname,\n        analysisStatus,\n      });\n    }\n  }, [analysisStatus, pathname, logger]);\n\n  // Show loading state until store is hydrated from localStorage\n  if (!hasHydrated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center bg-slate-800\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n\n/**\n * App providers component with SSR-safe store provider\n * @param props - Component props\n * @param props.children - Child components to render\n * @returns Providers wrapper with SSR-safe store context\n */\nexport function AppProviders({ children }: { children: React.ReactNode }) {\n  return (\n    <StoreProvider>\n      <AppProvidersInner>{children}</AppProvidersInner>\n    </StoreProvider>\n  );\n}\n"],"names":["AppProviders","window","positionService","createServerPositionService","configureStore","setupE2ETablebaseMocks","AppProvidersInner","children","pathname","usePathname","analysisStatus","useStore","state","tablebase","logger","getLogger","setContext","hasHydrated","useStoreHydration","useEffect","document","appReadyState","isReady","startsWith","previousState","body","dataset","appReady","currentState","info","router","error","div","className","StoreProvider"],"mappings":"AAAA;;;;;+BA0GgBA;;;eAAAA;;;;+DAxGiB;4BACL;8BACY;6BACT;uCACa;yBAClB;0CACa;8BACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElC,0DAA0D;AAC1D,4CAA4C;AAC5C,IAAI,OAAOC,WAAW,aAAa;IACjC,MAAMC,kBAAkBC,IAAAA,kDAA2B;IACnDC,IAAAA,2BAAc,EAAC;QAAEF;IAAgB;IAEjC,yCAAyC;IACzCG,IAAAA,gDAAsB;AACxB;AAEA;;;;;CAKC,GACD,SAASC,kBAAkB,EAAEC,QAAQ,EAAiC;IACpE,MAAMC,WAAWC,IAAAA,uBAAW;IAC5B,MAAMC,iBAAiBC,IAAAA,sBAAQ,EAAC,CAACC,QAAUA,MAAMC,SAAS,CAACH,cAAc;IACzE,MAAMI,SAASC,IAAAA,kBAAS,IAAGC,UAAU,CAAC;IACtC,MAAMC,cAAcC,IAAAA,+BAAiB;IAErCC,IAAAA,gBAAS,EAAC;QACR,yCAAyC;QACzC,+EAA+E;QAC/E,IAAI,OAAOC,aAAa,aAAa;YACnC,IAAIC;YAEJ,yDAAyD;YACzD,MAAMC,UAAUd,aAAa,MAAM,0CAA0C;YAE7E,IAAIE,mBAAmB,SAAS;gBAC9BW,gBAAgB;YAClB,OAAO,IACLC,WACCZ,CAAAA,mBAAmB,UAClBA,mBAAmB,aACnB,CAACF,SAASe,UAAU,CAAC,SAAQ,GAC/B;gBACA,oFAAoF;gBACpFF,gBAAgB;YAClB,OAAO;gBACLA,gBAAgB;YAClB;YAEA,iDAAiD;YACjD,MAAMG,gBAAgBJ,SAASK,IAAI,CAACC,OAAO,CAACC,QAAQ,IAAI;YACxD,MAAMC,eAAeP;YAErB,IAAIG,kBAAkBI,cAAc;gBAClCd,OAAOe,IAAI,CACT,iCAAiCL,gBAAgB,QAAQI,cACzD;oBACEE,QAAQ;wBACNR;wBACAd;oBACF;oBACAE;gBACF;YAEJ;YAEA,gEAAgE;YAChEU,SAASK,IAAI,CAACC,OAAO,CAACC,QAAQ,GAAGN;QACnC;IACF,GAAG;QAACb;QAAUE;QAAgBI;KAAO;IAErCK,IAAAA,gBAAS,EAAC;QACR,iDAAiD;QACjD,IAAIT,mBAAmB,SAAS;YAC9BI,OAAOiB,KAAK,CAAC,wDAAwD;gBACnEvB;gBACAE;YACF;QACF;IACF,GAAG;QAACA;QAAgBF;QAAUM;KAAO;IAErC,+DAA+D;IAC/D,IAAI,CAACG,aAAa;QAChB,qBACE,qBAACe;YAAIC,WAAU;sBACb,cAAA,qBAACD;gBAAIC,WAAU;0BAAqB;;;IAG1C;IAEA,qBAAO;kBAAG1B;;AACZ;AAQO,SAASP,aAAa,EAAEO,QAAQ,EAAiC;IACtE,qBACE,qBAAC2B,2BAAa;kBACZ,cAAA,qBAAC5B;sBAAmBC;;;AAG1B"}