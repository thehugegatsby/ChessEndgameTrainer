{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/hooks/useMoveQuality.test.ts"],"sourcesContent":["/**\n * @file Tests for useMoveQuality hook\n * @module tests/unit/hooks/useMoveQuality\n * \n * @description\n * Comprehensive tests for the useMoveQuality hook that handles\n * on-demand chess move quality assessment and evaluation.\n * \n * Tests cover:\n * - Hook initialization and interface\n * - Move quality assessment triggering\n * - Loading and error states\n * - Tablebase integration\n * - Race condition protection\n * - Error handling and cleanup\n */\n\nimport { renderHook, act } from '@testing-library/react';\nimport { useMoveQuality } from '@shared/hooks/useMoveQuality';\n\n// Mock the logger\njest.mock('@shared/services/logging/Logger', () => ({\n  getLogger: jest.fn(() => ({\n    setContext: jest.fn(() => ({\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n    })),\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  })),\n  Logger: jest.fn().mockImplementation(() => ({\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  })),\n}));\n\n// Mock tablebase service\njest.mock('@shared/services/TablebaseService', () => ({\n  tablebaseService: {\n    getEvaluation: jest.fn(),\n  },\n}));\n\n// Mock move quality utils\njest.mock('@shared/utils/moveQuality', () => ({\n  assessTablebaseMoveQuality: jest.fn(),\n}));\n\n// Mock chess.js\njest.mock('chess.js', () => ({\n  Chess: jest.fn().mockImplementation((fen) => ({\n    move: jest.fn().mockReturnValue({ san: 'Kh1' }),\n    fen: jest.fn(() => fen || '8/8/8/8/8/8/8/8 w - - 0 1'),\n    turn: jest.fn(() => 'w'),\n  })),\n}));\n\ndescribe('useMoveQuality', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Hook Initialization', () => {\n    it('returns correct interface with initial state', () => {\n      const { result } = renderHook(() => useMoveQuality());\n\n      expect(result.current).toHaveProperty('data');\n      expect(result.current).toHaveProperty('isLoading');\n      expect(result.current).toHaveProperty('error');\n      expect(result.current).toHaveProperty('assessMove');\n      expect(result.current).toHaveProperty('clearAnalysis');\n\n      // Initial state\n      expect(result.current.data).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeNull();\n      expect(typeof result.current.assessMove).toBe('function');\n      expect(typeof result.current.clearAnalysis).toBe('function');\n    });\n  });\n\n  describe('assessMove Function', () => {\n    it('triggers move assessment with correct parameters', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      const { assessTablebaseMoveQuality } = require('@shared/utils/moveQuality');\n\n      tablebaseService.getEvaluation.mockResolvedValue({\n        isAvailable: true,\n        result: { wdl: 1, moves: [{ move: 'Kh1', wdl: 1, dtm: 5 }] }\n      });\n\n      assessTablebaseMoveQuality.mockReturnValue({\n        quality: 'excellent',\n        isOptimal: true,\n        wdlChange: 0,\n        reason: 'Best move'\n      });\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      await act(async () => {\n        await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');\n      });\n\n      expect(tablebaseService.getEvaluation).toHaveBeenCalledTimes(2); // Before and after positions\n      expect(assessTablebaseMoveQuality).toHaveBeenCalled();\n    });\n\n    it('handles loading state correctly', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      \n      // Make the service hang to test loading state\n      tablebaseService.getEvaluation.mockReturnValue(new Promise(() => {}));\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      act(() => {\n        result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');\n      });\n\n      expect(result.current.isLoading).toBe(true);\n      expect(result.current.error).toBeNull();\n    });\n\n    it('handles tablebase errors gracefully', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      \n      tablebaseService.getEvaluation.mockRejectedValue(new Error('Tablebase unavailable'));\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      await act(async () => {\n        try {\n          await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');\n        } catch (error) {\n          // Expected to throw\n        }\n      });\n\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeInstanceOf(Error);\n      expect(result.current.error?.message).toBe('Tablebase unavailable');\n    });\n\n    it('handles invalid move gracefully', async () => {\n      const { Chess } = require('chess.js');\n      \n      Chess.mockImplementation(() => ({\n        move: jest.fn().mockReturnValue(null), // Invalid move\n        fen: jest.fn(),\n        turn: jest.fn(() => 'w'),\n      }));\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      await act(async () => {\n        try {\n          await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'InvalidMove', 'white');\n        } catch (error) {\n          // Expected to throw\n        }\n      });\n\n      expect(result.current.error).toBeInstanceOf(Error);\n    });\n\n    it('prevents race conditions with AbortController', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      \n      let resolveFirst: (value: any) => void;\n      let resolveSecond: (value: any) => void;\n\n      const firstPromise = new Promise(resolve => { resolveFirst = resolve; });\n      const secondPromise = new Promise(resolve => { resolveSecond = resolve; });\n\n      tablebaseService.getEvaluation\n        .mockReturnValueOnce(firstPromise)\n        .mockReturnValueOnce(secondPromise);\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      // Start first assessment\n      act(() => {\n        result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');\n      });\n\n      // Start second assessment (should cancel first)\n      act(() => {\n        result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kg1', 'white');\n      });\n\n      // Resolve first (should be ignored due to cancellation)\n      await act(async () => {\n        resolveFirst({\n          isAvailable: true,\n          result: { wdl: 1, moves: [{ move: 'Kh1', wdl: 1 }] }\n        });\n        resolveSecond({\n          isAvailable: true,\n          result: { wdl: 0, moves: [{ move: 'Kg1', wdl: 0 }] }\n        });\n      });\n\n      // Only second assessment should be processed\n      expect(result.current.isLoading).toBe(false);\n    });\n  });\n\n  describe('clearAnalysis Function', () => {\n    it('clears analysis data and state', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      const { assessTablebaseMoveQuality } = require('@shared/utils/moveQuality');\n\n      tablebaseService.getEvaluation.mockResolvedValue({\n        isAvailable: true,\n        result: { wdl: 1, moves: [{ move: 'Kh1', wdl: 1 }] }\n      });\n\n      assessTablebaseMoveQuality.mockReturnValue({\n        quality: 'excellent',\n        isOptimal: true,\n      });\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      // First assess a move\n      await act(async () => {\n        await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');\n      });\n\n      expect(result.current.data).not.toBeNull();\n\n      // Then clear analysis\n      act(() => {\n        result.current.clearAnalysis();\n      });\n\n      expect(result.current.data).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeNull();\n    });\n\n    it('cancels ongoing analysis when called', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      \n      // Make service hang\n      tablebaseService.getEvaluation.mockReturnValue(new Promise(() => {}));\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      // Start analysis\n      act(() => {\n        result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');\n      });\n\n      expect(result.current.isLoading).toBe(true);\n\n      // Clear should cancel ongoing analysis\n      act(() => {\n        result.current.clearAnalysis();\n      });\n\n      expect(result.current.isLoading).toBe(false);\n    });\n  });\n\n  describe('Hook Lifecycle', () => {\n    it('cleans up AbortController on unmount', () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      \n      tablebaseService.getEvaluation.mockReturnValue(new Promise(() => {}));\n\n      const { result, unmount } = renderHook(() => useMoveQuality());\n\n      // Start analysis\n      act(() => {\n        result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');\n      });\n\n      expect(result.current.isLoading).toBe(true);\n\n      // Unmount should clean up\n      unmount();\n\n      // No errors should occur\n    });\n\n    it('maintains stable function references', () => {\n      const { result, rerender } = renderHook(() => useMoveQuality());\n\n      const initialAssessMove = result.current.assessMove;\n      const initialClearAnalysis = result.current.clearAnalysis;\n\n      rerender();\n\n      // Functions should be stable due to useCallback\n      expect(result.current.assessMove).toBe(initialAssessMove);\n      expect(result.current.clearAnalysis).toBe(initialClearAnalysis);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('handles network errors', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      \n      tablebaseService.getEvaluation.mockRejectedValue(new Error('Network error'));\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      await act(async () => {\n        try {\n          await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');\n        } catch (error) {\n          // Expected\n        }\n      });\n\n      expect(result.current.error?.message).toBe('Network error');\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('handles malformed FEN strings', async () => {\n      const { result } = renderHook(() => useMoveQuality());\n\n      await act(async () => {\n        try {\n          await result.current.assessMove('invalid-fen', 'Kh1', 'white');\n        } catch (error) {\n          // Expected\n        }\n      });\n\n      expect(result.current.error).toBeInstanceOf(Error);\n    });\n\n    it('handles missing tablebase data', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      \n      tablebaseService.getEvaluation.mockResolvedValue({\n        isAvailable: false,\n        error: 'Position not in tablebase'\n      });\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      await act(async () => {\n        try {\n          await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');\n        } catch (error) {\n          // Expected\n        }\n      });\n\n      expect(result.current.error).toBeInstanceOf(Error);\n    });\n  });\n\n  describe('Integration Scenarios', () => {\n    it('works with complete move quality assessment flow', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      const { assessTablebaseMoveQuality } = require('@shared/utils/moveQuality');\n\n      // Mock before position\n      tablebaseService.getEvaluation.mockResolvedValueOnce({\n        isAvailable: true,\n        result: { wdl: 0, moves: [{ move: 'Kh1', wdl: 1 }, { move: 'Kg1', wdl: 0 }] }\n      });\n\n      // Mock after position\n      tablebaseService.getEvaluation.mockResolvedValueOnce({\n        isAvailable: true,\n        result: { wdl: 1, moves: [] }\n      });\n\n      assessTablebaseMoveQuality.mockReturnValue({\n        quality: 'excellent',\n        isOptimal: true,\n        wdlChange: 1,\n        reason: 'Winning move'\n      });\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      await act(async () => {\n        await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');\n      });\n\n      expect(result.current.data).toEqual({\n        quality: 'excellent',\n        isOptimal: true,\n        wdlChange: 1,\n        reason: 'Winning move'\n      });\n      expect(result.current.error).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('handles sequential move assessments', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      const { assessTablebaseMoveQuality } = require('@shared/utils/moveQuality');\n\n      // Setup mocks for first assessment\n      tablebaseService.getEvaluation.mockResolvedValue({\n        isAvailable: true,\n        result: { wdl: 1, moves: [{ move: 'Kh1', wdl: 1 }] }\n      });\n\n      assessTablebaseMoveQuality.mockReturnValueOnce({\n        quality: 'excellent',\n        isOptimal: true,\n      });\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      // First assessment\n      await act(async () => {\n        await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');\n      });\n\n      expect(result.current.data?.quality).toBe('excellent');\n\n      // Setup for second assessment\n      assessTablebaseMoveQuality.mockReturnValueOnce({\n        quality: 'mistake',\n        isOptimal: false,\n      });\n\n      // Second assessment\n      await act(async () => {\n        await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kg1', 'white');\n      });\n\n      expect(result.current.data?.quality).toBe('mistake');\n    });\n  });\n\n  describe('Performance', () => {\n    it('handles rapid successive calls efficiently', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      \n      let callCount = 0;\n      tablebaseService.getEvaluation.mockImplementation(() => {\n        callCount++;\n        return Promise.resolve({\n          isAvailable: true,\n          result: { wdl: 1, moves: [] }\n        });\n      });\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      // Make multiple rapid calls\n      await act(async () => {\n        await Promise.all([\n          result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white'),\n          result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kg1', 'white'),\n          result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kf1', 'white'),\n        ].map(p => p.catch(() => {}))); // Ignore errors from cancelled requests\n      });\n\n      // Should have made calls for the last request only due to cancellation\n      expect(callCount).toBeGreaterThanOrEqual(2); // At least before/after for last call\n    });\n  });\n});"],"names":["jest","mock","getLogger","fn","setContext","debug","info","warn","error","Logger","mockImplementation","tablebaseService","getEvaluation","assessTablebaseMoveQuality","Chess","fen","move","mockReturnValue","san","turn","describe","beforeEach","clearAllMocks","it","result","renderHook","useMoveQuality","expect","current","toHaveProperty","data","toBeNull","isLoading","toBe","assessMove","clearAnalysis","require","mockResolvedValue","isAvailable","wdl","moves","dtm","quality","isOptimal","wdlChange","reason","act","toHaveBeenCalledTimes","toHaveBeenCalled","Promise","mockRejectedValue","Error","toBeInstanceOf","message","resolveFirst","resolveSecond","firstPromise","resolve","secondPromise","mockReturnValueOnce","not","unmount","rerender","initialAssessMove","initialClearAnalysis","mockResolvedValueOnce","toEqual","callCount","all","map","p","catch","toBeGreaterThanOrEqual"],"mappings":"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"}