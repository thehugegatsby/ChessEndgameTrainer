b62f261e6f588a66d2239c8a672ee55e
/**
 * @file Tests for useMoveQuality hook
 * @module tests/unit/hooks/useMoveQuality
 * 
 * @description
 * Comprehensive tests for the useMoveQuality hook that handles
 * on-demand chess move quality assessment and evaluation.
 * 
 * Tests cover:
 * - Hook initialization and interface
 * - Move quality assessment triggering
 * - Loading and error states
 * - Tablebase integration
 * - Race condition protection
 * - Error handling and cleanup
 */ "use strict";
// Mock the logger
jest.mock('@shared/services/logging/Logger', ()=>({
        getLogger: jest.fn(()=>({
                setContext: jest.fn(()=>({
                        debug: jest.fn(),
                        info: jest.fn(),
                        warn: jest.fn(),
                        error: jest.fn()
                    })),
                debug: jest.fn(),
                info: jest.fn(),
                warn: jest.fn(),
                error: jest.fn()
            })),
        Logger: jest.fn().mockImplementation(()=>({
                debug: jest.fn(),
                info: jest.fn(),
                warn: jest.fn(),
                error: jest.fn()
            }))
    }));
// Mock tablebase service
jest.mock('@shared/services/TablebaseService', ()=>({
        tablebaseService: {
            getEvaluation: jest.fn()
        }
    }));
// Mock move quality utils
jest.mock('@shared/utils/moveQuality', ()=>({
        assessTablebaseMoveQuality: jest.fn()
    }));
// Mock chess.js
jest.mock('chess.js', ()=>({
        Chess: jest.fn().mockImplementation((fen)=>({
                move: jest.fn().mockReturnValue({
                    san: 'Kh1'
                }),
                fen: jest.fn(()=>fen || '8/8/8/8/8/8/8/8 w - - 0 1'),
                turn: jest.fn(()=>'w')
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useMoveQuality = require("../../../shared/hooks/useMoveQuality");
describe('useMoveQuality', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Hook Initialization', ()=>{
        it('returns correct interface with initial state', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            expect(result.current).toHaveProperty('data');
            expect(result.current).toHaveProperty('isLoading');
            expect(result.current).toHaveProperty('error');
            expect(result.current).toHaveProperty('assessMove');
            expect(result.current).toHaveProperty('clearAnalysis');
            // Initial state
            expect(result.current.data).toBeNull();
            expect(result.current.isLoading).toBe(false);
            expect(result.current.error).toBeNull();
            expect(typeof result.current.assessMove).toBe('function');
            expect(typeof result.current.clearAnalysis).toBe('function');
        });
    });
    describe('assessMove Function', ()=>{
        it('triggers move assessment with correct parameters', async ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            const { assessTablebaseMoveQuality } = require('@shared/utils/moveQuality');
            tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result: {
                    wdl: 1,
                    moves: [
                        {
                            move: 'Kh1',
                            wdl: 1,
                            dtm: 5
                        }
                    ]
                }
            });
            assessTablebaseMoveQuality.mockReturnValue({
                quality: 'excellent',
                isOptimal: true,
                wdlChange: 0,
                reason: 'Best move'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            await (0, _react.act)(async ()=>{
                await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');
            });
            expect(tablebaseService.getEvaluation).toHaveBeenCalledTimes(2); // Before and after positions
            expect(assessTablebaseMoveQuality).toHaveBeenCalled();
        });
        it('handles loading state correctly', async ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            // Make the service hang to test loading state
            tablebaseService.getEvaluation.mockReturnValue(new Promise(()=>{}));
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            (0, _react.act)(()=>{
                result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');
            });
            expect(result.current.isLoading).toBe(true);
            expect(result.current.error).toBeNull();
        });
        it('handles tablebase errors gracefully', async ()=>{
            var _result_current_error;
            const { tablebaseService } = require('@shared/services/TablebaseService');
            tablebaseService.getEvaluation.mockRejectedValue(new Error('Tablebase unavailable'));
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');
                } catch (error) {
                // Expected to throw
                }
            });
            expect(result.current.isLoading).toBe(false);
            expect(result.current.error).toBeInstanceOf(Error);
            expect((_result_current_error = result.current.error) === null || _result_current_error === void 0 ? void 0 : _result_current_error.message).toBe('Tablebase unavailable');
        });
        it('handles invalid move gracefully', async ()=>{
            const { Chess } = require('chess.js');
            Chess.mockImplementation(()=>({
                    move: jest.fn().mockReturnValue(null),
                    fen: jest.fn(),
                    turn: jest.fn(()=>'w')
                }));
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'InvalidMove', 'white');
                } catch (error) {
                // Expected to throw
                }
            });
            expect(result.current.error).toBeInstanceOf(Error);
        });
        it('prevents race conditions with AbortController', async ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            let resolveFirst;
            let resolveSecond;
            const firstPromise = new Promise((resolve)=>{
                resolveFirst = resolve;
            });
            const secondPromise = new Promise((resolve)=>{
                resolveSecond = resolve;
            });
            tablebaseService.getEvaluation.mockReturnValueOnce(firstPromise).mockReturnValueOnce(secondPromise);
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            // Start first assessment
            (0, _react.act)(()=>{
                result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');
            });
            // Start second assessment (should cancel first)
            (0, _react.act)(()=>{
                result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kg1', 'white');
            });
            // Resolve first (should be ignored due to cancellation)
            await (0, _react.act)(async ()=>{
                resolveFirst({
                    isAvailable: true,
                    result: {
                        wdl: 1,
                        moves: [
                            {
                                move: 'Kh1',
                                wdl: 1
                            }
                        ]
                    }
                });
                resolveSecond({
                    isAvailable: true,
                    result: {
                        wdl: 0,
                        moves: [
                            {
                                move: 'Kg1',
                                wdl: 0
                            }
                        ]
                    }
                });
            });
            // Only second assessment should be processed
            expect(result.current.isLoading).toBe(false);
        });
    });
    describe('clearAnalysis Function', ()=>{
        it('clears analysis data and state', async ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            const { assessTablebaseMoveQuality } = require('@shared/utils/moveQuality');
            tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result: {
                    wdl: 1,
                    moves: [
                        {
                            move: 'Kh1',
                            wdl: 1
                        }
                    ]
                }
            });
            assessTablebaseMoveQuality.mockReturnValue({
                quality: 'excellent',
                isOptimal: true
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            // First assess a move
            await (0, _react.act)(async ()=>{
                await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');
            });
            expect(result.current.data).not.toBeNull();
            // Then clear analysis
            (0, _react.act)(()=>{
                result.current.clearAnalysis();
            });
            expect(result.current.data).toBeNull();
            expect(result.current.isLoading).toBe(false);
            expect(result.current.error).toBeNull();
        });
        it('cancels ongoing analysis when called', async ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            // Make service hang
            tablebaseService.getEvaluation.mockReturnValue(new Promise(()=>{}));
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            // Start analysis
            (0, _react.act)(()=>{
                result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');
            });
            expect(result.current.isLoading).toBe(true);
            // Clear should cancel ongoing analysis
            (0, _react.act)(()=>{
                result.current.clearAnalysis();
            });
            expect(result.current.isLoading).toBe(false);
        });
    });
    describe('Hook Lifecycle', ()=>{
        it('cleans up AbortController on unmount', ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            tablebaseService.getEvaluation.mockReturnValue(new Promise(()=>{}));
            const { result, unmount } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            // Start analysis
            (0, _react.act)(()=>{
                result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');
            });
            expect(result.current.isLoading).toBe(true);
            // Unmount should clean up
            unmount();
        // No errors should occur
        });
        it('maintains stable function references', ()=>{
            const { result, rerender } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            const initialAssessMove = result.current.assessMove;
            const initialClearAnalysis = result.current.clearAnalysis;
            rerender();
            // Functions should be stable due to useCallback
            expect(result.current.assessMove).toBe(initialAssessMove);
            expect(result.current.clearAnalysis).toBe(initialClearAnalysis);
        });
    });
    describe('Error Handling', ()=>{
        it('handles network errors', async ()=>{
            var _result_current_error;
            const { tablebaseService } = require('@shared/services/TablebaseService');
            tablebaseService.getEvaluation.mockRejectedValue(new Error('Network error'));
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');
                } catch (error) {
                // Expected
                }
            });
            expect((_result_current_error = result.current.error) === null || _result_current_error === void 0 ? void 0 : _result_current_error.message).toBe('Network error');
            expect(result.current.isLoading).toBe(false);
        });
        it('handles malformed FEN strings', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.assessMove('invalid-fen', 'Kh1', 'white');
                } catch (error) {
                // Expected
                }
            });
            expect(result.current.error).toBeInstanceOf(Error);
        });
        it('handles missing tablebase data', async ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: false,
                error: 'Position not in tablebase'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');
                } catch (error) {
                // Expected
                }
            });
            expect(result.current.error).toBeInstanceOf(Error);
        });
    });
    describe('Integration Scenarios', ()=>{
        it('works with complete move quality assessment flow', async ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            const { assessTablebaseMoveQuality } = require('@shared/utils/moveQuality');
            // Mock before position
            tablebaseService.getEvaluation.mockResolvedValueOnce({
                isAvailable: true,
                result: {
                    wdl: 0,
                    moves: [
                        {
                            move: 'Kh1',
                            wdl: 1
                        },
                        {
                            move: 'Kg1',
                            wdl: 0
                        }
                    ]
                }
            });
            // Mock after position
            tablebaseService.getEvaluation.mockResolvedValueOnce({
                isAvailable: true,
                result: {
                    wdl: 1,
                    moves: []
                }
            });
            assessTablebaseMoveQuality.mockReturnValue({
                quality: 'excellent',
                isOptimal: true,
                wdlChange: 1,
                reason: 'Winning move'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            await (0, _react.act)(async ()=>{
                await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');
            });
            expect(result.current.data).toEqual({
                quality: 'excellent',
                isOptimal: true,
                wdlChange: 1,
                reason: 'Winning move'
            });
            expect(result.current.error).toBeNull();
            expect(result.current.isLoading).toBe(false);
        });
        it('handles sequential move assessments', async ()=>{
            var _result_current_data, _result_current_data1;
            const { tablebaseService } = require('@shared/services/TablebaseService');
            const { assessTablebaseMoveQuality } = require('@shared/utils/moveQuality');
            // Setup mocks for first assessment
            tablebaseService.getEvaluation.mockResolvedValue({
                isAvailable: true,
                result: {
                    wdl: 1,
                    moves: [
                        {
                            move: 'Kh1',
                            wdl: 1
                        }
                    ]
                }
            });
            assessTablebaseMoveQuality.mockReturnValueOnce({
                quality: 'excellent',
                isOptimal: true
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            // First assessment
            await (0, _react.act)(async ()=>{
                await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white');
            });
            expect((_result_current_data = result.current.data) === null || _result_current_data === void 0 ? void 0 : _result_current_data.quality).toBe('excellent');
            // Setup for second assessment
            assessTablebaseMoveQuality.mockReturnValueOnce({
                quality: 'mistake',
                isOptimal: false
            });
            // Second assessment
            await (0, _react.act)(async ()=>{
                await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kg1', 'white');
            });
            expect((_result_current_data1 = result.current.data) === null || _result_current_data1 === void 0 ? void 0 : _result_current_data1.quality).toBe('mistake');
        });
    });
    describe('Performance', ()=>{
        it('handles rapid successive calls efficiently', async ()=>{
            const { tablebaseService } = require('@shared/services/TablebaseService');
            let callCount = 0;
            tablebaseService.getEvaluation.mockImplementation(()=>{
                callCount++;
                return Promise.resolve({
                    isAvailable: true,
                    result: {
                        wdl: 1,
                        moves: []
                    }
                });
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useMoveQuality.useMoveQuality)());
            // Make multiple rapid calls
            await (0, _react.act)(async ()=>{
                await Promise.all([
                    result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'white'),
                    result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kg1', 'white'),
                    result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kf1', 'white')
                ].map((p)=>p.catch(()=>{}))); // Ignore errors from cancelled requests
            });
            // Should have made calls for the last request only due to cancellation
            expect(callCount).toBeGreaterThanOrEqual(2); // At least before/after for last call
        });
    });
});

//# sourceMappingURL=data:application/json;base64,