{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/utils/moveQuality.ts"],"sourcesContent":["/**\n * @file Move quality assessment utilities for tablebase analysis\n * @module utils/moveQuality\n *\n * @description\n * Pure functions for assessing chess move quality based on tablebase WDL\n * (Win/Draw/Loss) values. Provides comprehensive analysis of move impact\n * including critical move detection and human-readable quality descriptions.\n *\n * @remarks\n * Key features:\n * - WDL-based move quality assessment (excellent, good, mistake)\n * - Critical move detection for position evaluation changes\n * - Human-readable quality descriptions for UI display\n * - Perspective-aware analysis (player vs opponent viewpoint)\n *\n * All functions are pure and side-effect free, designed for use in\n * performance-critical contexts like real-time move analysis.\n */\n\nimport type {\n  SimplifiedMoveQualityResult,\n  MoveQualityType,\n} from \"@shared/types/evaluation\";\n\n/**\n * Analyzes move quality based on tablebase WDL values\n *\n * @param {number} wdlBefore - WDL value before the move (from player's perspective)\n * @param {number} wdlAfter - WDL value after the move (from opponent's perspective, needs negation)\n * @returns {SimplifiedMoveQualityResult} Comprehensive move quality assessment\n *\n * @description\n * Compares tablebase evaluations before and after a move to determine\n * move quality. Handles perspective conversion since wdlAfter represents\n * the opponent's view and must be negated for player perspective analysis.\n *\n * @remarks\n * Quality categories:\n * - excellent: Move improves WDL evaluation (wdlChange > 0)\n * - good: Move maintains WDL evaluation (wdlChange = 0)\n * - mistake: Move worsens WDL evaluation (wdlChange < 0)\n *\n * The WDL change calculation: -wdlAfter - wdlBefore accounts for\n * perspective flip when it becomes the opponent's turn.\n *\n * @example\n * ```typescript\n * // Excellent move: Win to win (maintains advantage)\n * const result1 = assessTablebaseMoveQuality(2, -2);\n * // { quality: 'excellent', reason: 'Optimal tablebase move' }\n *\n * // Mistake: Win to draw\n * const result2 = assessTablebaseMoveQuality(2, 0);\n * // { quality: 'mistake', reason: 'Worsens tablebase position' }\n * ```\n */\nexport function assessTablebaseMoveQuality(\n  wdlBefore: number,\n  wdlAfter: number,\n): SimplifiedMoveQualityResult {\n  // Since we're analyzing from the player's perspective who made the move,\n  // we need to negate the WDL for the position after (opponent's turn)\n  const wdlChange = -wdlAfter - wdlBefore;\n\n  let quality: MoveQualityType;\n  let reason: string;\n\n  if (wdlChange > 0) {\n    quality = \"excellent\";\n    reason = \"Optimal tablebase move\";\n  } else if (wdlChange === 0) {\n    quality = \"good\";\n    reason = \"Maintains tablebase evaluation\";\n  } else {\n    quality = \"mistake\";\n    reason = \"Worsens tablebase position\";\n  }\n\n  return {\n    quality,\n    reason,\n    isTablebaseAnalysis: true,\n    tablebaseInfo: {\n      wdlBefore,\n      wdlAfter: -wdlAfter,\n    },\n  };\n}\n"],"names":["assessTablebaseMoveQuality","wdlBefore","wdlAfter","wdlChange","quality","reason","isTablebaseAnalysis","tablebaseInfo"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;CAkBC;;;;+BAuCeA;;;eAAAA;;;AAAT,SAASA,2BACdC,SAAiB,EACjBC,QAAgB;IAEhB,yEAAyE;IACzE,qEAAqE;IACrE,MAAMC,YAAY,CAACD,WAAWD;IAE9B,IAAIG;IACJ,IAAIC;IAEJ,IAAIF,YAAY,GAAG;QACjBC,UAAU;QACVC,SAAS;IACX,OAAO,IAAIF,cAAc,GAAG;QAC1BC,UAAU;QACVC,SAAS;IACX,OAAO;QACLD,UAAU;QACVC,SAAS;IACX;IAEA,OAAO;QACLD;QACAC;QACAC,qBAAqB;QACrBC,eAAe;YACbN;YACAC,UAAU,CAACA;QACb;IACF;AACF"}