269adbc86c416dcd3557599d2d3a50bd
/**
 * @file Move quality assessment utilities for tablebase analysis
 * @module utils/moveQuality
 *
 * @description
 * Pure functions for assessing chess move quality based on tablebase WDL
 * (Win/Draw/Loss) values. Provides comprehensive analysis of move impact
 * including critical move detection and human-readable quality descriptions.
 *
 * @remarks
 * Key features:
 * - WDL-based move quality assessment (excellent, good, mistake)
 * - Critical move detection for position evaluation changes
 * - Human-readable quality descriptions for UI display
 * - Perspective-aware analysis (player vs opponent viewpoint)
 *
 * All functions are pure and side-effect free, designed for use in
 * performance-critical contexts like real-time move analysis.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "assessTablebaseMoveQuality", {
    enumerable: true,
    get: function() {
        return assessTablebaseMoveQuality;
    }
});
function assessTablebaseMoveQuality(wdlBefore, wdlAfter) {
    // Since we're analyzing from the player's perspective who made the move,
    // we need to negate the WDL for the position after (opponent's turn)
    const wdlChange = -wdlAfter - wdlBefore;
    let quality;
    let reason;
    if (wdlChange > 0) {
        quality = "excellent";
        reason = "Optimal tablebase move";
    } else if (wdlChange === 0) {
        quality = "good";
        reason = "Maintains tablebase evaluation";
    } else {
        quality = "mistake";
        reason = "Worsens tablebase position";
    }
    return {
        quality,
        reason,
        isTablebaseAnalysis: true,
        tablebaseInfo: {
            wdlBefore,
            wdlAfter: -wdlAfter
        }
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL3V0aWxzL21vdmVRdWFsaXR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgTW92ZSBxdWFsaXR5IGFzc2Vzc21lbnQgdXRpbGl0aWVzIGZvciB0YWJsZWJhc2UgYW5hbHlzaXNcbiAqIEBtb2R1bGUgdXRpbHMvbW92ZVF1YWxpdHlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFB1cmUgZnVuY3Rpb25zIGZvciBhc3Nlc3NpbmcgY2hlc3MgbW92ZSBxdWFsaXR5IGJhc2VkIG9uIHRhYmxlYmFzZSBXRExcbiAqIChXaW4vRHJhdy9Mb3NzKSB2YWx1ZXMuIFByb3ZpZGVzIGNvbXByZWhlbnNpdmUgYW5hbHlzaXMgb2YgbW92ZSBpbXBhY3RcbiAqIGluY2x1ZGluZyBjcml0aWNhbCBtb3ZlIGRldGVjdGlvbiBhbmQgaHVtYW4tcmVhZGFibGUgcXVhbGl0eSBkZXNjcmlwdGlvbnMuXG4gKlxuICogQHJlbWFya3NcbiAqIEtleSBmZWF0dXJlczpcbiAqIC0gV0RMLWJhc2VkIG1vdmUgcXVhbGl0eSBhc3Nlc3NtZW50IChleGNlbGxlbnQsIGdvb2QsIG1pc3Rha2UpXG4gKiAtIENyaXRpY2FsIG1vdmUgZGV0ZWN0aW9uIGZvciBwb3NpdGlvbiBldmFsdWF0aW9uIGNoYW5nZXNcbiAqIC0gSHVtYW4tcmVhZGFibGUgcXVhbGl0eSBkZXNjcmlwdGlvbnMgZm9yIFVJIGRpc3BsYXlcbiAqIC0gUGVyc3BlY3RpdmUtYXdhcmUgYW5hbHlzaXMgKHBsYXllciB2cyBvcHBvbmVudCB2aWV3cG9pbnQpXG4gKlxuICogQWxsIGZ1bmN0aW9ucyBhcmUgcHVyZSBhbmQgc2lkZS1lZmZlY3QgZnJlZSwgZGVzaWduZWQgZm9yIHVzZSBpblxuICogcGVyZm9ybWFuY2UtY3JpdGljYWwgY29udGV4dHMgbGlrZSByZWFsLXRpbWUgbW92ZSBhbmFseXNpcy5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7XG4gIFNpbXBsaWZpZWRNb3ZlUXVhbGl0eVJlc3VsdCxcbiAgTW92ZVF1YWxpdHlUeXBlLFxufSBmcm9tIFwiQHNoYXJlZC90eXBlcy9ldmFsdWF0aW9uXCI7XG5cbi8qKlxuICogQW5hbHl6ZXMgbW92ZSBxdWFsaXR5IGJhc2VkIG9uIHRhYmxlYmFzZSBXREwgdmFsdWVzXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHdkbEJlZm9yZSAtIFdETCB2YWx1ZSBiZWZvcmUgdGhlIG1vdmUgKGZyb20gcGxheWVyJ3MgcGVyc3BlY3RpdmUpXG4gKiBAcGFyYW0ge251bWJlcn0gd2RsQWZ0ZXIgLSBXREwgdmFsdWUgYWZ0ZXIgdGhlIG1vdmUgKGZyb20gb3Bwb25lbnQncyBwZXJzcGVjdGl2ZSwgbmVlZHMgbmVnYXRpb24pXG4gKiBAcmV0dXJucyB7U2ltcGxpZmllZE1vdmVRdWFsaXR5UmVzdWx0fSBDb21wcmVoZW5zaXZlIG1vdmUgcXVhbGl0eSBhc3Nlc3NtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wYXJlcyB0YWJsZWJhc2UgZXZhbHVhdGlvbnMgYmVmb3JlIGFuZCBhZnRlciBhIG1vdmUgdG8gZGV0ZXJtaW5lXG4gKiBtb3ZlIHF1YWxpdHkuIEhhbmRsZXMgcGVyc3BlY3RpdmUgY29udmVyc2lvbiBzaW5jZSB3ZGxBZnRlciByZXByZXNlbnRzXG4gKiB0aGUgb3Bwb25lbnQncyB2aWV3IGFuZCBtdXN0IGJlIG5lZ2F0ZWQgZm9yIHBsYXllciBwZXJzcGVjdGl2ZSBhbmFseXNpcy5cbiAqXG4gKiBAcmVtYXJrc1xuICogUXVhbGl0eSBjYXRlZ29yaWVzOlxuICogLSBleGNlbGxlbnQ6IE1vdmUgaW1wcm92ZXMgV0RMIGV2YWx1YXRpb24gKHdkbENoYW5nZSA+IDApXG4gKiAtIGdvb2Q6IE1vdmUgbWFpbnRhaW5zIFdETCBldmFsdWF0aW9uICh3ZGxDaGFuZ2UgPSAwKVxuICogLSBtaXN0YWtlOiBNb3ZlIHdvcnNlbnMgV0RMIGV2YWx1YXRpb24gKHdkbENoYW5nZSA8IDApXG4gKlxuICogVGhlIFdETCBjaGFuZ2UgY2FsY3VsYXRpb246IC13ZGxBZnRlciAtIHdkbEJlZm9yZSBhY2NvdW50cyBmb3JcbiAqIHBlcnNwZWN0aXZlIGZsaXAgd2hlbiBpdCBiZWNvbWVzIHRoZSBvcHBvbmVudCdzIHR1cm4uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIEV4Y2VsbGVudCBtb3ZlOiBXaW4gdG8gd2luIChtYWludGFpbnMgYWR2YW50YWdlKVxuICogY29uc3QgcmVzdWx0MSA9IGFzc2Vzc1RhYmxlYmFzZU1vdmVRdWFsaXR5KDIsIC0yKTtcbiAqIC8vIHsgcXVhbGl0eTogJ2V4Y2VsbGVudCcsIHJlYXNvbjogJ09wdGltYWwgdGFibGViYXNlIG1vdmUnIH1cbiAqXG4gKiAvLyBNaXN0YWtlOiBXaW4gdG8gZHJhd1xuICogY29uc3QgcmVzdWx0MiA9IGFzc2Vzc1RhYmxlYmFzZU1vdmVRdWFsaXR5KDIsIDApO1xuICogLy8geyBxdWFsaXR5OiAnbWlzdGFrZScsIHJlYXNvbjogJ1dvcnNlbnMgdGFibGViYXNlIHBvc2l0aW9uJyB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2Vzc1RhYmxlYmFzZU1vdmVRdWFsaXR5KFxuICB3ZGxCZWZvcmU6IG51bWJlcixcbiAgd2RsQWZ0ZXI6IG51bWJlcixcbik6IFNpbXBsaWZpZWRNb3ZlUXVhbGl0eVJlc3VsdCB7XG4gIC8vIFNpbmNlIHdlJ3JlIGFuYWx5emluZyBmcm9tIHRoZSBwbGF5ZXIncyBwZXJzcGVjdGl2ZSB3aG8gbWFkZSB0aGUgbW92ZSxcbiAgLy8gd2UgbmVlZCB0byBuZWdhdGUgdGhlIFdETCBmb3IgdGhlIHBvc2l0aW9uIGFmdGVyIChvcHBvbmVudCdzIHR1cm4pXG4gIGNvbnN0IHdkbENoYW5nZSA9IC13ZGxBZnRlciAtIHdkbEJlZm9yZTtcblxuICBsZXQgcXVhbGl0eTogTW92ZVF1YWxpdHlUeXBlO1xuICBsZXQgcmVhc29uOiBzdHJpbmc7XG5cbiAgaWYgKHdkbENoYW5nZSA+IDApIHtcbiAgICBxdWFsaXR5ID0gXCJleGNlbGxlbnRcIjtcbiAgICByZWFzb24gPSBcIk9wdGltYWwgdGFibGViYXNlIG1vdmVcIjtcbiAgfSBlbHNlIGlmICh3ZGxDaGFuZ2UgPT09IDApIHtcbiAgICBxdWFsaXR5ID0gXCJnb29kXCI7XG4gICAgcmVhc29uID0gXCJNYWludGFpbnMgdGFibGViYXNlIGV2YWx1YXRpb25cIjtcbiAgfSBlbHNlIHtcbiAgICBxdWFsaXR5ID0gXCJtaXN0YWtlXCI7XG4gICAgcmVhc29uID0gXCJXb3JzZW5zIHRhYmxlYmFzZSBwb3NpdGlvblwiO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBxdWFsaXR5LFxuICAgIHJlYXNvbixcbiAgICBpc1RhYmxlYmFzZUFuYWx5c2lzOiB0cnVlLFxuICAgIHRhYmxlYmFzZUluZm86IHtcbiAgICAgIHdkbEJlZm9yZSxcbiAgICAgIHdkbEFmdGVyOiAtd2RsQWZ0ZXIsXG4gICAgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJhc3Nlc3NUYWJsZWJhc2VNb3ZlUXVhbGl0eSIsIndkbEJlZm9yZSIsIndkbEFmdGVyIiwid2RsQ2hhbmdlIiwicXVhbGl0eSIsInJlYXNvbiIsImlzVGFibGViYXNlQW5hbHlzaXMiLCJ0YWJsZWJhc2VJbmZvIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0JDOzs7OytCQXVDZUE7OztlQUFBQTs7O0FBQVQsU0FBU0EsMkJBQ2RDLFNBQWlCLEVBQ2pCQyxRQUFnQjtJQUVoQix5RUFBeUU7SUFDekUscUVBQXFFO0lBQ3JFLE1BQU1DLFlBQVksQ0FBQ0QsV0FBV0Q7SUFFOUIsSUFBSUc7SUFDSixJQUFJQztJQUVKLElBQUlGLFlBQVksR0FBRztRQUNqQkMsVUFBVTtRQUNWQyxTQUFTO0lBQ1gsT0FBTyxJQUFJRixjQUFjLEdBQUc7UUFDMUJDLFVBQVU7UUFDVkMsU0FBUztJQUNYLE9BQU87UUFDTEQsVUFBVTtRQUNWQyxTQUFTO0lBQ1g7SUFFQSxPQUFPO1FBQ0xEO1FBQ0FDO1FBQ0FDLHFCQUFxQjtRQUNyQkMsZUFBZTtZQUNiTjtZQUNBQyxVQUFVLENBQUNBO1FBQ2I7SUFDRjtBQUNGIn0=