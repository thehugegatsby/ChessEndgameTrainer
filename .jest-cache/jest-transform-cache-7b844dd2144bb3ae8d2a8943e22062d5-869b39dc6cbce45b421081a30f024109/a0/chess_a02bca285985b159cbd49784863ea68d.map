{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/shared/types/chess.ts"],"sourcesContent":["/**\n * Core chess domain types\n * Comprehensive type definitions for the chess training application\n */\n\nimport {\n  Chess,\n  Square as ChessJsSquare,\n  PieceSymbol as ChessJsPieceSymbol,\n} from \"chess.js\";\n\n// Basic chess types\nexport type Square = ChessJsSquare; // Use chess.js Square type directly\nexport type PieceSymbol = ChessJsPieceSymbol; // Use chess.js PieceSymbol type\nexport type Piece =\n  | \"p\"\n  | \"n\"\n  | \"b\"\n  | \"r\"\n  | \"q\"\n  | \"k\"\n  | \"P\"\n  | \"N\"\n  | \"B\"\n  | \"R\"\n  | \"Q\"\n  | \"K\"; // Keep for FEN/display purposes\nexport type Color = \"w\" | \"b\";\nexport type File = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\";\n// Move related types - Clean Domain Types\nexport interface Move {\n  color: Color;\n  from: Square;\n  to: Square;\n  piece: PieceSymbol;\n  captured?: PieceSymbol;\n  promotion?: \"q\" | \"r\" | \"b\" | \"n\"; // Strict: only valid promotion pieces\n  flags: string;\n  san: string;\n  lan: string;\n  fenBefore: string;\n  fenAfter: string;\n  timestamp?: number;\n  // Analysis data for post-game review\n  evalBefore?: number; // WDL evaluation before move (-2 to 2)\n  evalAfter?: number; // WDL evaluation after move (-2 to 2)\n  bestMoveSan?: string; // Best move in algebraic notation\n  moveQuality?: \"excellent\" | \"good\" | \"inaccuracy\" | \"mistake\" | \"blunder\";\n  dtzBefore?: number | null; // Distance to zeroing before move\n  dtzAfter?: number | null; // Distance to zeroing after move\n  // Helper methods (available on chess.js Move instances)\n  isCapture: () => boolean;\n  isPromotion: () => boolean;\n  isEnPassant: () => boolean;\n  isKingsideCastle: () => boolean;\n  isQueensideCastle: () => boolean;\n  isBigPawn: () => boolean;\n}\n\n// Brand Types for additional type safety\ndeclare const __domainMoveBrand: unique symbol;\nexport type DomainMove = Move & { readonly [__domainMoveBrand]: true };\n\ndeclare const __validatedMoveBrand: unique symbol;\nexport type ValidatedMove = DomainMove & {\n  readonly [__validatedMoveBrand]: true;\n};\n\n/**\n * Type-safe factory for creating ValidatedMove from chess.js Move\n *\n * @param chessMove - Move result from chess.js\n * @param fenBefore - FEN string before the move\n * @param fenAfter - FEN string after the move\n * @returns Type-safe ValidatedMove with all required properties\n *\n * @example\n * ```typescript\n * const chessMove = game.move('e4');\n * const validatedMove = createValidatedMove(chessMove, game.fen(), gameCopy.fen());\n * ```\n */\nexport function createValidatedMove(\n  chessMove: import(\"chess.js\").Move,\n  fenBefore: string,\n  fenAfter: string,\n): ValidatedMove {\n  const domainMove: Move = {\n    color: chessMove.color,\n    from: chessMove.from,\n    to: chessMove.to,\n    piece: chessMove.piece,\n    captured: chessMove.captured,\n    promotion: chessMove.promotion as \"q\" | \"r\" | \"b\" | \"n\" | undefined,\n    flags: chessMove.flags,\n    san: chessMove.san,\n    lan: chessMove.lan,\n    fenBefore,\n    fenAfter,\n    timestamp: Date.now(),\n\n    // Helper methods\n    isCapture: () => !!chessMove.captured,\n    isPromotion: () => !!chessMove.promotion,\n    isEnPassant: () => chessMove.flags.includes(\"e\"),\n    isKingsideCastle: () => chessMove.flags.includes(\"k\"),\n    isQueensideCastle: () => chessMove.flags.includes(\"q\"),\n    isBigPawn: () => chessMove.flags.includes(\"b\"),\n  };\n\n  return domainMove as ValidatedMove;\n}\n\n// Position types\nexport interface Position {\n  fen: string;\n  board: (Piece | null)[][];\n  turn: Color;\n  castling: {\n    w: { k: boolean; q: boolean };\n    b: { k: boolean; q: boolean };\n  };\n  enPassant: Square | null;\n  halfMoveClock: number;\n  fullMoveNumber: number;\n}\n\n// Game state types\n\nexport interface GameStatus {\n  isCheck: boolean;\n  isCheckmate: boolean;\n  isStalemate: boolean;\n  isDraw: boolean;\n  isThreefoldRepetition: boolean;\n  isInsufficientMaterial: boolean;\n  isFiftyMoveRule: boolean;\n  isGameOver: boolean;\n}\n\n// Training specific types\nexport interface TrainingPosition {\n  id: number;\n  name: string;\n  fen: string;\n  targetSquares?: Square[];\n  moveSequence?: Move[];\n  hints?: string[];\n  difficulty: \"beginner\" | \"intermediate\" | \"advanced\";\n  category: string;\n}\n\n// Analysis related types\n\n// Validation types\n\n// Chess.js instance type (for better typing)\nexport type ChessInstance = Chess;\n\n// Utility types\nexport type FEN = string;\nexport type PGN = string;\n"],"names":["createValidatedMove","chessMove","fenBefore","fenAfter","domainMove","color","from","to","piece","captured","promotion","flags","san","lan","timestamp","Date","now","isCapture","isPromotion","isEnPassant","includes","isKingsideCastle","isQueensideCastle","isBigPawn"],"mappings":"AAAA;;;CAGC;;;;+BA+EeA;;;eAAAA;;;AAAT,SAASA,oBACdC,SAAkC,EAClCC,SAAiB,EACjBC,QAAgB;IAEhB,MAAMC,aAAmB;QACvBC,OAAOJ,UAAUI,KAAK;QACtBC,MAAML,UAAUK,IAAI;QACpBC,IAAIN,UAAUM,EAAE;QAChBC,OAAOP,UAAUO,KAAK;QACtBC,UAAUR,UAAUQ,QAAQ;QAC5BC,WAAWT,UAAUS,SAAS;QAC9BC,OAAOV,UAAUU,KAAK;QACtBC,KAAKX,UAAUW,GAAG;QAClBC,KAAKZ,UAAUY,GAAG;QAClBX;QACAC;QACAW,WAAWC,KAAKC,GAAG;QAEnB,iBAAiB;QACjBC,WAAW,IAAM,CAAC,CAAChB,UAAUQ,QAAQ;QACrCS,aAAa,IAAM,CAAC,CAACjB,UAAUS,SAAS;QACxCS,aAAa,IAAMlB,UAAUU,KAAK,CAACS,QAAQ,CAAC;QAC5CC,kBAAkB,IAAMpB,UAAUU,KAAK,CAACS,QAAQ,CAAC;QACjDE,mBAAmB,IAAMrB,UAAUU,KAAK,CAACS,QAAQ,CAAC;QAClDG,WAAW,IAAMtB,UAAUU,KAAK,CAACS,QAAQ,CAAC;IAC5C;IAEA,OAAOhB;AACT"}