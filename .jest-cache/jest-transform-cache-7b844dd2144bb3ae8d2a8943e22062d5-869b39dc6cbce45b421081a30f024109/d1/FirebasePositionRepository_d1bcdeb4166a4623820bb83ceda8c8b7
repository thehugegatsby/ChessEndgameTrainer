4286bc6064becc0a65110dccb1a36c4c
/**
 * Firebase implementation of IPositionRepository
 * Encapsulates all Firebase-specific logic
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FirebasePositionRepository", {
    enumerable: true,
    get: function() {
        return FirebasePositionRepository;
    }
});
const _firestore = require("firebase/firestore");
const _fenValidator = require("../../utils/fenValidator");
const _logging = require("../../services/logging");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
const logger = (0, _logging.getLogger)().setContext("FirebasePositionRepository");
class FirebasePositionRepository {
    async getPosition(id) {
        try {
            const docRef = (0, _firestore.doc)(this.db, "positions", id.toString());
            const docSnap = await (0, _firestore.getDoc)(docRef);
            if (docSnap.exists()) {
                var _this_config_events_onDataFetched, _this_config_events;
                const data = docSnap.data();
                const position = {
                    ...data,
                    id
                };
                // Validate FEN
                if (position.fen) {
                    const validation = (0, _fenValidator.validateAndSanitizeFen)(position.fen);
                    if (!validation.isValid) {
                        logger.error(`Invalid FEN from Firestore for position ${id}: ${validation.errors.join(", ")}`);
                        throw new Error("Invalid position data");
                    }
                    position.fen = validation.sanitized;
                }
                (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPosition", 1);
                return position;
            }
            logger.warn(`Position ${id} not found`);
            return null;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get position", error, {
                id
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getPosition", error);
            throw error;
        }
    }
    async createPosition(data) {
        try {
            var _this_config_events_onDataModified, _this_config_events;
            // Generate unique ID using crypto.randomUUID for collision-free identifiers
            const uniqueId = crypto.randomUUID();
            // Convert to number for compatibility with existing EndgamePosition.id type
            // Using hash code of the UUID string
            const id = Math.abs(uniqueId.split("").reduce((a, b)=>{
                a = (a << 5) - a + b.charCodeAt(0);
                return a & a;
            }, 0));
            const position = {
                ...data,
                id
            };
            // Validate FEN before saving
            if (position.fen) {
                const validation = (0, _fenValidator.validateAndSanitizeFen)(position.fen);
                if (!validation.isValid) {
                    throw new Error(`Invalid FEN: ${validation.errors.join(", ")}`);
                }
                position.fen = validation.sanitized;
            }
            const docRef = (0, _firestore.doc)(this.db, "positions", id.toString());
            await (0, _firestore.setDoc)(docRef, position);
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "createPosition", [
                id
            ]);
            return position;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to create position", error);
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "createPosition", error);
            throw error;
        }
    }
    async updatePosition(id, updates) {
        try {
            var _this_config_events_onDataModified, _this_config_events;
            // Validate FEN if provided
            if (updates.fen) {
                const validation = (0, _fenValidator.validateAndSanitizeFen)(updates.fen);
                if (!validation.isValid) {
                    throw new Error(`Invalid FEN: ${validation.errors.join(", ")}`);
                }
                updates.fen = validation.sanitized;
            }
            const docRef = (0, _firestore.doc)(this.db, "positions", id.toString());
            await (0, _firestore.updateDoc)(docRef, updates);
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "updatePosition", [
                id
            ]);
            return this.getPosition(id);
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to update position", error, {
                id
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "updatePosition", error);
            throw error;
        }
    }
    async deletePosition(id) {
        try {
            var _this_config_events_onDataModified, _this_config_events;
            const docRef = (0, _firestore.doc)(this.db, "positions", id.toString());
            await (0, _firestore.deleteDoc)(docRef);
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "deletePosition", [
                id
            ]);
            return true;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to delete position", error, {
                id
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "deletePosition", error);
            return false;
        }
    }
    async getAllPositions() {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const positionsRef = (0, _firestore.collection)(this.db, "positions");
            const snapshot = await (0, _firestore.getDocs)(positionsRef);
            const positions = [];
            snapshot.forEach((doc)=>{
                const data = doc.data();
                const position = {
                    ...data,
                    id: parseInt(doc.id)
                };
                // Validate FEN
                if (position.fen) {
                    const validation = (0, _fenValidator.validateAndSanitizeFen)(position.fen);
                    if (validation.isValid) {
                        position.fen = validation.sanitized;
                        positions.push(position);
                    } else {
                        logger.error(`Invalid FEN for position ${position.id}: ${validation.errors.join(", ")}`);
                    }
                } else {
                    positions.push(position);
                }
            });
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getAllPositions", positions.length);
            return positions;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get all positions", error);
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getAllPositions", error);
            return [];
        }
    }
    async getPositionsByCategory(category) {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const positionsRef = (0, _firestore.collection)(this.db, "positions");
            const q = (0, _firestore.query)(positionsRef, (0, _firestore.where)("category", "==", category));
            const snapshot = await (0, _firestore.getDocs)(q);
            const positions = [];
            snapshot.forEach((doc)=>{
                const data = doc.data();
                const position = {
                    ...data,
                    id: parseInt(doc.id)
                };
                // Validate FEN
                if (position.fen) {
                    const validation = (0, _fenValidator.validateAndSanitizeFen)(position.fen);
                    if (validation.isValid) {
                        position.fen = validation.sanitized;
                        positions.push(position);
                    } else {
                        logger.error(`Invalid FEN for position ${position.id}: ${validation.errors.join(", ")}`);
                    }
                } else {
                    positions.push(position);
                }
            });
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionsByCategory", positions.length);
            return positions;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get positions by category", error, {
                category
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getPositionsByCategory", error);
            return [];
        }
    }
    async getPositionsByDifficulty(difficulty) {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const positionsRef = (0, _firestore.collection)(this.db, "positions");
            const q = (0, _firestore.query)(positionsRef, (0, _firestore.where)("difficulty", "==", difficulty));
            const snapshot = await (0, _firestore.getDocs)(q);
            const positions = [];
            snapshot.forEach((doc)=>{
                const data = doc.data();
                const position = {
                    ...data,
                    id: parseInt(doc.id)
                };
                // Validate FEN
                if (position.fen) {
                    const validation = (0, _fenValidator.validateAndSanitizeFen)(position.fen);
                    if (validation.isValid) {
                        position.fen = validation.sanitized;
                        positions.push(position);
                    } else {
                        logger.error(`Invalid FEN for position ${position.id}: ${validation.errors.join(", ")}`);
                    }
                } else {
                    positions.push(position);
                }
            });
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionsByDifficulty", positions.length);
            return positions;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get positions by difficulty", error, {
                difficulty
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getPositionsByDifficulty", error);
            return [];
        }
    }
    async getPositionsByIds(ids) {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const positions = await Promise.all(ids.map((id)=>this.getPosition(id)));
            const validPositions = positions.filter((p)=>p !== null);
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionsByIds", validPositions.length);
            return validPositions;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get positions by ids", error, {
                ids
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getPositionsByIds", error);
            return [];
        }
    }
    async searchPositions(searchTerm) {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            // Firestore doesn't support full-text search natively
            // For production, consider Algolia or Elasticsearch
            const positions = await this.getAllPositions();
            const lowerSearch = searchTerm.toLowerCase();
            const results = positions.filter((p)=>p.title.toLowerCase().includes(lowerSearch) || p.description.toLowerCase().includes(lowerSearch));
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "searchPositions", results.length);
            return results;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to search positions", error, {
                searchTerm
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "searchPositions", error);
            return [];
        }
    }
    async getPositionsByTags(_tags) {
        var _this_config_events_onDataFetched, _this_config_events;
        // Tags are not yet implemented in EndgamePosition type
        // Return empty array for now
        logger.warn("getPositionsByTags: tags property not yet implemented in EndgamePosition");
        (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionsByTags", 0);
        return [];
    }
    async getNextPosition(currentId, categoryId) {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const positionsRef = (0, _firestore.collection)(this.db, "positions");
            let q;
            if (categoryId) {
                q = (0, _firestore.query)(positionsRef, (0, _firestore.where)("category", "==", categoryId), (0, _firestore.where)("id", ">", currentId), (0, _firestore.orderBy)("id"), (0, _firestore.limit)(1));
            } else {
                q = (0, _firestore.query)(positionsRef, (0, _firestore.where)("id", ">", currentId), (0, _firestore.orderBy)("id"), (0, _firestore.limit)(1));
            }
            const snapshot = await (0, _firestore.getDocs)(q);
            if (snapshot.empty) {
                return null;
            }
            const data = snapshot.docs[0].data();
            const position = {
                ...data,
                id: parseInt(snapshot.docs[0].id)
            };
            // Validate FEN
            if (position.fen) {
                const validation = (0, _fenValidator.validateAndSanitizeFen)(position.fen);
                if (!validation.isValid) {
                    logger.error(`Invalid FEN for position ${position.id}: ${validation.errors.join(", ")}`);
                    return null;
                }
                position.fen = validation.sanitized;
            }
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getNextPosition", 1);
            return position;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get next position", error, {
                currentId,
                categoryId
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getNextPosition", error);
            return null;
        }
    }
    async getPreviousPosition(currentId, categoryId) {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const positionsRef = (0, _firestore.collection)(this.db, "positions");
            let q;
            if (categoryId) {
                q = (0, _firestore.query)(positionsRef, (0, _firestore.where)("category", "==", categoryId), (0, _firestore.where)("id", "<", currentId), (0, _firestore.orderBy)("id", "desc"), (0, _firestore.limit)(1));
            } else {
                q = (0, _firestore.query)(positionsRef, (0, _firestore.where)("id", "<", currentId), (0, _firestore.orderBy)("id", "desc"), (0, _firestore.limit)(1));
            }
            const snapshot = await (0, _firestore.getDocs)(q);
            if (snapshot.empty) {
                return null;
            }
            const data = snapshot.docs[0].data();
            const position = {
                ...data,
                id: parseInt(snapshot.docs[0].id)
            };
            // Validate FEN
            if (position.fen) {
                const validation = (0, _fenValidator.validateAndSanitizeFen)(position.fen);
                if (!validation.isValid) {
                    logger.error(`Invalid FEN for position ${position.id}: ${validation.errors.join(", ")}`);
                    return null;
                }
                position.fen = validation.sanitized;
            }
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPreviousPosition", 1);
            return position;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get previous position", error, {
                currentId,
                categoryId
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getPreviousPosition", error);
            return null;
        }
    }
    async getCategories() {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const categoriesRef = (0, _firestore.collection)(this.db, "categories");
            const snapshot = await (0, _firestore.getDocs)(categoriesRef);
            const categories = [];
            snapshot.forEach((doc)=>{
                categories.push(doc.data());
            });
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getCategories", categories.length);
            return categories;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get categories", error);
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getCategories", error);
            return [];
        }
    }
    async getCategory(id) {
        try {
            const docRef = (0, _firestore.doc)(this.db, "categories", id);
            const docSnap = await (0, _firestore.getDoc)(docRef);
            if (docSnap.exists()) {
                var _this_config_events_onDataFetched, _this_config_events;
                (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getCategory", 1);
                return docSnap.data();
            }
            return null;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get category", error, {
                id
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getCategory", error);
            return null;
        }
    }
    async getChapters() {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const chaptersRef = (0, _firestore.collection)(this.db, "chapters");
            const snapshot = await (0, _firestore.getDocs)(chaptersRef);
            const chapters = [];
            snapshot.forEach((doc)=>{
                chapters.push(doc.data());
            });
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getChapters", chapters.length);
            return chapters;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get chapters", error);
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getChapters", error);
            return [];
        }
    }
    async getChaptersByCategory(categoryId) {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const chaptersRef = (0, _firestore.collection)(this.db, "chapters");
            const q = (0, _firestore.query)(chaptersRef, (0, _firestore.where)("category", "==", categoryId));
            const snapshot = await (0, _firestore.getDocs)(q);
            const chapters = [];
            snapshot.forEach((doc)=>{
                chapters.push(doc.data());
            });
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getChaptersByCategory", chapters.length);
            return chapters;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get chapters by category", error, {
                categoryId
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getChaptersByCategory", error);
            return [];
        }
    }
    async getTotalPositionCount() {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const positionsRef = (0, _firestore.collection)(this.db, "positions");
            const snapshot = await (0, _firestore.getDocs)(positionsRef);
            const count = snapshot.size;
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getTotalPositionCount", count);
            return count;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get total position count", error);
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getTotalPositionCount", error);
            return 0;
        }
    }
    async getPositionCountByCategory(categoryId) {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const positionsRef = (0, _firestore.collection)(this.db, "positions");
            const q = (0, _firestore.query)(positionsRef, (0, _firestore.where)("category", "==", categoryId));
            const snapshot = await (0, _firestore.getDocs)(q);
            const count = snapshot.size;
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionCountByCategory", count);
            return count;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get position count by category", error, {
                categoryId
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getPositionCountByCategory", error);
            return 0;
        }
    }
    async getPositionCountByDifficulty(difficulty) {
        try {
            var _this_config_events_onDataFetched, _this_config_events;
            const positionsRef = (0, _firestore.collection)(this.db, "positions");
            const q = (0, _firestore.query)(positionsRef, (0, _firestore.where)("difficulty", "==", difficulty));
            const snapshot = await (0, _firestore.getDocs)(q);
            const count = snapshot.size;
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataFetched = _this_config_events.onDataFetched) === null || _this_config_events_onDataFetched === void 0 ? void 0 : _this_config_events_onDataFetched.call(_this_config_events, "getPositionCountByDifficulty", count);
            return count;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to get position count by difficulty", error, {
                difficulty
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "getPositionCountByDifficulty", error);
            return 0;
        }
    }
    async batchCreatePositions(positions) {
        try {
            var _this_config_events_onDataModified, _this_config_events;
            const batch = (0, _firestore.writeBatch)(this.db);
            const createdPositions = [];
            for (const data of positions){
                // Generate unique ID using crypto.randomUUID for each position
                const uniqueId = crypto.randomUUID();
                const id = Math.abs(uniqueId.split("").reduce((a, b)=>{
                    a = (a << 5) - a + b.charCodeAt(0);
                    return a & a;
                }, 0));
                const position = {
                    ...data,
                    id
                };
                // Validate FEN
                if (position.fen) {
                    const validation = (0, _fenValidator.validateAndSanitizeFen)(position.fen);
                    if (!validation.isValid) {
                        throw new Error(`Invalid FEN for position: ${validation.errors.join(", ")}`);
                    }
                    position.fen = validation.sanitized;
                }
                const docRef = (0, _firestore.doc)(this.db, "positions", id.toString());
                batch.set(docRef, position);
                createdPositions.push(position);
            }
            await batch.commit();
            const ids = createdPositions.map((p)=>p.id);
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "batchCreatePositions", ids);
            return createdPositions;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to batch create positions", error);
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "batchCreatePositions", error);
            throw error;
        }
    }
    async batchUpdatePositions(updates) {
        try {
            var _this_config_events_onDataModified, _this_config_events;
            const batch = (0, _firestore.writeBatch)(this.db);
            const ids = [];
            for (const { id, updates: updateData } of updates){
                // Validate FEN if provided
                if (updateData.fen) {
                    const validation = (0, _fenValidator.validateAndSanitizeFen)(updateData.fen);
                    if (!validation.isValid) {
                        throw new Error(`Invalid FEN for position ${id}: ${validation.errors.join(", ")}`);
                    }
                    updateData.fen = validation.sanitized;
                }
                const docRef = (0, _firestore.doc)(this.db, "positions", id.toString());
                batch.update(docRef, updateData);
                ids.push(id);
            }
            await batch.commit();
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "batchUpdatePositions", ids);
            return this.getPositionsByIds(ids);
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to batch update positions", error);
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "batchUpdatePositions", error);
            throw error;
        }
    }
    async batchDeletePositions(ids) {
        try {
            var _this_config_events_onDataModified, _this_config_events;
            const batch = (0, _firestore.writeBatch)(this.db);
            for (const id of ids){
                const docRef = (0, _firestore.doc)(this.db, "positions", id.toString());
                batch.delete(docRef);
            }
            await batch.commit();
            (_this_config_events = this.config.events) === null || _this_config_events === void 0 ? void 0 : (_this_config_events_onDataModified = _this_config_events.onDataModified) === null || _this_config_events_onDataModified === void 0 ? void 0 : _this_config_events_onDataModified.call(_this_config_events, "batchDeletePositions", ids);
            return true;
        } catch (error) {
            var _this_config_events_onError, _this_config_events1;
            logger.error("Failed to batch delete positions", error, {
                ids
            });
            (_this_config_events1 = this.config.events) === null || _this_config_events1 === void 0 ? void 0 : (_this_config_events_onError = _this_config_events1.onError) === null || _this_config_events_onError === void 0 ? void 0 : _this_config_events_onError.call(_this_config_events1, "batchDeletePositions", error);
            return false;
        }
    }
    constructor(firestore, config = {}){
        _define_property(this, "db", void 0);
        _define_property(this, "config", void 0);
        this.db = firestore;
        this.config = config;
        logger.info("FirebasePositionRepository initialized", {
            config
        });
    }
}

//# sourceMappingURL=data:application/json;base64,