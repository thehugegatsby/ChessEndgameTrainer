8cd0a6c4ebc293bd99af71e81f0806ee
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _MoveSuccessDialog = require("../../../../shared/components/ui/MoveSuccessDialog");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('MoveSuccessDialog', ()=>{
    const defaultProps = {
        isOpen: true,
        promotionPiece: 'Dame',
        moveDescription: 'e8=Q+',
        onClose: jest.fn(),
        onContinue: jest.fn()
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Rendering', ()=>{
        it('renders dialog when open', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps
            }));
            // Check for German success message header
            expect(_react1.screen.getByText('Erfolg!')).toBeInTheDocument();
        });
        it('does not render when closed', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                isOpen: false
            }));
            expect(_react1.screen.queryByText('Erfolg!')).not.toBeInTheDocument();
        });
        it('displays the move description', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText(defaultProps.moveDescription)).toBeInTheDocument();
            expect(_react1.screen.getByText('Gewinnzug:')).toBeInTheDocument();
        });
        it('hides move description when not provided', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                moveDescription: undefined
            }));
            expect(_react1.screen.queryByText('Gewinnzug:')).not.toBeInTheDocument();
        });
        it('shows correct message for Dame promotion', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: "Dame"
            }));
            expect(_react1.screen.getByText('Ausgezeichnet! Umwandlung in Dame führt zum Sieg!')).toBeInTheDocument();
        });
        it('shows correct message for Queen promotion (English)', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: "Queen"
            }));
            expect(_react1.screen.getByText('Ausgezeichnet! Umwandlung in Queen führt zum Sieg!')).toBeInTheDocument();
        });
        it('shows correct message for Turm promotion', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: "Turm"
            }));
            expect(_react1.screen.getByText('Großartig! Umwandlung in Turm führt zum Sieg!')).toBeInTheDocument();
        });
        it('shows correct message for Rook promotion (English)', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: "Rook"
            }));
            expect(_react1.screen.getByText('Großartig! Umwandlung in Rook führt zum Sieg!')).toBeInTheDocument();
        });
        it('shows correct message for Läufer promotion', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: "Läufer"
            }));
            expect(_react1.screen.getByText('Klug! Umwandlung in Läufer führt zum Sieg!')).toBeInTheDocument();
        });
        it('shows correct message for Bishop promotion (English)', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: "Bishop"
            }));
            expect(_react1.screen.getByText('Klug! Umwandlung in Bishop führt zum Sieg!')).toBeInTheDocument();
        });
        it('shows correct message for Springer promotion', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: "Springer"
            }));
            expect(_react1.screen.getByText('Clever! Umwandlung in Springer führt zum Sieg!')).toBeInTheDocument();
        });
        it('shows correct message for Knight promotion (English)', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: "Knight"
            }));
            expect(_react1.screen.getByText('Clever! Umwandlung in Knight führt zum Sieg!')).toBeInTheDocument();
        });
        it('shows default message for unknown promotion piece', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: "Unknown"
            }));
            expect(_react1.screen.getByText('Perfekt! Umwandlung in Unknown führt zum Sieg!')).toBeInTheDocument();
        });
        it('shows default message when no promotion piece provided', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: undefined
            }));
            expect(_react1.screen.getByText('Glückwunsch! Die Umwandlung führt zum Sieg!')).toBeInTheDocument();
        });
        it('handles case-insensitive promotion piece names', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: "DAME"
            }));
            // Should still match despite uppercase
            expect(_react1.screen.getByText('Ausgezeichnet! Umwandlung in DAME führt zum Sieg!')).toBeInTheDocument();
        });
    });
    describe('Interactions', ()=>{
        it('calls onContinue when continue button is clicked', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps
            }));
            const continueButton = _react1.screen.getByRole('button', {
                name: 'Weiter'
            });
            _react1.fireEvent.click(continueButton);
            expect(defaultProps.onContinue).toHaveBeenCalledTimes(1);
        });
        it('calls onClose when understood button is clicked', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps
            }));
            const closeButton = _react1.screen.getByRole('button', {
                name: 'Verstanden'
            });
            _react1.fireEvent.click(closeButton);
            expect(defaultProps.onClose).toHaveBeenCalledTimes(1);
            expect(defaultProps.onContinue).not.toHaveBeenCalled();
        });
        it('calls onClose when clicking outside the dialog', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps
            }));
            // Click on the backdrop/overlay - it's the outermost div
            const backdrop = _react1.screen.getByText('Erfolg!').closest('.fixed');
            _react1.fireEvent.click(backdrop);
            expect(defaultProps.onClose).toHaveBeenCalledTimes(1);
        });
        it('does not close when clicking inside the dialog content', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps
            }));
            // Click on the inner dialog content
            const dialogTitle = _react1.screen.getByText('Erfolg!');
            _react1.fireEvent.click(dialogTitle);
            expect(defaultProps.onClose).not.toHaveBeenCalled();
        });
        it('prevents event propagation when clicking dialog content', ()=>{
            const mockOnClick = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                onClick: mockOnClick,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                    ...defaultProps
                })
            }));
            // Click on dialog content should not propagate to parent
            const dialogTitle = _react1.screen.getByText('Erfolg!');
            _react1.fireEvent.click(dialogTitle);
            expect(mockOnClick).not.toHaveBeenCalled();
        });
    });
    describe('Accessibility', ()=>{
        it('has proper heading structure', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps
            }));
            const heading = _react1.screen.getByRole('heading', {
                name: 'Erfolg!'
            });
            expect(heading).toBeInTheDocument();
        });
        it('has interactive buttons', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps
            }));
            const buttons = _react1.screen.getAllByRole('button');
            expect(buttons).toHaveLength(2);
            const verstanden = _react1.screen.getByRole('button', {
                name: 'Verstanden'
            });
            const weiter = _react1.screen.getByRole('button', {
                name: 'Weiter'
            });
            expect(verstanden).toBeInTheDocument();
            expect(weiter).toBeInTheDocument();
        });
        it('renders semantic structure', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps
            }));
            // Check for proper text structure
            expect(_react1.screen.getByText('Erfolg!')).toBeInTheDocument();
            expect(_react1.screen.getByText(/Umwandlung/)).toBeInTheDocument();
        });
    });
    describe('Visual Elements', ()=>{
        it('displays success icon', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps
            }));
            // Check for SVG success icon by looking for the checkmark path
            const svgElements = document.querySelectorAll('svg');
            expect(svgElements.length).toBe(1);
            // Check the checkmark circle path is present
            const pathElement = document.querySelector('path[d*="M9 12l2 2 4-4m6 2a9 9 0"]');
            expect(pathElement).toBeInTheDocument();
        });
        it('has proper styling classes for success theme', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps
            }));
            const backdrop = _react1.screen.getByText('Erfolg!').closest('.fixed');
            expect(backdrop).toHaveClass('fixed', 'inset-0', 'bg-black', 'bg-opacity-80');
            // Check for green gradient (success theme)
            const gradientContainer = document.querySelector('.bg-gradient-to-br.from-green-500.to-emerald-600');
            expect(gradientContainer).toBeInTheDocument();
        });
    });
    describe('Edge Cases', ()=>{
        it('handles empty promotion piece', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                promotionPiece: ""
            }));
            // Should show default message when promotion piece is empty string
            expect(_react1.screen.getByText('Glückwunsch! Die Umwandlung führt zum Sieg!')).toBeInTheDocument();
        });
        it('handles empty move description', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...defaultProps,
                moveDescription: ""
            }));
            // Should not display the move description section
            expect(_react1.screen.queryByText('Gewinnzug:')).not.toBeInTheDocument();
        });
        it('handles all props being undefined', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                isOpen: true,
                onClose: jest.fn(),
                onContinue: jest.fn(),
                promotionPiece: undefined,
                moveDescription: undefined
            }));
            expect(_react1.screen.getByText('Erfolg!')).toBeInTheDocument();
            expect(_react1.screen.getByText('Glückwunsch! Die Umwandlung führt zum Sieg!')).toBeInTheDocument();
        });
        it('maintains button functionality with minimal props', ()=>{
            const minimalProps = {
                isOpen: true,
                onClose: jest.fn(),
                onContinue: jest.fn()
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MoveSuccessDialog.MoveSuccessDialog, {
                ...minimalProps
            }));
            // Both buttons should still work
            const continueButton = _react1.screen.getByRole('button', {
                name: 'Weiter'
            });
            const closeButton = _react1.screen.getByRole('button', {
                name: 'Verstanden'
            });
            _react1.fireEvent.click(continueButton);
            expect(minimalProps.onContinue).toHaveBeenCalledTimes(1);
            _react1.fireEvent.click(closeButton);
            expect(minimalProps.onClose).toHaveBeenCalledTimes(1);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,