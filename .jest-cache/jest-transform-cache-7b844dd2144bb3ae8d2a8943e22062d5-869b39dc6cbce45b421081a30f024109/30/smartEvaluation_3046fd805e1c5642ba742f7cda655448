7823b94248ca4bd371430cf6acf431c5
/**
 * Smart evaluation that prioritizes tablebase comparison
 * SIMPLIFIED: Removed overengineered tablebase helpers
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getSmartMoveEvaluation", {
    enumerable: true,
    get: function() {
        return getSmartMoveEvaluation;
    }
});
const _displayHelpers = require("./displayHelpers");
/**
 *
 */ const getSmartMoveEvaluation = (evaluation, isWhite, _moveIndex)=>{
    const { evaluation: rawEvaluation, mateInMoves, tablebase } = evaluation;
    // If tablebase WDL data is available, use it for accurate move quality assessment
    if (tablebase && typeof tablebase.wdlBefore === "number" && typeof tablebase.wdlAfter === "number") {
        // WDL values are absolute (from White's perspective). Adjust for the current player
        const wdlBefore = isWhite ? tablebase.wdlBefore : -tablebase.wdlBefore;
        const wdlAfter = isWhite ? tablebase.wdlAfter : -tablebase.wdlAfter;
        // Map WDL state transitions to a quality score for display
        // This score represents the quality of the move, not the position state
        let qualityScore = 0;
        if (wdlAfter > wdlBefore) qualityScore = 300; // Improved position (e.g., Draw -> Win) -> Brilliant
        else if (wdlAfter < wdlBefore) qualityScore = -300; // Worsened position (e.g., Win -> Draw) -> Blunder
        // If wdlAfter === wdlBefore, qualityScore remains 0 (neutral move)
        return (0, _displayHelpers.getMoveQualityDisplay)(qualityScore, mateInMoves, isWhite);
    }
    // Fallback to numeric evaluation if tablebase WDL data is not available
    return (0, _displayHelpers.getMoveQualityDisplay)(rawEvaluation, mateInMoves, isWhite);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL3V0aWxzL2NoZXNzL2V2YWx1YXRpb24vc21hcnRFdmFsdWF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU21hcnQgZXZhbHVhdGlvbiB0aGF0IHByaW9yaXRpemVzIHRhYmxlYmFzZSBjb21wYXJpc29uXG4gKiBTSU1QTElGSUVEOiBSZW1vdmVkIG92ZXJlbmdpbmVlcmVkIHRhYmxlYmFzZSBoZWxwZXJzXG4gKi9cblxuaW1wb3J0IHsgZ2V0TW92ZVF1YWxpdHlEaXNwbGF5IH0gZnJvbSBcIi4vZGlzcGxheUhlbHBlcnNcIjtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1vdmVFdmFsdWF0aW9uIHtcbiAgZXZhbHVhdGlvbjogbnVtYmVyO1xuICBtYXRlSW5Nb3Zlcz86IG51bWJlcjtcbiAgdGFibGViYXNlPzoge1xuICAgIGlzVGFibGViYXNlUG9zaXRpb246IGJvb2xlYW47XG4gICAgd2RsQmVmb3JlPzogbnVtYmVyO1xuICAgIHdkbEFmdGVyPzogbnVtYmVyO1xuICAgIGNhdGVnb3J5Pzogc3RyaW5nO1xuICB9O1xufVxuXG4vKipcbiAqIFNtYXJ0IGV2YWx1YXRpb24gZnVuY3Rpb24gdGhhdCB1c2VzIHRhYmxlYmFzZSBXREwgY29tcGFyaXNvbiBmb3IgYWNjdXJhdGUgbW92ZSBxdWFsaXR5IGFzc2Vzc21lbnRcbiAqIEBwYXJhbSBldmFsdWF0aW9uIC0gVGhlIG1vdmUgZXZhbHVhdGlvbiBkYXRhIGluY2x1ZGluZyB0YWJsZWJhc2UgV0RMIHN0YXRlc1xuICogQHBhcmFtIGlzV2hpdGUgLSBXaGV0aGVyIHRoZSBwbGF5ZXIgaXMgd2hpdGVcbiAqIEBwYXJhbSBtb3ZlSW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIG1vdmUgKGZvciBmdXR1cmUgdXNlKVxuICogQHBhcmFtIF9tb3ZlSW5kZXhcbiAqIEByZXR1cm5zIFRoZSBldmFsdWF0aW9uIGRpc3BsYXkgZGF0YSBiYXNlZCBvbiBXREwgdHJhbnNpdGlvbiBxdWFsaXR5XG4gKi9cbmV4cG9ydCAvKipcbiAqXG4gKi9cbmNvbnN0IGdldFNtYXJ0TW92ZUV2YWx1YXRpb24gPSAoXG4gIGV2YWx1YXRpb246IE1vdmVFdmFsdWF0aW9uLFxuICBpc1doaXRlOiBib29sZWFuLFxuICBfbW92ZUluZGV4OiBudW1iZXIsXG4pID0+IHtcbiAgY29uc3QgeyBldmFsdWF0aW9uOiByYXdFdmFsdWF0aW9uLCBtYXRlSW5Nb3ZlcywgdGFibGViYXNlIH0gPSBldmFsdWF0aW9uO1xuXG4gIC8vIElmIHRhYmxlYmFzZSBXREwgZGF0YSBpcyBhdmFpbGFibGUsIHVzZSBpdCBmb3IgYWNjdXJhdGUgbW92ZSBxdWFsaXR5IGFzc2Vzc21lbnRcbiAgaWYgKFxuICAgIHRhYmxlYmFzZSAmJlxuICAgIHR5cGVvZiB0YWJsZWJhc2Uud2RsQmVmb3JlID09PSBcIm51bWJlclwiICYmXG4gICAgdHlwZW9mIHRhYmxlYmFzZS53ZGxBZnRlciA9PT0gXCJudW1iZXJcIlxuICApIHtcbiAgICAvLyBXREwgdmFsdWVzIGFyZSBhYnNvbHV0ZSAoZnJvbSBXaGl0ZSdzIHBlcnNwZWN0aXZlKS4gQWRqdXN0IGZvciB0aGUgY3VycmVudCBwbGF5ZXJcbiAgICBjb25zdCB3ZGxCZWZvcmUgPSBpc1doaXRlID8gdGFibGViYXNlLndkbEJlZm9yZSA6IC10YWJsZWJhc2Uud2RsQmVmb3JlO1xuICAgIGNvbnN0IHdkbEFmdGVyID0gaXNXaGl0ZSA/IHRhYmxlYmFzZS53ZGxBZnRlciA6IC10YWJsZWJhc2Uud2RsQWZ0ZXI7XG5cbiAgICAvLyBNYXAgV0RMIHN0YXRlIHRyYW5zaXRpb25zIHRvIGEgcXVhbGl0eSBzY29yZSBmb3IgZGlzcGxheVxuICAgIC8vIFRoaXMgc2NvcmUgcmVwcmVzZW50cyB0aGUgcXVhbGl0eSBvZiB0aGUgbW92ZSwgbm90IHRoZSBwb3NpdGlvbiBzdGF0ZVxuICAgIGxldCBxdWFsaXR5U2NvcmUgPSAwO1xuICAgIGlmICh3ZGxBZnRlciA+IHdkbEJlZm9yZSlcbiAgICAgIHF1YWxpdHlTY29yZSA9IDMwMDsgLy8gSW1wcm92ZWQgcG9zaXRpb24gKGUuZy4sIERyYXcgLT4gV2luKSAtPiBCcmlsbGlhbnRcbiAgICBlbHNlIGlmICh3ZGxBZnRlciA8IHdkbEJlZm9yZSkgcXVhbGl0eVNjb3JlID0gLTMwMDsgLy8gV29yc2VuZWQgcG9zaXRpb24gKGUuZy4sIFdpbiAtPiBEcmF3KSAtPiBCbHVuZGVyXG4gICAgLy8gSWYgd2RsQWZ0ZXIgPT09IHdkbEJlZm9yZSwgcXVhbGl0eVNjb3JlIHJlbWFpbnMgMCAobmV1dHJhbCBtb3ZlKVxuXG4gICAgcmV0dXJuIGdldE1vdmVRdWFsaXR5RGlzcGxheShxdWFsaXR5U2NvcmUsIG1hdGVJbk1vdmVzLCBpc1doaXRlKTtcbiAgfVxuXG4gIC8vIEZhbGxiYWNrIHRvIG51bWVyaWMgZXZhbHVhdGlvbiBpZiB0YWJsZWJhc2UgV0RMIGRhdGEgaXMgbm90IGF2YWlsYWJsZVxuICByZXR1cm4gZ2V0TW92ZVF1YWxpdHlEaXNwbGF5KHJhd0V2YWx1YXRpb24sIG1hdGVJbk1vdmVzLCBpc1doaXRlKTtcbn07XG4iXSwibmFtZXMiOlsiZ2V0U21hcnRNb3ZlRXZhbHVhdGlvbiIsImV2YWx1YXRpb24iLCJpc1doaXRlIiwiX21vdmVJbmRleCIsInJhd0V2YWx1YXRpb24iLCJtYXRlSW5Nb3ZlcyIsInRhYmxlYmFzZSIsIndkbEJlZm9yZSIsIndkbEFmdGVyIiwicXVhbGl0eVNjb3JlIiwiZ2V0TW92ZVF1YWxpdHlEaXNwbGF5Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0M7Ozs7K0JBNkJLQTs7O2VBQUFBOzs7Z0NBM0JnQztBQXdCL0I7O0NBRU4sR0FDRCxNQUFNQSx5QkFBeUIsQ0FDN0JDLFlBQ0FDLFNBQ0FDO0lBRUEsTUFBTSxFQUFFRixZQUFZRyxhQUFhLEVBQUVDLFdBQVcsRUFBRUMsU0FBUyxFQUFFLEdBQUdMO0lBRTlELGtGQUFrRjtJQUNsRixJQUNFSyxhQUNBLE9BQU9BLFVBQVVDLFNBQVMsS0FBSyxZQUMvQixPQUFPRCxVQUFVRSxRQUFRLEtBQUssVUFDOUI7UUFDQSxvRkFBb0Y7UUFDcEYsTUFBTUQsWUFBWUwsVUFBVUksVUFBVUMsU0FBUyxHQUFHLENBQUNELFVBQVVDLFNBQVM7UUFDdEUsTUFBTUMsV0FBV04sVUFBVUksVUFBVUUsUUFBUSxHQUFHLENBQUNGLFVBQVVFLFFBQVE7UUFFbkUsMkRBQTJEO1FBQzNELHdFQUF3RTtRQUN4RSxJQUFJQyxlQUFlO1FBQ25CLElBQUlELFdBQVdELFdBQ2JFLGVBQWUsS0FBSyxxREFBcUQ7YUFDdEUsSUFBSUQsV0FBV0QsV0FBV0UsZUFBZSxDQUFDLEtBQUssbURBQW1EO1FBQ3ZHLG1FQUFtRTtRQUVuRSxPQUFPQyxJQUFBQSxxQ0FBcUIsRUFBQ0QsY0FBY0osYUFBYUg7SUFDMUQ7SUFFQSx3RUFBd0U7SUFDeEUsT0FBT1EsSUFBQUEscUNBQXFCLEVBQUNOLGVBQWVDLGFBQWFIO0FBQzNEIn0=