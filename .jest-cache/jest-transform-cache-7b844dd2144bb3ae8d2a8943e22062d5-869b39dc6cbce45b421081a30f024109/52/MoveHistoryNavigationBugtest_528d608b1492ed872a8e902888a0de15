9c564783b48ea68fce2f32915ef54cec
/**
 * Test suite to reproduce the Move History navigation bug
 * Bug: When clicking on a move in history, subsequent moves appear to be deleted
 * Expected: All moves should remain visible, only the position should change
 */ "use strict";
// Mock the store hooks
jest.mock("@shared/store/hooks", ()=>({
        useGameStore: jest.fn(),
        useTablebaseStore: jest.fn(),
        useTrainingStore: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _MovePanelZustand = require("../../../shared/components/training/MovePanelZustand");
const _validatedMoveFactory = require("../../helpers/validatedMoveFactory");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseGameStore = jest.requireMock("@shared/store/hooks").useGameStore;
const mockUseTablebaseStore = jest.requireMock("@shared/store/hooks").useTablebaseStore;
const mockUseTrainingStore = jest.requireMock("@shared/store/hooks").useTrainingStore;
describe("Move History Navigation Bug", ()=>{
    /**
   *
   */ const createMockMoves = ()=>[
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "e2",
                to: "e4",
                san: "e4",
                color: "w",
                piece: "p"
            }),
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "e7",
                to: "e5",
                san: "e5",
                color: "b",
                piece: "p"
            }),
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "g1",
                to: "f3",
                san: "Nf3",
                color: "w",
                piece: "n"
            }),
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "b8",
                to: "c6",
                san: "Nc6",
                color: "b",
                piece: "n"
            }),
            (0, _validatedMoveFactory.createTestValidatedMove)({
                from: "f1",
                to: "c4",
                san: "Bc4",
                color: "w",
                piece: "b"
            })
        ];
    beforeEach(()=>{
        // Setup default mock returns
        mockUseTablebaseStore.mockReturnValue([
            {
                evaluations: []
            },
            {}
        ]);
        mockUseTrainingStore.mockReturnValue([
            {
                currentPosition: null
            },
            {}
        ]);
    });
    afterEach(()=>{
        jest.clearAllMocks();
    });
    it("FIX VERIFICATION: Should show ALL moves even when navigating to an earlier move", ()=>{
        const mockMoves = createMockMoves();
        const onMoveClick = jest.fn();
        // Initial state: All 5 moves played, viewing the last move (index 4)
        mockUseGameStore.mockReturnValue([
            {
                moveHistory: mockMoves,
                currentMoveIndex: 4,
                currentFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
            },
            {}
        ]);
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MovePanelZustand.MovePanelZustand, {
            onMoveClick: onMoveClick,
            currentMoveIndex: 4
        }));
        // Verify all 5 moves are displayed initially
        expect(_react1.screen.getByText("e4")).toBeInTheDocument();
        expect(_react1.screen.getByText("e5")).toBeInTheDocument();
        expect(_react1.screen.getByText("Nf3")).toBeInTheDocument();
        expect(_react1.screen.getByText("Nc6")).toBeInTheDocument();
        expect(_react1.screen.getByText("Bc4")).toBeInTheDocument();
        // User clicks on move 2 (Nf3) to navigate there
        const nf3Button = _react1.screen.getByText("Nf3");
        _react1.fireEvent.click(nf3Button);
        expect(onMoveClick).toHaveBeenCalledWith(2);
        // Simulate the state update after navigation
        // The bug is that currentMoveIndex changes to 2
        mockUseGameStore.mockReturnValue([
            {
                moveHistory: mockMoves,
                currentMoveIndex: 2,
                currentFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
            },
            {}
        ]);
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MovePanelZustand.MovePanelZustand, {
            onMoveClick: onMoveClick,
            currentMoveIndex: 2
        }));
        // FIX VERIFICATION: After the fix, ALL moves should remain visible
        // when navigating to an earlier move
        console.log("\n=== FIX VERIFICATION ===");
        console.log("After clicking on move 2 (Nf3):");
        console.log("Expected: All 5 moves visible (e4, e5, Nf3, Nc6, Bc4)");
        console.log("With fix: All moves should now be visible!");
        // These assertions verify the fix works:
        expect(_react1.screen.getByText("e4")).toBeInTheDocument();
        expect(_react1.screen.getByText("e5")).toBeInTheDocument();
        expect(_react1.screen.getByText("Nf3")).toBeInTheDocument();
        // FIXED: These moves should now be visible!
        expect(_react1.screen.getByText("Nc6")).toBeInTheDocument(); // Now visible!
        expect(_react1.screen.getByText("Bc4")).toBeInTheDocument(); // Now visible!
    });
    it("EXPECTED BEHAVIOR: Should display all moves with proper highlighting", ()=>{
        const mockMoves = createMockMoves();
        const onMoveClick = jest.fn();
        // This test shows what SHOULD happen
        mockUseGameStore.mockReturnValue([
            {
                moveHistory: mockMoves,
                currentMoveIndex: 2,
                currentFen: "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
            },
            {}
        ]);
        // If the bug was fixed, this is what we'd see:
        console.log("\n=== EXPECTED BEHAVIOR ===");
        console.log("When viewing move 2:");
        console.log("- All 5 moves should be visible");
        console.log("- Move 3 (Nf3) should be highlighted as current");
        console.log("- Moves 4-5 (Nc6, Bc4) should appear grayed out or different");
        console.log("- User can click any move to jump there");
    });
    it("Verifies the actual data flow", ()=>{
        const mockMoves = createMockMoves();
        // Log the actual data to understand the bug
        console.log("\n=== DATA FLOW ANALYSIS ===");
        console.log("1. Initial state:");
        console.log(`   - moveHistory.length: ${mockMoves.length}`);
        console.log(`   - currentMoveIndex: 4`);
        console.log(`   - All moves: ${mockMoves.map((m)=>m.san).join(", ")}`);
        console.log("\n2. After clicking move 2:");
        console.log(`   - moveHistory.length: ${mockMoves.length} (unchanged)`);
        console.log(`   - currentMoveIndex: 2 (changed)`);
        console.log(`   - All moves still in store: ${mockMoves.map((m)=>m.san).join(", ")}`);
        console.log("\n3. Bug in MovePanelZustand:");
        console.log("   - Line 160-162 slices moveHistory:");
        console.log("     gameState.moveHistory.slice(0, currentMoveIndex + 1)");
        console.log(`   - This creates: slice(0, 3) = first 3 moves only`);
        console.log("   - Result: Moves 4-5 disappear from UI!");
    });
});

//# sourceMappingURL=data:application/json;base64,