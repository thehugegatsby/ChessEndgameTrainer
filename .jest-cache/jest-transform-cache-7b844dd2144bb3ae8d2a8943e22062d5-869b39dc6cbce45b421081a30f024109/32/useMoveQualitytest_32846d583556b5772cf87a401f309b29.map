{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/unit/hooks/useMoveQuality.test.ts"],"sourcesContent":["/**\n * @file Tests for useMoveQuality hook\n * @module tests/unit/hooks/useMoveQuality\n * \n * @description\n * Basic tests for the useMoveQuality hook interface and functionality.\n * This hook provides on-demand move quality assessment.\n */\n\nimport { renderHook, act } from '@testing-library/react';\nimport { useMoveQuality } from '@shared/hooks/useMoveQuality';\n\n// Mock the logger\njest.mock('@shared/services/logging/Logger', () => ({\n  getLogger: jest.fn(() => ({\n    setContext: jest.fn(() => ({\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n    })),\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  })),\n  Logger: jest.fn().mockImplementation(() => ({\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  })),\n}));\n\n// Mock tablebase service\njest.mock('@shared/services/TablebaseService', () => ({\n  tablebaseService: {\n    getEvaluation: jest.fn(),\n  },\n}));\n\n// Mock move quality utils\njest.mock('@shared/utils/moveQuality', () => ({\n  assessTablebaseMoveQuality: jest.fn(),\n}));\n\n// Mock chess.js\njest.mock('chess.js', () => ({\n  Chess: jest.fn().mockImplementation((fen) => ({\n    move: jest.fn().mockReturnValue({ san: 'Kh1' }),\n    fen: jest.fn(() => fen || '8/8/8/8/8/8/8/8 w - - 0 1'),\n    turn: jest.fn(() => 'w'),\n  })),\n}));\n\ndescribe('useMoveQuality', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Restore default mocks for each test\n    const { Chess } = require('chess.js');\n    Chess.mockImplementation((fen) => ({\n      move: jest.fn().mockReturnValue({ san: 'Kh1' }),\n      fen: jest.fn(() => fen || '8/8/8/8/8/8/8/8 w - - 0 1'),\n    }));\n  });\n\n  describe('Hook Initialization', () => {\n    it('returns correct interface with initial state', () => {\n      const { result } = renderHook(() => useMoveQuality());\n\n      expect(result.current).toHaveProperty('data');\n      expect(result.current).toHaveProperty('isLoading');\n      expect(result.current).toHaveProperty('error');\n      expect(result.current).toHaveProperty('assessMove');\n      expect(result.current).toHaveProperty('clearAnalysis');\n\n      // Initial state\n      expect(result.current.data).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeNull();\n      expect(typeof result.current.assessMove).toBe('function');\n      expect(typeof result.current.clearAnalysis).toBe('function');\n    });\n\n    it('works with basic functionality', async () => {\n      const { result } = renderHook(() => useMoveQuality());\n      \n      // Test that clearAnalysis works\n      act(() => {\n        result.current.clearAnalysis();\n      });\n      \n      expect(result.current.data).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeNull();\n    });\n  });\n\n  describe('Basic Functionality', () => {\n    it('provides assessMove function that can be called', async () => {\n      const { result } = renderHook(() => useMoveQuality());\n\n      // Test that function exists and can be called without crashing\n      expect(typeof result.current.assessMove).toBe('function');\n      \n      // Call it but don't make assertions about behavior since\n      // the implementation may vary\n      try {\n        await act(async () => {\n          await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');\n        });\n      } catch (error) {\n        // Error handling is implementation-dependent\n      }\n      \n      // Hook should still be in valid state\n      expect(result.current).toBeDefined();\n    });\n\n    it('clearAnalysis resets state', () => {\n      const { result } = renderHook(() => useMoveQuality());\n      \n      act(() => {\n        result.current.clearAnalysis();\n      });\n      \n      expect(result.current.data).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeNull();\n    });\n  });\n\n  describe('Hook Lifecycle', () => {\n    it('cleans up properly on unmount', () => {\n      const { unmount } = renderHook(() => useMoveQuality());\n\n      // Should not throw on unmount\n      expect(() => {\n        unmount();\n      }).not.toThrow();\n    });\n\n    it('maintains stable function references', () => {\n      const { result, rerender } = renderHook(() => useMoveQuality());\n\n      const initialAssessMove = result.current.assessMove;\n      const initialClearAnalysis = result.current.clearAnalysis;\n\n      rerender();\n\n      // Functions should be stable due to useCallback\n      expect(result.current.assessMove).toBe(initialAssessMove);\n      expect(result.current.clearAnalysis).toBe(initialClearAnalysis);\n    });\n  });\n\n  describe('Move Assessment Scenarios', () => {\n    beforeEach(() => {\n      // Reset all mocks to default state\n      jest.clearAllMocks();\n      \n      // Reset Chess mock to default successful behavior\n      const { Chess } = require('chess.js');\n      Chess.mockImplementation((fen) => ({\n        move: jest.fn().mockReturnValue({ san: 'Kh1' }),\n        fen: jest.fn(() => fen || '8/8/8/8/8/8/8/8 w - - 0 1'),\n      }));\n      \n      // Reset tablebase service with default successful behavior\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      const { assessTablebaseMoveQuality } = require('@shared/utils/moveQuality');\n      \n      tablebaseService.getEvaluation.mockResolvedValue({\n        isAvailable: true,\n        result: { wdl: 1, category: 'win' }\n      });\n      \n      assessTablebaseMoveQuality.mockReturnValue({\n        quality: 'excellent',\n        reason: 'Best move',\n        isTablebaseAnalysis: true\n      });\n    });\n\n    it('handles invalid moves', async () => {\n      // Mock Chess to simulate invalid move\n      const { Chess } = require('chess.js');\n      Chess.mockImplementation(() => ({\n        move: jest.fn().mockReturnValue(null), // Invalid move\n        fen: jest.fn(() => '8/8/8/8/8/8/8/8 w - - 0 1')\n      }));\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      let assessmentResult;\n      await act(async () => {\n        assessmentResult = await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'invalid', 'w');\n      });\n\n      expect(assessmentResult.quality).toBe('unknown');\n      expect(assessmentResult.reason).toBe('Invalid move');\n      expect(assessmentResult.isTablebaseAnalysis).toBe(false);\n      expect(result.current.data).toEqual(assessmentResult);\n    });\n\n    it('handles positions without tablebase data', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      tablebaseService.getEvaluation.mockResolvedValue({\n        isAvailable: false,\n        result: null\n      });\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      let assessmentResult;\n      await act(async () => {\n        assessmentResult = await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');\n      });\n\n      expect(assessmentResult.quality).toBe('unknown');\n      expect(assessmentResult.reason).toBe('No tablebase data available');\n      expect(assessmentResult.isTablebaseAnalysis).toBe(false);\n    });\n\n    it('completes successful assessment with logging', async () => {\n      const { result } = renderHook(() => useMoveQuality());\n\n      let assessmentResult;\n      await act(async () => {\n        assessmentResult = await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');\n      });\n\n      expect(assessmentResult.quality).toBe('excellent');\n      expect(assessmentResult.reason).toBe('Best move');\n      expect(assessmentResult.isTablebaseAnalysis).toBe(true);\n      expect(result.current.data).toEqual(assessmentResult);\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeNull();\n    });\n\n    it('handles aborted requests gracefully', async () => {\n      const { result } = renderHook(() => useMoveQuality());\n\n      // Start first assessment\n      const promise1 = act(async () => {\n        result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');\n      });\n\n      // Start second assessment that should abort the first\n      const promise2 = act(async () => {\n        result.current.assessMove('4k3/8/4K3/4P3/8/8/8/8 w - - 0 1', 'Kh5', 'w');\n      });\n\n      // Wait for both to complete\n      await Promise.all([promise1, promise2]);\n\n      // Should have the result from the second assessment\n      expect(result.current.isLoading).toBe(false);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('handles tablebase service errors', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      tablebaseService.getEvaluation.mockRejectedValue(new Error('API Error'));\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      // Verify initial state\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeNull();\n\n      let thrownError;\n      await act(async () => {\n        try {\n          await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');\n        } catch (error) {\n          thrownError = error;\n        }\n      });\n\n      expect(thrownError).toBeInstanceOf(Error);\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toEqual(thrownError);\n    });\n\n    it('handles non-Error exceptions', async () => {\n      const { tablebaseService } = require('@shared/services/TablebaseService');\n      tablebaseService.getEvaluation.mockRejectedValue('String error');\n\n      const { result } = renderHook(() => useMoveQuality());\n\n      let thrownError;\n      await act(async () => {\n        try {\n          await result.current.assessMove('8/8/8/8/8/8/8/8 w - - 0 1', 'Kh1', 'w');\n        } catch (error) {\n          thrownError = error;\n        }\n      });\n\n      expect(thrownError).toBeInstanceOf(Error);\n      expect(thrownError.message).toBe('Unknown error occurred');\n    });\n  });\n\n  describe('Integration', () => {\n    it('handles basic integration scenarios', async () => {\n      const { result } = renderHook(() => useMoveQuality());\n\n      // Should start in clean state\n      expect(result.current.data).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeNull();\n\n      // Clear should maintain clean state\n      act(() => {\n        result.current.clearAnalysis();\n      });\n\n      expect(result.current.data).toBeNull();\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeNull();\n    });\n  });\n});"],"names":["jest","mock","getLogger","fn","setContext","debug","info","warn","error","Logger","mockImplementation","tablebaseService","getEvaluation","assessTablebaseMoveQuality","Chess","fen","move","mockReturnValue","san","turn","describe","beforeEach","clearAllMocks","require","it","result","renderHook","useMoveQuality","expect","current","toHaveProperty","data","toBeNull","isLoading","toBe","assessMove","clearAnalysis","act","toBeDefined","unmount","not","toThrow","rerender","initialAssessMove","initialClearAnalysis","mockResolvedValue","isAvailable","wdl","category","quality","reason","isTablebaseAnalysis","assessmentResult","toEqual","promise1","promise2","Promise","all","mockRejectedValue","Error","thrownError","toBeInstanceOf","message"],"mappings":"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"}