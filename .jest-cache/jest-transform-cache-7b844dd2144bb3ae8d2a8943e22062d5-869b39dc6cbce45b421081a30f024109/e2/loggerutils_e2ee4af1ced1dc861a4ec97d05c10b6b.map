{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/shared/logger-utils.ts"],"sourcesContent":["/**\n * @fileoverview Test Logger Utilities\n * @description Provides reusable logger implementations for testing\n *\n * Benefits:\n * - Single Source of Truth for test loggers\n * - Type-safe implementations that stay in sync with ILogger interface\n * - Prevents duplication and inconsistencies across test files\n */\n\nimport {\n  ILogger,\n  LoggerConfig,\n  LogLevel,\n} from \"../../shared/services/logging/types\";\n\n/**\n * Creates a no-op logger configuration with all features disabled\n * @returns A minimal LoggerConfig suitable for tests that don't need logging\n */\nexport function createNoopLoggerConfig(): LoggerConfig {\n  return {\n    minLevel: LogLevel.FATAL, // Highest level to ensure nothing is logged\n    enableConsole: false,\n    enableRemote: false,\n    enableFileLogging: false,\n    maxLogSize: 0,\n  };\n}\n\n/**\n * A complete no-op logger implementation for use in tests\n * All methods are no-ops and configuration is minimal\n */\nexport const noopLogger: ILogger = {\n  // Logging methods - all no-op\n  debug: () => {},\n  info: () => {},\n  warn: () => {},\n  error: () => {},\n  fatal: () => {},\n\n  // Context management\n  setContext: () => noopLogger,\n  clearContext: () => {},\n\n  // Configuration\n  getConfig: createNoopLoggerConfig,\n  updateConfig: () => {},\n\n  // Log management\n  getLogs: () => [],\n  clearLogs: () => {},\n\n  // Performance logging (if part of interface)\n  time: () => {},\n  timeEnd: () => {},\n\n  // Structured logging (if part of interface)\n  withFields: () => noopLogger,\n} satisfies ILogger;\n\n/**\n * Creates a silent logger that only logs FATAL messages\n * Useful for tests where you want to suppress all but critical errors\n */\nexport function createSilentLogger(): ILogger {\n  return {\n    ...noopLogger,\n    getConfig: () => ({\n      minLevel: LogLevel.FATAL,\n      enableConsole: false,\n      enableRemote: false,\n      enableFileLogging: false,\n      maxLogSize: 0,\n    }),\n  } satisfies ILogger;\n}\n\n/**\n * Creates a test logger that captures logs in memory for assertions\n * Useful for tests that need to verify logging behavior\n */\nexport function createTestLogger(): ILogger {\n  const logs: Array<{ level: LogLevel; message: string; data?: any }> = [];\n\n  const logMethod = (level: LogLevel) => (message: string, data?: any) => {\n    logs.push({ level, message, data });\n  };\n\n  return {\n    debug: logMethod(LogLevel.DEBUG),\n    info: logMethod(LogLevel.INFO),\n    warn: logMethod(LogLevel.WARN),\n    error: logMethod(LogLevel.ERROR),\n    fatal: logMethod(LogLevel.FATAL),\n\n    setContext: function () {\n      return this;\n    },\n    clearContext: () => {},\n\n    getConfig: () => ({\n      minLevel: LogLevel.DEBUG, // Capture all levels\n      enableConsole: false,\n      enableRemote: false,\n      enableFileLogging: false,\n      maxLogSize: 1000,\n    }),\n    updateConfig: () => {},\n\n    getLogs: () =>\n      logs.map((log) => ({\n        level: log.level,\n        message: log.message,\n        timestamp: new Date(),\n        data: log.data,\n      })),\n    clearLogs: () => {\n      logs.length = 0;\n    },\n\n    time: () => {},\n    timeEnd: () => {},\n\n    withFields: function () {\n      return this;\n    },\n  } satisfies ILogger;\n}\n\n/**\n * Creates a debug logger for development that outputs to console\n * WARNING: Only use during test development, not in CI\n */\nexport function createDebugLogger(): ILogger {\n  return {\n    ...noopLogger,\n    debug: console.debug,\n    info: console.info,\n    warn: console.warn,\n    error: console.error,\n    fatal: console.error,\n\n    getConfig: () => ({\n      minLevel: LogLevel.DEBUG,\n      enableConsole: true,\n      enableRemote: false,\n      enableFileLogging: false,\n      maxLogSize: 0,\n    }),\n  } satisfies ILogger;\n}\n\n/**\n * Performance-optimized factory function for Jest mock definitions\n * Returns a reusable mock logger definition that's compatible with clearMocks: true\n *\n * @description This factory creates a standardized logger mock that:\n * - Works correctly with Jest's clearMocks: true configuration\n * - Provides consistent mock behavior across all test files\n * - Optimizes performance by reusing mock function definitions\n * - Maintains type safety with the ILogger interface\n *\n * @returns A Jest-compatible mock object for the logging service\n *\n * @example\n * ```typescript\n * // In your test file:\n * jest.mock('../../../shared/services/logging', getMockLoggerDefinition);\n * ```\n */\nexport function getMockLoggerDefinition() {\n  // Pre-create mock functions for reuse across test instances\n  const mockLogger = {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn(),\n    fatal: jest.fn(),\n    setContext: jest.fn().mockReturnThis(),\n    clearContext: jest.fn(),\n    getConfig: jest.fn(() => createNoopLoggerConfig()),\n    updateConfig: jest.fn(),\n    getLogs: jest.fn(() => []),\n    clearLogs: jest.fn(),\n    time: jest.fn(),\n    timeEnd: jest.fn(),\n    withFields: jest.fn().mockReturnThis(),\n  };\n\n  return () => ({\n    getLogger: jest.fn(() => mockLogger),\n    createLogger: jest.fn(() => mockLogger),\n    resetLogger: jest.fn(),\n  });\n}\n\n/**\n * Simplified mock logger definition for basic use cases\n * Use when you don't need advanced logger features or performance optimization\n *\n * @returns A minimal Jest mock for the logging service\n */\nexport function getBasicMockLoggerDefinition() {\n  return () => ({\n    getLogger: jest.fn(() => ({\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n      debug: jest.fn(),\n      fatal: jest.fn(),\n      setContext: jest.fn().mockReturnThis(),\n      clearContext: jest.fn(),\n    })),\n  });\n}\n"],"names":["createDebugLogger","createNoopLoggerConfig","createSilentLogger","createTestLogger","getBasicMockLoggerDefinition","getMockLoggerDefinition","noopLogger","minLevel","LogLevel","FATAL","enableConsole","enableRemote","enableFileLogging","maxLogSize","debug","info","warn","error","fatal","setContext","clearContext","getConfig","updateConfig","getLogs","clearLogs","time","timeEnd","withFields","logs","logMethod","level","message","data","push","DEBUG","INFO","WARN","ERROR","map","log","timestamp","Date","length","console","mockLogger","jest","fn","mockReturnThis","getLogger","createLogger","resetLogger"],"mappings":"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"}