49a8823d8b10b697657819be084e6d63
/**
 * @fileoverview Test Logger Utilities
 * @description Provides reusable logger implementations for testing
 *
 * Benefits:
 * - Single Source of Truth for test loggers
 * - Type-safe implementations that stay in sync with ILogger interface
 * - Prevents duplication and inconsistencies across test files
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createDebugLogger () {
        return createDebugLogger;
    },
    get createNoopLoggerConfig () {
        return createNoopLoggerConfig;
    },
    get createSilentLogger () {
        return createSilentLogger;
    },
    get createTestLogger () {
        return createTestLogger;
    },
    get getBasicMockLoggerDefinition () {
        return getBasicMockLoggerDefinition;
    },
    get getMockLoggerDefinition () {
        return getMockLoggerDefinition;
    },
    get noopLogger () {
        return noopLogger;
    }
});
const _types = require("../../shared/services/logging/types");
function createNoopLoggerConfig() {
    return {
        minLevel: _types.LogLevel.FATAL,
        enableConsole: false,
        enableRemote: false,
        enableFileLogging: false,
        maxLogSize: 0
    };
}
const noopLogger = {
    // Logging methods - all no-op
    debug: ()=>{},
    info: ()=>{},
    warn: ()=>{},
    error: ()=>{},
    fatal: ()=>{},
    // Context management
    setContext: ()=>noopLogger,
    clearContext: ()=>{},
    // Configuration
    getConfig: createNoopLoggerConfig,
    updateConfig: ()=>{},
    // Log management
    getLogs: ()=>[],
    clearLogs: ()=>{},
    // Performance logging (if part of interface)
    time: ()=>{},
    timeEnd: ()=>{},
    // Structured logging (if part of interface)
    withFields: ()=>noopLogger
};
function createSilentLogger() {
    return {
        ...noopLogger,
        getConfig: ()=>({
                minLevel: _types.LogLevel.FATAL,
                enableConsole: false,
                enableRemote: false,
                enableFileLogging: false,
                maxLogSize: 0
            })
    };
}
function createTestLogger() {
    const logs = [];
    const logMethod = (level)=>(message, data)=>{
            logs.push({
                level,
                message,
                data
            });
        };
    return {
        debug: logMethod(_types.LogLevel.DEBUG),
        info: logMethod(_types.LogLevel.INFO),
        warn: logMethod(_types.LogLevel.WARN),
        error: logMethod(_types.LogLevel.ERROR),
        fatal: logMethod(_types.LogLevel.FATAL),
        setContext: function() {
            return this;
        },
        clearContext: ()=>{},
        getConfig: ()=>({
                minLevel: _types.LogLevel.DEBUG,
                enableConsole: false,
                enableRemote: false,
                enableFileLogging: false,
                maxLogSize: 1000
            }),
        updateConfig: ()=>{},
        getLogs: ()=>logs.map((log)=>({
                    level: log.level,
                    message: log.message,
                    timestamp: new Date(),
                    data: log.data
                })),
        clearLogs: ()=>{
            logs.length = 0;
        },
        time: ()=>{},
        timeEnd: ()=>{},
        withFields: function() {
            return this;
        }
    };
}
function createDebugLogger() {
    return {
        ...noopLogger,
        debug: console.debug,
        info: console.info,
        warn: console.warn,
        error: console.error,
        fatal: console.error,
        getConfig: ()=>({
                minLevel: _types.LogLevel.DEBUG,
                enableConsole: true,
                enableRemote: false,
                enableFileLogging: false,
                maxLogSize: 0
            })
    };
}
function getMockLoggerDefinition() {
    // Pre-create mock functions for reuse across test instances
    const mockLogger = {
        info: jest.fn(),
        warn: jest.fn(),
        error: jest.fn(),
        debug: jest.fn(),
        fatal: jest.fn(),
        setContext: jest.fn().mockReturnThis(),
        clearContext: jest.fn(),
        getConfig: jest.fn(()=>createNoopLoggerConfig()),
        updateConfig: jest.fn(),
        getLogs: jest.fn(()=>[]),
        clearLogs: jest.fn(),
        time: jest.fn(),
        timeEnd: jest.fn(),
        withFields: jest.fn().mockReturnThis()
    };
    return ()=>({
            getLogger: jest.fn(()=>mockLogger),
            createLogger: jest.fn(()=>mockLogger),
            resetLogger: jest.fn()
        });
}
function getBasicMockLoggerDefinition() {
    return ()=>({
            getLogger: jest.fn(()=>({
                    info: jest.fn(),
                    warn: jest.fn(),
                    error: jest.fn(),
                    debug: jest.fn(),
                    fatal: jest.fn(),
                    setContext: jest.fn().mockReturnThis(),
                    clearContext: jest.fn()
                }))
        });
}

//# sourceMappingURL=data:application/json;base64,