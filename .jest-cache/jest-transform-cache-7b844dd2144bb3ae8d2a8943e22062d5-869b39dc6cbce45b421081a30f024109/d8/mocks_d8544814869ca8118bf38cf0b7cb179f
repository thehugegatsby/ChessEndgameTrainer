31f449ef91fe913a9dfc2bf32b2cad87
/**
 * @file Mock Browser APIs for testing environments
 * @module services/container/mocks
 * 
 * @description
 * Provides mock implementations of browser APIs for testing environments.
 * Designed for Jest 30 compatibility with fallback support for non-Jest
 * environments. Creates lightweight, focused mocks that simulate browser
 * behavior without the complexity of full browser implementations.
 * 
 * @remarks
 * Key features:
 * - Jest-compatible mock functions with fallback implementations
 * - Storage API mocks (localStorage, sessionStorage) with persistent state
 * - Navigator API mocks with clipboard and sharing functionality
 * - Window object mocks with media queries and screen properties
 * - Document API mocks for DOM manipulation testing
 * - Performance API mocks with realistic timing simulation
 * - Clean, predictable mock behavior for consistent testing
 * 
 * The mocks are designed to be lightweight yet functional, providing
 * the essential behavior needed for unit and integration testing without
 * the overhead of full browser simulation frameworks.
 */ /**
 * Create a mock Storage implementation for localStorage/sessionStorage
 * 
 * @description
 * Creates a mock Storage object that implements the Web Storage API interface.
 * Maintains an in-memory store that persists for the duration of the test,
 * providing realistic storage behavior without actual browser persistence.
 * 
 * @returns {Storage} Mock storage object with full Storage API implementation
 * 
 * @example
 * ```typescript
 * const mockStorage = createMockStorage();
 * mockStorage.setItem('key', 'value');
 * expect(mockStorage.getItem('key')).toBe('value');
 * expect(mockStorage.length).toBe(1);
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createMockDocument () {
        return createMockDocument;
    },
    get createMockNavigator () {
        return createMockNavigator;
    },
    get createMockPerformance () {
        return createMockPerformance;
    },
    get createMockStorage () {
        return createMockStorage;
    },
    get createMockWindow () {
        return createMockWindow;
    }
});
function createMockStorage() {
    const store = {};
    // Helper to create mock function that works with or without Jest
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return jest.fn(impl);
        }
        return impl;
    };
    return {
        getItem: mockFn((key)=>store[key] || null),
        setItem: mockFn((key, value)=>{
            store[key] = value;
        }),
        removeItem: mockFn((key)=>{
            delete store[key];
        }),
        clear: mockFn(()=>{
            Object.keys(store).forEach((key)=>delete store[key]);
        }),
        key: mockFn((index)=>{
            const keys = Object.keys(store);
            return keys[index] || null;
        }),
        get length () {
            return Object.keys(store).length;
        }
    };
}
function createMockNavigator() {
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return impl ? jest.fn(impl) : jest.fn().mockResolvedValue(undefined);
        }
        return impl || (()=>Promise.resolve(undefined));
    };
    return {
        userAgent: "Mozilla/5.0 (Test Environment)",
        onLine: true,
        clipboard: {
            writeText: mockFn(),
            readText: mockFn(()=>Promise.resolve("mock text"))
        },
        share: mockFn()
    };
}
function createMockWindow() {
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return impl ? jest.fn(impl) : jest.fn();
        }
        return impl || (()=>{});
    };
    return {
        localStorage: createMockStorage(),
        sessionStorage: createMockStorage(),
        screen: {
            width: 1920,
            height: 1080
        },
        devicePixelRatio: 1,
        matchMedia: mockFn((query)=>({
                matches: false,
                media: query,
                onchange: null,
                addListener: mockFn(),
                removeListener: mockFn(),
                addEventListener: mockFn(),
                removeEventListener: mockFn(),
                dispatchEvent: mockFn()
            }))
    };
}
function createMockDocument() {
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return impl ? jest.fn(impl) : jest.fn();
        }
        return impl || (()=>{});
    };
    return {
        createElement: mockFn(()=>({
                style: {},
                select: mockFn(),
                remove: mockFn()
            })),
        body: {
            appendChild: mockFn(),
            removeChild: mockFn()
        },
        execCommand: mockFn(()=>true),
        referrer: ""
    };
}
function createMockPerformance() {
    let mockTime = 0;
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return impl ? jest.fn(impl) : jest.fn();
        }
        return impl || (()=>{});
    };
    return {
        now: mockFn(()=>{
            mockTime += 16.67; // ~60fps
            return mockTime;
        }),
        mark: mockFn(),
        measure: mockFn(),
        getEntries: mockFn(()=>[]),
        clearMarks: mockFn(),
        clearMeasures: mockFn()
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci10cmFpbmluZy1ib2FyZC1jb21wbGV0ZS9zcmMvc2hhcmVkL3NlcnZpY2VzL2NvbnRhaW5lci9tb2Nrcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIE1vY2sgQnJvd3NlciBBUElzIGZvciB0ZXN0aW5nIGVudmlyb25tZW50c1xuICogQG1vZHVsZSBzZXJ2aWNlcy9jb250YWluZXIvbW9ja3NcbiAqIFxuICogQGRlc2NyaXB0aW9uXG4gKiBQcm92aWRlcyBtb2NrIGltcGxlbWVudGF0aW9ucyBvZiBicm93c2VyIEFQSXMgZm9yIHRlc3RpbmcgZW52aXJvbm1lbnRzLlxuICogRGVzaWduZWQgZm9yIEplc3QgMzAgY29tcGF0aWJpbGl0eSB3aXRoIGZhbGxiYWNrIHN1cHBvcnQgZm9yIG5vbi1KZXN0XG4gKiBlbnZpcm9ubWVudHMuIENyZWF0ZXMgbGlnaHR3ZWlnaHQsIGZvY3VzZWQgbW9ja3MgdGhhdCBzaW11bGF0ZSBicm93c2VyXG4gKiBiZWhhdmlvciB3aXRob3V0IHRoZSBjb21wbGV4aXR5IG9mIGZ1bGwgYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMuXG4gKiBcbiAqIEByZW1hcmtzXG4gKiBLZXkgZmVhdHVyZXM6XG4gKiAtIEplc3QtY29tcGF0aWJsZSBtb2NrIGZ1bmN0aW9ucyB3aXRoIGZhbGxiYWNrIGltcGxlbWVudGF0aW9uc1xuICogLSBTdG9yYWdlIEFQSSBtb2NrcyAobG9jYWxTdG9yYWdlLCBzZXNzaW9uU3RvcmFnZSkgd2l0aCBwZXJzaXN0ZW50IHN0YXRlXG4gKiAtIE5hdmlnYXRvciBBUEkgbW9ja3Mgd2l0aCBjbGlwYm9hcmQgYW5kIHNoYXJpbmcgZnVuY3Rpb25hbGl0eVxuICogLSBXaW5kb3cgb2JqZWN0IG1vY2tzIHdpdGggbWVkaWEgcXVlcmllcyBhbmQgc2NyZWVuIHByb3BlcnRpZXNcbiAqIC0gRG9jdW1lbnQgQVBJIG1vY2tzIGZvciBET00gbWFuaXB1bGF0aW9uIHRlc3RpbmdcbiAqIC0gUGVyZm9ybWFuY2UgQVBJIG1vY2tzIHdpdGggcmVhbGlzdGljIHRpbWluZyBzaW11bGF0aW9uXG4gKiAtIENsZWFuLCBwcmVkaWN0YWJsZSBtb2NrIGJlaGF2aW9yIGZvciBjb25zaXN0ZW50IHRlc3RpbmdcbiAqIFxuICogVGhlIG1vY2tzIGFyZSBkZXNpZ25lZCB0byBiZSBsaWdodHdlaWdodCB5ZXQgZnVuY3Rpb25hbCwgcHJvdmlkaW5nXG4gKiB0aGUgZXNzZW50aWFsIGJlaGF2aW9yIG5lZWRlZCBmb3IgdW5pdCBhbmQgaW50ZWdyYXRpb24gdGVzdGluZyB3aXRob3V0XG4gKiB0aGUgb3ZlcmhlYWQgb2YgZnVsbCBicm93c2VyIHNpbXVsYXRpb24gZnJhbWV3b3Jrcy5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhIG1vY2sgU3RvcmFnZSBpbXBsZW1lbnRhdGlvbiBmb3IgbG9jYWxTdG9yYWdlL3Nlc3Npb25TdG9yYWdlXG4gKiBcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhIG1vY2sgU3RvcmFnZSBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIHRoZSBXZWIgU3RvcmFnZSBBUEkgaW50ZXJmYWNlLlxuICogTWFpbnRhaW5zIGFuIGluLW1lbW9yeSBzdG9yZSB0aGF0IHBlcnNpc3RzIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIHRlc3QsXG4gKiBwcm92aWRpbmcgcmVhbGlzdGljIHN0b3JhZ2UgYmVoYXZpb3Igd2l0aG91dCBhY3R1YWwgYnJvd3NlciBwZXJzaXN0ZW5jZS5cbiAqIFxuICogQHJldHVybnMge1N0b3JhZ2V9IE1vY2sgc3RvcmFnZSBvYmplY3Qgd2l0aCBmdWxsIFN0b3JhZ2UgQVBJIGltcGxlbWVudGF0aW9uXG4gKiBcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBtb2NrU3RvcmFnZSA9IGNyZWF0ZU1vY2tTdG9yYWdlKCk7XG4gKiBtb2NrU3RvcmFnZS5zZXRJdGVtKCdrZXknLCAndmFsdWUnKTtcbiAqIGV4cGVjdChtb2NrU3RvcmFnZS5nZXRJdGVtKCdrZXknKSkudG9CZSgndmFsdWUnKTtcbiAqIGV4cGVjdChtb2NrU3RvcmFnZS5sZW5ndGgpLnRvQmUoMSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vY2tTdG9yYWdlKCk6IFN0b3JhZ2Uge1xuICBjb25zdCBzdG9yZTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuXG4gIC8vIEhlbHBlciB0byBjcmVhdGUgbW9jayBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggb3Igd2l0aG91dCBKZXN0XG4gIGNvbnN0IG1vY2tGbiA9IChpbXBsOiAoLi4uYXJnczogYW55W10pID0+IGFueSkgPT4ge1xuICAgIGlmICh0eXBlb2YgamVzdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqZXN0LmZuKSB7XG4gICAgICByZXR1cm4gamVzdC5mbihpbXBsKTtcbiAgICB9XG4gICAgcmV0dXJuIGltcGw7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRJdGVtOiBtb2NrRm4oKGtleTogc3RyaW5nKSA9PiBzdG9yZVtrZXldIHx8IG51bGwpLFxuICAgIHNldEl0ZW06IG1vY2tGbigoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIHN0b3JlW2tleV0gPSB2YWx1ZTtcbiAgICB9KSxcbiAgICByZW1vdmVJdGVtOiBtb2NrRm4oKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBkZWxldGUgc3RvcmVba2V5XTtcbiAgICB9KSxcbiAgICBjbGVhcjogbW9ja0ZuKCgpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKHN0b3JlKS5mb3JFYWNoKChrZXkpID0+IGRlbGV0ZSBzdG9yZVtrZXldKTtcbiAgICB9KSxcbiAgICBrZXk6IG1vY2tGbigoaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHN0b3JlKTtcbiAgICAgIHJldHVybiBrZXlzW2luZGV4XSB8fCBudWxsO1xuICAgIH0pLFxuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoc3RvcmUpLmxlbmd0aDtcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIG1vY2sgTmF2aWdhdG9yIGltcGxlbWVudGF0aW9uXG4gKiBcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhIG1vY2sgTmF2aWdhdG9yIG9iamVjdCB3aXRoIGVzc2VudGlhbCBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzXG4gKiBmb3IgdGVzdGluZyBicm93c2VyIG5hdmlnYXRpb24gYW5kIEFQSSBmdW5jdGlvbmFsaXR5LiBJbmNsdWRlcyBjbGlwYm9hcmRcbiAqIEFQSSwgc2hhcmluZyBmdW5jdGlvbmFsaXR5LCBhbmQgYmFzaWMgZGV2aWNlIGluZm9ybWF0aW9uLlxuICogXG4gKiBAcmV0dXJucyB7TmF2aWdhdG9yfSBNb2NrIG5hdmlnYXRvciBvYmplY3Qgd2l0aCBjb21tb24gTmF2aWdhdG9yIEFQSSBtZXRob2RzXG4gKiBcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBtb2NrTmF2ID0gY3JlYXRlTW9ja05hdmlnYXRvcigpO1xuICogZXhwZWN0KG1vY2tOYXYudXNlckFnZW50KS50b0NvbnRhaW4oJ1Rlc3QgRW52aXJvbm1lbnQnKTtcbiAqIGF3YWl0IG1vY2tOYXYuY2xpcGJvYXJkLndyaXRlVGV4dCgndGVzdCcpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrTmF2aWdhdG9yKCk6IE5hdmlnYXRvciB7XG4gIGNvbnN0IG1vY2tGbiA9IChpbXBsPzogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpID0+IHtcbiAgICBpZiAodHlwZW9mIGplc3QgIT09IFwidW5kZWZpbmVkXCIgJiYgamVzdC5mbikge1xuICAgICAgcmV0dXJuIGltcGwgPyBqZXN0LmZuKGltcGwpIDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHJldHVybiBpbXBsIHx8ICgoKSA9PiBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB1c2VyQWdlbnQ6IFwiTW96aWxsYS81LjAgKFRlc3QgRW52aXJvbm1lbnQpXCIsXG4gICAgb25MaW5lOiB0cnVlLFxuICAgIGNsaXBib2FyZDoge1xuICAgICAgd3JpdGVUZXh0OiBtb2NrRm4oKSxcbiAgICAgIHJlYWRUZXh0OiBtb2NrRm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKFwibW9jayB0ZXh0XCIpKSxcbiAgICB9IGFzIGFueSxcbiAgICBzaGFyZTogbW9ja0ZuKCksXG4gICAgLy8gQWRkIG90aGVyIG5hdmlnYXRvciBwcm9wZXJ0aWVzIGFzIG5lZWRlZFxuICB9IGFzIGFueTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBtb2NrIFdpbmRvdyBpbXBsZW1lbnRhdGlvblxuICogXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBtb2NrIFdpbmRvdyBvYmplY3Qgd2l0aCBlc3NlbnRpYWwgYnJvd3NlciB3aW5kb3cgcHJvcGVydGllc1xuICogYW5kIG1ldGhvZHMuIEluY2x1ZGVzIHN0b3JhZ2UgQVBJcywgc2NyZWVuIGluZm9ybWF0aW9uLCBtZWRpYSBxdWVyaWVzLFxuICogYW5kIGRldmljZSBwaXhlbCByYXRpbyBmb3IgY29tcHJlaGVuc2l2ZSB3aW5kb3cgdGVzdGluZy5cbiAqIFxuICogQHJldHVybnMge1dpbmRvd30gTW9jayB3aW5kb3cgb2JqZWN0IHdpdGggY29tbW9uIFdpbmRvdyBBUEkgcHJvcGVydGllc1xuICogXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgbW9ja1dpbiA9IGNyZWF0ZU1vY2tXaW5kb3coKTtcbiAqIG1vY2tXaW4ubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rlc3QnLCAndmFsdWUnKTtcbiAqIGV4cGVjdChtb2NrV2luLnNjcmVlbi53aWR0aCkudG9CZSgxOTIwKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9ja1dpbmRvdygpOiBXaW5kb3cge1xuICBjb25zdCBtb2NrRm4gPSAoaW1wbD86ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBqZXN0ICE9PSBcInVuZGVmaW5lZFwiICYmIGplc3QuZm4pIHtcbiAgICAgIHJldHVybiBpbXBsID8gamVzdC5mbihpbXBsKSA6IGplc3QuZm4oKTtcbiAgICB9XG4gICAgcmV0dXJuIGltcGwgfHwgKCgpID0+IHt9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGxvY2FsU3RvcmFnZTogY3JlYXRlTW9ja1N0b3JhZ2UoKSxcbiAgICBzZXNzaW9uU3RvcmFnZTogY3JlYXRlTW9ja1N0b3JhZ2UoKSxcbiAgICBzY3JlZW46IHtcbiAgICAgIHdpZHRoOiAxOTIwLFxuICAgICAgaGVpZ2h0OiAxMDgwLFxuICAgIH0sXG4gICAgZGV2aWNlUGl4ZWxSYXRpbzogMSxcbiAgICBtYXRjaE1lZGlhOiBtb2NrRm4oKHF1ZXJ5OiBzdHJpbmcpID0+ICh7XG4gICAgICBtYXRjaGVzOiBmYWxzZSxcbiAgICAgIG1lZGlhOiBxdWVyeSxcbiAgICAgIG9uY2hhbmdlOiBudWxsLFxuICAgICAgYWRkTGlzdGVuZXI6IG1vY2tGbigpLFxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IG1vY2tGbigpLFxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogbW9ja0ZuKCksXG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBtb2NrRm4oKSxcbiAgICAgIGRpc3BhdGNoRXZlbnQ6IG1vY2tGbigpLFxuICAgIH0pKSxcbiAgfSBhcyBhbnk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbW9jayBEb2N1bWVudCBpbXBsZW1lbnRhdGlvblxuICogXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBtb2NrIERvY3VtZW50IG9iamVjdCB3aXRoIGVzc2VudGlhbCBET00gbWFuaXB1bGF0aW9uIG1ldGhvZHMuXG4gKiBQcm92aWRlcyBiYXNpYyBkb2N1bWVudCBmdW5jdGlvbmFsaXR5IGZvciB0ZXN0aW5nIGNvbXBvbmVudHMgdGhhdFxuICogaW50ZXJhY3Qgd2l0aCB0aGUgRE9NIHdpdGhvdXQgcmVxdWlyaW5nIGEgZnVsbCBET00gZW52aXJvbm1lbnQuXG4gKiBcbiAqIEByZXR1cm5zIHtEb2N1bWVudH0gTW9jayBkb2N1bWVudCBvYmplY3Qgd2l0aCBjb21tb24gRG9jdW1lbnQgQVBJIG1ldGhvZHNcbiAqIFxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IG1vY2tEb2MgPSBjcmVhdGVNb2NrRG9jdW1lbnQoKTtcbiAqIGNvbnN0IGVsZW1lbnQgPSBtb2NrRG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICogbW9ja0RvYy5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrRG9jdW1lbnQoKTogRG9jdW1lbnQge1xuICBjb25zdCBtb2NrRm4gPSAoaW1wbD86ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBqZXN0ICE9PSBcInVuZGVmaW5lZFwiICYmIGplc3QuZm4pIHtcbiAgICAgIHJldHVybiBpbXBsID8gamVzdC5mbihpbXBsKSA6IGplc3QuZm4oKTtcbiAgICB9XG4gICAgcmV0dXJuIGltcGwgfHwgKCgpID0+IHt9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGNyZWF0ZUVsZW1lbnQ6IG1vY2tGbigoKSA9PiAoe1xuICAgICAgc3R5bGU6IHt9LFxuICAgICAgc2VsZWN0OiBtb2NrRm4oKSxcbiAgICAgIHJlbW92ZTogbW9ja0ZuKCksXG4gICAgfSkpLFxuICAgIGJvZHk6IHtcbiAgICAgIGFwcGVuZENoaWxkOiBtb2NrRm4oKSxcbiAgICAgIHJlbW92ZUNoaWxkOiBtb2NrRm4oKSxcbiAgICB9LFxuICAgIGV4ZWNDb21tYW5kOiBtb2NrRm4oKCkgPT4gdHJ1ZSksXG4gICAgcmVmZXJyZXI6IFwiXCIsXG4gIH0gYXMgYW55O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIG1vY2sgUGVyZm9ybWFuY2UgaW1wbGVtZW50YXRpb25cbiAqIFxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgbW9jayBQZXJmb3JtYW5jZSBvYmplY3Qgd2l0aCB0aW1pbmcgYW5kIG1lYXN1cmVtZW50IGZ1bmN0aW9uYWxpdHkuXG4gKiBTaW11bGF0ZXMgcmVhbGlzdGljIHRpbWluZyBiZWhhdmlvciB3aXRoIH42MGZwcyB0aW1pbmcgaW50ZXJ2YWxzIGFuZFxuICogcHJvdmlkZXMgcGVyZm9ybWFuY2UgbWFya2luZyBhbmQgbWVhc3VyZW1lbnQgY2FwYWJpbGl0aWVzIGZvciB0ZXN0aW5nLlxuICogXG4gKiBAcmV0dXJucyB7UGVyZm9ybWFuY2V9IE1vY2sgcGVyZm9ybWFuY2Ugb2JqZWN0IHdpdGggUGVyZm9ybWFuY2UgQVBJIG1ldGhvZHNcbiAqIFxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IG1vY2tQZXJmID0gY3JlYXRlTW9ja1BlcmZvcm1hbmNlKCk7XG4gKiBjb25zdCBzdGFydCA9IG1vY2tQZXJmLm5vdygpO1xuICogbW9ja1BlcmYubWFyaygndGVzdC1zdGFydCcpO1xuICogLy8gU2ltdWxhdGUgd29ya1xuICogY29uc3QgZW5kID0gbW9ja1BlcmYubm93KCk7XG4gKiBleHBlY3QoZW5kKS50b0JlR3JlYXRlclRoYW4oc3RhcnQpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrUGVyZm9ybWFuY2UoKTogUGVyZm9ybWFuY2Uge1xuICBsZXQgbW9ja1RpbWUgPSAwO1xuXG4gIGNvbnN0IG1vY2tGbiA9IChpbXBsPzogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpID0+IHtcbiAgICBpZiAodHlwZW9mIGplc3QgIT09IFwidW5kZWZpbmVkXCIgJiYgamVzdC5mbikge1xuICAgICAgcmV0dXJuIGltcGwgPyBqZXN0LmZuKGltcGwpIDogamVzdC5mbigpO1xuICAgIH1cbiAgICByZXR1cm4gaW1wbCB8fCAoKCkgPT4ge30pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbm93OiBtb2NrRm4oKCkgPT4ge1xuICAgICAgbW9ja1RpbWUgKz0gMTYuNjc7IC8vIH42MGZwc1xuICAgICAgcmV0dXJuIG1vY2tUaW1lO1xuICAgIH0pLFxuICAgIG1hcms6IG1vY2tGbigpLFxuICAgIG1lYXN1cmU6IG1vY2tGbigpLFxuICAgIGdldEVudHJpZXM6IG1vY2tGbigoKSA9PiBbXSksXG4gICAgY2xlYXJNYXJrczogbW9ja0ZuKCksXG4gICAgY2xlYXJNZWFzdXJlczogbW9ja0ZuKCksXG4gIH0gYXMgYW55O1xufVxuIl0sIm5hbWVzIjpbImNyZWF0ZU1vY2tEb2N1bWVudCIsImNyZWF0ZU1vY2tOYXZpZ2F0b3IiLCJjcmVhdGVNb2NrUGVyZm9ybWFuY2UiLCJjcmVhdGVNb2NrU3RvcmFnZSIsImNyZWF0ZU1vY2tXaW5kb3ciLCJzdG9yZSIsIm1vY2tGbiIsImltcGwiLCJqZXN0IiwiZm4iLCJnZXRJdGVtIiwia2V5Iiwic2V0SXRlbSIsInZhbHVlIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJpbmRleCIsImxlbmd0aCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwidW5kZWZpbmVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ1c2VyQWdlbnQiLCJvbkxpbmUiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJyZWFkVGV4dCIsInNoYXJlIiwibG9jYWxTdG9yYWdlIiwic2Vzc2lvblN0b3JhZ2UiLCJzY3JlZW4iLCJ3aWR0aCIsImhlaWdodCIsImRldmljZVBpeGVsUmF0aW8iLCJtYXRjaE1lZGlhIiwicXVlcnkiLCJtYXRjaGVzIiwibWVkaWEiLCJvbmNoYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJzZWxlY3QiLCJyZW1vdmUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsImV4ZWNDb21tYW5kIiwicmVmZXJyZXIiLCJtb2NrVGltZSIsIm5vdyIsIm1hcmsiLCJtZWFzdXJlIiwiZ2V0RW50cmllcyIsImNsZWFyTWFya3MiLCJjbGVhck1lYXN1cmVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F1QkMsR0FFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQkM7Ozs7Ozs7Ozs7O1FBcUllQTtlQUFBQTs7UUFuRkFDO2VBQUFBOztRQThIQUM7ZUFBQUE7O1FBL0tBQztlQUFBQTs7UUFzRkFDO2VBQUFBOzs7QUF0RlQsU0FBU0Q7SUFDZCxNQUFNRSxRQUFnQyxDQUFDO0lBRXZDLGlFQUFpRTtJQUNqRSxNQUFNQyxTQUFTLENBQUNDO1FBQ2QsSUFBSSxPQUFPQyxTQUFTLGVBQWVBLEtBQUtDLEVBQUUsRUFBRTtZQUMxQyxPQUFPRCxLQUFLQyxFQUFFLENBQUNGO1FBQ2pCO1FBQ0EsT0FBT0E7SUFDVDtJQUVBLE9BQU87UUFDTEcsU0FBU0osT0FBTyxDQUFDSyxNQUFnQk4sS0FBSyxDQUFDTSxJQUFJLElBQUk7UUFDL0NDLFNBQVNOLE9BQU8sQ0FBQ0ssS0FBYUU7WUFDNUJSLEtBQUssQ0FBQ00sSUFBSSxHQUFHRTtRQUNmO1FBQ0FDLFlBQVlSLE9BQU8sQ0FBQ0s7WUFDbEIsT0FBT04sS0FBSyxDQUFDTSxJQUFJO1FBQ25CO1FBQ0FJLE9BQU9ULE9BQU87WUFDWlUsT0FBT0MsSUFBSSxDQUFDWixPQUFPYSxPQUFPLENBQUMsQ0FBQ1AsTUFBUSxPQUFPTixLQUFLLENBQUNNLElBQUk7UUFDdkQ7UUFDQUEsS0FBS0wsT0FBTyxDQUFDYTtZQUNYLE1BQU1GLE9BQU9ELE9BQU9DLElBQUksQ0FBQ1o7WUFDekIsT0FBT1ksSUFBSSxDQUFDRSxNQUFNLElBQUk7UUFDeEI7UUFDQSxJQUFJQyxVQUFTO1lBQ1gsT0FBT0osT0FBT0MsSUFBSSxDQUFDWixPQUFPZSxNQUFNO1FBQ2xDO0lBQ0Y7QUFDRjtBQW1CTyxTQUFTbkI7SUFDZCxNQUFNSyxTQUFTLENBQUNDO1FBQ2QsSUFBSSxPQUFPQyxTQUFTLGVBQWVBLEtBQUtDLEVBQUUsRUFBRTtZQUMxQyxPQUFPRixPQUFPQyxLQUFLQyxFQUFFLENBQUNGLFFBQVFDLEtBQUtDLEVBQUUsR0FBR1ksaUJBQWlCLENBQUNDO1FBQzVEO1FBQ0EsT0FBT2YsUUFBUyxDQUFBLElBQU1nQixRQUFRQyxPQUFPLENBQUNGLFVBQVM7SUFDakQ7SUFFQSxPQUFPO1FBQ0xHLFdBQVc7UUFDWEMsUUFBUTtRQUNSQyxXQUFXO1lBQ1RDLFdBQVd0QjtZQUNYdUIsVUFBVXZCLE9BQU8sSUFBTWlCLFFBQVFDLE9BQU8sQ0FBQztRQUN6QztRQUNBTSxPQUFPeEI7SUFFVDtBQUNGO0FBbUJPLFNBQVNGO0lBQ2QsTUFBTUUsU0FBUyxDQUFDQztRQUNkLElBQUksT0FBT0MsU0FBUyxlQUFlQSxLQUFLQyxFQUFFLEVBQUU7WUFDMUMsT0FBT0YsT0FBT0MsS0FBS0MsRUFBRSxDQUFDRixRQUFRQyxLQUFLQyxFQUFFO1FBQ3ZDO1FBQ0EsT0FBT0YsUUFBUyxDQUFBLEtBQU8sQ0FBQTtJQUN6QjtJQUVBLE9BQU87UUFDTHdCLGNBQWM1QjtRQUNkNkIsZ0JBQWdCN0I7UUFDaEI4QixRQUFRO1lBQ05DLE9BQU87WUFDUEMsUUFBUTtRQUNWO1FBQ0FDLGtCQUFrQjtRQUNsQkMsWUFBWS9CLE9BQU8sQ0FBQ2dDLFFBQW1CLENBQUE7Z0JBQ3JDQyxTQUFTO2dCQUNUQyxPQUFPRjtnQkFDUEcsVUFBVTtnQkFDVkMsYUFBYXBDO2dCQUNicUMsZ0JBQWdCckM7Z0JBQ2hCc0Msa0JBQWtCdEM7Z0JBQ2xCdUMscUJBQXFCdkM7Z0JBQ3JCd0MsZUFBZXhDO1lBQ2pCLENBQUE7SUFDRjtBQUNGO0FBbUJPLFNBQVNOO0lBQ2QsTUFBTU0sU0FBUyxDQUFDQztRQUNkLElBQUksT0FBT0MsU0FBUyxlQUFlQSxLQUFLQyxFQUFFLEVBQUU7WUFDMUMsT0FBT0YsT0FBT0MsS0FBS0MsRUFBRSxDQUFDRixRQUFRQyxLQUFLQyxFQUFFO1FBQ3ZDO1FBQ0EsT0FBT0YsUUFBUyxDQUFBLEtBQU8sQ0FBQTtJQUN6QjtJQUVBLE9BQU87UUFDTHdDLGVBQWV6QyxPQUFPLElBQU8sQ0FBQTtnQkFDM0IwQyxPQUFPLENBQUM7Z0JBQ1JDLFFBQVEzQztnQkFDUjRDLFFBQVE1QztZQUNWLENBQUE7UUFDQTZDLE1BQU07WUFDSkMsYUFBYTlDO1lBQ2IrQyxhQUFhL0M7UUFDZjtRQUNBZ0QsYUFBYWhELE9BQU8sSUFBTTtRQUMxQmlELFVBQVU7SUFDWjtBQUNGO0FBc0JPLFNBQVNyRDtJQUNkLElBQUlzRCxXQUFXO0lBRWYsTUFBTWxELFNBQVMsQ0FBQ0M7UUFDZCxJQUFJLE9BQU9DLFNBQVMsZUFBZUEsS0FBS0MsRUFBRSxFQUFFO1lBQzFDLE9BQU9GLE9BQU9DLEtBQUtDLEVBQUUsQ0FBQ0YsUUFBUUMsS0FBS0MsRUFBRTtRQUN2QztRQUNBLE9BQU9GLFFBQVMsQ0FBQSxLQUFPLENBQUE7SUFDekI7SUFFQSxPQUFPO1FBQ0xrRCxLQUFLbkQsT0FBTztZQUNWa0QsWUFBWSxPQUFPLFNBQVM7WUFDNUIsT0FBT0E7UUFDVDtRQUNBRSxNQUFNcEQ7UUFDTnFELFNBQVNyRDtRQUNUc0QsWUFBWXRELE9BQU8sSUFBTSxFQUFFO1FBQzNCdUQsWUFBWXZEO1FBQ1p3RCxlQUFleEQ7SUFDakI7QUFDRiJ9