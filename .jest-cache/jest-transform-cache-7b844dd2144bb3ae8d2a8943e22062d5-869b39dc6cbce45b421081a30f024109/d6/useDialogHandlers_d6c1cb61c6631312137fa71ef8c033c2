14163c3567fd38a9f66a144c68c3762a
/**
 * @file Dialog handlers hook for chess training board
 * @module hooks/useDialogHandlers
 * 
 * @description
 * Custom hook that encapsulates all dialog handling logic for chess training.
 * Extracted from TrainingBoard to separate dialog business logic from UI coordination.
 * Handles error dialogs, success dialogs, and training workflow actions.
 * 
 * @remarks
 * Key responsibilities:
 * - Move error dialog actions (take back, restart, continue, show best move)
 * - Move success dialog actions (close, continue)
 * - Training session reset coordination
 * - Complex opponent turn scheduling and cancellation
 * - Comprehensive logging and state coordination
 * 
 * This hook maintains all the complex business logic while providing
 * a clean interface for dialog action coordination.
 * 
 * @example
 * ```tsx
 * const dialogHandlers = useDialogHandlers({
 *   undoMove,
 *   resetGame,
 *   clearEvaluations,
 *   trainingActions,
 *   gameActions,
 *   uiActions,
 *   trainingState,
 *   storeApi,
 *   trainingUIState,
 * });
 * 
 * <DialogManager
 *   errorDialog={trainingState.moveErrorDialog}
 *   successDialog={trainingState.moveSuccessDialog}
 *   onErrorTakeBack={dialogHandlers.handleMoveErrorTakeBack}
 *   onErrorRestart={dialogHandlers.handleMoveErrorRestart}
 *   onErrorContinue={dialogHandlers.handleMoveErrorContinue}
 *   onErrorShowBestMove={dialogHandlers.handleShowBestMove}
 *   onSuccessClose={dialogHandlers.handleMoveSuccessClose}
 *   onSuccessContinue={dialogHandlers.handleMoveSuccessContinue}
 * />
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDialogHandlers", {
    enumerable: true,
    get: function() {
        return useDialogHandlers;
    }
});
const _react = require("react");
const _Logger = require("../services/logging/Logger");
const _handlePlayerMove = require("../store/orchestrators/handlePlayerMove");
const _ChessService = require("../services/ChessService");
const _TablebaseService = require("../services/TablebaseService");
const useDialogHandlers = ({ undoMove, resetGame, clearEvaluations, trainingActions, gameActions, uiActions, trainingState, storeApi, trainingUIState })=>{
    /**
   * Resets the training board to initial state
   *
   * @description
   * Performs comprehensive cleanup including:
   * - Resetting chess game to starting position
   * - Clearing all position evaluations
   * - Resetting UI state and dialogs
   * - Clearing training session data
   *
   * @remarks
   * This handler is called when:
   * - User clicks reset button
   * - Training session needs restart
   * - Parent component triggers reset
   */ const handleReset = (0, _react.useCallback)(()=>{
        resetGame();
        clearEvaluations();
        trainingUIState.handleReset();
        gameActions.resetGame();
        // Clear evaluation baseline when resetting
        trainingActions.clearEvaluationBaseline();
    }, [
        resetGame,
        clearEvaluations,
        gameActions,
        trainingUIState,
        trainingActions
    ]);
    /**
   * Handles move error dialog dismissal with undo
   *
   * @description
   * Closes the move error dialog and undoes the suboptimal move,
   * allowing the user to try a different move.
   *
   * @remarks
   * When a suboptimal move is detected, it has already been executed
   * on the board and added to the move history. This function removes
   * the move from history and reverts the board position.
   */ const handleMoveErrorTakeBack = (0, _react.useCallback)(()=>{
        const logger = (0, _Logger.getLogger)().setContext("useDialogHandlers-MoveError");
        logger.info("Undoing suboptimal move using useTrainingSession undoMove");
        // CRITICAL: Cancel any scheduled opponent turn BEFORE undoing
        // This prevents the opponent from playing after we undo
        (0, _handlePlayerMove.cancelScheduledOpponentTurn)();
        logger.info("Cancelled any scheduled opponent turn");
        // Use the undoMove function from useTrainingSession which properly handles ChessService
        const undoResult = undoMove();
        if (undoResult) {
            logger.info("Move successfully undone");
            // CRITICAL: Set player turn to true after undoing a suboptimal move
            // This prevents the opponent from playing immediately after undo
            logger.debug("Before setPlayerTurn - current state", {
                isPlayerTurn: trainingState.isPlayerTurn,
                isOpponentThinking: trainingState.isOpponentThinking
            });
            trainingActions.setPlayerTurn(true);
            trainingActions.clearOpponentThinking(); // Clear opponent thinking flag
            trainingActions.clearEvaluationBaseline(); // Clear baseline since we're back to original position
            logger.info("Set player turn to true, cleared opponent thinking, and cleared evaluation baseline");
            logger.debug("After setPlayerTurn call");
        } else {
            logger.error("Failed to undo move - no moves in history");
        }
        // Close the dialog using the trainingActions hook which properly accesses the action
        // The hook extracts the action from the slice creator, not from the nested store state
        if (trainingActions && trainingActions.setMoveErrorDialog) {
            trainingActions.setMoveErrorDialog(null);
            logger.info("Successfully closed move error dialog via trainingActions hook");
        } else {
            logger.error("setMoveErrorDialog not available in trainingActions");
        }
    }, [
        undoMove,
        trainingActions,
        trainingState
    ]);
    /**
   * Restarts the entire training session after move error
   *
   * @description
   * Completely resets the game and closes the error dialog when
   * the user chooses to restart after making a critical mistake.
   *
   * @remarks
   * This is typically used when the user has made a game-losing
   * mistake and wants to start the position from the beginning.
   */ const handleMoveErrorRestart = (0, _react.useCallback)(()=>{
        const logger = (0, _Logger.getLogger)().setContext("useDialogHandlers-MoveError");
        logger.info("Restarting game due to move error");
        handleReset();
        trainingActions.setMoveErrorDialog(null);
    }, [
        handleReset,
        trainingActions
    ]);
    /**
   * Handles "Weiterspielen" (continue playing) action from error dialog
   *
   * @description
   * Closes the error dialog and schedules the opponent's turn.
   * This allows the game to continue even after a suboptimal move,
   * letting the opponent respond to the player's move.
   *
   * @remarks
   * This provides a smoother training experience by allowing players
   * to continue playing and learning from their mistakes rather than
   * always having to take back moves.
   */ const handleMoveErrorContinue = (0, _react.useCallback)(()=>{
        var _currentState_training_currentPosition, _currentState_training_currentPosition_colorToTrain, _currentState_training_currentPosition1;
        const logger = (0, _Logger.getLogger)().setContext("useDialogHandlers-MoveError");
        // Get current state for debugging
        const currentState = storeApi.getState();
        logger.info("🎯 WEITERSPIELEN clicked - Current state BEFORE action:", {
            isPlayerTurn: currentState.training.isPlayerTurn,
            isOpponentThinking: currentState.training.isOpponentThinking,
            currentFen: _ChessService.chessService.getFen(),
            currentTurn: _ChessService.chessService.turn(),
            colorToTrain: (_currentState_training_currentPosition = currentState.training.currentPosition) === null || _currentState_training_currentPosition === void 0 ? void 0 : _currentState_training_currentPosition.colorToTrain,
            moveCount: currentState.game.moveHistory.length
        });
        // CRITICAL FIX: Set turn state before scheduling opponent turn
        // This ensures the opponent can actually execute their move
        const currentTurn = _ChessService.chessService.turn();
        const trainingColor = (_currentState_training_currentPosition1 = currentState.training.currentPosition) === null || _currentState_training_currentPosition1 === void 0 ? void 0 : (_currentState_training_currentPosition_colorToTrain = _currentState_training_currentPosition1.colorToTrain) === null || _currentState_training_currentPosition_colorToTrain === void 0 ? void 0 : _currentState_training_currentPosition_colorToTrain.charAt(0);
        if (currentTurn !== trainingColor) {
            logger.info("🔧 FIXING BUG: Setting isPlayerTurn=false for opponent to move");
            trainingActions.setPlayerTurn(false);
        }
        // Close the error dialog
        trainingActions.setMoveErrorDialog(null);
        logger.info("✅ Error dialog closed");
        // Schedule opponent turn to respond to player's move
        logger.info("📅 Calling scheduleOpponentTurn with evaluation baseline callback...");
        (0, _handlePlayerMove.scheduleOpponentTurn)(storeApi, 500, {
            onOpponentMoveComplete: async ()=>{
                logger.info("🎯 Opponent move completed - updating evaluation baseline");
                try {
                    // Get current position evaluation
                    const currentFen = _ChessService.chessService.getFen();
                    const currentEval = await _TablebaseService.tablebaseService.getEvaluation(currentFen);
                    if (currentEval.isAvailable && currentEval.result) {
                        // Update baseline to current position's evaluation using the actions provided to this hook
                        trainingActions.setEvaluationBaseline(currentEval.result.wdl, currentFen);
                        logger.info("✅ Evaluation baseline updated successfully", {
                            newBaseline: currentEval.result.wdl,
                            fen: currentFen
                        });
                    } else {
                        logger.warn("⚠️ Could not get evaluation for baseline update - tablebase unavailable");
                    }
                } catch (error) {
                    logger.error("❌ Failed to update evaluation baseline:", error);
                }
            }
        });
        // Check state after scheduling
        const stateAfter = storeApi.getState();
        logger.info("📊 State AFTER scheduling opponent turn:", {
            isPlayerTurn: stateAfter.training.isPlayerTurn,
            isOpponentThinking: stateAfter.training.isOpponentThinking
        });
    }, [
        trainingActions,
        storeApi
    ]);
    /**
   * Displays the best move as a toast notification
   *
   * @description
   * Shows the optimal move in a toast message when the user
   * requests to see the best move after making a mistake.
   *
   * @remarks
   * The best move is determined by tablebase analysis and
   * represents the objectively best continuation from the
   * position before the user's suboptimal move.
   */ const handleShowBestMove = (0, _react.useCallback)(()=>{
        var _trainingState_moveErrorDialog;
        if ((_trainingState_moveErrorDialog = trainingState.moveErrorDialog) === null || _trainingState_moveErrorDialog === void 0 ? void 0 : _trainingState_moveErrorDialog.bestMove) {
            const logger = (0, _Logger.getLogger)().setContext("useDialogHandlers-MoveError");
            logger.info("Showing best move", {
                bestMove: trainingState.moveErrorDialog.bestMove
            });
            uiActions.showToast(`Der beste Zug war: ${trainingState.moveErrorDialog.bestMove}`, "info");
        }
        trainingActions.setMoveErrorDialog(null);
    }, [
        trainingState.moveErrorDialog,
        uiActions,
        trainingActions
    ]);
    /**
   * Handles success dialog close
   *
   * @description
   * Closes the move success dialog when user dismisses it.
   */ const handleMoveSuccessClose = (0, _react.useCallback)(()=>{
        trainingActions.setMoveSuccessDialog(null);
    }, [
        trainingActions
    ]);
    /**
   * Handles continuing to next position after success
   *
   * @description
   * Closes the success dialog and allows training to continue.
   * Training completion logic is handled elsewhere in the system.
   */ const handleMoveSuccessContinue = (0, _react.useCallback)(()=>{
        trainingActions.setMoveSuccessDialog(null);
    // Training completion logic is already handled by PawnPromotionHandler
    }, [
        trainingActions
    ]);
    return {
        handleMoveErrorTakeBack,
        handleMoveErrorRestart,
        handleMoveErrorContinue,
        handleShowBestMove,
        handleMoveSuccessClose,
        handleMoveSuccessContinue,
        handleReset
    };
};

//# sourceMappingURL=data:application/json;base64,