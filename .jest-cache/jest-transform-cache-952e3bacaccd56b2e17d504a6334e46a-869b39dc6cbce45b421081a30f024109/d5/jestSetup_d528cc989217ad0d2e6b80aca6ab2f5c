8416a3758a8707916dcf01d72a6c01c8
/**
 * Jest Setup Utilities
 * Common setup patterns for Jest 30 with ServiceContainer
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get debugContainer () {
        return debugContainer;
    },
    get getGlobalTestContainer () {
        return getGlobalTestContainer;
    },
    get mockConsole () {
        return mockConsole;
    },
    get platformServiceMatchers () {
        return platformServiceMatchers;
    },
    get setupGlobalTestContainer () {
        return setupGlobalTestContainer;
    },
    get setupPerTestContainer () {
        return setupPerTestContainer;
    },
    get setupReactTestingWithContainer () {
        return setupReactTestingWithContainer;
    },
    get testEnvironment () {
        return testEnvironment;
    },
    get waitForNextTick () {
        return waitForNextTick;
    },
    get waitForServicesReady () {
        return waitForServicesReady;
    }
});
require("@testing-library/jest-dom");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _createTestContainer = require("./createTestContainer");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _window_navigator_userAgent, _window_navigator, _process_versions;
/**
 * Global test container for tests that need shared state
 * Use sparingly - prefer per-test containers for better isolation
 */ let globalTestContainer = null;
function setupGlobalTestContainer(overrides) {
    beforeAll(()=>{
        globalTestContainer = (0, _createTestContainer.createTestContainer)(overrides);
    });
    afterAll(()=>{
        globalTestContainer = null;
    });
    beforeEach(()=>{
        // Clear instances between tests for fresh state
        globalTestContainer === null || globalTestContainer === void 0 ? void 0 : globalTestContainer.clearInstances();
    });
}
function getGlobalTestContainer() {
    if (!globalTestContainer) {
        throw new Error("Global test container not set up. Call setupGlobalTestContainer() first.");
    }
    return globalTestContainer;
}
function setupPerTestContainer(overrides) {
    let container;
    beforeEach(()=>{
        container = (0, _createTestContainer.createTestContainer)(overrides);
    });
    afterEach(()=>{
        container.clearInstances();
    });
    return ()=>container;
}
function setupReactTestingWithContainer(overrides) {
    let container;
    let wrapper;
    beforeEach(()=>{
        container = (0, _createTestContainer.createTestContainer)(overrides);
        // Create wrapper component
        /**
     *
     * @param root0
     * @param root0.children
     */ wrapper = ({ children })=>{
            const { ServiceProvider } = require("@shared/services/container/adapter");
            return _react.default.createElement(ServiceProvider, {
                container
            }, children);
        };
    });
    afterEach(()=>{
        container.clearInstances();
    });
    return {
        /**
     *
     */ getContainer: ()=>container,
        /**
     *
     */ getWrapper: ()=>wrapper
    };
}
/**
 *
 */ const platformServiceMatchers = {
    /**
   * Check if a service method was called
   * @param service
   * @param method
   * @param args
   */ toHaveBeenCalledOnService: (service, method, ...args)=>{
        if (typeof jest !== "undefined") {
            expect(service[method]).toHaveBeenCalledWith(...args);
        }
    },
    /**
   * Check storage operations
   * @param storage
   * @param key
   * @param value
   */ toHaveStorageItem: (storage, key, value)=>{
        expect(storage.getItem(key)).toBe(value);
    },
    /**
   * Check storage calls
   * @param storage
   * @param method
   * @param args
   */ toHaveCalledStorageMethod: (storage, method, ...args)=>{
        if (typeof jest !== "undefined") {
            expect(storage[method]).toHaveBeenCalledWith(...args);
        }
    }
};
/**
 *
 */ const testEnvironment = {
    isJest: typeof jest !== "undefined",
    isJSDOM: typeof window !== "undefined" && ((_window_navigator = window.navigator) === null || _window_navigator === void 0 ? void 0 : (_window_navigator_userAgent = _window_navigator.userAgent) === null || _window_navigator_userAgent === void 0 ? void 0 : _window_navigator_userAgent.includes("jsdom")),
    isNode: typeof process !== "undefined" && ((_process_versions = process.versions) === null || _process_versions === void 0 ? void 0 : _process_versions.node)
};
/**
 *
 */ const waitForNextTick = ()=>{
    return new Promise((resolve)=>{
        if (typeof setImmediate !== "undefined") {
            setImmediate(resolve);
        } else {
            setTimeout(resolve, 0);
        }
    });
};
/**
 *
 */ const waitForServicesReady = async (container)=>{
    // Give services time to initialize
    await waitForNextTick();
    // Try to resolve a basic service to ensure container is ready
    try {
        container.resolveCustom("browser.localStorage");
    } catch (error) {
        // If services aren't ready, wait a bit more
        await new Promise((resolve)=>setTimeout(resolve, 10));
    }
};
function debugContainer(container) {
    if (process.env.NODE_ENV === "test" && process.env.DEBUG_CONTAINER) {
        var _container_getStats, _container_getRegisteredKeys;
        console.log("Container Stats:", (_container_getStats = container.getStats) === null || _container_getStats === void 0 ? void 0 : _container_getStats.call(container));
        console.log("Registered Keys:", (_container_getRegisteredKeys = container.getRegisteredKeys) === null || _container_getRegisteredKeys === void 0 ? void 0 : _container_getRegisteredKeys.call(container));
    }
}
function mockConsole() {
    const originalConsole = {
        ...console
    };
    beforeEach(()=>{
        jest.spyOn(console, "log").mockImplementation(()=>{});
        jest.spyOn(console, "warn").mockImplementation(()=>{});
        jest.spyOn(console, "error").mockImplementation(()=>{});
    });
    afterEach(()=>{
        Object.assign(console, originalConsole);
    });
    return {
        /**
     *
     * @param message
     */ expectConsoleLog: (message)=>{
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining(message));
        },
        /**
     *
     * @param message
     */ expectConsoleWarn: (message)=>{
            expect(console.warn).toHaveBeenCalledWith(expect.stringContaining(message));
        },
        /**
     *
     * @param message
     */ expectConsoleError: (message)=>{
            expect(console.error).toHaveBeenCalledWith(expect.stringContaining(message));
        }
    };
}

//# sourceMappingURL=data:application/json;base64,