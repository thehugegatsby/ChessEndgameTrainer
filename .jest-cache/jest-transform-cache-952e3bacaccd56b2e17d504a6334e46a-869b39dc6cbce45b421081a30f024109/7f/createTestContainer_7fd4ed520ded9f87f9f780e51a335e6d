1995b3cb14522391d6da20ffe4b1fea0
/**
 * Test Container Utilities
 * Easy setup for Jest tests with ServiceContainer
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get TestAssertions () {
        return TestAssertions;
    },
    get TestScenarios () {
        return TestScenarios;
    },
    get createMockLocalStorage () {
        return createMockLocalStorage;
    },
    get createTestContainer () {
        return createTestContainer;
    },
    get createTestWrapper () {
        return createTestWrapper;
    },
    get setupTestContainer () {
        return setupTestContainer;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _container = require("../../shared/services/container");
const _MockStorage = require("./MockStorage");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function createTestContainer(overrides) {
    const container = new _container.ServiceContainer();
    // Create mock instances
    const mockStorage = (overrides === null || overrides === void 0 ? void 0 : overrides.localStorage) || new _MockStorage.MockStorage();
    const mockNavigator = (overrides === null || overrides === void 0 ? void 0 : overrides.navigator) || {
        userAgent: "Mozilla/5.0 (Test Environment)",
        onLine: true,
        deviceMemory: 8,
        clipboard: {
            writeText: jest.fn().mockResolvedValue(undefined),
            readText: jest.fn().mockResolvedValue("mocked text")
        },
        share: jest.fn().mockResolvedValue(undefined)
    };
    const mockWindow = (overrides === null || overrides === void 0 ? void 0 : overrides.window) || {
        screen: {
            width: 1920,
            height: 1080
        },
        devicePixelRatio: 1,
        localStorage: mockStorage,
        sessionStorage: (overrides === null || overrides === void 0 ? void 0 : overrides.sessionStorage) || new _MockStorage.MockStorage()
    };
    const mockDocument = (overrides === null || overrides === void 0 ? void 0 : overrides.document) || {
        createElement: jest.fn(),
        body: {
            appendChild: jest.fn(),
            removeChild: jest.fn()
        }
    };
    const mockPerformance = (overrides === null || overrides === void 0 ? void 0 : overrides.performance) || {
        now: jest.fn().mockReturnValue(1000)
    };
    // Build browser APIs object
    const browserAPIs = {
        localStorage: mockStorage,
        sessionStorage: mockWindow.sessionStorage,
        navigator: mockNavigator,
        window: mockWindow,
        document: mockDocument,
        performance: mockPerformance
    };
    // Register browser APIs individually for direct access
    container.registerCustom("browser.localStorage", ()=>browserAPIs.localStorage);
    container.registerCustom("browser.navigator", ()=>browserAPIs.navigator);
    container.registerCustom("browser.window", ()=>browserAPIs.window);
    container.registerCustom("browser.document", ()=>browserAPIs.document);
    container.registerCustom("browser.performance", ()=>browserAPIs.performance);
    // Register the WebPlatformService with injected mock dependencies
    container.registerCustom("platform.service", ()=>{
        const { WebPlatformService } = require("@shared/services/platform/web/WebPlatformService");
        return new WebPlatformService(browserAPIs);
    });
    // Register individual platform services that delegate to the main service
    container.register("platform.storage", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.storage;
    });
    container.register("platform.notifications", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.notifications;
    });
    container.register("platform.device", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.device;
    });
    container.register("platform.performance", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.performance;
    });
    container.register("platform.clipboard", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.clipboard;
    });
    container.register("platform.share", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.share;
    });
    container.register("platform.analytics", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.analytics;
    });
    return container;
}
function setupTestContainer(overrides) {
    let container;
    beforeEach(()=>{
        container = createTestContainer(overrides);
    });
    return ()=>container;
}
function createTestWrapper(overrides) {
    const container = createTestContainer(overrides);
    return function TestWrapper({ children }) {
        // Dynamic import to avoid SSR issues
        const { ServiceProvider } = require("@shared/services/container/adapter");
        return _react.default.createElement(ServiceProvider, {
            container
        }, children);
    };
}
function createMockLocalStorage() {
    const store = {};
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return jest.fn(impl);
        }
        return impl;
    };
    return {
        getItem: mockFn((key)=>store[key] || null),
        setItem: mockFn((key, value)=>{
            store[key] = value;
        }),
        removeItem: mockFn((key)=>{
            delete store[key];
        }),
        clear: mockFn(()=>{
            Object.keys(store).forEach((key)=>delete store[key]);
        }),
        key: mockFn((index)=>{
            const keys = Object.keys(store);
            return keys[index] || null;
        }),
        get length () {
            return Object.keys(store).length;
        }
    };
}
const TestScenarios = {
    /**
   * Default test container - most common use case
   */ default: ()=>createTestContainer(),
    /**
   * localStorage with pre-populated data
   */ withStorageData: (data)=>{
        const mockStorage = createMockLocalStorage();
        Object.entries(data).forEach(([key, value])=>{
            mockStorage.setItem(key, value);
        });
        return createTestContainer({
            localStorage: mockStorage
        });
    },
    /**
   * Offline scenario
   */ offline: ()=>{
        const mockNavigator = {
            onLine: false,
            userAgent: "Mozilla/5.0 (Test Environment - Offline)",
            deviceMemory: 8,
            connection: {
                type: "none",
                effectiveType: undefined,
                downlink: 0
            },
            mozConnection: {
                type: "none",
                effectiveType: undefined,
                downlink: 0
            },
            webkitConnection: {
                type: "none",
                effectiveType: undefined,
                downlink: 0
            },
            clipboard: {
                writeText: jest.fn().mockResolvedValue(undefined),
                readText: jest.fn().mockResolvedValue("mocked text")
            },
            share: jest.fn().mockResolvedValue(undefined)
        };
        return createTestContainer({
            navigator: mockNavigator
        });
    },
    /**
   * Mobile device scenario
   */ mobile: ()=>{
        const mockNavigator = {
            onLine: true,
            userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)"
        };
        const mockWindow = {
            screen: {
                width: 375,
                height: 667
            },
            devicePixelRatio: 2
        };
        return createTestContainer({
            navigator: mockNavigator,
            window: mockWindow
        });
    },
    /**
   * Low memory device scenario
   */ lowMemory: ()=>{
        const mockNavigator = {
            deviceMemory: 2,
            onLine: true,
            userAgent: "Mozilla/5.0 (Test Environment - Low Memory)",
            clipboard: {
                writeText: jest.fn().mockResolvedValue(undefined),
                readText: jest.fn().mockResolvedValue("mocked text")
            },
            share: jest.fn().mockResolvedValue(undefined)
        };
        return createTestContainer({
            navigator: mockNavigator
        });
    }
};
const TestAssertions = {
    /**
   * Assert localStorage operations
   */ expectStorageCall: (storage, method, ...args)=>{
        if (typeof jest !== "undefined") {
            expect(storage[method]).toHaveBeenCalledWith(...args);
        }
    },
    /**
   * Assert storage state
   */ expectStorageState: (storage, expectedData)=>{
        Object.entries(expectedData).forEach(([key, value])=>{
            expect(storage.getItem(key)).toBe(value);
        });
    },
    /**
   * Assert storage is empty
   */ expectStorageEmpty: (storage)=>{
        expect(storage.length).toBe(0);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RoZWh1L2Nvb2xQcm9qZWN0cy9FbmRnYW1lVHJhaW5lci1maXJlYmFzZS10ZXN0aW5nL3NyYy90ZXN0cy91dGlscy9jcmVhdGVUZXN0Q29udGFpbmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdCBDb250YWluZXIgVXRpbGl0aWVzXG4gKiBFYXN5IHNldHVwIGZvciBKZXN0IHRlc3RzIHdpdGggU2VydmljZUNvbnRhaW5lclxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7XG4gIFNlcnZpY2VDb250YWluZXIsXG4gIElTZXJ2aWNlQ29udGFpbmVyLFxufSBmcm9tIFwiQHNoYXJlZC9zZXJ2aWNlcy9jb250YWluZXJcIjtcbmltcG9ydCB7IEJyb3dzZXJBUElzIH0gZnJvbSBcIkBzaGFyZWQvc2VydmljZXMvcGxhdGZvcm0vd2ViL1dlYlBsYXRmb3JtU2VydmljZVwiO1xuaW1wb3J0IHsgTW9ja1N0b3JhZ2UgfSBmcm9tIFwiLi9Nb2NrU3RvcmFnZVwiO1xuXG4vKipcbiAqIFNlcnZpY2Ugb3ZlcnJpZGVzIGZvciBzcGVjaWZpYyB0ZXN0c1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RTZXJ2aWNlT3ZlcnJpZGVzIHtcbiAgbG9jYWxTdG9yYWdlPzogU3RvcmFnZTtcbiAgc2Vzc2lvblN0b3JhZ2U/OiBTdG9yYWdlO1xuICBuYXZpZ2F0b3I/OiBOYXZpZ2F0b3I7XG4gIHdpbmRvdz86IFdpbmRvdztcbiAgZG9jdW1lbnQ/OiBEb2N1bWVudDtcbiAgcGVyZm9ybWFuY2U/OiBQZXJmb3JtYW5jZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSB0ZXN0IGNvbnRhaW5lciB3aXRoIG9wdGlvbmFsIG92ZXJyaWRlc1xuICogTWFpbiBlbnRyeSBwb2ludCBmb3IgSmVzdCB0ZXN0cyAtIHJlcGxhY2VzIGdsb2JhbCBsb2NhbFN0b3JhZ2UgbW9ja3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRlc3RDb250YWluZXIoXG4gIG92ZXJyaWRlcz86IFRlc3RTZXJ2aWNlT3ZlcnJpZGVzLFxuKTogSVNlcnZpY2VDb250YWluZXIge1xuICBjb25zdCBjb250YWluZXIgPSBuZXcgU2VydmljZUNvbnRhaW5lcigpO1xuXG4gIC8vIENyZWF0ZSBtb2NrIGluc3RhbmNlc1xuICBjb25zdCBtb2NrU3RvcmFnZSA9IG92ZXJyaWRlcz8ubG9jYWxTdG9yYWdlIHx8IG5ldyBNb2NrU3RvcmFnZSgpO1xuICBjb25zdCBtb2NrTmF2aWdhdG9yID1cbiAgICBvdmVycmlkZXM/Lm5hdmlnYXRvciB8fFxuICAgICh7XG4gICAgICB1c2VyQWdlbnQ6IFwiTW96aWxsYS81LjAgKFRlc3QgRW52aXJvbm1lbnQpXCIsXG4gICAgICBvbkxpbmU6IHRydWUsXG4gICAgICBkZXZpY2VNZW1vcnk6IDgsXG4gICAgICBjbGlwYm9hcmQ6IHtcbiAgICAgICAgd3JpdGVUZXh0OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgICAgICAgcmVhZFRleHQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShcIm1vY2tlZCB0ZXh0XCIpLFxuICAgICAgfSxcbiAgICAgIHNoYXJlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgICB9IGFzIGFueSk7XG5cbiAgY29uc3QgbW9ja1dpbmRvdyA9XG4gICAgb3ZlcnJpZGVzPy53aW5kb3cgfHxcbiAgICAoe1xuICAgICAgc2NyZWVuOiB7IHdpZHRoOiAxOTIwLCBoZWlnaHQ6IDEwODAgfSxcbiAgICAgIGRldmljZVBpeGVsUmF0aW86IDEsXG4gICAgICBsb2NhbFN0b3JhZ2U6IG1vY2tTdG9yYWdlLFxuICAgICAgc2Vzc2lvblN0b3JhZ2U6IG92ZXJyaWRlcz8uc2Vzc2lvblN0b3JhZ2UgfHwgbmV3IE1vY2tTdG9yYWdlKCksXG4gICAgfSBhcyBhbnkpO1xuXG4gIGNvbnN0IG1vY2tEb2N1bWVudCA9XG4gICAgb3ZlcnJpZGVzPy5kb2N1bWVudCB8fFxuICAgICh7XG4gICAgICBjcmVhdGVFbGVtZW50OiBqZXN0LmZuKCksXG4gICAgICBib2R5OiB7IGFwcGVuZENoaWxkOiBqZXN0LmZuKCksIHJlbW92ZUNoaWxkOiBqZXN0LmZuKCkgfSxcbiAgICB9IGFzIGFueSk7XG5cbiAgY29uc3QgbW9ja1BlcmZvcm1hbmNlID1cbiAgICBvdmVycmlkZXM/LnBlcmZvcm1hbmNlIHx8XG4gICAgKHtcbiAgICAgIG5vdzogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgxMDAwKSxcbiAgICB9IGFzIGFueSk7XG5cbiAgLy8gQnVpbGQgYnJvd3NlciBBUElzIG9iamVjdFxuICBjb25zdCBicm93c2VyQVBJczogQnJvd3NlckFQSXMgPSB7XG4gICAgbG9jYWxTdG9yYWdlOiBtb2NrU3RvcmFnZSxcbiAgICBzZXNzaW9uU3RvcmFnZTogbW9ja1dpbmRvdy5zZXNzaW9uU3RvcmFnZSxcbiAgICBuYXZpZ2F0b3I6IG1vY2tOYXZpZ2F0b3IsXG4gICAgd2luZG93OiBtb2NrV2luZG93LFxuICAgIGRvY3VtZW50OiBtb2NrRG9jdW1lbnQsXG4gICAgcGVyZm9ybWFuY2U6IG1vY2tQZXJmb3JtYW5jZSxcbiAgfTtcblxuICAvLyBSZWdpc3RlciBicm93c2VyIEFQSXMgaW5kaXZpZHVhbGx5IGZvciBkaXJlY3QgYWNjZXNzXG4gIGNvbnRhaW5lci5yZWdpc3RlckN1c3RvbShcbiAgICBcImJyb3dzZXIubG9jYWxTdG9yYWdlXCIsXG4gICAgKCkgPT4gYnJvd3NlckFQSXMubG9jYWxTdG9yYWdlLFxuICApO1xuICBjb250YWluZXIucmVnaXN0ZXJDdXN0b20oXCJicm93c2VyLm5hdmlnYXRvclwiLCAoKSA9PiBicm93c2VyQVBJcy5uYXZpZ2F0b3IpO1xuICBjb250YWluZXIucmVnaXN0ZXJDdXN0b20oXCJicm93c2VyLndpbmRvd1wiLCAoKSA9PiBicm93c2VyQVBJcy53aW5kb3chKTtcbiAgY29udGFpbmVyLnJlZ2lzdGVyQ3VzdG9tKFwiYnJvd3Nlci5kb2N1bWVudFwiLCAoKSA9PiBicm93c2VyQVBJcy5kb2N1bWVudCEpO1xuICBjb250YWluZXIucmVnaXN0ZXJDdXN0b20oXG4gICAgXCJicm93c2VyLnBlcmZvcm1hbmNlXCIsXG4gICAgKCkgPT4gYnJvd3NlckFQSXMucGVyZm9ybWFuY2UhLFxuICApO1xuXG4gIC8vIFJlZ2lzdGVyIHRoZSBXZWJQbGF0Zm9ybVNlcnZpY2Ugd2l0aCBpbmplY3RlZCBtb2NrIGRlcGVuZGVuY2llc1xuICBjb250YWluZXIucmVnaXN0ZXJDdXN0b20oXCJwbGF0Zm9ybS5zZXJ2aWNlXCIsICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBXZWJQbGF0Zm9ybVNlcnZpY2UsXG4gICAgfSA9IHJlcXVpcmUoXCJAc2hhcmVkL3NlcnZpY2VzL3BsYXRmb3JtL3dlYi9XZWJQbGF0Zm9ybVNlcnZpY2VcIik7XG4gICAgcmV0dXJuIG5ldyBXZWJQbGF0Zm9ybVNlcnZpY2UoYnJvd3NlckFQSXMpO1xuICB9KTtcblxuICAvLyBSZWdpc3RlciBpbmRpdmlkdWFsIHBsYXRmb3JtIHNlcnZpY2VzIHRoYXQgZGVsZWdhdGUgdG8gdGhlIG1haW4gc2VydmljZVxuICBjb250YWluZXIucmVnaXN0ZXIoXCJwbGF0Zm9ybS5zdG9yYWdlXCIsIChjKSA9PiB7XG4gICAgY29uc3QgcGxhdGZvcm1TZXJ2aWNlID0gYy5yZXNvbHZlQ3VzdG9tKFwicGxhdGZvcm0uc2VydmljZVwiKSBhcyBhbnk7XG4gICAgcmV0dXJuIHBsYXRmb3JtU2VydmljZS5zdG9yYWdlO1xuICB9KTtcblxuICBjb250YWluZXIucmVnaXN0ZXIoXCJwbGF0Zm9ybS5ub3RpZmljYXRpb25zXCIsIChjKSA9PiB7XG4gICAgY29uc3QgcGxhdGZvcm1TZXJ2aWNlID0gYy5yZXNvbHZlQ3VzdG9tKFwicGxhdGZvcm0uc2VydmljZVwiKSBhcyBhbnk7XG4gICAgcmV0dXJuIHBsYXRmb3JtU2VydmljZS5ub3RpZmljYXRpb25zO1xuICB9KTtcblxuICBjb250YWluZXIucmVnaXN0ZXIoXCJwbGF0Zm9ybS5kZXZpY2VcIiwgKGMpID0+IHtcbiAgICBjb25zdCBwbGF0Zm9ybVNlcnZpY2UgPSBjLnJlc29sdmVDdXN0b20oXCJwbGF0Zm9ybS5zZXJ2aWNlXCIpIGFzIGFueTtcbiAgICByZXR1cm4gcGxhdGZvcm1TZXJ2aWNlLmRldmljZTtcbiAgfSk7XG5cbiAgY29udGFpbmVyLnJlZ2lzdGVyKFwicGxhdGZvcm0ucGVyZm9ybWFuY2VcIiwgKGMpID0+IHtcbiAgICBjb25zdCBwbGF0Zm9ybVNlcnZpY2UgPSBjLnJlc29sdmVDdXN0b20oXCJwbGF0Zm9ybS5zZXJ2aWNlXCIpIGFzIGFueTtcbiAgICByZXR1cm4gcGxhdGZvcm1TZXJ2aWNlLnBlcmZvcm1hbmNlO1xuICB9KTtcblxuICBjb250YWluZXIucmVnaXN0ZXIoXCJwbGF0Zm9ybS5jbGlwYm9hcmRcIiwgKGMpID0+IHtcbiAgICBjb25zdCBwbGF0Zm9ybVNlcnZpY2UgPSBjLnJlc29sdmVDdXN0b20oXCJwbGF0Zm9ybS5zZXJ2aWNlXCIpIGFzIGFueTtcbiAgICByZXR1cm4gcGxhdGZvcm1TZXJ2aWNlLmNsaXBib2FyZDtcbiAgfSk7XG5cbiAgY29udGFpbmVyLnJlZ2lzdGVyKFwicGxhdGZvcm0uc2hhcmVcIiwgKGMpID0+IHtcbiAgICBjb25zdCBwbGF0Zm9ybVNlcnZpY2UgPSBjLnJlc29sdmVDdXN0b20oXCJwbGF0Zm9ybS5zZXJ2aWNlXCIpIGFzIGFueTtcbiAgICByZXR1cm4gcGxhdGZvcm1TZXJ2aWNlLnNoYXJlO1xuICB9KTtcblxuICBjb250YWluZXIucmVnaXN0ZXIoXCJwbGF0Zm9ybS5hbmFseXRpY3NcIiwgKGMpID0+IHtcbiAgICBjb25zdCBwbGF0Zm9ybVNlcnZpY2UgPSBjLnJlc29sdmVDdXN0b20oXCJwbGF0Zm9ybS5zZXJ2aWNlXCIpIGFzIGFueTtcbiAgICByZXR1cm4gcGxhdGZvcm1TZXJ2aWNlLmFuYWx5dGljcztcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cblxuLyoqXG4gKiBTZXR1cCBmdW5jdGlvbiBmb3IgYmVmb3JlRWFjaCBob29rc1xuICogRW5zdXJlcyBjbGVhbiBjb250YWluZXIgcGVyIHRlc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwVGVzdENvbnRhaW5lcihcbiAgb3ZlcnJpZGVzPzogVGVzdFNlcnZpY2VPdmVycmlkZXMsXG4pOiAoKSA9PiBJU2VydmljZUNvbnRhaW5lciB7XG4gIGxldCBjb250YWluZXI6IElTZXJ2aWNlQ29udGFpbmVyO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGNvbnRhaW5lciA9IGNyZWF0ZVRlc3RDb250YWluZXIob3ZlcnJpZGVzKTtcbiAgfSk7XG5cbiAgcmV0dXJuICgpID0+IGNvbnRhaW5lcjtcbn1cblxuLyoqXG4gKiBSZWFjdCBUZXN0aW5nIExpYnJhcnkgaGVscGVyXG4gKiBQcm92aWRlcyBTZXJ2aWNlQ29udGFpbmVyIGNvbnRleHQgZm9yIGNvbXBvbmVudCB0ZXN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGVzdFdyYXBwZXIob3ZlcnJpZGVzPzogVGVzdFNlcnZpY2VPdmVycmlkZXMpIHtcbiAgY29uc3QgY29udGFpbmVyID0gY3JlYXRlVGVzdENvbnRhaW5lcihvdmVycmlkZXMpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBUZXN0V3JhcHBlcih7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XG4gICAgLy8gRHluYW1pYyBpbXBvcnQgdG8gYXZvaWQgU1NSIGlzc3Vlc1xuICAgIGNvbnN0IHsgU2VydmljZVByb3ZpZGVyIH0gPSByZXF1aXJlKFwiQHNoYXJlZC9zZXJ2aWNlcy9jb250YWluZXIvYWRhcHRlclwiKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTZXJ2aWNlUHJvdmlkZXIsIHsgY29udGFpbmVyIH0sIGNoaWxkcmVuKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBNb2NrIGxvY2FsU3RvcmFnZSB0aGF0IHdvcmtzIHdpdGggb3Igd2l0aG91dCBKZXN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrTG9jYWxTdG9yYWdlKCk6IFN0b3JhZ2Uge1xuICBjb25zdCBzdG9yZTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuXG4gIGNvbnN0IG1vY2tGbiA9IChpbXBsOiAoLi4uYXJnczogYW55W10pID0+IGFueSkgPT4ge1xuICAgIGlmICh0eXBlb2YgamVzdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqZXN0LmZuKSB7XG4gICAgICByZXR1cm4gamVzdC5mbihpbXBsKTtcbiAgICB9XG4gICAgcmV0dXJuIGltcGw7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRJdGVtOiBtb2NrRm4oKGtleTogc3RyaW5nKSA9PiBzdG9yZVtrZXldIHx8IG51bGwpLFxuICAgIHNldEl0ZW06IG1vY2tGbigoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIHN0b3JlW2tleV0gPSB2YWx1ZTtcbiAgICB9KSxcbiAgICByZW1vdmVJdGVtOiBtb2NrRm4oKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBkZWxldGUgc3RvcmVba2V5XTtcbiAgICB9KSxcbiAgICBjbGVhcjogbW9ja0ZuKCgpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKHN0b3JlKS5mb3JFYWNoKChrZXkpID0+IGRlbGV0ZSBzdG9yZVtrZXldKTtcbiAgICB9KSxcbiAgICBrZXk6IG1vY2tGbigoaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHN0b3JlKTtcbiAgICAgIHJldHVybiBrZXlzW2luZGV4XSB8fCBudWxsO1xuICAgIH0pLFxuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoc3RvcmUpLmxlbmd0aDtcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIFByZS1jb25maWd1cmVkIHRlc3Qgc2NlbmFyaW9zIGZvciBjb21tb24gdXNlIGNhc2VzXG4gKi9cbmV4cG9ydCBjb25zdCBUZXN0U2NlbmFyaW9zID0ge1xuICAvKipcbiAgICogRGVmYXVsdCB0ZXN0IGNvbnRhaW5lciAtIG1vc3QgY29tbW9uIHVzZSBjYXNlXG4gICAqL1xuICBkZWZhdWx0OiAoKSA9PiBjcmVhdGVUZXN0Q29udGFpbmVyKCksXG5cbiAgLyoqXG4gICAqIGxvY2FsU3RvcmFnZSB3aXRoIHByZS1wb3B1bGF0ZWQgZGF0YVxuICAgKi9cbiAgd2l0aFN0b3JhZ2VEYXRhOiAoZGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPikgPT4ge1xuICAgIGNvbnN0IG1vY2tTdG9yYWdlID0gY3JlYXRlTW9ja0xvY2FsU3RvcmFnZSgpO1xuICAgIE9iamVjdC5lbnRyaWVzKGRhdGEpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgbW9ja1N0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjcmVhdGVUZXN0Q29udGFpbmVyKHsgbG9jYWxTdG9yYWdlOiBtb2NrU3RvcmFnZSB9KTtcbiAgfSxcblxuICAvKipcbiAgICogT2ZmbGluZSBzY2VuYXJpb1xuICAgKi9cbiAgb2ZmbGluZTogKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tOYXZpZ2F0b3IgPSB7XG4gICAgICBvbkxpbmU6IGZhbHNlLFxuICAgICAgdXNlckFnZW50OiBcIk1vemlsbGEvNS4wIChUZXN0IEVudmlyb25tZW50IC0gT2ZmbGluZSlcIixcbiAgICAgIGRldmljZU1lbW9yeTogOCxcbiAgICAgIGNvbm5lY3Rpb246IHsgdHlwZTogXCJub25lXCIsIGVmZmVjdGl2ZVR5cGU6IHVuZGVmaW5lZCwgZG93bmxpbms6IDAgfSxcbiAgICAgIG1vekNvbm5lY3Rpb246IHsgdHlwZTogXCJub25lXCIsIGVmZmVjdGl2ZVR5cGU6IHVuZGVmaW5lZCwgZG93bmxpbms6IDAgfSxcbiAgICAgIHdlYmtpdENvbm5lY3Rpb246IHsgdHlwZTogXCJub25lXCIsIGVmZmVjdGl2ZVR5cGU6IHVuZGVmaW5lZCwgZG93bmxpbms6IDAgfSxcbiAgICAgIGNsaXBib2FyZDoge1xuICAgICAgICB3cml0ZVRleHQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxuICAgICAgICByZWFkVGV4dDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFwibW9ja2VkIHRleHRcIiksXG4gICAgICB9LFxuICAgICAgc2hhcmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxuICAgIH0gYXMgYW55O1xuXG4gICAgcmV0dXJuIGNyZWF0ZVRlc3RDb250YWluZXIoeyBuYXZpZ2F0b3I6IG1vY2tOYXZpZ2F0b3IgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vYmlsZSBkZXZpY2Ugc2NlbmFyaW9cbiAgICovXG4gIG1vYmlsZTogKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tOYXZpZ2F0b3IgPSB7XG4gICAgICBvbkxpbmU6IHRydWUsXG4gICAgICB1c2VyQWdlbnQ6IFwiTW96aWxsYS81LjAgKGlQaG9uZTsgQ1BVIGlQaG9uZSBPUyAxNF83XzEgbGlrZSBNYWMgT1MgWClcIixcbiAgICB9IGFzIE5hdmlnYXRvcjtcblxuICAgIGNvbnN0IG1vY2tXaW5kb3cgPSB7XG4gICAgICBzY3JlZW46IHsgd2lkdGg6IDM3NSwgaGVpZ2h0OiA2NjcgfSxcbiAgICAgIGRldmljZVBpeGVsUmF0aW86IDIsXG4gICAgfSBhcyBXaW5kb3c7XG5cbiAgICByZXR1cm4gY3JlYXRlVGVzdENvbnRhaW5lcih7XG4gICAgICBuYXZpZ2F0b3I6IG1vY2tOYXZpZ2F0b3IsXG4gICAgICB3aW5kb3c6IG1vY2tXaW5kb3csXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExvdyBtZW1vcnkgZGV2aWNlIHNjZW5hcmlvXG4gICAqL1xuICBsb3dNZW1vcnk6ICgpID0+IHtcbiAgICBjb25zdCBtb2NrTmF2aWdhdG9yID0ge1xuICAgICAgZGV2aWNlTWVtb3J5OiAyLCAvLyAyR0JcbiAgICAgIG9uTGluZTogdHJ1ZSxcbiAgICAgIHVzZXJBZ2VudDogXCJNb3ppbGxhLzUuMCAoVGVzdCBFbnZpcm9ubWVudCAtIExvdyBNZW1vcnkpXCIsXG4gICAgICBjbGlwYm9hcmQ6IHtcbiAgICAgICAgd3JpdGVUZXh0OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgICAgICAgcmVhZFRleHQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShcIm1vY2tlZCB0ZXh0XCIpLFxuICAgICAgfSxcbiAgICAgIHNoYXJlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgICB9IGFzIGFueTtcblxuICAgIHJldHVybiBjcmVhdGVUZXN0Q29udGFpbmVyKHsgbmF2aWdhdG9yOiBtb2NrTmF2aWdhdG9yIH0pO1xuICB9LFxufTtcblxuLyoqXG4gKiBBc3NlcnRpb24gaGVscGVycyBmb3IgY29tbW9uIHRlc3QgcGF0dGVybnNcbiAqL1xuZXhwb3J0IGNvbnN0IFRlc3RBc3NlcnRpb25zID0ge1xuICAvKipcbiAgICogQXNzZXJ0IGxvY2FsU3RvcmFnZSBvcGVyYXRpb25zXG4gICAqL1xuICBleHBlY3RTdG9yYWdlQ2FsbDogKFxuICAgIHN0b3JhZ2U6IFN0b3JhZ2UsXG4gICAgbWV0aG9kOiBrZXlvZiBTdG9yYWdlLFxuICAgIC4uLmFyZ3M6IGFueVtdXG4gICkgPT4ge1xuICAgIGlmICh0eXBlb2YgamVzdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZXhwZWN0KHN0b3JhZ2VbbWV0aG9kXSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoLi4uYXJncyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBc3NlcnQgc3RvcmFnZSBzdGF0ZVxuICAgKi9cbiAgZXhwZWN0U3RvcmFnZVN0YXRlOiAoXG4gICAgc3RvcmFnZTogU3RvcmFnZSxcbiAgICBleHBlY3RlZERhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXG4gICkgPT4ge1xuICAgIE9iamVjdC5lbnRyaWVzKGV4cGVjdGVkRGF0YSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBleHBlY3Qoc3RvcmFnZS5nZXRJdGVtKGtleSkpLnRvQmUodmFsdWUpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBc3NlcnQgc3RvcmFnZSBpcyBlbXB0eVxuICAgKi9cbiAgZXhwZWN0U3RvcmFnZUVtcHR5OiAoc3RvcmFnZTogU3RvcmFnZSkgPT4ge1xuICAgIGV4cGVjdChzdG9yYWdlLmxlbmd0aCkudG9CZSgwKTtcbiAgfSxcbn07XG4iXSwibmFtZXMiOlsiVGVzdEFzc2VydGlvbnMiLCJUZXN0U2NlbmFyaW9zIiwiY3JlYXRlTW9ja0xvY2FsU3RvcmFnZSIsImNyZWF0ZVRlc3RDb250YWluZXIiLCJjcmVhdGVUZXN0V3JhcHBlciIsInNldHVwVGVzdENvbnRhaW5lciIsIm92ZXJyaWRlcyIsImNvbnRhaW5lciIsIlNlcnZpY2VDb250YWluZXIiLCJtb2NrU3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsIk1vY2tTdG9yYWdlIiwibW9ja05hdmlnYXRvciIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm9uTGluZSIsImRldmljZU1lbW9yeSIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwidW5kZWZpbmVkIiwicmVhZFRleHQiLCJzaGFyZSIsIm1vY2tXaW5kb3ciLCJ3aW5kb3ciLCJzY3JlZW4iLCJ3aWR0aCIsImhlaWdodCIsImRldmljZVBpeGVsUmF0aW8iLCJzZXNzaW9uU3RvcmFnZSIsIm1vY2tEb2N1bWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwibW9ja1BlcmZvcm1hbmNlIiwicGVyZm9ybWFuY2UiLCJub3ciLCJtb2NrUmV0dXJuVmFsdWUiLCJicm93c2VyQVBJcyIsInJlZ2lzdGVyQ3VzdG9tIiwiV2ViUGxhdGZvcm1TZXJ2aWNlIiwicmVxdWlyZSIsInJlZ2lzdGVyIiwiYyIsInBsYXRmb3JtU2VydmljZSIsInJlc29sdmVDdXN0b20iLCJzdG9yYWdlIiwibm90aWZpY2F0aW9ucyIsImRldmljZSIsImFuYWx5dGljcyIsImJlZm9yZUVhY2giLCJUZXN0V3JhcHBlciIsImNoaWxkcmVuIiwiU2VydmljZVByb3ZpZGVyIiwiUmVhY3QiLCJzdG9yZSIsIm1vY2tGbiIsImltcGwiLCJnZXRJdGVtIiwia2V5Iiwic2V0SXRlbSIsInZhbHVlIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJpbmRleCIsImxlbmd0aCIsImRlZmF1bHQiLCJ3aXRoU3RvcmFnZURhdGEiLCJkYXRhIiwiZW50cmllcyIsIm9mZmxpbmUiLCJjb25uZWN0aW9uIiwidHlwZSIsImVmZmVjdGl2ZVR5cGUiLCJkb3dubGluayIsIm1vekNvbm5lY3Rpb24iLCJ3ZWJraXRDb25uZWN0aW9uIiwibW9iaWxlIiwibG93TWVtb3J5IiwiZXhwZWN0U3RvcmFnZUNhbGwiLCJtZXRob2QiLCJhcmdzIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJleHBlY3RTdG9yYWdlU3RhdGUiLCJleHBlY3RlZERhdGEiLCJ0b0JlIiwiZXhwZWN0U3RvcmFnZUVtcHR5Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0M7Ozs7Ozs7Ozs7O1FBOFJZQTtlQUFBQTs7UUFqRkFDO2VBQUFBOztRQWxDR0M7ZUFBQUE7O1FBakpBQztlQUFBQTs7UUFvSUFDO2VBQUFBOztRQWhCQUM7ZUFBQUE7Ozs4REE1SUU7MkJBSVg7NkJBRXFCOzs7Ozs7QUFrQnJCLFNBQVNGLG9CQUNkRyxTQUFnQztJQUVoQyxNQUFNQyxZQUFZLElBQUlDLDJCQUFnQjtJQUV0Qyx3QkFBd0I7SUFDeEIsTUFBTUMsY0FBY0gsQ0FBQUEsc0JBQUFBLGdDQUFBQSxVQUFXSSxZQUFZLEtBQUksSUFBSUMsd0JBQVc7SUFDOUQsTUFBTUMsZ0JBQ0pOLENBQUFBLHNCQUFBQSxnQ0FBQUEsVUFBV08sU0FBUyxLQUNuQjtR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