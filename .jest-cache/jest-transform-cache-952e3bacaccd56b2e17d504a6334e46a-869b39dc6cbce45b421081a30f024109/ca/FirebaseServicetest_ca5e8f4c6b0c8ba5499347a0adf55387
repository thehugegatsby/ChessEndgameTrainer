66891da93218668e3c2c3ec9a26c04b5
/**
 * @file Firebase Service Integration Tests
 * @description Comprehensive Firebase integration tests with emulator
 * 
 * Tests for Issue #83: Firebase service integration test infrastructure
 * Covers User Progress CRUD, Authentication, Real-time updates, and concurrency
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _firestore = require("firebase/firestore");
const _firebasetesthelpers = require("../../utils/firebase-test-helpers");
const _firebaseemulatorapi = require("../../utils/firebase-emulator-api");
// Increase timeout for integration tests
jest.setTimeout(30000);
describe('Firebase Service Integration', ()=>{
    let testInstance;
    let testUserId;
    let realtimeHelper;
    beforeAll(async ()=>{
        // Ensure emulator is running
        const emulatorReady = await (0, _firebaseemulatorapi.isEmulatorRunning)();
        if (!emulatorReady) {
            console.log('Waiting for Firebase emulator to start...');
            await (0, _firebaseemulatorapi.waitForEmulator)();
        }
        // Clear all data before starting tests
        await (0, _firebasetesthelpers.clearFirestoreData)();
    });
    beforeEach(async ()=>{
        // Create isolated Firebase instance for each test
        testInstance = await (0, _firebasetesthelpers.initializeTestFirebase)();
        realtimeHelper = new _firebasetesthelpers.RealtimeTestHelper();
        // Create authenticated test user
        const userCredential = await (0, _firebasetesthelpers.createTestUser)(testInstance.auth);
        testUserId = userCredential.user.uid;
    });
    afterEach(async ()=>{
        // Cleanup real-time listeners
        realtimeHelper.cleanup();
        // Clear user data
        if (testUserId) {
            await (0, _firebasetesthelpers.clearUserProgressData)(testInstance.db, testUserId);
        }
    });
    afterAll(async ()=>{
        // Cleanup all test Firebase instances
        await (0, _firebasetesthelpers.cleanupAllTestFirebase)();
    });
    describe('Firestore CRUD Operations', ()=>{
        describe('UserStats Operations', ()=>{
            it('creates user progress document with authentication', async ()=>{
                var _docSnap_data, _docSnap_data1;
                const userStats = {
                    ..._firebasetesthelpers.TEST_USER_STATS,
                    userId: testUserId
                };
                const docRef = (0, _firestore.doc)(testInstance.db, `users/${testUserId}/userProgress/stats`);
                await (0, _firestore.setDoc)(docRef, {
                    ...userStats,
                    lastActive: (0, _firestore.serverTimestamp)()
                });
                const docSnap = await (0, _firestore.getDoc)(docRef);
                expect(docSnap.exists()).toBe(true);
                expect((_docSnap_data = docSnap.data()) === null || _docSnap_data === void 0 ? void 0 : _docSnap_data.userId).toBe(testUserId);
                expect((_docSnap_data1 = docSnap.data()) === null || _docSnap_data1 === void 0 ? void 0 : _docSnap_data1.totalPositionsCompleted).toBe(25);
            });
            it('reads user progress document', async ()=>{
                var _docSnap_data, _docSnap_data1;
                await (0, _firebasetesthelpers.seedUserProgress)(testInstance.db, testUserId);
                const docRef = (0, _firestore.doc)(testInstance.db, `users/${testUserId}/userProgress/stats`);
                const docSnap = await (0, _firestore.getDoc)(docRef);
                expect(docSnap.exists()).toBe(true);
                expect((_docSnap_data = docSnap.data()) === null || _docSnap_data === void 0 ? void 0 : _docSnap_data.totalPositionsCompleted).toBe(25);
                expect((_docSnap_data1 = docSnap.data()) === null || _docSnap_data1 === void 0 ? void 0 : _docSnap_data1.overallSuccessRate).toBe(0.85);
            });
            it('updates user progress document', async ()=>{
                var _docSnap_data, _docSnap_data1;
                await (0, _firebasetesthelpers.seedUserProgress)(testInstance.db, testUserId);
                const docRef = (0, _firestore.doc)(testInstance.db, `users/${testUserId}/userProgress/stats`);
                await (0, _firestore.updateDoc)(docRef, {
                    totalPositionsCompleted: 30,
                    overallSuccessRate: 0.90,
                    lastActive: (0, _firestore.serverTimestamp)()
                });
                const docSnap = await (0, _firestore.getDoc)(docRef);
                expect((_docSnap_data = docSnap.data()) === null || _docSnap_data === void 0 ? void 0 : _docSnap_data.totalPositionsCompleted).toBe(30);
                expect((_docSnap_data1 = docSnap.data()) === null || _docSnap_data1 === void 0 ? void 0 : _docSnap_data1.overallSuccessRate).toBe(0.90);
            });
            it('deletes user progress document', async ()=>{
                await (0, _firebasetesthelpers.seedUserProgress)(testInstance.db, testUserId);
                const docRef = (0, _firestore.doc)(testInstance.db, `users/${testUserId}/userProgress/stats`);
                await (0, _firestore.deleteDoc)(docRef);
                const docSnap = await (0, _firestore.getDoc)(docRef);
                expect(docSnap.exists()).toBe(false);
            });
        });
        describe('CardProgress Operations', ()=>{
            it('creates multiple card progress documents', async ()=>{
                const batch = (0, _firestore.writeBatch)(testInstance.db);
                _firebasetesthelpers.TEST_CARD_PROGRESS.forEach((card)=>{
                    const docRef = (0, _firestore.doc)(testInstance.db, `users/${testUserId}/userProgress/${card.id}`);
                    batch.set(docRef, {
                        ...card,
                        lastUpdated: (0, _firestore.serverTimestamp)()
                    });
                });
                await batch.commit();
                // Verify all cards were created
                const progressCollection = (0, _firestore.collection)(testInstance.db, `users/${testUserId}/userProgress`);
                const snapshot = await (0, _firestore.getDocs)(progressCollection);
                // Filter out stats document, count only card documents
                const cardDocs = snapshot.docs.filter((d)=>d.id !== 'stats');
                expect(cardDocs.length).toBe(_firebasetesthelpers.TEST_CARD_PROGRESS.length);
            });
            it('queries due cards using where clause', async ()=>{
                await (0, _firebasetesthelpers.seedUserProgress)(testInstance.db, testUserId, undefined, _firebasetesthelpers.TEST_CARD_PROGRESS);
                const now = Date.now();
                const progressCollection = (0, _firestore.collection)(testInstance.db, `users/${testUserId}/userProgress`);
                // Query for due cards (nextReviewAt <= now)
                const dueCardsQuery = (0, _firestore.query)(progressCollection, (0, _firestore.where)('nextReviewAt', '<=', now));
                const snapshot = await (0, _firestore.getDocs)(dueCardsQuery);
                // Should find pos-2 which is overdue
                expect(snapshot.size).toBeGreaterThan(0);
                const dueCard = snapshot.docs.find((d)=>d.id === 'pos-2');
                expect(dueCard).toBeDefined();
            });
        });
    });
    describe('Real-time Updates', ()=>{
        it('receives real-time updates through onSnapshot for UserStats', (done)=>{
            const docRef = (0, _firestore.doc)(testInstance.db, `users/${testUserId}/userProgress/stats`);
            let updateCount = 0;
            const unsubscribe = (0, _firestore.onSnapshot)(docRef, (snapshot)=>{
                updateCount++;
                if (updateCount === 1) {
                    // Initial empty snapshot
                    expect(snapshot.exists()).toBe(false);
                    // Trigger first write
                    (0, _firestore.setDoc)(docRef, {
                        ..._firebasetesthelpers.TEST_USER_STATS,
                        userId: testUserId,
                        totalPositionsCompleted: 10
                    });
                } else if (updateCount === 2) {
                    var _snapshot_data;
                    // After first write
                    expect(snapshot.exists()).toBe(true);
                    expect((_snapshot_data = snapshot.data()) === null || _snapshot_data === void 0 ? void 0 : _snapshot_data.totalPositionsCompleted).toBe(10);
                    // Trigger update
                    (0, _firestore.updateDoc)(docRef, {
                        totalPositionsCompleted: 15
                    });
                } else if (updateCount === 3) {
                    var _snapshot_data1;
                    // After update
                    expect((_snapshot_data1 = snapshot.data()) === null || _snapshot_data1 === void 0 ? void 0 : _snapshot_data1.totalPositionsCompleted).toBe(15);
                    unsubscribe();
                    done();
                }
            });
            realtimeHelper.registerListener(unsubscribe);
        });
        it('receives real-time updates for CardProgress collection', (done)=>{
            const progressCollection = (0, _firestore.collection)(testInstance.db, `users/${testUserId}/userProgress`);
            let snapshotCount = 0;
            const unsubscribe = (0, _firestore.onSnapshot)(progressCollection, (snapshot)=>{
                snapshotCount++;
                if (snapshotCount === 1) {
                    // Initial empty collection
                    expect(snapshot.empty).toBe(true);
                    // Add first card
                    const card1Ref = (0, _firestore.doc)(progressCollection, 'card-1');
                    (0, _firestore.setDoc)(card1Ref, {
                        id: 'card-1',
                        nextReviewAt: Date.now() + 86400000,
                        lastReviewedAt: Date.now(),
                        interval: 1,
                        repetition: 1,
                        efactor: 2.5,
                        quality: 4
                    });
                } else if (snapshotCount === 2) {
                    // After first card added
                    expect(snapshot.size).toBe(1);
                    // Add second card
                    const card2Ref = (0, _firestore.doc)(progressCollection, 'card-2');
                    (0, _firestore.setDoc)(card2Ref, {
                        id: 'card-2',
                        nextReviewAt: Date.now() + 172800000,
                        lastReviewedAt: Date.now(),
                        interval: 2,
                        repetition: 2,
                        efactor: 2.4,
                        quality: 3
                    });
                } else if (snapshotCount === 3) {
                    // After second card added
                    expect(snapshot.size).toBe(2);
                    unsubscribe();
                    done();
                }
            });
            realtimeHelper.registerListener(unsubscribe);
        });
    });
    describe('Authentication & Security', ()=>{
        it('allows user to access only their own progress data', async ()=>{
            // Create first user with progress
            const { userId: userId1 } = await (0, _firebasetesthelpers.createTestUserWithProgress)(testInstance, 'user1@test.com');
            // Create second user  
            const userCredential2 = await (0, _firebasetesthelpers.createTestUser)(testInstance.auth, 'user2@test.com');
            const userId2 = userCredential2.user.uid;
            // Try to read user1's data as user2 (should fail in production with security rules)
            // Note: Emulator may not enforce security rules by default
            const user1DocRef = (0, _firestore.doc)(testInstance.db, `users/${userId1}/userProgress/stats`);
            // This would fail with proper security rules
            const docSnap = await (0, _firestore.getDoc)(user1DocRef);
            // In production, this should be false due to security rules
            // In emulator without rules enforcement, it might succeed
            // This test documents the expected behavior
            if (docSnap.exists()) {
                console.warn('Security rules may not be enforced in emulator');
            }
        });
        it('supports anonymous user progress tracking', async ()=>{
            var _docSnap_data;
            const anonCredential = await (0, _firebasetesthelpers.createAnonymousUser)(testInstance.auth);
            const anonUserId = anonCredential.user.uid;
            await (0, _firebasetesthelpers.seedUserProgress)(testInstance.db, anonUserId, {
                userId: anonUserId
            });
            const docRef = (0, _firestore.doc)(testInstance.db, `users/${anonUserId}/userProgress/stats`);
            const docSnap = await (0, _firestore.getDoc)(docRef);
            expect(docSnap.exists()).toBe(true);
            expect((_docSnap_data = docSnap.data()) === null || _docSnap_data === void 0 ? void 0 : _docSnap_data.userId).toBe(anonUserId);
        });
    });
    describe('Concurrent Operations', ()=>{
        it('handles concurrent updates to the same document', async ()=>{
            var _finalDoc_data, _finalDoc_data1;
            const docRef = (0, _firestore.doc)(testInstance.db, `users/${testUserId}/userProgress/stats`);
            // Set initial value
            await (0, _firestore.setDoc)(docRef, {
                ..._firebasetesthelpers.TEST_USER_STATS,
                userId: testUserId,
                totalPositionsCompleted: 0
            });
            // Simulate concurrent updates
            const updates = Array.from({
                length: 5
            }, (_, i)=>(0, _firestore.updateDoc)(docRef, {
                    totalPositionsCompleted: i + 1,
                    lastActive: (0, _firestore.serverTimestamp)()
                }));
            await Promise.all(updates);
            // Check final state
            const finalDoc = await (0, _firestore.getDoc)(docRef);
            expect(finalDoc.exists()).toBe(true);
            expect((_finalDoc_data = finalDoc.data()) === null || _finalDoc_data === void 0 ? void 0 : _finalDoc_data.totalPositionsCompleted).toBeDefined();
            expect(typeof ((_finalDoc_data1 = finalDoc.data()) === null || _finalDoc_data1 === void 0 ? void 0 : _finalDoc_data1.totalPositionsCompleted)).toBe('number');
        });
        it('handles batch operations with multiple cards', async ()=>{
            const batch = (0, _firestore.writeBatch)(testInstance.db);
            // Create 10 cards in a batch
            for(let i = 0; i < 10; i++){
                const cardRef = (0, _firestore.doc)(testInstance.db, `users/${testUserId}/userProgress/card-${i}`);
                batch.set(cardRef, {
                    id: `card-${i}`,
                    nextReviewAt: Date.now() + i * 86400000,
                    lastReviewedAt: Date.now(),
                    interval: i + 1,
                    repetition: 1,
                    efactor: 2.5,
                    quality: 4,
                    lastUpdated: (0, _firestore.serverTimestamp)()
                });
            }
            await batch.commit();
            // Verify all cards were created
            const progressCollection = (0, _firestore.collection)(testInstance.db, `users/${testUserId}/userProgress`);
            const snapshot = await (0, _firestore.getDocs)(progressCollection);
            expect(snapshot.size).toBe(10);
        });
    });
    describe('Error Handling', ()=>{
        it('handles invalid document paths gracefully', async ()=>{
            // Invalid path (empty userId)
            const invalidDocRef = (0, _firestore.doc)(testInstance.db, 'users//userProgress/stats');
            await expect((0, _firestore.setDoc)(invalidDocRef, _firebasetesthelpers.TEST_USER_STATS)).rejects.toThrow();
        });
        it('handles missing required fields', async ()=>{
            var _docSnap_data;
            const docRef = (0, _firestore.doc)(testInstance.db, `users/${testUserId}/userProgress/stats`);
            // Missing required userId field
            const invalidStats = {
                totalPositionsCompleted: 10
            };
            // This should succeed at Firestore level but fail validation in app
            await (0, _firestore.setDoc)(docRef, invalidStats);
            const docSnap = await (0, _firestore.getDoc)(docRef);
            expect(docSnap.exists()).toBe(true);
            expect((_docSnap_data = docSnap.data()) === null || _docSnap_data === void 0 ? void 0 : _docSnap_data.userId).toBeUndefined();
        });
    });
    describe('Multi-device Sync Scenarios', ()=>{
        it('simulates progress sync between multiple devices', async ()=>{
            var _deviceBRead_data, _deviceARead_data, _deviceARead_data1;
            const statsDocRef = (0, _firestore.doc)(testInstance.db, `users/${testUserId}/userProgress/stats`);
            // Device A initial write
            await (0, _firestore.setDoc)(statsDocRef, {
                ..._firebasetesthelpers.TEST_USER_STATS,
                userId: testUserId,
                totalPositionsCompleted: 10,
                device: 'A',
                lastActive: _firestore.Timestamp.fromMillis(Date.now())
            });
            // Device B reads current state
            const deviceBRead = await (0, _firestore.getDoc)(statsDocRef);
            expect((_deviceBRead_data = deviceBRead.data()) === null || _deviceBRead_data === void 0 ? void 0 : _deviceBRead_data.totalPositionsCompleted).toBe(10);
            // Device B updates
            await (0, _firestore.updateDoc)(statsDocRef, {
                totalPositionsCompleted: 15,
                device: 'B',
                lastActive: _firestore.Timestamp.fromMillis(Date.now() + 1000)
            });
            // Device A reads updated state
            const deviceARead = await (0, _firestore.getDoc)(statsDocRef);
            expect((_deviceARead_data = deviceARead.data()) === null || _deviceARead_data === void 0 ? void 0 : _deviceARead_data.totalPositionsCompleted).toBe(15);
            expect((_deviceARead_data1 = deviceARead.data()) === null || _deviceARead_data1 === void 0 ? void 0 : _deviceARead_data1.device).toBe('B');
        });
        it('handles conflicting card progress updates', async ()=>{
            var _finalState_data, _finalState_data1;
            const cardRef = (0, _firestore.doc)(testInstance.db, `users/${testUserId}/userProgress/card-1`);
            // Initial card state
            await (0, _firestore.setDoc)(cardRef, {
                id: 'card-1',
                nextReviewAt: Date.now() + 86400000,
                lastReviewedAt: Date.now(),
                interval: 1,
                repetition: 1,
                efactor: 2.5,
                quality: 4
            });
            // Simulate two devices updating the same card
            const device1Update = (0, _firestore.updateDoc)(cardRef, {
                quality: 5,
                repetition: 2,
                lastReviewedAt: _firestore.Timestamp.fromMillis(Date.now() + 1000)
            });
            const device2Update = (0, _firestore.updateDoc)(cardRef, {
                quality: 3,
                repetition: 2,
                lastReviewedAt: _firestore.Timestamp.fromMillis(Date.now() + 2000)
            });
            // Both updates should succeed (last write wins)
            await Promise.all([
                device1Update,
                device2Update
            ]);
            const finalState = await (0, _firestore.getDoc)(cardRef);
            expect(finalState.exists()).toBe(true);
            expect((_finalState_data = finalState.data()) === null || _finalState_data === void 0 ? void 0 : _finalState_data.repetition).toBe(2);
            // Quality will be either 3 or 5 depending on timing
            expect([
                3,
                5
            ]).toContain((_finalState_data1 = finalState.data()) === null || _finalState_data1 === void 0 ? void 0 : _finalState_data1.quality);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,