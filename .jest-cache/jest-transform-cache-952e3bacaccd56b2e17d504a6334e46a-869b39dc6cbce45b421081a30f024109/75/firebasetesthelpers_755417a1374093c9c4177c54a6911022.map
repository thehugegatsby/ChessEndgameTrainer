{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-firebase-testing/src/tests/utils/firebase-test-helpers.ts"],"sourcesContent":["/**\n * Firebase Test Helpers\n * Utilities for setting up and managing test data in Firebase Emulator\n * \n * Enhanced with Authentication support and User Progress testing infrastructure\n * for Issue #83 - Firebase service integration test infrastructure\n */\n\nimport { initializeApp, deleteApp, FirebaseApp } from \"firebase/app\";\nimport {\n  getFirestore,\n  connectFirestoreEmulator,\n  Firestore,\n  collection,\n  doc,\n  getDocs,\n  setDoc,\n  writeBatch,\n  Timestamp,\n  serverTimestamp,\n} from \"firebase/firestore\";\nimport { \n  getAuth, \n  connectAuthEmulator, \n  signInAnonymously,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  Auth,\n  UserCredential,\n  User\n} from \"firebase/auth\";\nimport {\n  EndgamePosition,\n  EndgameCategory,\n  EndgameChapter,\n} from \"@shared/types/endgame\";\nimport type { UserStats, CardProgress } from \"@shared/store/slices/types\";\nimport { clearAllEmulatorData } from \"./firebase-emulator-api\";\n\n// Test Firebase configuration for emulator\nconst TEST_CONFIG = {\n  projectId: process.env.TEST_PROJECT_ID || \"endgame-trainer-test\",\n  apiKey: \"test-api-key\",\n  authDomain: \"localhost\",\n};\n\n// Remove global singletons to prevent test isolation issues\n// Each test should create its own Firebase instance\ninterface TestFirebaseInstance {\n  app: FirebaseApp;\n  db: Firestore;\n  auth: Auth;\n}\n\n// Track all test instances for cleanup\nconst testInstances: TestFirebaseInstance[] = [];\n\n/**\n * Initialize Firebase for tests with emulator - creates isolated instance\n * @param instanceName - Optional unique name for the app instance (defaults to timestamp)\n * @returns Test Firebase instance with app, db, and auth\n */\nexport async function initializeTestFirebase(\n  instanceName?: string\n): Promise<TestFirebaseInstance> {\n  // Create unique instance name to prevent conflicts\n  const appName = instanceName || `test-app-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  \n  // Initialize test app with unique name\n  const app = initializeApp(TEST_CONFIG, appName);\n  const db = getFirestore(app);\n  const auth = getAuth(app);\n  \n  // Connect to Firestore emulator\n  try {\n    connectFirestoreEmulator(db, \"localhost\", 8080);\n  } catch (error: any) {\n    // Only ignore \"already connected\" errors, throw real connection failures\n    if (!error.message?.includes(\"already connected\")) {\n      console.error(\"Failed to connect to Firestore emulator:\", error);\n      throw error;\n    }\n  }\n  \n  // Connect to Auth emulator  \n  try {\n    connectAuthEmulator(auth, \"http://localhost:9099\", { disableWarnings: true });\n  } catch (error: any) {\n    // Only ignore \"already connected\" errors\n    if (!error.message?.includes(\"already initialized\")) {\n      console.error(\"Failed to connect to Auth emulator:\", error);\n      throw error;\n    }\n  }\n  \n  const instance = { app, db, auth };\n  testInstances.push(instance);\n  \n  return instance;\n}\n\n/**\n * Create and authenticate a test user\n * @param email - Optional email (defaults to random)\n * @param password - Optional password (defaults to \"testpass123\")\n * @returns UserCredential with authenticated user\n */\nexport async function createTestUser(\n  auth: Auth,\n  email?: string,\n  password?: string\n): Promise<UserCredential> {\n  const testEmail = email || `test-${Date.now()}@example.com`;\n  const testPassword = password || \"testpass123\";\n  \n  try {\n    // Try to create new user\n    return await createUserWithEmailAndPassword(auth, testEmail, testPassword);\n  } catch (error: any) {\n    // If user exists, sign in instead\n    if (error.code === \"auth/email-already-in-use\") {\n      return await signInWithEmailAndPassword(auth, testEmail, testPassword);\n    }\n    throw error;\n  }\n}\n\n/**\n * Create anonymous test user for quick testing\n * @param auth - Auth instance\n * @returns UserCredential with anonymous user\n */\nexport async function createAnonymousUser(auth: Auth): Promise<UserCredential> {\n  return await signInAnonymously(auth);\n}\n\n/**\n * Clear all data from Firebase emulators - optimized version\n * Uses REST API for atomic clearing of both Firestore and Auth\n */\nexport async function clearFirestoreData(): Promise<void> {\n  // Use the atomic cleanup method for both emulators\n  await clearAllEmulatorData();\n}\n\n/**\n * Clear user-specific progress data\n * @param db - Firestore instance\n * @param userId - User ID to clear data for\n */\nexport async function clearUserProgressData(\n  db: Firestore,\n  userId: string\n): Promise<void> {\n  const userProgressRef = collection(db, `users/${userId}/userProgress`);\n  const snapshot = await getDocs(userProgressRef);\n  \n  if (snapshot.empty) return;\n  \n  const batch = writeBatch(db);\n  snapshot.docs.forEach((doc) => {\n    batch.delete(doc.ref);\n  });\n  \n  await batch.commit();\n}\n\n// ========== USER PROGRESS TEST FIXTURES ==========\n\n/**\n * Test UserStats fixture\n */\nexport const TEST_USER_STATS: UserStats = {\n  userId: \"test-user-123\",\n  totalPositionsCompleted: 25,\n  overallSuccessRate: 0.85,\n  totalTimeSpent: 3600000, // 1 hour in ms\n  totalHintsUsed: 5,\n  lastActive: Date.now(),\n};\n\n/**\n * Test CardProgress fixtures for spaced repetition\n */\nexport const TEST_CARD_PROGRESS: CardProgress[] = [\n  {\n    id: \"pos-1\",\n    nextReviewAt: Date.now() + 86400000, // Due in 1 day\n    lastReviewedAt: Date.now(),\n    interval: 1,\n    repetition: 1,\n    efactor: 2.5,\n    quality: 4,\n  },\n  {\n    id: \"pos-2\", \n    nextReviewAt: Date.now() - 3600000, // Overdue by 1 hour\n    lastReviewedAt: Date.now() - 90000000,\n    interval: 3,\n    repetition: 3,\n    efactor: 2.3,\n    quality: 3,\n  },\n  {\n    id: \"pos-3\",\n    nextReviewAt: Date.now() + 604800000, // Due in 1 week\n    lastReviewedAt: Date.now() - 86400000,\n    interval: 7,\n    repetition: 5,\n    efactor: 2.6,\n    quality: 5,\n  },\n];\n\n/**\n * Seed User Progress data with authentication\n * @param db - Firestore instance\n * @param userId - User ID\n * @param stats - UserStats to seed\n * @param cards - CardProgress array to seed\n */\nexport async function seedUserProgress(\n  db: Firestore,\n  userId: string,\n  stats?: Partial<UserStats>,\n  cards?: CardProgress[]\n): Promise<void> {\n  // Seed UserStats document\n  const userStats = {\n    ...TEST_USER_STATS,\n    ...stats,\n    userId,\n    lastActive: serverTimestamp(),\n  };\n  \n  await setDoc(\n    doc(db, `users/${userId}/userProgress/stats`),\n    userStats\n  );\n  \n  // Seed CardProgress documents\n  if (cards && cards.length > 0) {\n    const batch = writeBatch(db);\n    \n    cards.forEach((card) => {\n      const docRef = doc(db, `users/${userId}/userProgress/${card.id}`);\n      batch.set(docRef, {\n        ...card,\n        lastUpdated: serverTimestamp(),\n      });\n    });\n    \n    await batch.commit();\n  }\n}\n\n/**\n * Create a test user with progress data\n * Convenience function that combines user creation and data seeding\n */\nexport async function createTestUserWithProgress(\n  instance: TestFirebaseInstance,\n  email?: string,\n  stats?: Partial<UserStats>,\n  cards?: CardProgress[]\n): Promise<{ user: User; userId: string }> {\n  const userCredential = await createTestUser(instance.auth, email);\n  const userId = userCredential.user.uid;\n  \n  await seedUserProgress(\n    instance.db,\n    userId,\n    stats,\n    cards || TEST_CARD_PROGRESS\n  );\n  \n  return { user: userCredential.user, userId };\n}\n\n// ========== REAL-TIME TESTING UTILITIES ==========\n\n/**\n * Helper class for testing real-time updates with onSnapshot\n */\nexport class RealtimeTestHelper {\n  private listeners: Array<() => void> = [];\n  \n  /**\n   * Register a listener for cleanup\n   */\n  registerListener(unsubscribe: () => void): void {\n    this.listeners.push(unsubscribe);\n  }\n  \n  /**\n   * Cleanup all registered listeners\n   */\n  cleanup(): void {\n    this.listeners.forEach(unsubscribe => unsubscribe());\n    this.listeners = [];\n  }\n  \n  /**\n   * Wait for a specific number of snapshot updates\n   * @param expectedUpdates - Number of updates to wait for\n   * @param timeoutMs - Maximum time to wait (default 5000ms)\n   */\n  async waitForUpdates(\n    expectedUpdates: number,\n    timeoutMs: number = 5000\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Timeout waiting for ${expectedUpdates} updates`));\n      }, timeoutMs);\n      \n      let updateCount = 0;\n      const checkUpdates = () => {\n        updateCount++;\n        if (updateCount >= expectedUpdates) {\n          clearTimeout(timeout);\n          resolve();\n        }\n      };\n      \n      // This would be called from within the onSnapshot callback\n      (global as any).__rtTestUpdate = checkUpdates;\n    });\n  }\n}\n\n// ========== EXISTING GAME CONTENT TEST DATA (preserved for compatibility) ==========\n\n/**\n * Seed test positions into Firestore\n */\nexport async function seedTestPositions(\n  db: Firestore,\n  positions: EndgamePosition[],\n): Promise<void> {\n  const batch = writeBatch(db);\n\n  positions.forEach((position) => {\n    const docRef = doc(db, \"positions\", position.id.toString());\n    batch.set(docRef, {\n      ...position,\n      createdAt: Timestamp.now(),\n      updatedAt: Timestamp.now(),\n    });\n  });\n\n  await batch.commit();\n}\n\n/**\n * Seed test categories into Firestore\n */\nexport async function seedTestCategories(\n  db: Firestore,\n  categories: EndgameCategory[],\n): Promise<void> {\n  const batch = writeBatch(db);\n\n  categories.forEach((category) => {\n    const docRef = doc(db, \"categories\", category.id);\n    batch.set(docRef, {\n      ...category,\n      createdAt: Timestamp.now(),\n      updatedAt: Timestamp.now(),\n    });\n  });\n\n  await batch.commit();\n}\n\n/**\n * Seed test chapters into Firestore\n */\nexport async function seedTestChapters(\n  db: Firestore,\n  chapters: EndgameChapter[],\n): Promise<void> {\n  const batch = writeBatch(db);\n\n  chapters.forEach((chapter) => {\n    const docRef = doc(db, \"chapters\", chapter.id);\n    batch.set(docRef, {\n      ...chapter,\n      createdAt: Timestamp.now(),\n      updatedAt: Timestamp.now(),\n    });\n  });\n\n  await batch.commit();\n}\n\n/**\n * Common test data for game content\n */\nexport const TEST_POSITIONS: EndgamePosition[] = [\n  {\n    id: 1,\n    title: \"Opposition Basics\",\n    description: \"Learn the fundamental concept of opposition\",\n    fen: \"4k3/8/4K3/8/8/8/8/8 w - - 0 1\",\n    category: \"king-pawn\",\n    difficulty: \"beginner\",\n    targetMoves: 1,\n    hints: [\"Opposition is key\"],\n    solution: [\"Ke6-e7\"],\n    sideToMove: \"white\",\n    goal: \"win\",\n  },\n  {\n    id: 2,\n    title: \"Advanced Opposition\",\n    description: \"Master more complex opposition patterns\",\n    fen: \"8/8/4k3/8/8/4K3/8/8 w - - 0 1\",\n    category: \"king-pawn\",\n    difficulty: \"intermediate\",\n    targetMoves: 3,\n    hints: [\"Use opposition to control key squares\"],\n    solution: [\"Ke3-e4\", \"Ke4-e5\", \"Ke5-d6\"],\n    sideToMove: \"white\",\n    goal: \"win\",\n  },\n  {\n    id: 12,\n    title: \"Brückenbau\",\n    description: \"Build a bridge for your rook\",\n    fen: \"1K6/1P6/8/8/8/8/r7/1k6 b - - 0 1\",\n    category: \"rook-pawn\",\n    difficulty: \"advanced\",\n    targetMoves: 5,\n    hints: [\"Create a bridge with your rook\"],\n    solution: [\"Ra2-a8+\", \"Kb8-c7\", \"Ra8-a7\", \"Kb1-b2\", \"Ra7-b7\"],\n    sideToMove: \"black\",\n    goal: \"draw\",\n  },\n];\n\nexport const TEST_CATEGORIES: EndgameCategory[] = [\n  {\n    id: \"king-pawn\",\n    name: \"King and Pawn\",\n    description: \"Fundamental king and pawn endgames\",\n    icon: \"♔\",\n    positions: [],\n    subcategories: [],\n  },\n  {\n    id: \"rook-pawn\",\n    name: \"Rook and Pawn\",\n    description: \"Rook endgames with pawns\",\n    icon: \"♜\",\n    positions: [],\n    subcategories: [],\n  },\n];\n\nexport const TEST_CHAPTERS: EndgameChapter[] = [\n  {\n    id: \"opposition-basics\",\n    name: \"Opposition Fundamentals\",\n    description: \"Learn the basics of opposition\",\n    category: \"king-pawn\",\n    lessons: [],\n    totalLessons: 5,\n  },\n  {\n    id: \"bridge-building\",\n    name: \"Bridge Building Technique\",\n    description: \"Master the bridge building technique\",\n    category: \"rook-pawn\",\n    lessons: [],\n    totalLessons: 3,\n  },\n];\n\n/**\n * Cleanup all test Firebase apps\n * Should be called in afterAll() to prevent memory leaks\n */\nexport async function cleanupAllTestFirebase(): Promise<void> {\n  const cleanupPromises = testInstances.map(async (instance) => {\n    try {\n      await deleteApp(instance.app);\n    } catch (error) {\n      // App might already be deleted\n    }\n  });\n  \n  await Promise.all(cleanupPromises);\n  testInstances.length = 0; // Clear the array\n}\n\n/**\n * Wait for Firestore to be ready (for CI environments)\n */\nexport async function waitForFirestore(\n  db: Firestore,\n  maxAttempts = 10\n): Promise<void> {\n  for (let i = 0; i < maxAttempts; i++) {\n    try {\n      // Try to read from a collection\n      await getDocs(collection(db, \"positions\"));\n      return; // Success\n    } catch (error) {\n      if (i === maxAttempts - 1) throw error;\n      // Wait and retry\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n  }\n}"],"names":["RealtimeTestHelper","TEST_CARD_PROGRESS","TEST_CATEGORIES","TEST_CHAPTERS","TEST_POSITIONS","TEST_USER_STATS","cleanupAllTestFirebase","clearFirestoreData","clearUserProgressData","createAnonymousUser","createTestUser","createTestUserWithProgress","initializeTestFirebase","seedTestCategories","seedTestChapters","seedTestPositions","seedUserProgress","waitForFirestore","TEST_CONFIG","projectId","process","env","TEST_PROJECT_ID","apiKey","authDomain","testInstances","instanceName","appName","Date","now","Math","random","toString","substr","app","initializeApp","db","getFirestore","auth","getAuth","connectFirestoreEmulator","error","message","includes","console","connectAuthEmulator","disableWarnings","instance","push","email","password","testEmail","testPassword","createUserWithEmailAndPassword","code","signInWithEmailAndPassword","signInAnonymously","clearAllEmulatorData","userId","userProgressRef","collection","snapshot","getDocs","empty","batch","writeBatch","docs","forEach","doc","delete","ref","commit","totalPositionsCompleted","overallSuccessRate","totalTimeSpent","totalHintsUsed","lastActive","id","nextReviewAt","lastReviewedAt","interval","repetition","efactor","quality","stats","cards","userStats","serverTimestamp","setDoc","length","card","docRef","set","lastUpdated","userCredential","user","uid","registerListener","unsubscribe","listeners","cleanup","waitForUpdates","expectedUpdates","timeoutMs","Promise","resolve","reject","timeout","setTimeout","Error","updateCount","checkUpdates","clearTimeout","global","__rtTestUpdate","positions","position","createdAt","Timestamp","updatedAt","categories","category","chapters","chapter","title","description","fen","difficulty","targetMoves","hints","solution","sideToMove","goal","name","icon","subcategories","lessons","totalLessons","cleanupPromises","map","deleteApp","all","maxAttempts","i"],"mappings":"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"}