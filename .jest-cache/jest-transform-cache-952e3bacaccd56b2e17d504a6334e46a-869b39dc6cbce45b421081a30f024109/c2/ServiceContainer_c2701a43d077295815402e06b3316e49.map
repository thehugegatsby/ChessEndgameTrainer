{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-firebase-testing/src/shared/services/container/ServiceContainer.ts"],"sourcesContent":["/**\n * @file Service Container Implementation\n * @module services/container/ServiceContainer\n *\n * @description\n * Lightweight dependency injection container for platform services.\n * Provides a centralized way to manage service instances and their dependencies,\n * supporting both singleton and factory patterns with circular dependency detection.\n *\n * @remarks\n * Key features:\n * - Lazy service instantiation\n * - Singleton and factory patterns\n * - Circular dependency detection\n * - Mock services for testing\n * - Browser API abstraction\n * - Type-safe service registry\n */\n\nimport {\n  IServiceContainer,\n  ServiceRegistry,\n  ServiceFactory,\n  ServiceContainerConfig,\n  ServiceNotFoundError,\n  ServiceAlreadyRegisteredError,\n  CircularDependencyError,\n  IBrowserAPIs,\n} from \"./types\";\nimport {\n  createMockStorage,\n  createMockNavigator,\n  createMockWindow,\n  createMockDocument,\n  createMockPerformance,\n} from \"./mocks\";\n\n/**\n * Service Container implementation for dependency injection\n *\n * @class ServiceContainer\n * @implements {IServiceContainer}\n *\n * @description\n * Manages service registration, instantiation, and dependency resolution.\n * Supports both singleton and factory patterns with automatic circular\n * dependency detection.\n *\n * @example\n * ```typescript\n * // Create a container\n * const container = new ServiceContainer({ useSingletons: true });\n *\n * // Register a service factory\n * container.register('storage', (container) => {\n *   return new StorageService(container.get('platform'));\n * });\n *\n * // Get service instance\n * const storage = container.get<IStorageService>('storage');\n * ```\n */\nexport class ServiceContainer implements IServiceContainer {\n  private factories = new Map<string, ServiceFactory<any>>();\n  private instances = new Map<string, any>();\n  private resolving = new Set<string>(); // For circular dependency detection\n  private config: ServiceContainerConfig;\n\n  /**\n   * Creates a new service container\n   *\n   * @param {ServiceContainerConfig} config - Configuration options\n   * @param {boolean} [config.useSingletons=true] - Whether to cache service instances\n   * @param {boolean} [config.validateKeys=true] - Whether to validate service keys\n   * @param {Function} [config.logger] - Optional logger function\n   */\n  constructor(config: ServiceContainerConfig = {}) {\n    this.config = {\n      useSingletons: true,\n      validateKeys: true,\n      logger: config.logger || (() => {}), // No-op logger by default\n      ...config,\n    };\n  }\n\n  /**\n   * Create a production container with real browser APIs\n   *\n   * @static\n   * @returns {ServiceContainer} Container configured for production use\n   *\n   * @example\n   * ```typescript\n   * const container = ServiceContainer.createProductionContainer();\n   * const platform = container.get('platform');\n   * ```\n   */\n  static createProductionContainer(): ServiceContainer {\n    const container = new ServiceContainer();\n\n    if (typeof window !== \"undefined\") {\n      container.registerBrowserAPIs({\n        localStorage: window.localStorage,\n        sessionStorage: window.sessionStorage,\n        navigator: window.navigator,\n        window: window,\n        document: window.document,\n        performance: window.performance,\n      });\n\n      // Register platform services\n      container.registerPlatformServices();\n    }\n\n    return container;\n  }\n\n  /**\n   * Create a test container with browser API mocks\n   *\n   * @description\n   * This is the main entry point for Jest tests. Creates a container with\n   * mocked browser APIs and platform services suitable for testing.\n   *\n   * @static\n   * @param {Partial<IBrowserAPIs>} [mockAPIs] - Optional custom mock implementations\n   * @returns {ServiceContainer} Container configured for testing\n   *\n   * @example\n   * ```typescript\n   * // In a test file\n   * const container = ServiceContainer.createTestContainer({\n   *   localStorage: customMockStorage\n   * });\n   *\n   * const storage = container.get('storage');\n   * await storage.save('key', 'value');\n   * ```\n   */\n  static createTestContainer(\n    mockAPIs?: Partial<IBrowserAPIs>,\n  ): ServiceContainer {\n    const container = new ServiceContainer();\n\n    // Register mock browser APIs\n    const apis = {\n      localStorage: createMockStorage(),\n      sessionStorage: createMockStorage(),\n      navigator: createMockNavigator(),\n      window: createMockWindow(),\n      document: createMockDocument(),\n      performance: createMockPerformance(),\n      ...mockAPIs,\n    };\n\n    container.registerBrowserAPIs(apis);\n\n    // Register platform services with mocked dependencies\n    container.registerPlatformServices();\n\n    return container;\n  }\n\n  /**\n   * Register a service with type-safe key\n   *\n   * @template K - Key from the ServiceRegistry type\n   * @param {K} key - Service identifier from ServiceRegistry\n   * @param {ServiceFactory<ServiceRegistry[K]>} factory - Factory function to create service\n   * @throws {ServiceAlreadyRegisteredError} If service is already registered\n   *\n   * @example\n   * ```typescript\n   * container.register('storage', (container) => {\n   *   const platform = container.get('platform');\n   *   return new StorageService(platform);\n   * });\n   * ```\n   */\n  register<K extends keyof ServiceRegistry>(\n    key: K,\n    factory: ServiceFactory<ServiceRegistry[K]>,\n  ): void {\n    this.registerInternal(key as string, factory);\n  }\n\n  /**\n   * Register a service with custom key\n   */\n  registerCustom<T>(key: string, factory: ServiceFactory<T>): void {\n    this.registerInternal(key, factory);\n  }\n\n  /**\n   * Internal registration method\n   */\n  private registerInternal(key: string, factory: ServiceFactory<any>): void {\n    if (this.config.validateKeys && this.factories.has(key)) {\n      throw new ServiceAlreadyRegisteredError(key);\n    }\n\n    this.config.logger!(`Registering service: ${key}`);\n    this.factories.set(key, factory);\n\n    // Clear existing instance if re-registering\n    if (this.instances.has(key)) {\n      this.instances.delete(key);\n    }\n  }\n\n  /**\n   * Resolve a service with type-safe key\n   */\n  resolve<K extends keyof ServiceRegistry>(key: K): ServiceRegistry[K] {\n    return this.resolveInternal(key as string);\n  }\n\n  /**\n   * Resolve a custom service\n   */\n  resolveCustom<T>(key: string): T {\n    return this.resolveInternal(key);\n  }\n\n  /**\n   * Internal resolution method\n   */\n  private resolveInternal<T>(key: string): T {\n    // Check for circular dependencies\n    if (this.resolving.has(key)) {\n      const chain = Array.from(this.resolving);\n      chain.push(key);\n      throw new CircularDependencyError(chain);\n    }\n\n    // Return existing instance if using singletons\n    if (this.config.useSingletons && this.instances.has(key)) {\n      this.config.logger!(`Returning cached instance: ${key}`);\n      return this.instances.get(key);\n    }\n\n    // Check if factory is registered\n    const factory = this.factories.get(key);\n    if (!factory) {\n      throw new ServiceNotFoundError(key);\n    }\n\n    // Mark as resolving for circular dependency detection\n    this.resolving.add(key);\n\n    try {\n      this.config.logger!(`Creating instance: ${key}`);\n      const instance = factory(this);\n\n      // Cache instance if using singletons\n      if (this.config.useSingletons) {\n        this.instances.set(key, instance);\n      }\n\n      return instance;\n    } finally {\n      // Always remove from resolving set\n      this.resolving.delete(key);\n    }\n  }\n\n  /**\n   * Check if service is registered (type-safe)\n   */\n  has<K extends keyof ServiceRegistry>(key: K): boolean {\n    return this.factories.has(key as string);\n  }\n\n  /**\n   * Check if custom service is registered\n   */\n  hasCustom(key: string): boolean {\n    return this.factories.has(key);\n  }\n\n  /**\n   * Clear all resolved instances\n   */\n  clearInstances(): void {\n    this.config.logger!(\"Clearing all service instances\");\n    this.instances.clear();\n    this.resolving.clear();\n  }\n\n  /**\n   * Get all registered service keys\n   */\n  getRegisteredKeys(): string[] {\n    return Array.from(this.factories.keys());\n  }\n\n  /**\n   * Get container statistics (useful for debugging)\n   */\n  getStats(): {\n    registeredServices: number;\n    resolvedInstances: number;\n    currentlyResolving: number;\n  } {\n    return {\n      registeredServices: this.factories.size,\n      resolvedInstances: this.instances.size,\n      currentlyResolving: this.resolving.size,\n    };\n  }\n\n  /**\n   * Register browser APIs abstraction\n   */\n  registerBrowserAPIs(\n    apis: Partial<{\n      localStorage: Storage;\n      sessionStorage: Storage;\n      navigator: Navigator;\n      window: Window;\n      document: Document;\n      performance: Performance;\n    }>,\n  ): void {\n    // Register complete browser APIs object\n    if (\n      apis.localStorage &&\n      apis.navigator &&\n      apis.window &&\n      apis.document &&\n      apis.performance\n    ) {\n      this.registerCustom(\"browser.apis\", () => ({\n        localStorage: apis.localStorage!,\n        sessionStorage: apis.sessionStorage || apis.window!.sessionStorage,\n        navigator: apis.navigator!,\n        window: apis.window!,\n        document: apis.document!,\n        performance: apis.performance!,\n      }));\n    }\n\n    // Register individual APIs\n    if (apis.localStorage) {\n      this.registerCustom(\"browser.localStorage\", () => apis.localStorage!);\n    }\n    if (apis.navigator) {\n      this.registerCustom(\"browser.navigator\", () => apis.navigator!);\n    }\n    if (apis.window) {\n      this.registerCustom(\"browser.window\", () => apis.window!);\n    }\n    if (apis.document) {\n      this.registerCustom(\"browser.document\", () => apis.document!);\n    }\n    if (apis.performance) {\n      this.registerCustom(\"browser.performance\", () => apis.performance!);\n    }\n  }\n\n  /**\n   * Register platform services using the existing WebPlatformService\n   */\n  private registerPlatformServices(): void {\n    // For Phase 1, we keep it simple and register a factory that will\n    // import WebPlatformService when first accessed\n    this.registerCustom(\"platform.service\", () => {\n      const {\n        WebPlatformService,\n      } = require(\"../platform/web/WebPlatformService\");\n      return new WebPlatformService();\n    });\n\n    // Register individual services that delegate to the main service\n    this.register(\"platform.storage\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.storage;\n    });\n\n    this.register(\"platform.notifications\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.notifications;\n    });\n\n    this.register(\"platform.device\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.device;\n    });\n\n    this.register(\"platform.performance\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.performance;\n    });\n\n    this.register(\"platform.clipboard\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.clipboard;\n    });\n\n    this.register(\"platform.share\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.share;\n    });\n\n    this.register(\"platform.analytics\", (container) => {\n      const platformService = container.resolveCustom(\n        \"platform.service\",\n      ) as any;\n      return platformService.analytics;\n    });\n  }\n\n  /**\n   * Create a child container with same factories but separate instances\n   */\n  createChild(config?: Partial<ServiceContainerConfig>): ServiceContainer {\n    const child = new ServiceContainer({\n      ...this.config,\n      ...config,\n    });\n\n    // Copy all factories to child\n    this.factories.forEach((factory, key) => {\n      child.factories.set(key, factory);\n    });\n\n    return child;\n  }\n}\n"],"names":["ServiceContainer","createProductionContainer","container","window","registerBrowserAPIs","localStorage","sessionStorage","navigator","document","performance","registerPlatformServices","createTestContainer","mockAPIs","apis","createMockStorage","createMockNavigator","createMockWindow","createMockDocument","createMockPerformance","register","key","factory","registerInternal","registerCustom","config","validateKeys","factories","has","ServiceAlreadyRegisteredError","logger","set","instances","delete","resolve","resolveInternal","resolveCustom","resolving","chain","Array","from","push","CircularDependencyError","useSingletons","get","ServiceNotFoundError","add","instance","hasCustom","clearInstances","clear","getRegisteredKeys","keys","getStats","registeredServices","size","resolvedInstances","currentlyResolving","WebPlatformService","require","platformService","storage","notifications","device","clipboard","share","analytics","createChild","child","forEach","Map","Set"],"mappings":"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"}