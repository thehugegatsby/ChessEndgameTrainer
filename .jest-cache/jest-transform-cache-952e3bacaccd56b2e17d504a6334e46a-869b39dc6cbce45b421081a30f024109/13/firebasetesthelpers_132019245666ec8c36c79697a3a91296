28670ebfc81194e0a14eff8ebac88898
/**
 * Firebase Test Helpers
 * Utilities for setting up and managing test data in Firebase Emulator
 * 
 * Enhanced with Authentication support and User Progress testing infrastructure
 * for Issue #83 - Firebase service integration test infrastructure
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get RealtimeTestHelper () {
        return RealtimeTestHelper;
    },
    get TEST_CARD_PROGRESS () {
        return TEST_CARD_PROGRESS;
    },
    get TEST_CATEGORIES () {
        return TEST_CATEGORIES;
    },
    get TEST_CHAPTERS () {
        return TEST_CHAPTERS;
    },
    get TEST_POSITIONS () {
        return TEST_POSITIONS;
    },
    get TEST_USER_STATS () {
        return TEST_USER_STATS;
    },
    get cleanupAllTestFirebase () {
        return cleanupAllTestFirebase;
    },
    get clearFirestoreData () {
        return clearFirestoreData;
    },
    get clearUserProgressData () {
        return clearUserProgressData;
    },
    get createAnonymousUser () {
        return createAnonymousUser;
    },
    get createTestUser () {
        return createTestUser;
    },
    get createTestUserWithProgress () {
        return createTestUserWithProgress;
    },
    get initializeTestFirebase () {
        return initializeTestFirebase;
    },
    get seedTestCategories () {
        return seedTestCategories;
    },
    get seedTestChapters () {
        return seedTestChapters;
    },
    get seedTestPositions () {
        return seedTestPositions;
    },
    get seedUserProgress () {
        return seedUserProgress;
    },
    get waitForFirestore () {
        return waitForFirestore;
    }
});
const _app = require("firebase/app");
const _firestore = require("firebase/firestore");
const _auth = require("firebase/auth");
const _firebaseemulatorapi = require("./firebase-emulator-api");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
// Test Firebase configuration for emulator
const TEST_CONFIG = {
    projectId: process.env.TEST_PROJECT_ID || "endgame-trainer-test",
    apiKey: "test-api-key",
    authDomain: "localhost"
};
// Track all test instances for cleanup
const testInstances = [];
async function initializeTestFirebase(instanceName) {
    // Create unique instance name to prevent conflicts
    const appName = instanceName || `test-app-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    // Initialize test app with unique name
    const app = (0, _app.initializeApp)(TEST_CONFIG, appName);
    const db = (0, _firestore.getFirestore)(app);
    const auth = (0, _auth.getAuth)(app);
    // Connect to Firestore emulator
    try {
        (0, _firestore.connectFirestoreEmulator)(db, "localhost", 8080);
    } catch (error) {
        var _error_message;
        // Only ignore "already connected" errors, throw real connection failures
        if (!((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes("already connected"))) {
            console.error("Failed to connect to Firestore emulator:", error);
            throw error;
        }
    }
    // Connect to Auth emulator  
    try {
        (0, _auth.connectAuthEmulator)(auth, "http://localhost:9099", {
            disableWarnings: true
        });
    } catch (error) {
        var _error_message1;
        // Only ignore "already connected" errors
        if (!((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes("already initialized"))) {
            console.error("Failed to connect to Auth emulator:", error);
            throw error;
        }
    }
    const instance = {
        app,
        db,
        auth
    };
    testInstances.push(instance);
    return instance;
}
async function createTestUser(auth, email, password) {
    const testEmail = email || `test-${Date.now()}@example.com`;
    const testPassword = password || "testpass123";
    try {
        // Try to create new user
        return await (0, _auth.createUserWithEmailAndPassword)(auth, testEmail, testPassword);
    } catch (error) {
        // If user exists, sign in instead
        if (error.code === "auth/email-already-in-use") {
            return await (0, _auth.signInWithEmailAndPassword)(auth, testEmail, testPassword);
        }
        throw error;
    }
}
async function createAnonymousUser(auth) {
    return await (0, _auth.signInAnonymously)(auth);
}
async function clearFirestoreData() {
    // Use the atomic cleanup method for both emulators
    await (0, _firebaseemulatorapi.clearAllEmulatorData)();
}
async function clearUserProgressData(db, userId) {
    const userProgressRef = (0, _firestore.collection)(db, `users/${userId}/userProgress`);
    const snapshot = await (0, _firestore.getDocs)(userProgressRef);
    if (snapshot.empty) return;
    const batch = (0, _firestore.writeBatch)(db);
    snapshot.docs.forEach((doc)=>{
        batch.delete(doc.ref);
    });
    await batch.commit();
}
const TEST_USER_STATS = {
    userId: "test-user-123",
    totalPositionsCompleted: 25,
    overallSuccessRate: 0.85,
    totalTimeSpent: 3600000,
    totalHintsUsed: 5,
    lastActive: Date.now()
};
const TEST_CARD_PROGRESS = [
    {
        id: "pos-1",
        nextReviewAt: Date.now() + 86400000,
        lastReviewedAt: Date.now(),
        interval: 1,
        repetition: 1,
        efactor: 2.5,
        quality: 4
    },
    {
        id: "pos-2",
        nextReviewAt: Date.now() - 3600000,
        lastReviewedAt: Date.now() - 90000000,
        interval: 3,
        repetition: 3,
        efactor: 2.3,
        quality: 3
    },
    {
        id: "pos-3",
        nextReviewAt: Date.now() + 604800000,
        lastReviewedAt: Date.now() - 86400000,
        interval: 7,
        repetition: 5,
        efactor: 2.6,
        quality: 5
    }
];
async function seedUserProgress(db, userId, stats, cards) {
    // Seed UserStats document
    const userStats = {
        ...TEST_USER_STATS,
        ...stats,
        userId,
        lastActive: (0, _firestore.serverTimestamp)()
    };
    await (0, _firestore.setDoc)((0, _firestore.doc)(db, `users/${userId}/userProgress/stats`), userStats);
    // Seed CardProgress documents
    if (cards && cards.length > 0) {
        const batch = (0, _firestore.writeBatch)(db);
        cards.forEach((card)=>{
            const docRef = (0, _firestore.doc)(db, `users/${userId}/userProgress/${card.id}`);
            batch.set(docRef, {
                ...card,
                lastUpdated: (0, _firestore.serverTimestamp)()
            });
        });
        await batch.commit();
    }
}
async function createTestUserWithProgress(instance, email, stats, cards) {
    const userCredential = await createTestUser(instance.auth, email);
    const userId = userCredential.user.uid;
    await seedUserProgress(instance.db, userId, stats, cards || TEST_CARD_PROGRESS);
    return {
        user: userCredential.user,
        userId
    };
}
class RealtimeTestHelper {
    /**
   * Register a listener for cleanup
   */ registerListener(unsubscribe) {
        this.listeners.push(unsubscribe);
    }
    /**
   * Cleanup all registered listeners
   */ cleanup() {
        this.listeners.forEach((unsubscribe)=>unsubscribe());
        this.listeners = [];
    }
    /**
   * Wait for a specific number of snapshot updates
   * @param expectedUpdates - Number of updates to wait for
   * @param timeoutMs - Maximum time to wait (default 5000ms)
   */ async waitForUpdates(expectedUpdates, timeoutMs = 5000) {
        return new Promise((resolve, reject)=>{
            const timeout = setTimeout(()=>{
                reject(new Error(`Timeout waiting for ${expectedUpdates} updates`));
            }, timeoutMs);
            let updateCount = 0;
            const checkUpdates = ()=>{
                updateCount++;
                if (updateCount >= expectedUpdates) {
                    clearTimeout(timeout);
                    resolve();
                }
            };
            // This would be called from within the onSnapshot callback
            global.__rtTestUpdate = checkUpdates;
        });
    }
    constructor(){
        _define_property(this, "listeners", []);
    }
}
async function seedTestPositions(db, positions) {
    const batch = (0, _firestore.writeBatch)(db);
    positions.forEach((position)=>{
        const docRef = (0, _firestore.doc)(db, "positions", position.id.toString());
        batch.set(docRef, {
            ...position,
            createdAt: _firestore.Timestamp.now(),
            updatedAt: _firestore.Timestamp.now()
        });
    });
    await batch.commit();
}
async function seedTestCategories(db, categories) {
    const batch = (0, _firestore.writeBatch)(db);
    categories.forEach((category)=>{
        const docRef = (0, _firestore.doc)(db, "categories", category.id);
        batch.set(docRef, {
            ...category,
            createdAt: _firestore.Timestamp.now(),
            updatedAt: _firestore.Timestamp.now()
        });
    });
    await batch.commit();
}
async function seedTestChapters(db, chapters) {
    const batch = (0, _firestore.writeBatch)(db);
    chapters.forEach((chapter)=>{
        const docRef = (0, _firestore.doc)(db, "chapters", chapter.id);
        batch.set(docRef, {
            ...chapter,
            createdAt: _firestore.Timestamp.now(),
            updatedAt: _firestore.Timestamp.now()
        });
    });
    await batch.commit();
}
const TEST_POSITIONS = [
    {
        id: 1,
        title: "Opposition Basics",
        description: "Learn the fundamental concept of opposition",
        fen: "4k3/8/4K3/8/8/8/8/8 w - - 0 1",
        category: "king-pawn",
        difficulty: "beginner",
        targetMoves: 1,
        hints: [
            "Opposition is key"
        ],
        solution: [
            "Ke6-e7"
        ],
        sideToMove: "white",
        goal: "win"
    },
    {
        id: 2,
        title: "Advanced Opposition",
        description: "Master more complex opposition patterns",
        fen: "8/8/4k3/8/8/4K3/8/8 w - - 0 1",
        category: "king-pawn",
        difficulty: "intermediate",
        targetMoves: 3,
        hints: [
            "Use opposition to control key squares"
        ],
        solution: [
            "Ke3-e4",
            "Ke4-e5",
            "Ke5-d6"
        ],
        sideToMove: "white",
        goal: "win"
    },
    {
        id: 12,
        title: "Brückenbau",
        description: "Build a bridge for your rook",
        fen: "1K6/1P6/8/8/8/8/r7/1k6 b - - 0 1",
        category: "rook-pawn",
        difficulty: "advanced",
        targetMoves: 5,
        hints: [
            "Create a bridge with your rook"
        ],
        solution: [
            "Ra2-a8+",
            "Kb8-c7",
            "Ra8-a7",
            "Kb1-b2",
            "Ra7-b7"
        ],
        sideToMove: "black",
        goal: "draw"
    }
];
const TEST_CATEGORIES = [
    {
        id: "king-pawn",
        name: "King and Pawn",
        description: "Fundamental king and pawn endgames",
        icon: "♔",
        positions: [],
        subcategories: []
    },
    {
        id: "rook-pawn",
        name: "Rook and Pawn",
        description: "Rook endgames with pawns",
        icon: "♜",
        positions: [],
        subcategories: []
    }
];
const TEST_CHAPTERS = [
    {
        id: "opposition-basics",
        name: "Opposition Fundamentals",
        description: "Learn the basics of opposition",
        category: "king-pawn",
        lessons: [],
        totalLessons: 5
    },
    {
        id: "bridge-building",
        name: "Bridge Building Technique",
        description: "Master the bridge building technique",
        category: "rook-pawn",
        lessons: [],
        totalLessons: 3
    }
];
async function cleanupAllTestFirebase() {
    const cleanupPromises = testInstances.map(async (instance)=>{
        try {
            await (0, _app.deleteApp)(instance.app);
        } catch (error) {
        // App might already be deleted
        }
    });
    await Promise.all(cleanupPromises);
    testInstances.length = 0; // Clear the array
}
async function waitForFirestore(db, maxAttempts = 10) {
    for(let i = 0; i < maxAttempts; i++){
        try {
            // Try to read from a collection
            await (0, _firestore.getDocs)((0, _firestore.collection)(db, "positions"));
            return; // Success
        } catch (error) {
            if (i === maxAttempts - 1) throw error;
            // Wait and retry
            await new Promise((resolve)=>setTimeout(resolve, 1000));
        }
    }
}

//# sourceMappingURL=data:application/json;base64,