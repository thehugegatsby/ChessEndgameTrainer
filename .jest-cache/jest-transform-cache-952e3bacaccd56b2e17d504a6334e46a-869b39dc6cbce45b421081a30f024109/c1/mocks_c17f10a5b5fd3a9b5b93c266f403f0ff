8e4a01cf93e81fa140ce608a9c3a96eb
/**
 * @file Mock Browser APIs for testing environments
 * @module services/container/mocks
 * 
 * @description
 * Provides mock implementations of browser APIs for testing environments.
 * Designed for Jest 30 compatibility with fallback support for non-Jest
 * environments. Creates lightweight, focused mocks that simulate browser
 * behavior without the complexity of full browser implementations.
 * 
 * @remarks
 * Key features:
 * - Jest-compatible mock functions with fallback implementations
 * - Storage API mocks (localStorage, sessionStorage) with persistent state
 * - Navigator API mocks with clipboard and sharing functionality
 * - Window object mocks with media queries and screen properties
 * - Document API mocks for DOM manipulation testing
 * - Performance API mocks with realistic timing simulation
 * - Clean, predictable mock behavior for consistent testing
 * 
 * The mocks are designed to be lightweight yet functional, providing
 * the essential behavior needed for unit and integration testing without
 * the overhead of full browser simulation frameworks.
 */ /**
 * Create a mock Storage implementation for localStorage/sessionStorage
 * 
 * @description
 * Creates a mock Storage object that implements the Web Storage API interface.
 * Maintains an in-memory store that persists for the duration of the test,
 * providing realistic storage behavior without actual browser persistence.
 * 
 * @returns {Storage} Mock storage object with full Storage API implementation
 * 
 * @example
 * ```typescript
 * const mockStorage = createMockStorage();
 * mockStorage.setItem('key', 'value');
 * expect(mockStorage.getItem('key')).toBe('value');
 * expect(mockStorage.length).toBe(1);
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createMockDocument () {
        return createMockDocument;
    },
    get createMockNavigator () {
        return createMockNavigator;
    },
    get createMockPerformance () {
        return createMockPerformance;
    },
    get createMockStorage () {
        return createMockStorage;
    },
    get createMockWindow () {
        return createMockWindow;
    }
});
function createMockStorage() {
    const store = {};
    // Helper to create mock function that works with or without Jest
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return jest.fn(impl);
        }
        return impl;
    };
    return {
        getItem: mockFn((key)=>store[key] || null),
        setItem: mockFn((key, value)=>{
            store[key] = value;
        }),
        removeItem: mockFn((key)=>{
            delete store[key];
        }),
        clear: mockFn(()=>{
            Object.keys(store).forEach((key)=>delete store[key]);
        }),
        key: mockFn((index)=>{
            const keys = Object.keys(store);
            return keys[index] || null;
        }),
        get length () {
            return Object.keys(store).length;
        }
    };
}
function createMockNavigator() {
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return impl ? jest.fn(impl) : jest.fn().mockResolvedValue(undefined);
        }
        return impl || (()=>Promise.resolve(undefined));
    };
    return {
        userAgent: "Mozilla/5.0 (Test Environment)",
        onLine: true,
        clipboard: {
            writeText: mockFn(),
            readText: mockFn(()=>Promise.resolve("mock text"))
        },
        share: mockFn()
    };
}
function createMockWindow() {
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return impl ? jest.fn(impl) : jest.fn();
        }
        return impl || (()=>{});
    };
    return {
        localStorage: createMockStorage(),
        sessionStorage: createMockStorage(),
        screen: {
            width: 1920,
            height: 1080
        },
        devicePixelRatio: 1,
        matchMedia: mockFn((query)=>({
                matches: false,
                media: query,
                onchange: null,
                addListener: mockFn(),
                removeListener: mockFn(),
                addEventListener: mockFn(),
                removeEventListener: mockFn(),
                dispatchEvent: mockFn()
            }))
    };
}
function createMockDocument() {
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return impl ? jest.fn(impl) : jest.fn();
        }
        return impl || (()=>{});
    };
    return {
        createElement: mockFn(()=>({
                style: {},
                select: mockFn(),
                remove: mockFn()
            })),
        body: {
            appendChild: mockFn(),
            removeChild: mockFn()
        },
        execCommand: mockFn(()=>true),
        referrer: ""
    };
}
function createMockPerformance() {
    let mockTime = 0;
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return impl ? jest.fn(impl) : jest.fn();
        }
        return impl || (()=>{});
    };
    return {
        now: mockFn(()=>{
            mockTime += 16.67; // ~60fps
            return mockTime;
        }),
        mark: mockFn(),
        measure: mockFn(),
        getEntries: mockFn(()=>[]),
        clearMarks: mockFn(),
        clearMeasures: mockFn()
    };
}

//# sourceMappingURL=data:application/json;base64,