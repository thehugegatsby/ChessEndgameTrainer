{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-firebase-testing/src/tests/utils/firebase-emulator-api.ts"],"sourcesContent":["/**\n * Firebase Emulator REST API Client\n * Clean architecture for test data management using official Emulator APIs\n */\n\n// Node.js 18+ has native fetch, no import needed\n\nconst EMULATOR_HOST = process.env.FIRESTORE_EMULATOR_HOST || \"localhost:8080\";\nconst PROJECT_ID = \"endgame-trainer-test\";\n\n/**\n * Clear all Firestore data using Emulator REST API\n * This is the cleanest and fastest way to reset test data\n */\nexport async function clearAllFirestoreData(): Promise<void> {\n  const url = `http://${EMULATOR_HOST}/emulator/v1/projects/${PROJECT_ID}/databases/(default)/documents`;\n\n  const response = await fetch(url, {\n    method: \"DELETE\",\n  });\n\n  if (!response.ok) {\n    throw new Error(\n      `Failed to clear Firestore: ${response.status} ${response.statusText}`,\n    );\n  }\n}\n\n/**\n * Clear specific collection using Emulator REST API\n */\nexport async function clearCollection(collectionName: string): Promise<void> {\n  const url = `http://${EMULATOR_HOST}/emulator/v1/projects/${PROJECT_ID}/databases/(default)/documents/${collectionName}`;\n\n  const response = await fetch(url, {\n    method: \"DELETE\",\n  });\n\n  if (!response.ok) {\n    throw new Error(\n      `Failed to clear collection ${collectionName}: ${response.status} ${response.statusText}`,\n    );\n  }\n}\n\n/**\n * Import data into Firestore using Emulator REST API\n * This allows bulk import of test data efficiently\n */\nexport async function importFirestoreData(data: any): Promise<void> {\n  const url = `http://${EMULATOR_HOST}/emulator/v1/projects/${PROJECT_ID}/databases/(default)/documents:import`;\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (!response.ok) {\n    throw new Error(\n      `Failed to import data: ${response.status} ${response.statusText}`,\n    );\n  }\n}\n\n/**\n * Export current Firestore data using Emulator REST API\n * Useful for debugging test failures\n */\nexport async function exportFirestoreData(): Promise<any> {\n  const url = `http://${EMULATOR_HOST}/emulator/v1/projects/${PROJECT_ID}/databases/(default)/documents:export`;\n\n  const response = await fetch(url, {\n    method: \"GET\",\n  });\n\n  if (!response.ok) {\n    throw new Error(\n      `Failed to export data: ${response.status} ${response.statusText}`,\n    );\n  }\n\n  return response.json();\n}\n\n/**\n * Check if emulator is running\n */\nexport async function isEmulatorRunning(): Promise<boolean> {\n  try {\n    const url = `http://${EMULATOR_HOST}/`;\n    const response = await fetch(url);\n    return response.ok;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Wait for emulator to be ready\n */\nexport async function waitForEmulator(\n  maxAttempts = 30,\n  delayMs = 1000,\n): Promise<void> {\n  for (let i = 0; i < maxAttempts; i++) {\n    if (await isEmulatorRunning()) {\n      return;\n    }\n    await new Promise((resolve) => setTimeout(resolve, delayMs));\n  }\n  throw new Error(\"Firebase Emulator did not start in time\");\n}\n\n/**\n * Clear all data from Auth emulator\n * Ensures complete cleanup between tests\n */\nexport async function clearAllAuthData(): Promise<void> {\n  const AUTH_EMULATOR_HOST = process.env.AUTH_EMULATOR_HOST || \"localhost:9099\";\n  const url = `http://${AUTH_EMULATOR_HOST}/emulator/v1/projects/${PROJECT_ID}/accounts`;\n\n  try {\n    const response = await fetch(url, {\n      method: \"DELETE\",\n    });\n\n    if (!response.ok && response.status !== 404) {\n      // 404 is OK - means no accounts exist\n      throw new Error(\n        `Failed to clear Auth data: ${response.status} ${response.statusText}`,\n      );\n    }\n  } catch (error: any) {\n    // Ignore connection errors if Auth emulator is not running\n    if (error.code !== 'ECONNREFUSED') {\n      console.warn(\"Warning: Could not clear Auth data:\", error.message);\n    }\n  }\n}\n\n/**\n * Atomic cleanup of all Firebase emulator data\n * Clears both Firestore and Auth data in parallel\n */\nexport async function clearAllEmulatorData(): Promise<void> {\n  await Promise.all([\n    clearAllFirestoreData(),\n    clearAllAuthData()\n  ]);\n}\n"],"names":["clearAllAuthData","clearAllEmulatorData","clearAllFirestoreData","clearCollection","exportFirestoreData","importFirestoreData","isEmulatorRunning","waitForEmulator","EMULATOR_HOST","process","env","FIRESTORE_EMULATOR_HOST","PROJECT_ID","url","response","fetch","method","ok","Error","status","statusText","collectionName","data","headers","body","JSON","stringify","json","error","maxAttempts","delayMs","i","Promise","resolve","setTimeout","AUTH_EMULATOR_HOST","code","console","warn","message","all"],"mappings":"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"}