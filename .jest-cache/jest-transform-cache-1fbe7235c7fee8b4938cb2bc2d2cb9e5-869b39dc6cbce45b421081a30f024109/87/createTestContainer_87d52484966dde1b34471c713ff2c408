27f5a6603cef3094067e99b46cba1d1f
/**
 * Test Container Utilities
 * Easy setup for Jest tests with ServiceContainer
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get TestAssertions () {
        return TestAssertions;
    },
    get TestScenarios () {
        return TestScenarios;
    },
    get createMockLocalStorage () {
        return createMockLocalStorage;
    },
    get createTestContainer () {
        return createTestContainer;
    },
    get createTestWrapper () {
        return createTestWrapper;
    },
    get setupTestContainer () {
        return setupTestContainer;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _container = require("../../shared/services/container");
const _MockStorage = require("./MockStorage");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function createTestContainer(overrides) {
    const container = new _container.ServiceContainer();
    // Create mock instances
    const mockStorage = (overrides === null || overrides === void 0 ? void 0 : overrides.localStorage) || new _MockStorage.MockStorage();
    const mockNavigator = (overrides === null || overrides === void 0 ? void 0 : overrides.navigator) || {
        userAgent: "Mozilla/5.0 (Test Environment)",
        onLine: true,
        deviceMemory: 8,
        clipboard: {
            writeText: jest.fn().mockResolvedValue(undefined),
            readText: jest.fn().mockResolvedValue("mocked text")
        },
        share: jest.fn().mockResolvedValue(undefined)
    };
    const mockWindow = (overrides === null || overrides === void 0 ? void 0 : overrides.window) || {
        screen: {
            width: 1920,
            height: 1080
        },
        devicePixelRatio: 1,
        localStorage: mockStorage,
        sessionStorage: (overrides === null || overrides === void 0 ? void 0 : overrides.sessionStorage) || new _MockStorage.MockStorage()
    };
    const mockDocument = (overrides === null || overrides === void 0 ? void 0 : overrides.document) || {
        createElement: jest.fn(),
        body: {
            appendChild: jest.fn(),
            removeChild: jest.fn()
        }
    };
    const mockPerformance = (overrides === null || overrides === void 0 ? void 0 : overrides.performance) || {
        now: jest.fn().mockReturnValue(1000)
    };
    // Build browser APIs object
    const browserAPIs = {
        localStorage: mockStorage,
        sessionStorage: mockWindow.sessionStorage,
        navigator: mockNavigator,
        window: mockWindow,
        document: mockDocument,
        performance: mockPerformance
    };
    // Register browser APIs individually for direct access
    container.registerCustom("browser.localStorage", ()=>browserAPIs.localStorage);
    container.registerCustom("browser.navigator", ()=>browserAPIs.navigator);
    container.registerCustom("browser.window", ()=>browserAPIs.window);
    container.registerCustom("browser.document", ()=>browserAPIs.document);
    container.registerCustom("browser.performance", ()=>browserAPIs.performance);
    // Register the WebPlatformService with injected mock dependencies
    container.registerCustom("platform.service", ()=>{
        const { WebPlatformService } = require("@shared/services/platform/web/WebPlatformService");
        return new WebPlatformService(browserAPIs);
    });
    // Register individual platform services that delegate to the main service
    container.register("platform.storage", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.storage;
    });
    container.register("platform.notifications", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.notifications;
    });
    container.register("platform.device", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.device;
    });
    container.register("platform.performance", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.performance;
    });
    container.register("platform.clipboard", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.clipboard;
    });
    container.register("platform.share", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.share;
    });
    container.register("platform.analytics", (c)=>{
        const platformService = c.resolveCustom("platform.service");
        return platformService.analytics;
    });
    return container;
}
function setupTestContainer(overrides) {
    let container;
    beforeEach(()=>{
        container = createTestContainer(overrides);
    });
    return ()=>container;
}
function createTestWrapper(overrides) {
    const container = createTestContainer(overrides);
    return function TestWrapper({ children }) {
        // Dynamic import to avoid SSR issues
        const { ServiceProvider } = require("@shared/services/container/adapter");
        return _react.default.createElement(ServiceProvider, {
            container
        }, children);
    };
}
function createMockLocalStorage() {
    const store = {};
    const mockFn = (impl)=>{
        if (typeof jest !== "undefined" && jest.fn) {
            return jest.fn(impl);
        }
        return impl;
    };
    return {
        getItem: mockFn((key)=>store[key] || null),
        setItem: mockFn((key, value)=>{
            store[key] = value;
        }),
        removeItem: mockFn((key)=>{
            delete store[key];
        }),
        clear: mockFn(()=>{
            Object.keys(store).forEach((key)=>delete store[key]);
        }),
        key: mockFn((index)=>{
            const keys = Object.keys(store);
            return keys[index] || null;
        }),
        get length () {
            return Object.keys(store).length;
        }
    };
}
const TestScenarios = {
    /**
   * Default test container - most common use case
   */ default: ()=>createTestContainer(),
    /**
   * localStorage with pre-populated data
   */ withStorageData: (data)=>{
        const mockStorage = createMockLocalStorage();
        Object.entries(data).forEach(([key, value])=>{
            mockStorage.setItem(key, value);
        });
        return createTestContainer({
            localStorage: mockStorage
        });
    },
    /**
   * Offline scenario
   */ offline: ()=>{
        const mockNavigator = {
            onLine: false,
            userAgent: "Mozilla/5.0 (Test Environment - Offline)",
            deviceMemory: 8,
            connection: {
                type: "none",
                effectiveType: undefined,
                downlink: 0
            },
            mozConnection: {
                type: "none",
                effectiveType: undefined,
                downlink: 0
            },
            webkitConnection: {
                type: "none",
                effectiveType: undefined,
                downlink: 0
            },
            clipboard: {
                writeText: jest.fn().mockResolvedValue(undefined),
                readText: jest.fn().mockResolvedValue("mocked text")
            },
            share: jest.fn().mockResolvedValue(undefined)
        };
        return createTestContainer({
            navigator: mockNavigator
        });
    },
    /**
   * Mobile device scenario
   */ mobile: ()=>{
        const mockNavigator = {
            onLine: true,
            userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)"
        };
        const mockWindow = {
            screen: {
                width: 375,
                height: 667
            },
            devicePixelRatio: 2
        };
        return createTestContainer({
            navigator: mockNavigator,
            window: mockWindow
        });
    },
    /**
   * Low memory device scenario
   */ lowMemory: ()=>{
        const mockNavigator = {
            deviceMemory: 2,
            onLine: true,
            userAgent: "Mozilla/5.0 (Test Environment - Low Memory)",
            clipboard: {
                writeText: jest.fn().mockResolvedValue(undefined),
                readText: jest.fn().mockResolvedValue("mocked text")
            },
            share: jest.fn().mockResolvedValue(undefined)
        };
        return createTestContainer({
            navigator: mockNavigator
        });
    }
};
const TestAssertions = {
    /**
   * Assert localStorage operations
   */ expectStorageCall: (storage, method, ...args)=>{
        if (typeof jest !== "undefined") {
            expect(storage[method]).toHaveBeenCalledWith(...args);
        }
    },
    /**
   * Assert storage state
   */ expectStorageState: (storage, expectedData)=>{
        Object.entries(expectedData).forEach(([key, value])=>{
            expect(storage.getItem(key)).toBe(value);
        });
    },
    /**
   * Assert storage is empty
   */ expectStorageEmpty: (storage)=>{
        expect(storage.length).toBe(0);
    }
};

//# sourceMappingURL=data:application/json;base64,