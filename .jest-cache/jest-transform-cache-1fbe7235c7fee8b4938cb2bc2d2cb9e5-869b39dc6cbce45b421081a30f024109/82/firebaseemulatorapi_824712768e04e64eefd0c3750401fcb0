cf4418a458447d3a6b6faf0597b908ef
/**
 * Firebase Emulator REST API Client
 * Clean architecture for test data management using official Emulator APIs
 */ // Node.js 18+ has native fetch, no import needed
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get clearAllAuthData () {
        return clearAllAuthData;
    },
    get clearAllEmulatorData () {
        return clearAllEmulatorData;
    },
    get clearAllFirestoreData () {
        return clearAllFirestoreData;
    },
    get clearCollection () {
        return clearCollection;
    },
    get exportFirestoreData () {
        return exportFirestoreData;
    },
    get importFirestoreData () {
        return importFirestoreData;
    },
    get isEmulatorRunning () {
        return isEmulatorRunning;
    },
    get waitForEmulator () {
        return waitForEmulator;
    }
});
const EMULATOR_HOST = process.env.FIRESTORE_EMULATOR_HOST || "localhost:8080";
const PROJECT_ID = "endgame-trainer-test";
async function clearAllFirestoreData() {
    const url = `http://${EMULATOR_HOST}/emulator/v1/projects/${PROJECT_ID}/databases/(default)/documents`;
    const response = await fetch(url, {
        method: "DELETE"
    });
    if (!response.ok) {
        throw new Error(`Failed to clear Firestore: ${response.status} ${response.statusText}`);
    }
}
async function clearCollection(collectionName) {
    const url = `http://${EMULATOR_HOST}/emulator/v1/projects/${PROJECT_ID}/databases/(default)/documents/${collectionName}`;
    const response = await fetch(url, {
        method: "DELETE"
    });
    if (!response.ok) {
        throw new Error(`Failed to clear collection ${collectionName}: ${response.status} ${response.statusText}`);
    }
}
async function importFirestoreData(data) {
    const url = `http://${EMULATOR_HOST}/emulator/v1/projects/${PROJECT_ID}/databases/(default)/documents:import`;
    const response = await fetch(url, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
    });
    if (!response.ok) {
        throw new Error(`Failed to import data: ${response.status} ${response.statusText}`);
    }
}
async function exportFirestoreData() {
    const url = `http://${EMULATOR_HOST}/emulator/v1/projects/${PROJECT_ID}/databases/(default)/documents:export`;
    const response = await fetch(url, {
        method: "GET"
    });
    if (!response.ok) {
        throw new Error(`Failed to export data: ${response.status} ${response.statusText}`);
    }
    return response.json();
}
async function isEmulatorRunning() {
    try {
        const url = `http://${EMULATOR_HOST}/`;
        const response = await fetch(url);
        return response.ok;
    } catch (error) {
        return false;
    }
}
async function waitForEmulator(maxAttempts = 30, delayMs = 1000) {
    for(let i = 0; i < maxAttempts; i++){
        if (await isEmulatorRunning()) {
            return;
        }
        await new Promise((resolve)=>setTimeout(resolve, delayMs));
    }
    throw new Error("Firebase Emulator did not start in time");
}
async function clearAllAuthData() {
    const AUTH_EMULATOR_HOST = process.env.AUTH_EMULATOR_HOST || "localhost:9099";
    const url = `http://${AUTH_EMULATOR_HOST}/emulator/v1/projects/${PROJECT_ID}/accounts`;
    try {
        const response = await fetch(url, {
            method: "DELETE"
        });
        if (!response.ok && response.status !== 404) {
            // 404 is OK - means no accounts exist
            throw new Error(`Failed to clear Auth data: ${response.status} ${response.statusText}`);
        }
    } catch (error) {
        // Ignore connection errors if Auth emulator is not running
        if (error.code !== 'ECONNREFUSED') {
            console.warn("Warning: Could not clear Auth data:", error.message);
        }
    }
}
async function clearAllEmulatorData() {
    await Promise.all([
        clearAllFirestoreData(),
        clearAllAuthData()
    ]);
}

//# sourceMappingURL=data:application/json;base64,