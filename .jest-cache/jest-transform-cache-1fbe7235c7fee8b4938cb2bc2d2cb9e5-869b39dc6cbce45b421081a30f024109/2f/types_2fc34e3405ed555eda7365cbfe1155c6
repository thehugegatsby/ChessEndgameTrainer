d887f680ef99c6456b762764d19342d4
/**
 * @file Service container type definitions
 * @module services/container/types
 *
 * @description
 * Type definitions for the dependency injection container system.
 * Provides type-safe service registration and resolution with support
 * for both predefined platform services and custom services.
 *
 * @remarks
 * The service container supports:
 * - Type-safe service registry with compile-time checks
 * - Singleton and factory patterns
 * - Circular dependency detection
 * - Testing overrides and mocks
 * - Browser API abstractions
 * - Platform service abstractions
 *
 * @example
 * ```typescript
 * // Define a service in the registry
 * interface ServiceRegistry {
 *   'my.service': IMyService;
 * }
 *
 * // Register and resolve services
 * container.register('my.service', () => new MyService());
 * const service = container.resolve('my.service');
 * ```
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get CircularDependencyError () {
        return CircularDependencyError;
    },
    get ServiceAlreadyRegisteredError () {
        return ServiceAlreadyRegisteredError;
    },
    get ServiceNotFoundError () {
        return ServiceNotFoundError;
    }
});
class ServiceNotFoundError extends Error {
    constructor(key){
        super(`Service not found for key: ${key}`);
        this.name = "ServiceNotFoundError";
    }
}
class ServiceAlreadyRegisteredError extends Error {
    constructor(key){
        super(`Service already registered for key: ${key}`);
        this.name = "ServiceAlreadyRegisteredError";
    }
}
class CircularDependencyError extends Error {
    constructor(chain){
        super(`Circular dependency detected: ${chain.join(" -> ")}`);
        this.name = "CircularDependencyError";
    }
}

//# sourceMappingURL=data:application/json;base64,