{"version":3,"sources":["/home/thehu/coolProjects/EndgameTrainer-training-board-complete/src/tests/utils/jestSetup.ts"],"sourcesContent":["/**\n * Jest Setup Utilities\n * Common setup patterns for Jest 30 with ServiceContainer\n */\n\nimport \"@testing-library/jest-dom\";\nimport React from \"react\";\n\n// Note: MSW polyfills removed - using service-level mocking instead\n// This significantly improves test performance and stability\nimport { IServiceContainer } from \"@shared/services/container\";\nimport {\n  createTestContainer,\n  TestServiceOverrides,\n} from \"./createTestContainer\";\n\n/**\n * Global test container for tests that need shared state\n * Use sparingly - prefer per-test containers for better isolation\n */\nlet globalTestContainer: IServiceContainer | null = null;\n\n/**\n * Setup global test container\n * Call in jest.setup.js or describe block\n * @param overrides\n */\nexport function setupGlobalTestContainer(\n  overrides?: TestServiceOverrides,\n): void {\n  beforeAll(() => {\n    globalTestContainer = createTestContainer(overrides);\n  });\n\n  afterAll(() => {\n    globalTestContainer = null;\n  });\n\n  beforeEach(() => {\n    // Clear instances between tests for fresh state\n    globalTestContainer?.clearInstances();\n  });\n}\n\n/**\n * Get global test container\n * Throws error if not set up\n */\nexport function getGlobalTestContainer(): IServiceContainer {\n  if (!globalTestContainer) {\n    throw new Error(\n      \"Global test container not set up. Call setupGlobalTestContainer() first.\",\n    );\n  }\n  return globalTestContainer;\n}\n\n/**\n * Per-test container setup\n * Preferred approach for better test isolation\n * @param overrides\n */\nexport function setupPerTestContainer(\n  overrides?: TestServiceOverrides,\n): () => IServiceContainer {\n  let container: IServiceContainer;\n\n  beforeEach(() => {\n    container = createTestContainer(overrides);\n  });\n\n  afterEach(() => {\n    container.clearInstances();\n  });\n\n  return () => container;\n}\n\n/**\n * React Testing Library setup with ServiceContainer\n * @param overrides\n */\nexport function setupReactTestingWithContainer(\n  overrides?: TestServiceOverrides,\n) {\n  let container: IServiceContainer;\n  let wrapper: React.ComponentType<{ children: React.ReactNode }>;\n\n  beforeEach(() => {\n    container = createTestContainer(overrides);\n\n    // Create wrapper component\n    /**\n     *\n     * @param root0\n     * @param root0.children\n     */\n    wrapper = ({ children }: { children: React.ReactNode }) => {\n      const { ServiceProvider } = require(\"@shared/services/container/adapter\");\n      return React.createElement(ServiceProvider, { container }, children);\n    };\n  });\n\n  afterEach(() => {\n    container.clearInstances();\n  });\n\n  return {\n    /**\n     *\n     */\n    getContainer: () => container,\n    /**\n     *\n     */\n    getWrapper: () => wrapper,\n  };\n}\n\n/**\n * Common Jest matchers for platform services\n */\nexport /**\n *\n */\nconst platformServiceMatchers = {\n  /**\n   * Check if a service method was called\n   * @param service\n   * @param method\n   * @param args\n   */\n  toHaveBeenCalledOnService: (service: any, method: string, ...args: any[]) => {\n    if (typeof jest !== \"undefined\") {\n      expect(service[method]).toHaveBeenCalledWith(...args);\n    }\n  },\n\n  /**\n   * Check storage operations\n   * @param storage\n   * @param key\n   * @param value\n   */\n  toHaveStorageItem: (storage: Storage, key: string, value: string) => {\n    expect(storage.getItem(key)).toBe(value);\n  },\n\n  /**\n   * Check storage calls\n   * @param storage\n   * @param method\n   * @param args\n   */\n  toHaveCalledStorageMethod: (\n    storage: Storage,\n    method: keyof Storage,\n    ...args: any[]\n  ) => {\n    if (typeof jest !== \"undefined\") {\n      expect((storage as any)[method]).toHaveBeenCalledWith(...args);\n    }\n  },\n};\n\n/**\n * Test environment detection\n */\nexport /**\n *\n */\nconst testEnvironment = {\n  isJest: typeof jest !== \"undefined\",\n  isJSDOM:\n    typeof window !== \"undefined\" &&\n    window.navigator?.userAgent?.includes(\"jsdom\"),\n  isNode: typeof process !== \"undefined\" && process.versions?.node,\n};\n\n/**\n * Wait for next tick (useful for async operations)\n */\nexport /**\n *\n */\nconst waitForNextTick = (): Promise<void> => {\n  return new Promise((resolve) => {\n    if (typeof setImmediate !== \"undefined\") {\n      setImmediate(resolve);\n    } else {\n      setTimeout(resolve, 0);\n    }\n  });\n};\n\n/**\n * Wait for container services to be ready\n * Useful when services have async initialization\n * @param container\n */\nexport /**\n *\n */\nconst waitForServicesReady = async (\n  container: IServiceContainer,\n): Promise<void> => {\n  // Give services time to initialize\n  await waitForNextTick();\n\n  // Try to resolve a basic service to ensure container is ready\n  try {\n    container.resolveCustom(\"browser.localStorage\");\n  } catch (error) {\n    // If services aren't ready, wait a bit more\n    await new Promise((resolve) => setTimeout(resolve, 10));\n  }\n};\n\n/**\n * Debug helper to inspect container state\n * @param container\n */\nexport function debugContainer(container: IServiceContainer): void {\n  if (process.env.NODE_ENV === \"test\" && process.env.DEBUG_CONTAINER) {\n    console.log(\"Container Stats:\", (container as any).getStats?.());\n    console.log(\"Registered Keys:\", (container as any).getRegisteredKeys?.());\n  }\n}\n\n/**\n * Mock console methods for tests\n */\nexport function mockConsole() {\n  const originalConsole = { ...console };\n\n  beforeEach(() => {\n    jest.spyOn(console, \"log\").mockImplementation(() => {});\n    jest.spyOn(console, \"warn\").mockImplementation(() => {});\n    jest.spyOn(console, \"error\").mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    Object.assign(console, originalConsole);\n  });\n\n  return {\n    /**\n     *\n     * @param message\n     */\n    expectConsoleLog: (message: string) => {\n      expect(console.log).toHaveBeenCalledWith(\n        expect.stringContaining(message),\n      );\n    },\n    /**\n     *\n     * @param message\n     */\n    expectConsoleWarn: (message: string) => {\n      expect(console.warn).toHaveBeenCalledWith(\n        expect.stringContaining(message),\n      );\n    },\n    /**\n     *\n     * @param message\n     */\n    expectConsoleError: (message: string) => {\n      expect(console.error).toHaveBeenCalledWith(\n        expect.stringContaining(message),\n      );\n    },\n  };\n}\n"],"names":["debugContainer","getGlobalTestContainer","mockConsole","platformServiceMatchers","setupGlobalTestContainer","setupPerTestContainer","setupReactTestingWithContainer","testEnvironment","waitForNextTick","waitForServicesReady","window","process","globalTestContainer","overrides","beforeAll","createTestContainer","afterAll","beforeEach","clearInstances","Error","container","afterEach","wrapper","children","ServiceProvider","require","React","createElement","getContainer","getWrapper","toHaveBeenCalledOnService","service","method","args","jest","expect","toHaveBeenCalledWith","toHaveStorageItem","storage","key","value","getItem","toBe","toHaveCalledStorageMethod","isJest","isJSDOM","navigator","userAgent","includes","isNode","versions","node","Promise","resolve","setImmediate","setTimeout","resolveCustom","error","env","NODE_ENV","DEBUG_CONTAINER","console","log","getStats","getRegisteredKeys","originalConsole","spyOn","mockImplementation","Object","assign","expectConsoleLog","message","stringContaining","expectConsoleWarn","warn","expectConsoleError"],"mappings":"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"}