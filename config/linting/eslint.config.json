{
  "extends": ["next/core-web-vitals", "next/typescript"],
  "rules": {
    "no-console": ["error", { "allow": ["warn", "error", "info"] }],
    "prefer-const": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "args": "after-used",
        "varsIgnorePattern": "^_",
        "argsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": true,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true,
        "allowDirectConstAssertionInArrowFunctions": true
      }
    ],
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports",
        "fixStyle": "inline-type-imports"
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I[A-Z]",
          "match": false
        }
      },
      {
        "selector": "typeAlias",
        "format": ["PascalCase"]
      },
      {
        "selector": "enum",
        "format": ["PascalCase"]
      }
    ],
    "react-hooks/exhaustive-deps": "error",
    "react/no-array-index-key": "warn",
    "no-implicit-coercion": "error",
    "no-param-reassign": [
      "error",
      {
        "props": false
      }
    ],
    "no-nested-ternary": "off",
    "complexity": ["warn", { "max": 35 }],
    "max-lines-per-function": [
      "warn",
      { "max": 350, "skipBlankLines": true, "skipComments": true }
    ],
    "max-depth": ["warn", { "max": 8 }],
    "no-magic-numbers": [
      "warn",
      {
        "ignore": [0, 1, -1, 2, 3, 4, 5, 6, 7, 8],
        "ignoreArrayIndexes": true,
        "enforceConst": true,
        "ignoreDefaultValues": true
      }
    ],
    "eqeqeq": ["error", "always"],
    "no-shadow": "error",
    "no-use-before-define": ["error", { "functions": false, "classes": false }],
    "default-case": "error",
    "no-debugger": "error",
    "no-loop-func": "error",
    "require-await": "error",
    "prefer-arrow-callback": "error",
    "prefer-template": "error"
  },
  "overrides": [
    {
      "files": [
        "scripts/**/*.js",
        "scripts/**/*.ts",
        "config/**/*.js",
        "config/**/*.ts",
        "src/config/**/*.js",
        "src/config/**/*.ts",
        "config/testing/**/*.js",
        "config/testing/**/*.ts",
        "src/shared/services/logging/Logger.ts",
        "src/shared/services/container/ServiceContainer.ts",
        "src/shared/store/slices/progressSlice.ts"
      ],
      "rules": {
        "no-console": "off",
        "@typescript-eslint/no-require-imports": "off"
      }
    },
    {
      "files": [
        "**/*.mock.ts",
        "**/*.factory.ts",
        "**/__mocks__/**/*",
        "**/test-utils.ts",
        "**/mockFactories.ts",
        "**/mockRootStore.ts",
        "**/createTestContainer.ts",
        "**/mocks.setup.js",
        "src/tests/setup/**/*",
        "src/tests/__mocks__/**/*",
        "src/tests/helpers/**/*",
        "src/tests/utils/**/*",
        "src/tests/factories/**/*",
        "src/tests/api/**/*",
        "src/tests/constants/**/*",
        "src/shared/services/container/mocks.ts",
        "src/shared/testing/**/*",
        "**/*e2e*.ts",
        "src/tests/e2e/**/*"
      ],
      "rules": {
        "no-console": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-require-imports": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-unused-expressions": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "import/no-anonymous-default-export": "off",
        "@typescript-eslint/ban-ts-comment": [
          "error",
          {
            "ts-expect-error": "allow-with-description",
            "ts-ignore": true,
            "ts-nocheck": "allow-with-description",
            "ts-check": false
          }
        ],
        "max-lines-per-function": "off",
        "complexity": "off",
        "max-depth": "off"
      }
    },
    {
      "files": [
        "tests/**/*.ts",
        "tests/**/*.tsx",
        "tests/**/*.js",
        "tests/**/*.jsx",
        "src/tests/**/*.ts",
        "src/tests/**/*.tsx",
        "src/tests/**/*.js",
        "src/tests/**/*.jsx",
        "**/*.test.ts",
        "**/*.test.tsx",
        "**/*.spec.ts",
        "**/*.spec.tsx"
      ],
      "rules": {
        "no-console": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-require-imports": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-unused-expressions": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "import/no-anonymous-default-export": "off",
        "@typescript-eslint/ban-ts-comment": [
          "error",
          {
            "ts-expect-error": "allow-with-description",
            "ts-ignore": true,
            "ts-nocheck": false,
            "ts-check": false
          }
        ],
        "max-lines-per-function": "off",
        "complexity": "off",
        "max-depth": "off",
        "require-await": "off",
        "no-use-before-define": "off"
      }
    },
    {
      "files": [
        "pages/**/*.tsx",
        "pages/**/*.ts",
        "app/**/*.tsx",
        "app/**/*.ts",
        "src/app/**/*.tsx",
        "src/app/**/*.ts"
      ],
      "rules": {
        "@typescript-eslint/no-unused-vars": [
          "warn",
          { "argsIgnorePattern": "^_" }
        ]
      }
    },
    {
      "files": [
        "src/shared/store/createStore.ts",
        "src/shared/store/slices/**/*.ts",
        "src/shared/store/orchestrators/**/*.ts",
        "src/shared/store/rootStore.ts",
        "src/tests/unit/store/**/*.ts",
        "src/tests/utils/firebase-mocks.ts",
        "src/tests/utils/test-tags.ts",
        "src/tests/integration/kpk-endgames-service-mock.spec.ts"
      ],
      "rules": {
        "no-param-reassign": [
          "error",
          {
            "props": true,
            "ignorePropertyModificationsFor": ["state", "draft", "testInfo"]
          }
        ]
      }
    },
    {
      "files": [
        "src/tests/reporters/**/*.js",
        "src/tests/setup/*.js",
        "src/tests/e2e/global-*.ts"
      ],
      "rules": {
        "@typescript-eslint/explicit-function-return-type": "off",
        "no-console": "off"
      }
    }
  ]
}
